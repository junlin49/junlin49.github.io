<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory</title>
    <url>/2021/04/11/error-while-loading-shared-libraries-libvtkFiltersExtraction-9-0-so-1-cannot-open-shared-object-file-No-such-file-or-directory/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="error-while-loading-shared-libraries-libvtkFiltersExtraction-9-0-so-1-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#error-while-loading-shared-libraries-libvtkFiltersExtraction-9-0-so-1-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory"></a>error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory</h1><p>出现错误：</p>
<p>error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory</p>
<p>解决方法：</p>
<p>由于是手动安装VTK的，所以需要在build目录运行命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考链接：<a href="https://discourse.vtk.org/t/vtk-error-linking-shared-libraries/4393">https://discourse.vtk.org/t/vtk-error-linking-shared-libraries/4393</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ubuntu configure errors</category>
      </categories>
      <tags>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>常用cmake configure</title>
    <url>/2021/04/11/%E5%B8%B8%E7%94%A8cmake-configure/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用cmake-configure"><a href="#常用cmake-configure" class="headerlink" title="常用cmake configure"></a>常用cmake configure</h1><h2 id="PCL"><a href="#PCL" class="headerlink" title="PCL"></a>PCL</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Build -DBUILD_visualization=<span class="keyword">ON</span> ..</span><br></pre></td></tr></table></figure>
<h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_ENABLE_NONFREE=<span class="keyword">ON</span> -D OPENCV_EXTRA_MODULES_PATH=~/Configure/opencv_contrib/modules/ ..</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cmake</category>
      </categories>
      <tags>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)</title>
    <url>/2021/04/11/%E8%BF%9B%E7%A8%8B%E5%B7%B2%E7%BB%93%E6%9D%9F%EF%BC%8C%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81%E4%B8%BA139-interrupted-by-signal-11-SIGSEGV/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="进程已结束，退出代码为139-interrupted-by-signal-11-SIGSEGV"><a href="#进程已结束，退出代码为139-interrupted-by-signal-11-SIGSEGV" class="headerlink" title="进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)"></a>进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)</h1><h2 id="出现错误："><a href="#出现错误：" class="headerlink" title="出现错误："></a>出现错误：</h2><p>进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)</p>
<h2 id="错误出现位置："><a href="#错误出现位置：" class="headerlink" title="错误出现位置："></a>错误出现位置：</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/image-20210412092517507.png" alt="image-20210412092517507"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>PCL安装不成功，重新安装PCL</p>
]]></content>
      <categories>
        <category>ubuntu configure errors</category>
      </categories>
      <tags>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-OpenCV基本操作</title>
    <url>/2021/04/10/SLAM-OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-OpenCV基本操作"><a href="#SLAM-OpenCV基本操作" class="headerlink" title="SLAM-OpenCV基本操作"></a>SLAM-OpenCV基本操作</h1><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat image;</span><br><span class="line">    <span class="built_in">string</span> fileName = <span class="string">&quot;1.jpg&quot;</span>;</span><br><span class="line">    image = cv::imread(fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1. 判断读取是否正确*/</span></span><br><span class="line">    <span class="keyword">if</span> (image.data == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;fileName&lt;&lt;<span class="string">&quot;不存在&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;图像宽为：&quot;</span>&lt;&lt;image.cols&lt;&lt;<span class="string">&quot;，高为：&quot;</span>&lt;&lt;image.rows&lt;&lt;<span class="string">&quot;，图像通道数为：&quot;</span>&lt;&lt;image.channels()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    cv::imshow(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">    <span class="comment">//等待任意按键按下,程序在此暂停</span></span><br><span class="line">    cv::waitKey(<span class="number">0</span>);<span class="comment">//delay单位为ms，0意味着forever</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2. 判断图片格式是否符合要求*/</span></span><br><span class="line">    <span class="comment">// – CV_&lt;bit_depth&gt;(S|U|F)C&lt;number_of_channels&gt;</span></span><br><span class="line">    <span class="comment">//S = 符号整型 U = 无符号整型 F = 浮点型</span></span><br><span class="line">    <span class="comment">//CV_8UC1:8位无符号整型1通道；</span></span><br><span class="line">    <span class="comment">//CV_8UC3：8位无符号整形3通道</span></span><br><span class="line">    <span class="keyword">if</span> (image.type() != CV_8UC1 &amp;&amp; image.type() != CV_8UC3)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;图片类型不符合要求，要求图片类型彩色图或灰度图&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*3. 计时与像素访问*/</span></span><br><span class="line">    <span class="comment">//计时</span></span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point t1 = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; image.rows; i++)<span class="comment">//行遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取图像行指针</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *row_ptr = image.ptr&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; image.cols; j++)<span class="comment">//列遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//访问位于j,i处的像素</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> *data_ptr = &amp;row_ptr[j *image.channels()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != image.channels(); k++)<span class="comment">//通道遍历</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">char</span> data = data_ptr[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计时</span></span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point t2 = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line">    <span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt; time_used = <span class="built_in">std</span>::chrono::duration_cast&lt;<span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt;&gt;(t2-t1);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;遍历图像用时&quot;</span>&lt;&lt;time_used.count()&lt;&lt;<span class="string">&quot;s&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*4. 深浅拷贝*/</span></span><br><span class="line">    <span class="comment">//浅拷贝，指向同一个图像</span></span><br><span class="line">    cv::Mat image_another = image;</span><br><span class="line">    <span class="comment">//将左上角100*100的块置零</span></span><br><span class="line">    image_another(cv::Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)).setTo(<span class="number">0</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line">    cv::Mat image_clone = image.clone();</span><br><span class="line">    image_clone(cv::Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)).setTo(<span class="number">255</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">    cv::imshow(<span class="string">&quot;image_clone&quot;</span>,image_clone);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeList-txt"><a href="#CMakeList-txt" class="headerlink" title="CMakeList.txt"></a>CMakeList.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(ShenLanSLAM_4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(ShenLanSLAM_4 main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(ShenLanSLAM_4 <span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-HW1 简答</title>
    <url>/2021/04/10/SLAM-HW1-%E7%AE%80%E7%AD%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-HW1-简答"><a href="#SLAM-HW1-简答" class="headerlink" title="SLAM-HW1 简答"></a>SLAM-HW1 简答</h1><ol>
<li><p>如何在 Ubuntu 中安装软件(命令行界面)?它们通常被安装在什么地方?</p>
<p>sudo apt-get install xxx</p>
<p>sudo dpkg -i package_file.deb</p>
<p>apt-get：apt-get 下载后，软件所在路径是/var/cache/apt/archives；ubuntu 默认的PATH为</p>
<p>PATH=/home/brightman/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</p>
<p>apt-get install安装目录是包的维护者确定的，不是用户</p>
<p>dpkg：系统安装软件一般在/usr/share，可执行的文件在/usr/bin，配置文件可能安装到了/etc下等；文档一般在 /usr/share</p>
<p>可执行文件 /usr/bin；配置文件 /etc；lib文件 /usr/lib</p>
</li>
<li><p>linux 的环境变量是什么?我如何定义新的环境变量?</p>
<p>export xxx=</p>
</li>
<li><p>linux 根目录下面的目录结构是什么样的?至少说出 3 个目录的用途。</p>
<p>Linux 和 Unix 文件系统被组织成一个有层次的树形结构。文件系统的最上层是 /，或称为 根目录。在 Unix 和 Linux 的设计理念中，一切皆为文件——包括硬盘、分区和可插拔介质。这就意味着所有其它文件和目录（包括其它硬盘和分区）都位于根目录中。 例如：/home/jebediah/cheeses.odt 给出了正确的完整路径，它指向 cheeses.odt 文件，而该文件位于 jebediah 目录下，该目录又位于 home 目录，最后，home 目录又位于根(/) 目录下。 在根 (/) 目录下，有一组重要的系统目录，在大部分 Linux 发行版里都通用。直接位于根 (/) 目录下的常见目录列表如下：</p>
<ul>
<li>/bin - 重要的二进制 (binary) 应用程序</li>
<li>/boot - 启动 (boot) 配置文件</li>
<li>/dev - 设备 (device) 文件</li>
<li>/etc - 配置文件、启动脚本等 (etc)</li>
<li>/home - 本地用户主 (home) 目录</li>
<li>/lib - 系统库 (libraries) 文件</li>
<li>/lost+found - 在根 (/) 目录下提供一个遗失+查找(lost+found) 系统</li>
<li>/media - 挂载可移动介质 (media)，诸如 CD、数码相机等</li>
<li>/mnt - 挂载 (mounted) 文件系统</li>
<li>/opt - 提供一个供可选的 (optional) 应用程序安装目录</li>
<li>/proc - 特殊的动态目录，用以维护系统信息和状态，包括当前运行中进程 (processes) 信息。</li>
<li>/root - root (root) 用户主文件夹，读作“slash-root”</li>
<li>/sbin - 重要的系统二进制 (system binaries) 文件</li>
<li>/sys - 系统 (system) 文件</li>
<li>/tmp - 临时(temporary)文件</li>
<li>/usr - 包含绝大部分所有用户(users)都能访问的应用程序和文件</li>
<li>/var - 经常变化的(variable)文件，诸如日志或数据库等</li>
</ul>
</li>
<li><p>假设我要给 a.sh 加上可执行权限,该输入什么命令?</p>
<p>chmod x.sh</p>
</li>
<li><p>假设我要将 a.sh 文件的所有者改成 xiang:xiang,该输入什么命令?</p>
<p>sudo chown -c xiang:xiang a.sh</p>
</li>
<li><p>SLAM 会在哪些场合中用到?至少列举三个方向。</p>
<p>AR，自动驾驶，导航</p>
</li>
<li><p>SLAM 中定位与建图是什么关系?为什么在定位的同时需要建图?</p>
<p>相互依赖</p>
<p>要在环境中精准的定位，需要精确地地图；精确的地图过程中，需要精准的定位</p>
</li>
<li><p>SLAM 发展历史如何?我们可以将它划分成哪几个阶段?</p>
<p>1986-2004，classical age</p>
<p>2004-2015，algorithmic-analysis age</p>
<p>2015-now;</p>
</li>
</ol>
<ol>
<li>列举三篇在 SLAM 领域的经典文献。</li>
</ol>
]]></content>
      <categories>
        <category>SLAM-HomeWork</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-HW3 简答</title>
    <url>/2021/04/10/SLAM-HW3-%E7%AE%80%E7%AD%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-HW3-简答"><a href="#SLAM-HW3-简答" class="headerlink" title="SLAM-HW3 简答"></a>SLAM-HW3 简答</h1><h2 id="2-群的性质"><a href="#2-群的性质" class="headerlink" title="2.群的性质"></a>2.群的性质</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><ul>
<li><p>封闭性验证：</p>
<p>$\forall a_1,a_2 \in Z,a_1+a_2 \in Z$</p>
</li>
<li><p>结合律验证</p>
<p>$\forall a_1,a_2,a_3\in Z,(a_1+a_2)+a_3 = a_1+(a_2+a_3)$</p>
</li>
<li><p>幺元验证</p>
<p>$a_0=0, a_0 \in Z,s.t. \forall a \in Z,0+a = a+0 = a$</p>
</li>
<li><p>逆元验证</p>
<p>$\forall a \in Z,a^{-1} = -a \in Z,s.t. a+(-a) = 0$</p>
</li>
</ul>
<p>综上，{$Z,+$}是群。</p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><ul>
<li><p>封闭性验证</p>
<p>$\forall a_1,a_2 \in N,a_1+a_2 \in Z$</p>
</li>
<li><p>结合律验证</p>
<p>$\forall a_1,a_2,a_3\in Z,(a_1+a_2)+a_3 = a_1+(a_2+a_3)$</p>
</li>
<li><p>幺元验证</p>
<p>$\not\exist a_0 \in N,s.t. \forall a \in N,a_0+a = a+a_0 = a$</p>
</li>
</ul>
<p>综上，{$N,+$}不是群。</p>
<h2 id="3-验证向量叉乘的李代数性质"><a href="#3-验证向量叉乘的李代数性质" class="headerlink" title="3.验证向量叉乘的李代数性质"></a>3.验证向量叉乘的李代数性质</h2><p>$V = R^3,F=R,[a,b]=a\times b,验证g = (R^3,R,\times)构成李代数$</p>
<ul>
<li><p>封闭性验证</p>
<p>$\forall X,Y \in R^3,[X,Y] = X \times Y \in R^3$</p>
</li>
<li><p>双线性验证</p>
<p>$\forall X,Y,Z \in V,a,b \in R$：</p>
<p>$[aX+bY,Z] = (aX+bY)\times Z=aX \times Z + bY\times Z=a[X,Z]+b[Y,Z]$</p>
<p>$[Z,aX+bY] =Z\times(aX +bY)=Z\times aX+Z \times bY = a[Z,X]+b[Z,Y]$</p>
</li>
<li><p>自反性验证</p>
<p>$\forall X \in R^3,[X,X]=X \times X = 0$</p>
</li>
<li><p>雅克比等价验证</p>
<p>$\forall X,Y,Z \in R^3$，</p>
<script type="math/tex; mode=display">[X,[Y,Z]]+[Y,[Z,X]]+[Z,[X,Y]] = [X,Y \times Z]+[Y,Z \times X]+[Z,X \times Y]=0</script></li>
</ul>
]]></content>
      <categories>
        <category>SLAM-HomeWork</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-HW3 code:读取轨迹画图</title>
    <url>/2021/04/10/SLAM-HW3-code-%E8%AF%BB%E5%8F%96%E8%BD%A8%E8%BF%B9%E7%94%BB%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-HW3-code-读取轨迹画图"><a href="#SLAM-HW3-code-读取轨迹画图" class="headerlink" title="SLAM-HW3 code:读取轨迹画图"></a>SLAM-HW3 code:读取轨迹画图</h1><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pangolin/pangolin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sophus/se3.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trajectory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> t;</span><br><span class="line">    <span class="keyword">float</span> tx;</span><br><span class="line">    <span class="keyword">float</span> ty;</span><br><span class="line">    <span class="keyword">float</span> tz;</span><br><span class="line">    <span class="keyword">float</span> qx;</span><br><span class="line">    <span class="keyword">float</span> qy;</span><br><span class="line">    <span class="keyword">float</span> qz;</span><br><span class="line">    <span class="keyword">float</span> qw;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; tokens,<span class="built_in">std</span>::<span class="built_in">string</span> delim)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountLines</span><span class="params">(<span class="keyword">char</span> *filename)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawTrajectory</span><span class="params">(<span class="built_in">vector</span>&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;, aligned_allocator&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;&gt;&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream ifs ;</span><br><span class="line">    <span class="built_in">string</span> fileName = <span class="string">&quot;trajectory.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//计算txt的行数</span></span><br><span class="line">    <span class="keyword">int</span> lines = CountLines(<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(fileName.c_str()));</span><br><span class="line">    trajectory traPoints[lines];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line">    ifs.open(fileName,ios_base::in);</span><br><span class="line">    <span class="keyword">if</span>(ifs.fail())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;文件打开失败&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">while</span> (!ifs.eof())</span><br><span class="line">        &#123;</span><br><span class="line">            ifs.getline(buffer,<span class="number">256</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="built_in">string</span> str = buffer;</span><br><span class="line">            split(str,strs,<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">float</span> lineNum[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                lineNum[i] = stof(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            traPoints[index].t = lineNum[<span class="number">0</span>];</span><br><span class="line">            traPoints[index].tx = lineNum[<span class="number">1</span>];</span><br><span class="line">            traPoints[index].ty = lineNum[<span class="number">2</span>];</span><br><span class="line">            traPoints[index].tz = lineNum[<span class="number">3</span>];</span><br><span class="line">            traPoints[index].qx = lineNum[<span class="number">4</span>];</span><br><span class="line">            traPoints[index].qy = lineNum[<span class="number">5</span>];</span><br><span class="line">            traPoints[index].qz = lineNum[<span class="number">6</span>];</span><br><span class="line">            traPoints[index].qw = lineNum[<span class="number">7</span>];</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;traPoints.tx:&quot;</span>&lt;&lt; traPoints[index].tx&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*画图*/</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;, Eigen::aligned_allocator&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;&gt;&gt; poses;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">Quaterniond <span class="title">q</span><span class="params">(traPoints[i].qx,traPoints[i].qy,traPoints[i].qz,traPoints[i].qw)</span></span>;</span><br><span class="line">            <span class="function">Vector3d <span class="title">t</span><span class="params">(traPoints[i].tx,traPoints[i].ty,traPoints[i].tz)</span></span>;</span><br><span class="line">            <span class="function">Sophus::SE3d <span class="title">SE3_Rt</span><span class="params">(q,t)</span></span>;</span><br><span class="line">            poses.push_back(SE3_Rt);</span><br><span class="line">        &#125;</span><br><span class="line">        DrawTrajectory(poses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 得到读入文件的行数</span></span><br><span class="line"><span class="comment">/// \param filename</span></span><br><span class="line"><span class="comment">/// \return</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountLines</span><span class="params">(<span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream ReadFile;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> tmp;</span><br><span class="line">    ReadFile.open(filename,ios::in);<span class="comment">//ios::in 表示以只读的方式读取文件</span></span><br><span class="line">    <span class="keyword">if</span>(ReadFile.fail())<span class="comment">//文件打开失败:返回0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;读取文件行数中，文件打开失败&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//文件存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(getline(ReadFile,tmp,<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        ReadFile.close();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 字符串分割函数</span></span><br><span class="line"><span class="comment">/// \param str 要分割的字符串</span></span><br><span class="line"><span class="comment">/// \param tokens 保存分割结果的字符串数组</span></span><br><span class="line"><span class="comment">/// \param delim 分隔字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; tokens,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> delim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tokens.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* buffer = <span class="keyword">new</span> <span class="keyword">char</span>[str.size() + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">strcpy</span>(buffer, str.c_str());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* tmp;</span><br><span class="line">    <span class="keyword">char</span>* p = strtok_r(buffer, delim.c_str(), &amp;tmp); <span class="comment">// 第一次分割</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        tokens.push_back(p); <span class="comment">// 如果 p 为 nullptr，则将整个字符串作为结果</span></span><br><span class="line">    &#125; <span class="keyword">while</span> ((p = strtok_r(<span class="literal">nullptr</span>, delim.c_str(), &amp;tmp)) != <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">// strtok_r 为 strtok 的线程安全版本。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 画图</span></span><br><span class="line"><span class="comment">/// \param poses</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawTrajectory</span><span class="params">(<span class="built_in">vector</span>&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;, Eigen::aligned_allocator&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;&gt;&gt; poses)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (poses.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;轨迹为空!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create pangolin window and plot the trajectory</span></span><br><span class="line">    pangolin::CreateWindowAndBind(<span class="string">&quot;Trajectory Viewer&quot;</span>, <span class="number">1024</span>, <span class="number">768</span>);</span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">    glEnable(GL_BLEND);</span><br><span class="line">    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</span><br><span class="line"></span><br><span class="line">    <span class="function">pangolin::OpenGlRenderState <span class="title">s_cam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            pangolin::ProjectionMatrix(<span class="number">1024</span>, <span class="number">768</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">512</span>, <span class="number">389</span>, <span class="number">0.1</span>, <span class="number">1000</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">            pangolin::ModelViewLookAt(<span class="number">0</span>, <span class="number">-0.1</span>, <span class="number">-1.8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line">    pangolin::View &amp;d_cam = pangolin::CreateDisplay()</span><br><span class="line">            .SetBounds(<span class="number">0.0</span>, <span class="number">1.0</span>, pangolin::Attach::Pix(<span class="number">175</span>), <span class="number">1.0</span>, <span class="number">-1024.0f</span> / <span class="number">768.0f</span>)</span><br><span class="line">            .SetHandler(<span class="keyword">new</span> pangolin::Handler3D(s_cam));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!pangolin::ShouldQuit())</span><br><span class="line">    &#123;</span><br><span class="line">        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        d_cam.Activate(s_cam);</span><br><span class="line">        glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">        glLineWidth(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; poses.size() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            glColor3f(<span class="number">1</span> - (<span class="keyword">float</span>) i / poses.size(), <span class="number">0.0f</span>, (<span class="keyword">float</span>) i / poses.size());</span><br><span class="line">            glBegin(GL_LINES);</span><br><span class="line">            <span class="keyword">auto</span> p1 = poses[i], p2 = poses[i + <span class="number">1</span>];</span><br><span class="line">            glVertex3d(p1.translation()[<span class="number">0</span>], p1.translation()[<span class="number">1</span>], p1.translation()[<span class="number">2</span>]);</span><br><span class="line">            glVertex3d(p2.translation()[<span class="number">0</span>], p2.translation()[<span class="number">1</span>], p2.translation()[<span class="number">2</span>]);</span><br><span class="line">            glEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        pangolin::FinishFrame();</span><br><span class="line">        usleep(<span class="number">5000</span>);   <span class="comment">// sleep 5 ms</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(ShenLanSLAM_3)</span><br><span class="line"><span class="comment">#set(CMAKE_CXX_STANDARD 14)</span></span><br><span class="line"><span class="keyword">find_package</span>(Sophus REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Pangolin REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        /usr/local/<span class="keyword">include</span>/eigen3</span><br><span class="line">        <span class="variable">$&#123;Pangolin_INCLUDE_DIRS&#125;</span></span><br><span class="line">        <span class="variable">$&#123;Sophus_INCLUDE_DIRS&#125;</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">add_executable</span>(ShenLanSLAM3 main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(ShenLanSLAM3</span><br><span class="line">        <span class="variable">$&#123;Sophus_LIBRARIES&#125;</span></span><br><span class="line">        <span class="variable">$&#123;Pangolin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/image-20210410085530351.png" alt="image-20210410085530351"></p>
]]></content>
      <categories>
        <category>SLAM-HomeWork</category>
      </categories>
      <tags>
        <tag>SLAM-HW</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖NAS部署AWTRIX2</title>
    <url>/2021/04/05/%E7%BE%A4%E6%99%96NAS%E9%83%A8%E7%BD%B2AWTRIX2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="群晖NAS部署AWTRIX2记录"><a href="#群晖NAS部署AWTRIX2记录" class="headerlink" title="群晖NAS部署AWTRIX2记录"></a>群晖NAS部署AWTRIX2记录</h1><blockquote>
<p>参考资料：</p>
<p><a href="https://www.ioiox.com/archives/76.html/comment-page-2">https://www.ioiox.com/archives/76.html/comment-page-2</a></p>
<p><a href="https://www.youtube.com/playlist?list=PL_qtbZN0T8POao-hO-b5ja_jh8mRY7nHE">https://www.youtube.com/playlist?list=PL_qtbZN0T8POao-hO-b5ja_jh8mRY7nHE</a></p>
</blockquote>
<h2 id="群晖-docker-部署"><a href="#群晖-docker-部署" class="headerlink" title="群晖 docker 部署"></a>群晖 docker 部署</h2><h3 id="创建配置文件夹"><a href="#创建配置文件夹" class="headerlink" title="创建配置文件夹"></a>创建配置文件夹</h3><p>群晖 NAS 中新建<code>awtrix2</code>用于存放配置文件,本文以<code>/docker/awtrix2</code>为例。</p>
<p>通过挂载该目录,可以使你所有的配置文件,插件等数据都安全的存放在群晖 NAS 本机,后期无论是迁移,升级容器,再次运行 docker 服务都可以直接读取配置,不需要重新再次配置。<br><a href="https://static.ioiox.com/usr/uploads/2020/06/657707119.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/657707119.jpg" alt="img"></a></p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p><strong>docker - 注册表</strong><br>搜索<code>awtrix2</code>找到<code>whyet/awtrix2</code>下载<code>latest</code>最新版.<br><a href="https://static.ioiox.com/usr/uploads/2020/06/3367138513.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/3367138513.jpg" alt="img"></a></p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p><strong>映像 - 选择下载好的<code>whyet/awtrix2</code> - 启动</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/2500600041.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/2500600041.jpg" alt="img"></a><br><strong>高级设置</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/1941751929.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/1941751929.jpg" alt="img"></a><br><strong>卷</strong><br>添加文件夹,文件夹选择刚才创建的<code>awtrix2</code>,装载路径只能填写<code>/data</code>,<strong>请不要更改!!!</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/2649693401.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/2649693401.jpg" alt="img"></a></p>
<p><strong>以上目录装载表示:</strong>容器启动时直接使用群晖 NAS 的<code>/docker/awtrix2</code>内的配置文件,替换容器内的<code>/data</code>的文件夹,在使用过程中所有的配置都会保存在本地群晖 NAS 的<code>/docker/awtrix2</code>中,即使容器损坏,容器被删除,都不会丢失配置文件,下次迁移或者重新创建容器,依旧可以直接装载该目录来恢复配置.</p>
<p><strong>网络</strong><br>勾选<code>使用与 Docker Host 相同的网络</code><br><a href="https://static.ioiox.com/usr/uploads/2020/06/415684945.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/415684945.jpg" alt="img"></a></p>
<p><strong>应用完成配置</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/2399904913.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/2399904913.jpg" alt="img"></a></p>
<h3 id="Web-访问"><a href="#Web-访问" class="headerlink" title="Web 访问"></a>Web 访问</h3><p>输入群晖内网 IP 加端口号即可访问<code>http://群晖内网IP:7000</code><br><a href="https://static.ioiox.com/usr/uploads/2020/06/1008782268.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/1008782268.jpg" alt="img"></a></p>
<h2 id="问题集合"><a href="#问题集合" class="headerlink" title="问题集合"></a>问题集合</h2><ol>
<li><p>时间问题</p>
<p><img src="http://i.imgur.com/8NoQNhl.png" alt="img"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>AWTRIX2</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Sophus</title>
    <url>/2021/03/10/SLAM-Sophus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Sophus"><a href="#SLAM-Sophus" class="headerlink" title="SLAM-Sophus"></a>SLAM-Sophus</h1><h2 id="useSophus-cpp"><a href="#useSophus-cpp" class="headerlink" title="useSophus.cpp"></a>useSophus.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sophus/se3.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本程序演示Sophus的基本用法</span></span><br><span class="line"><span class="comment"> * @param argc</span></span><br><span class="line"><span class="comment"> * @param argv</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 1.定义沿Z轴转90度的SO3d*/</span></span><br><span class="line">    Matrix3d R = AngleAxisd(M_PI/<span class="number">2</span>,Vector3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)).toRotationMatrix();</span><br><span class="line">    <span class="function">Quaterniond <span class="title">q</span><span class="params">(R)</span></span>;</span><br><span class="line">    <span class="comment">//SO3d 可直接从旋转矩阵构造，也可以通过四元数构造，两者等价</span></span><br><span class="line">    <span class="function">Sophus::SO3d  <span class="title">SO3_R</span><span class="params">(R)</span></span>;</span><br><span class="line">    <span class="function">Sophus::SO3d <span class="title">SO3_q</span><span class="params">(q)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SO(3) from matrix:\n&quot;</span>&lt;&lt;SO3_R.matrix() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SO(3) from quaternion:\n&quot;</span>&lt;&lt;SO3_q.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;They are equal&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用对数映射获取李代数</span></span><br><span class="line">    Vector3d so3 = SO3_R.<span class="built_in">log</span>();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;so3 = &quot;</span>&lt;&lt;so3.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//hat为向量到反对称矩阵</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;so3 hat =\n&quot;</span>&lt;&lt;Sophus::SO3d::hat(so3)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//vee为反对城矩阵到向量</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;so3 hat vee = \n&quot;</span>&lt;&lt;Sophus::SO3d::vee(Sophus::SO3d::hat(so3)).transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.增量扰动模型的更新*/</span></span><br><span class="line">    <span class="comment">//假设更新量</span></span><br><span class="line">    <span class="function">Vector3d <span class="title">update_so3</span><span class="params">(<span class="number">1e-4</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    Sophus::SO3d SO3_updated = Sophus::SO3d::<span class="built_in">exp</span>(update_so3)*SO3_R;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SO3 updated = \n&quot;</span>&lt;&lt;SO3_updated.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;*************************&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//对SE(3)操作大同小异</span></span><br><span class="line">    <span class="comment">//沿x轴平移1</span></span><br><span class="line">    <span class="function">Vector3d <span class="title">t</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//从R,t构造SE3</span></span><br><span class="line">    <span class="function">Sophus::SE3d <span class="title">SE3_Rt</span><span class="params">(R,t)</span></span>;</span><br><span class="line">    <span class="comment">//从q,t构造SE3</span></span><br><span class="line">    <span class="function">Sophus::SE3d <span class="title">SE3_qt</span><span class="params">(q,t)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SE3 from R,t = \n&quot;</span>&lt;&lt;SE3_Rt.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SE3 from q,t = \n&quot;</span>&lt;&lt;SE3_qt.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//李代数se(3)是一个6维向量，方便起见线typedef一下</span></span><br><span class="line">    <span class="keyword">typedef</span> Eigen::Matrix&lt;<span class="keyword">double</span>,<span class="number">6</span>,<span class="number">1</span>&gt; Vector6d;</span><br><span class="line">    Vector6d se3 = SE3_Rt.<span class="built_in">log</span>();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;se3 = &quot;</span>&lt;&lt;se3.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//观察输出，会发现在Sophus中，se(3)的平移在前，旋转在后</span></span><br><span class="line">    <span class="comment">//同样地，有hat和vee两个算符</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;se3 hat = \n&quot;</span>&lt;&lt;Sophus::SE3d::hat(se3) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;se3 hat vee = &quot;</span>&lt;&lt;Sophus::SE3d::vee(Sophus::SE3d::hat(se3)).transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后演示更新</span></span><br><span class="line">    <span class="comment">//更新量</span></span><br><span class="line">    Vector6d update_se3;</span><br><span class="line">    update_se3.setZero();</span><br><span class="line">    update_se3(<span class="number">0</span>,<span class="number">0</span>) = <span class="number">1e-4</span>d;</span><br><span class="line">    Sophus::SE3d SE3_updated = Sophus::SE3d::<span class="built_in">exp</span>(update_se3)*SE3_Rt;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SE3 updated = &quot;</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;SE3_updated.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(Sophus)</span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Sophus REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        /usr/local/<span class="keyword">include</span>/eigen3</span><br><span class="line">        Sophus_INCLUDE_DIRS</span><br><span class="line">)</span><br><span class="line"><span class="keyword">add_executable</span>(sophus useSophus.cpp)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
  </entry>
  <entry>
    <title>Terraria服务器搭建记录</title>
    <url>/2021/03/10/Terraria%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Terraria-服务器搭建记录"><a href="#Terraria-服务器搭建记录" class="headerlink" title="Terraria 服务器搭建记录"></a>Terraria 服务器搭建记录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上搜索了一些教程，发现大多数都是使用云主机搭建的，如ECS，VPS等，大多数从阿里云腾讯云购买，奈何钱包空空，价格太贵了，所以自己使用了物理机+端口映射+DDNS+动态公网IP的方法，价格低很多；</p>
<blockquote>
<p>物理机：退休的老笔记本电脑</p>
<p>公网IP：免费，向移动/联通/电信服务商要</p>
<p>端口 映射与DDNS：免费</p>
<p>域名：可以购买免费域名，博主购买的是一年8元的域名</p>
<p>合计投入：8RMB/YEAR</p>
</blockquote>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1-网络架构"><a href="#1-网络架构" class="headerlink" title="1. 网络架构"></a>1. 网络架构</h3><p>整个网络必须是一层NAT的架构，即WAN -&gt; LAN只经过1次；博主设置的架构如下：</p>
<p> <img src="https://gitee.com/JunLuJun/up/raw/master/20210310144025.png" alt=""></p>
<p>软路由采用R2S，最便宜的软路由，在软路由中拨号上网；硬路由要求具备AP模式类似的功能，手头的路由器并不具备，但是只要在后台把DHCP关闭，网线插入LAN口也能达到相同的效果；光猫必须处于调制模式；</p>
<h3 id="2-申请公网IP"><a href="#2-申请公网IP" class="headerlink" title="2. 申请公网IP"></a>2. 申请公网IP</h3><p>这一部博主没有试验过，网上提供的做法是向运营商打电话，申请公网IP，理由可以称要在公司看家里的监控等等；如果没给申请，就可以投诉，最终都会给；当然者是网上提供的做法；博主在学校的宿舍里布置的服务器，学校的联通会提供公网IP，根本不用申请。</p>
<p>当然还有一点需要说明的是，申请的公网IP是动态的，以博主的为例，每次重新拨号，IP都会改变，但是依旧是公网IP；所以为了在进入服务器时能够保持一个固定的连接入口，就需要一个域名指向这个公网IP，并设置DDNS，作用是每隔固定时间，域名会始终指向动态的公网IP，我们只需要记住这个域名即可。</p>
<h3 id="3-购买域名"><a href="#3-购买域名" class="headerlink" title="3. 购买域名"></a>3. 购买域名</h3><p>域名可以从很多网站购买，如CloudFare，阿里云，腾讯云等，博主从阿里云购买的域名，并在其控制台内，将域名解析；</p>
<h3 id="4-设置域名解析与DDNS"><a href="#4-设置域名解析与DDNS" class="headerlink" title="4. 设置域名解析与DDNS"></a>4. 设置域名解析与DDNS</h3><p>这一步需要在软路由中设置，一般软路由中都会有DDNS这一个服务项，选择阿里云的类型，根据提示填写信息即可。</p>
<h3 id="5-设置端口转发"><a href="#5-设置端口转发" class="headerlink" title="5. 设置端口转发"></a>5. 设置端口转发</h3><p>做完以上步骤，还需要做端口转发，以便访问域名+端口时，能够进入Terraria的服务器；在软路由中填写对应的端口转发端口号，Terraria一般默认7777端口，外部端口随意填写即可。</p>
<h3 id="6-配置Terraria-server"><a href="#6-配置Terraria-server" class="headerlink" title="6. 配置Terraria server"></a>6. 配置Terraria server</h3><p>配置服务器共有两种方式，一种是采用官方的服务器文件，但是并没有很多人性化的功能，但是提供了Mac，Windows，Linux上的安装方式；另外一种是TShock，在GitHub上开源，有很多功能，查看官方文档安装即可。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>TShock指令详解</title>
    <url>/2021/03/09/TShock%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TShock指令详解"><a href="#TShock指令详解" class="headerlink" title="TShock指令详解"></a>TShock指令详解</h1><p>Tshock是一款terraria服务器出色的插件，其在原版服务器的基础上添加了一系列简单易上手且实用的指令，极大地丰富了服务器的可玩性。</p>
<h2 id="config-json配置文件详解"><a href="#config-json配置文件详解" class="headerlink" title="config.json配置文件详解"></a>config.json配置文件详解</h2><p>config配置文件位于Tshock文件夹下，使用记事本方式打开此文件，修改config可以达到丰富服务器人性化的特点。<br>以下是config配置↓↓↓【请修改冒号后面的数值】</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;InvasionMultiplier&quot;: 1，//入侵规模，计算公式：入侵怪物数量=100+（X*HP＞200的玩家）</span><br><span class="line">&quot;DefaultMaximumSpawns&quot;: 5，//怪物刷新最大数值（设置越高怪物越多）</span><br><span class="line">&quot;DefaultSpawnRate&quot;: 600，//刷新怪物时间间隔，数值越大刷新越慢</span><br><span class="line">&quot;ServerPort&quot;: 7777，//服务器端口【默认】</span><br><span class="line">&quot;EnableWhitelist&quot;: false，//是否开启白名单【true代表是，false代表否，以下都是】</span><br><span class="line">&quot;InfiniteInvasion&quot;: false，//是否无限制怪物入侵【开启后使用命令召唤的怪物入侵将达到200万只左右】</span><br><span class="line">&quot;PvPMode&quot;: &quot;normal&quot;，//PVP模式【normal表示可以正常使用PVP，always表示强制PVP，disabled表示强制PVE】</span><br><span class="line">&quot;SpawnProtection&quot;: false，//是否保护出生点【强烈建议设置】</span><br><span class="line">&quot;SpawnProtectionRadius&quot;: 10，//出生点保护范围【一格一个】</span><br><span class="line">&quot;MaxSlots&quot;: 6，//服务器人数上限</span><br><span class="line">&quot;RangeChecks&quot;: true，//不明</span><br><span class="line">&quot;DisableBuild&quot;: false，//是否禁止建筑【开启后将无法破坏地图里任何东西】</span><br><span class="line">&quot;SuperAdminChatRGB&quot;: [</span><br><span class="line">255.0，</span><br><span class="line">0.0，</span><br><span class="line"><span class="number">0.0</span></span><br><span class="line">]，//GameMaster发言颜色【设置与人物初始设置颜色数值相同】 &quot;SuperAdminChatPrefix&quot;: &quot;[GM]&quot;，//GameMaster发言前缀（位于名字之前）</span><br><span class="line">&quot;SuperAdminChatSuffix&quot;: &quot;~~&quot;，//GameMaster发言后缀（位于名字之后）</span><br><span class="line">&quot;BackupInterval&quot;: 0，//地图备份时间间隔/分钟</span><br><span class="line">&quot;BackupKeepFor&quot;: 60，//备份的地图保留时间</span><br><span class="line">&quot;RememberLeavePos&quot;: false，//记录离开位置，再次登录服务器将传送到上一次离开服务器的位置</span><br><span class="line">&quot;HardcoreOnly&quot;: false，//仅允许困难模式的玩家进入服务器</span><br><span class="line">&quot;MediumcoreOnly&quot;: false，//仅允许中等模式的玩家进入服务器</span><br><span class="line">&quot;KickOnMediumcoreDeath&quot;: false，//移除（kick）死亡的中等难度的玩家</span><br><span class="line">&quot;BanOnMediumcoreDeath&quot;: false，//封禁（ban）死亡的中等难度的玩家</span><br><span class="line">&quot;AutoSave&quot;: true，//是否自动保存地图，强烈建议开启</span><br><span class="line">&quot;AnnounceSave&quot;: true，//自动保存的时候是否进行提示</span><br><span class="line">&quot;MaximumLoginAttempts&quot;: 3，//登录次数尝试最大限制，尝试次数过多将被移除（kick）服务器</span><br><span class="line">&quot;RconPassword&quot;: &quot;&quot;，//没用就对了，建议不要改动</span><br><span class="line">&quot;RconPort&quot;: 7777，//同上</span><br><span class="line">&quot;ServerName&quot;: &quot;Terraria Small Team&quot;，//服务器名称</span><br><span class="line">&quot;UseServerName&quot;: true，//是否使用服务器名称</span><br><span class="line">&quot;MasterServer&quot;: &quot;127.0.0.1&quot;，//本机IP连接地址，改动后自己可能进不去服务器</span><br><span class="line">&quot;StorageType&quot;: &quot;sqlite&quot;，//数据库类型，建议不要改动</span><br><span class="line">&quot;MySqlHost&quot;: &quot;localhost:3306&quot;，//下面的都没用，建议不要改动</span><br><span class="line">&quot;MySqlDbName&quot;: &quot;&quot;，</span><br><span class="line">&quot;MySqlUsername&quot;: &quot;&quot;，</span><br><span class="line">&quot;MySqlPassword&quot;: &quot;&quot;， &quot;MediumcoreBanReason&quot;: &quot;Death results in a ban&quot;，//中等难度的玩家被封禁（ban）时的理由</span><br><span class="line">&quot;MediumcoreKickReason&quot;: &quot;Death results in a kick&quot;，//中等难度的玩家被移除（kick）时的理由</span><br><span class="line">&quot;EnableDNSHostResolution&quot;: false，//不明，大概和网络有关</span><br><span class="line">&quot;EnableIPBans&quot;: true，//是否可以封禁（ban）ip地址</span><br><span class="line">&quot;EnableUUIDBans&quot;: true，//是否开启封禁（ban）UUID</span><br><span class="line">&quot;EnableBanOnUsernames&quot;: false，//是否可以封禁（ban）用户名</span><br><span class="line">&quot;DefaultRegistrationGroupName&quot;: &quot;default&quot;，//注册用户的默认用户组【如不了解组的规划请暂时不要改动】</span><br><span class="line">&quot;DefaultGuestGroupName&quot;: &quot;guest&quot;，//未注册用户的默认用户组</span><br><span class="line">&quot;DisableSpewLogs&quot;: true，//禁止将服务器日志展示给玩家</span><br><span class="line">&quot;HashAlgorithm&quot;: &quot;sha512&quot;，//不明</span><br><span class="line">&quot;BufferPackets&quot;: true，//不明，大概和buff有关</span><br><span class="line">&quot;ServerFullReason&quot;: &quot;Sorry，you can`t into the server，because the Server is full&quot;，//因服务器人满而被拒绝进入服务器的提示</span><br><span class="line">&quot;WhitelistKickReason&quot;: &quot;You are not on the whitelist.&quot;，//因不在白名单而被拒绝进入服务器的提示</span><br><span class="line">&quot;ServerFullNoReservedReason&quot;: &quot;Server is full. No reserved slots open.&quot;，//因服务器人满并预留给管理员的位置也满的情况下被拒绝进入服务器的提示</span><br><span class="line">&quot;SaveWorldOnCrash&quot;: true，//服务器崩溃时是否及时保存地图</span><br><span class="line">&quot;EnableGeoIP&quot;: false，//显示玩家IP的所在地【有可能侵犯他人隐私，建议不要开启】</span><br><span class="line">&quot;EnableTokenEndpointAuthentication&quot;: false，//不明QAQ</span><br><span class="line">&quot;RestApiEnabled&quot;: false，//上同下</span><br><span class="line">&quot;RestApiPort&quot;: 7878，//呵呵</span><br><span class="line">&quot;DisableTombstones&quot;: true，//是否移除墓碑</span><br><span class="line">&quot;DisplayIPToAdmins&quot;: false，//是否将玩家的IP地址展示给管理员</span><br><span class="line">&quot;KickProxyUsers&quot;: true，//移除（kick）使用外挂的玩家</span><br><span class="line">&quot;DisableHardmode&quot;: false，//禁止让世界进入困难模式（即肉山后）</span><br><span class="line">&quot;DisableDungeonGuardian&quot;: false，//禁止攻打地牢守护者，与old man对话将会被立即传送到出生点</span><br><span class="line">&quot;ServerSideCharacter&quot;: false，//是否强制开荒模式（慎用）！开启后人物存档将保留在服务器但不影响单人游戏的存档。</span><br><span class="line">&quot;ServerSideCharacterSave&quot;: 5，//服务器人物存档保存时间间隔/分钟</span><br><span class="line">&quot;LogonDiscardThreshold&quot;: 250，//开启强制开荒后，检测到玩家背包里有违规物品时将提示</span><br><span class="line">&quot;DisableClownBombs&quot;: false，//禁止小丑往出生点扔炸弹【大概】</span><br><span class="line">&quot;DisableSnowBalls&quot;: false，//禁止使用雪球 &quot;ChatFormat&quot;: &quot;&#123;1&#125;&#123;2&#125;&#123;3&#125;: &#123;4&#125;&quot;，//聊天格式【&#123;1&#125;为前缀，&#123;2&#125;为玩家名称，&#123;3&#125;为后缀，&#123;4&#125;为聊天内容】</span><br><span class="line">&quot;ChatAboveHeadsFormat&quot;: &quot;&#123;2&#125;&quot;，//在玩家头顶显示的内容【参考上一条】</span><br><span class="line">&quot;ForceTime&quot;: &quot;normal&quot;，//THE WORLD！【normal表示昼夜正常交替，day表示出现极昼现象，night表示出现极夜现象】</span><br><span class="line">&quot;TileKillThreshold&quot;: 60，//一秒挖掘，破坏物块的上限，否则将被冻结【可以用来检测外挂，下同】</span><br><span class="line">&quot;TilePlaceThreshold&quot;: 20，//一秒摆放物块的上限</span><br><span class="line">&quot;TileLiquidThreshold&quot;: 2，//一秒释放液体的上限</span><br><span class="line">&quot;ProjectileThreshold&quot;: 50，//一秒使用弹药数量的上限【包括魔法攻击】</span><br><span class="line">&quot;ProjIgnoreShrapnel&quot;: true，//计算弹药使用上限是否忽略爆炸产生的碎片</span><br><span class="line">&quot;RequireLogin&quot;: false，//是否开启强制注册登录</span><br><span class="line">&quot;DisableInvisPvP&quot;: false，//PVP状态下是否使隐身药水失效</span><br><span class="line">&quot;MaxRangeForDisabled&quot;: 10，//被冻结后最大移动距离</span><br><span class="line">&quot;ServerPassword&quot;: &quot;&quot;，//服务器的密码，不设置表示无密码</span><br><span class="line">&quot;RegionProtectChests&quot;: true，//领地内的箱子是否受到保护，PVE服务器强烈建议设置成true</span><br><span class="line">&quot;DisableLoginBeforeJoin&quot;: false，//大概意思是踢出登录失败的玩家？</span><br><span class="line">&quot;DisableUUIDLogin&quot;: false，//是否禁止UUID登录</span><br><span class="line">&quot;KickEmptyUUID&quot;: false，//是否移除（kick）空UUID的玩家</span><br><span class="line">&quot;AllowRegisterAnyUsername&quot;: false，//是否允许注册任何用户名，PVE服务器强烈建议设置成false</span><br><span class="line">&quot;AllowLoginAnyUsername&quot;: true，//是否允许登录任何用户名</span><br><span class="line">&quot;MaxDamage&quot;: 175，//玩家所受到的最大伤害点数，超过这个数值会被冻结</span><br><span class="line">&quot;MaxProjDamage&quot;: 175，//玩家受到弹药的最大伤害点数，同上</span><br><span class="line">&quot;IgnoreProjUpdate&quot;: false，//不明，下同</span><br><span class="line">&quot;IgnoreProjKill&quot;: false，//下同</span><br><span class="line">&quot;IgnoreNoClip&quot;: false，//下不同</span><br><span class="line">&quot;AllowIce&quot;: true，//是否禁止冰的扩散【这啥？】</span><br><span class="line">&quot;AllowCrimsonCreep&quot;: false，//是否允许血腥之地扩散，PVE强烈建议设置成false，下同</span><br><span class="line">&quot;AllowCorruptionCreep&quot;: false，//是否允许腐化之地扩散</span><br><span class="line">&quot;AllowHallowCreep&quot;: false，//是否允许神圣之地扩散 &quot;StatueSpawn200&quot;: 3，//不明，但是可能和出生点有关，建议不要改动，下同</span><br><span class="line">&quot;StatueSpawn600&quot;: 6，//赞成上一条</span><br><span class="line">&quot;StatueSpawnWorld&quot;: 10，//雕像召唤物品的最高上限</span><br><span class="line">&quot;PreventBannedItemSpawn&quot;: false，//是否禁止用item指令和give指令获得被封禁（ban）掉的物品</span><br><span class="line">&quot;PreventDeadModification&quot;: true，//不明真相的吃瓜群众</span><br><span class="line">&quot;EnableChatAboveHeads&quot;: false，//楼上带我一个</span><br><span class="line">&quot;ForceXmas&quot;: false，//是否开启圣诞节</span><br><span class="line">&quot;AllowAllowedGroupsToSpawnBannedItems&quot;: false，//是否允许有权限使用被封禁（ban）物品的用户组使用被封禁（ban）的物品</span><br><span class="line">&quot;IgnoreChestStacksOnLoad&quot;: false，//加载地图的时候是否检测箱子里物品堆叠上线</span><br><span class="line">&quot;LogPath&quot;: &quot;tshock&quot;，//日志文件存放路径</span><br><span class="line">&quot;PreventInvalidPlaceStyle&quot;: true，//不明</span><br><span class="line">&quot;BroadcastRGB&quot;: [</span><br><span class="line">127.0，</span><br><span class="line">255.0，</span><br><span class="line"><span class="number">212.0</span></span><br><span class="line">]，//系统广播颜色，和上述GameMaster的设置颜色方式一样</span><br><span class="line">&quot;RestUseNewPermissionModel&quot;: true，//是否刷新的时候使用新的模特【？】</span><br><span class="line">&quot;ApplicationRestTokens&quot;: &#123;&#125;，//不明</span><br><span class="line">&quot;ReservedSlots&quot;: 3，//预留给管理员的通道数量</span><br><span class="line">&quot;LogRest&quot;: false，//日志是否刷新【？】</span><br><span class="line">&quot;RespawnSeconds&quot;: 3，//玩家死亡后复活时间/秒</span><br><span class="line">&quot;TilePaintThreshold&quot;: 15，//一秒刷漆上限</span><br><span class="line">&quot;EnableMaxBytesInBuffer&quot;: false，//不懂</span><br><span class="line">&quot;MaxBytesInBuffer&quot;: 5242880，//还是不懂</span><br><span class="line">&quot;ForceHalloween&quot;: false，//是否开启万圣节</span><br><span class="line">&quot;AllowCutTilesAndBreakables&quot;: false，</span><br><span class="line">&quot;CommandSpecifier&quot;: &quot;/&quot;//指令标志，在聊天框里首位输入该符号视为指令</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Tshock所有指令详细介绍"><a href="#Tshock所有指令详细介绍" class="headerlink" title="Tshock所有指令详细介绍"></a>Tshock所有指令详细介绍</h2><ul>
<li><p>指令：auth<br>介绍：开服后服主需要进入服务器，但是如何获得管理权限呢？开服后会发现服务器有一横黄色字体，其中/auth xxxxxxxx最为瞩目【一般都为八位数，可通过tshock的auth.txt文件夹修改密码】，在服务器里输入auth命令＋密码即可获得临时超级管理权限，如何获得永久管理权限呢？以后会说到。<br>auth xxxxxxxx —获取临时管理权限，退出服务器后权限重置</p>
</li>
<li><p>指令：auth-verify<br>介绍：服主获得临时超级管理权限之后建议马上输入此命令，这样以后就不能通过auth获得管理权限了，以防黑客获取权限【如果黑客真的来了…估计这命令也没用】，在这之前一定要获取永久管理权限，否则下次登录服务器就无法获取管理权限了。想要再次可以使用auth指令获取临时管理权限可以删掉tshock目录下的auth.lck文件解除。auth-verify —禁止使用auth指令</p>
</li>
<li><p>指令：user<br>介绍：管理玩家以及用户组</p>
<ul>
<li>子命令：<br>user add 玩家名字 密码 用户组 —添加玩家到某一个用户组<br>user del 玩家名字 —删除玩家信息<br>user password 玩家名字 新密码 —更改某一玩家的密码【这个真…】<br>user group 玩家名字 用户组 —更改某一玩家的用户组<br>备注：user命令可以更改玩家的信息，极为重要，如无特殊情况，请不要把该命令权限交给他人</li>
</ul>
</li>
<li><p>指令：login<br>介绍：一般服务器都会设置登录这个选项，进入服务器后输入以下子命令登录至服务器。</p>
<ul>
<li>子命令：<br>login —直接使用角色名称和UUID登录<br>login 密码 —使用游戏角色名称和密码登录<br>login 用户名 密码 —使用用户名和密码登录<br>备注：请牢记您的密码。</li>
</ul>
</li>
<li><p>指令：password<br>介绍：用于修改用户的登录密码。</p>
</li>
<li><p>password 旧密码 新密码 —修改登录密码<br>备注：请牢记您更改后的密码。</p>
</li>
<li><p>指令：register<br>介绍：用于注册服务器用户账号。</p>
<ul>
<li>子命令：<br>register 密码 —使用游戏玩家名称当做用户名和密码注册<br>register 用户名 密码 —使用自己设置的用户名和密码注册<br>备注：请牢记注册后的密码并尽量弄复杂。 </li>
</ul>
</li>
<li><p>指令：ban<br>介绍：封禁掉某玩家。</p>
<ul>
<li>子命令：（【】内内容选填）<br>ban add 玩家名称 【理由】 —永久封禁一个用户<br>ban addip IP地址 【理由】 —永久封禁一个IP地址，通过此IP地址进入的玩家将被禁止进服务器<br>ban addtemp 玩家名称 时间 【理由】 —限时性封禁一个用户<br>ban list 【页码】 —显示正在被封禁的用户列表，不输入页码默认显示第一页<br>ban listip 【页码】 —显示正在被封禁的IP地址列表</li>
<li>相关命令：<br>del 用户名 —解封一个用户<br>delip IP地址 —解封一个IP地址<br>备注：第三条子命令所涉及到的时间的格式为【1d1h1m1s】，其中d=day代表天，h=<br>hour代表小时，m代表分钟，s代表秒，如果想封禁玩家123长达一天三小时的时间那么格式为：<br>ban addtemp 123 1d3h 就是想封禁你你能把我咋滴，无视理由= =</li>
</ul>
</li>
<li><p>指令：broadcast<br>介绍：系统广播命令，但不知道能不能定时播放，貌似有个插件可以做到。<br>broadcast 内容 —播放广播</p>
<ul>
<li>相关命令：<br>bc 内容 —也是播放广播，只不过是broadcast的缩写<br>say 内容 —还是播放广播</li>
</ul>
</li>
<li><p>指令：displaylogs<br>介绍：是否保存服务器日志，不修改config的情况下默认目录为tshock<br>【如以后有些指令我没有给出用法，即直接输入生效】</p>
</li>
<li><p>指令：group<br>介绍：管理用户组。</p>
<ul>
<li>子命令：<br>group add 新的用户组名称 权限 —添加一个新的用户组并给其初始权限<br>group addperm 用户组 权限 —给某一用户组添加权限<br>group color 用户组 颜色 —改变某一用户组的聊天颜色【颜色为RGB值，具体度娘】<br>group del 用户组名称 —删除一个用户组<br>group delperm 用户组名称 权限 —删除某一用户组的某个权限<br>group list 【页码】—显示所有已设置的用户组<br>group listperm 用户组名称 【页码】 —显示某一用户组的所有权限<br>group parent 用户组名称 父亲用户组名称 —修改某一用户组的父亲组<br>group prefix 用户组名称 前缀 —设置某一用户组聊天前缀<br>group suffix 用户组名称 后缀 —设置某一用户组聊天后缀<br>备注：这里的父亲用户组值得一提，如果用户组123为456的父亲用户组，那么456将继承123的全部权限，在tshock默认的用户组中，guest是最没权限但是所有用户组的父亲组，故所有用户组都将继承他的权限。如果123和456都含有同一个权限，只删除456的那个权限的话是无法彻底删去的，因为他还有123这个父亲撑腰。所以要完全撤掉这个权限需要撤销掉123的这个权限、如果123还有父亲用户组的话那就要继续找继续找，知道找到最年长的一辈才能彻底删掉这个权限。<br>备注2：【*】代表所有权限，可以?豆芾碓敝挥幸桓鋈ㄏ蓿蔷褪恰?】</li>
</ul>
</li>
<li><p>指令：itemban<br>介绍：封禁掉某一物品。</p>
<ul>
<li>子命令：<br>itemban add 物品英文名称或物品ID—封禁掉某一物品<br>itemban allow 物品英文名称或物品IP 用户组名称—允许某一用户组使用该被封禁的物品<br>itemban del 物品英文名称或物品ID—将某一物品解除封禁<br>itemban disallow 物品英文名称或物品ID 用户组名称—取消某一用户组对该封禁物品的使用权限<br>itemban list 【页码】—列出所有被封禁掉的物品<br>备注：没有权限使用该物品的用户组会被冻结。</li>
</ul>
</li>
<li><p>指令：region<br>介绍：设置领地，极为重要！</p>
<ul>
<li>子命令：<br>region set 1/2 —设置临时边界点。<br>region clear —清除设置的临时边界点<br>region define 名字 —给刚才设置的临时边界起名，将其变成私有领地。<br>region delete 领地名称 —删除某一个私有领地<br>region name -显示当前位置的领地名称<br>region list 【页码】 —显示当前所有领地<br>region resize 领地名称 —重新设置领地大小<br>region allow 玩家名称 领地名称 —将某一领地分享给另一位玩家<br>region remove 玩家名称 领地名称 —取消将某一领地分享给某位玩家<br>region allowg 用户组名称 领地名称 —将某一领地分享给某一个用户组<br>region removeg 用户组名称 领地名称 —将某一领地的分享权限取消至某个用户组<br>region info 领地名称 —显示领地信息<br>region protect 领地名称 true/false —是否开启保护某个领地<br>region z 领地名称 优先等级 —设置领地的优先权<br>备注：如何设置领地？<br>使用稿子在一个长方形的左上角敲一下，之后输入region set 1<br>使用稿子在同一个长方形的右下角敲一下，之后输入region set 2<br>输入region define 名称 设置成自己的私有领地吧！<br>私有领地不可被除领主之外的人破坏或建筑，除肺淦鞑享给某个玩家。</li>
</ul>
</li>
<li><p>指令：kick<br>介绍：将玩家移除服务器，克熊孩子专用【其实ban更好…】。<br>kick 玩家名称 【理由】</p>
</li>
<li><p>指令：projban<br>介绍：在服务器里封禁某种弹药使用权限。</p>
<ul>
<li>子命令：<br>projban add 弹药ID —封禁某种弹药<br>projban allow 弹药ID 用户组名称 —允许某一用户组使用该被封禁的弹药<br>projban del 弹药ID —恢复某一个弹药的使用权限<br>projban disallow 弹药ID 用户组名称 —解除某一用户组使用某个弹药的权限<br>projban list —列出所有被封禁的弹药</li>
</ul>
</li>
<li><p>指令：mute<br>介绍：禁言某玩家，刷屏的你们惨咯~<br>mute 用户名 【理由】—禁言某位玩家</p>
<ul>
<li>相关命令：<br>unmute 用户名 —解除某位玩家的禁言</li>
</ul>
</li>
<li><p>指令：savessc<br>介绍：手动保存服务器的玩家存档。</p>
</li>
<li><p>指令：tempgroup<br>介绍：‘设置临时用户组，不明意义。</p>
</li>
<li><p>指令：userinfo<br>介绍：查询某一用户信息。<br>usernfo 玩家姓名</p>
<ul>
<li>相关命令：<br>ui 玩家姓名 —ui就是userinfo的简写</li>
</ul>
</li>
<li><p>指令：annoy<br>介绍：骚扰【shenmegui】一个玩家。<br>annoy 玩家名称 骚扰时间<br>备注：怎么骚扰的，可以亲自试验一下，23333</p>
</li>
<li><p>指令：confuse<br>介绍：让某个玩家不再受控制。【即，方向箭无法正确的控制角色移动】【这命令真NB】<br>confuse 玩家名称<br>备注：对同一个玩家输入两次该命令将解除不受控制状态。</p>
</li>
<li><p>指令：rocket<br>介绍：在某位玩家旁边发射一个火箭。<br>rocket 玩家名称</p>
</li>
<li><p>指令：firework<br>介绍：在某位玩家身边发射烟花。<br>firework 玩家名称 【red/green/blue/yellow】</p>
</li>
<li><p>指令：checkupdates<br>介绍：检查服务器【tshock】的更新状况。</p>
</li>
<li><p>指令：off<br>介绍：关闭服务器并且保存服务器数据。</p>
<ul>
<li>相关命令：<br>exit —同上</li>
</ul>
</li>
<li><p>指令：off-nosave<br>介绍：关闭服务器但不保存服务器数据。服务器被熊炸了之后立即使用该命令，不要犹豫。</p>
<ul>
<li>相关命令：<br>exit-nosave —真是没事闲着== 指令：reload<br>介绍：重新载入config文件，不必重新启动服务器去加载config文件了，但是部分配置还必须重启服务器才能生效。</li>
</ul>
</li>
<li><p>指令：restart<br>介绍：重启服务器。</p>
</li>
<li><p>指令：serverpassword<br>介绍：修改服务器的密码。</p>
</li>
<li><p>指令：version<br>介绍：显示当前tshock版本信息。</p>
</li>
<li><p>指令：whitelist<br>介绍：管理服务器白名单【需在config配置文件里把白名单打开】</p>
</li>
<li><p>指令：give<br>介绍：给予玩家一个物品。<br>give 物品英文名称或物品ID 玩家名称（可以是自己） 【数量】【英文前缀（武器用）】</p>
<ul>
<li>相关命令：<br>g 物品英文名称或物品ID 玩家名称（可以是自己） 【数量】【英文前缀（武器用）】 —即give的简写</li>
</ul>
</li>
<li><p>指令：item<br>介绍：给予自己一个物品。<br>item 物品英文名称或物品ID【数量】【英文前缀（武器用）】</p>
<ul>
<li>相关命令：<br>i 物品英文名称或物品ID【数量】【英文前缀（武器用）】—不解释</li>
</ul>
</li>
<li><p>指令：butcher<br>介绍：杀死当前服务器里的怪物或可爱的npc。<br>butcher 怪物id/npc<br>备注：不写ID将表示杀死所有除了玩家的生物。</p>
</li>
<li><p>指令：invade<br>介绍：开启军团入侵指令！<br>invade 入侵军团<br>备注：入侵军团的类型有：goblin【哥布林】，snowman【雪人军团】，pirate【海盗】。另外，南瓜月，血月，霜月有其他指令。</p>
</li>
<li><p>指令：maxspawn<br>介绍：设置怪物最大刷新量，但只是临时的。<br>备注：关闭服务器后失效，永久修改最大怪物刷新量请去修改config配置文件。</p>
</li>
<li><p>指令：spawnboss<br>介绍：嘛，稍微懂点英文的都知道是召唤boss的指令~<br>spawnboss BOSS名称 【数量】</p>
<ul>
<li>相关命令：<br>sb BOSS名称 【数量】 —简写不解释，但是这简写简直233<br>备注：boss类型主要有：eye-克苏鲁之眼/eater-世界吞噬者/wof-血肉之墙/queen-蜂后/brain-克苏鲁之脑/king-史莱姆王/twins-双子魔眼/prime-机械骷髅王/skeletron-骷髅王/golem-石巨人/plantera-世纪之花/destroyer-世界毁灭者/duke-猪鲨公爵/all-所有种类boss，若没有填数量一空则默认为一。</li>
</ul>
</li>
<li><p>指令：spawnmob<br>介绍：在你的身边召唤一个怪物或者NPC。<br>spawnmob 怪物ID或NPC的ID 【数量】</p>
<ul>
<li>相关命令：<br>sm 怪物ID或NPC的ID 【数量】 —如果召唤一堆NPC会发生什么？</li>
</ul>
</li>
<li><p>指令：spawnrate<br>介绍：设置怪物刷新时间间隔，同样是临时性的，需要通过config配置文件设置永久性的。</p>
</li>
<li><p>指令：pumpkin<br>介绍：召唤南瓜月！！！<br>备注：本人没有测试白天是否可以使用指令召唤南瓜月。</p>
</li>
<li><p>指令：home<br>介绍：回到自己设置的出生点【床】。</p>
</li>
<li><p>指令：spawn<br>介绍：回到地图【服务器】的出生点。</p>
</li>
<li><p>指令：tp<br>介绍：神の指令，可以传送到别人身边。</p>
<ul>
<li>子命令：<br>tp 玩家名称 —传送到某人身边。<br>tp x坐标 y坐标 —传送到特定的一个坐标，可以通过GPS查看坐标。</li>
</ul>
</li>
<li><p>指令：tpallow<br>介绍：设置别人是否可以传送到你身边。</p>
</li>
<li><p>指令：tphere<br>介绍：将别人传送到你身边，有可能侵犯他人隐私。<br>tphere 玩家名称<br>备注：如果玩家名称填写all或者【*】，则表示所有玩家。</p>
</li>
<li><p>指令：antibuild<br>介绍：是否开启禁止建筑【破坏】模式，开启后无法破坏地图上的任何东西，但也是临时性的。 指令：bloodmoon<br>介绍：开启血月！</p>
</li>
<li><p>指令：grow<br>介绍：在你的旁边生长一颗植株，可以达到无限资源的目的。【本来就可以无线资源吧..】<br>grow tree/epictree/mushroom/cactus/herb<br>备注：这几个英文单词指得分别是：树，棕桐树，蘑菇，仙人掌，草药。</p>
</li>
<li><p>指令：dropmeteor<br>介绍：使用该指令将会随机生成一个陨石！！！请在主城周围使用该命令否则后果自负。</p>
</li>
<li><p>指令：eclipse<br>介绍：开启日食，配合config配置修改成极昼模式可以达到永久日食的目的。</p>
</li>
<li><p>指令：forcexmas<br>介绍：是否开启圣诞模式，注意，有是否选项！<br>forcexmas true/false</p>
</li>
<li><p>指令：fullmoon<br>介绍：使用该指令开启满月！<br>这啥…</p>
</li>
<li><p>指令：hardmode<br>介绍：如当前地图处于简单模式【肉山前】，使用该指令立刻转至困难模式【肉山后】，反亦之。</p>
</li>
<li><p>指令：protectspawn<br>介绍；开启临时保护出生点模式，范围在config配置文件里修改，不过也只是临时性的。</p>
</li>
<li><p>指令：rain<br>介绍：是否开启或停止下雨。<br>rain stop/start —前者停止正在下的雨，后者则开始下雨</p>
</li>
<li><p>指令：setspawn<br>介绍：将你脚下踩得这块方块设置为地图的出生点，这个是永久的！但是仍然可以输入该指令改变地图出生点。</p>
</li>
<li><p>指令：settle<br>介绍：立刻强制所有液体平衡。</p>
</li>
<li><p>指令：wind<br>介绍：改变风速？<br>wind 数值</p>
</li>
<li><p>指令：time<br>介绍：设置地图的时间<br>time day/night/dusk/noon/midnight<br>备注：day代表白天，游戏时间为4:00整，这个时间点表示刚刚天亮。night表示傍晚，时间未知。dusk代表黄昏，表示刚刚步入夜晚。noon表示正午，太阳当空照~一天中最亮的时候。midnight代表午夜。</p>
</li>
<li><p>指令：world<br>介绍：显示当前地图信息 。</p>
</li>
<li><p>指令：buff<br>介绍：给予自己一种buff，可以自定义时间哦！<br>buff buff序号或者英文名称 【持续的时间】<br>备注：时间选项不添加默认为60秒。</p>
</li>
<li><p>指令：clear<br>介绍：清理以你为O点的半径中的怪物/物品/弹药。<br>clear item/npc/projectile 【半径】<br>备注：半径不填写大概默认为全部。npc代表怪物，第三者代表弹药，item代表掉落物品。<br>并且在minecraft里，clear指令是清空玩家背包的指令。 </p>
</li>
<li><p>指令：gbuff<br>介绍：给予某个玩家一种buff。<br>gbuff 玩家名称 buff名称或buffID 【时间】</p>
<ul>
<li>相关指令：<br>buffplayer 玩家名称 buff名称或buffID 【时间】<br>备注：时间一栏不填写默认为60秒。</li>
</ul>
</li>
<li><p>指令：godmode<br>介绍：这将会给一个人上帝的权限！！！<br>godmode —给予自己上帝的权利！<br>godmode 用户名 —给予一个玩家上帝的权利！<br>上帝的权利：当你收到任何伤害【这种伤害会减少你的体力】的时候，你马上恢复你血量上限的血量【比如你有200点血量上限，你收到伤害时，会立刻回满200点血。】。可是如果该伤害是致命的，仍然会死亡。【比如地牢守护者】</p>
</li>
<li><p>指令：heal<br>介绍：治疗一个玩家【包括hp和mp】<br>heal —治疗自己<br>heal 玩家名称 —治疗某一个玩家</p>
</li>
<li><p>指令：kill<br>介绍：干死某位玩家233。<br>kill 玩家名称 —杀掉玩家 自顶<br>……… 指令：me<br>介绍：跟自己卖萌=￣ω￣=。<br>me 聊天内容</p>
</li>
<li><p>指令：party<br>介绍：组队聊天内容。<br>party 聊天内容 —其中的组队是指pvp的队伍颜色。<br>相关指令：<br>p 聊天内容 —可以更加快捷的跟组队聊天</p>
</li>
<li><p>指令：reply<br>介绍：回复某人私聊给你的话【亦可给某人发送私信】。<br>reply 私信内容</p>
<ul>
<li>相关命令：<br>r 聊天内容</li>
</ul>
</li>
<li><p>指令：slap<br>介绍：扇别人一巴掌！并强制造成五点血量伤害，据说有击退效果。<br>slap 玩家姓名 指令：stats<br>介绍：显示当前服务器的信息。</p>
</li>
<li><p>指令：warp<br>介绍：管理当前服务器所开的地图的传送点，不同的地图有不同的传送点管理。</p>
<ul>
<li>子命令：<br>warp 传送点 —传送到该传送点，服务器的注册用户默认拥有该指令。<br>warp add 传送点名称 —在当前脚下设置一个传送点并命名，所有传送点都饰淦鳙共的。<br>warp del 传送点名称 —删除某一传送点。<br>warp list 【页数】 —显示当前服务器开的地图所设置的所有传送点。<br>warp send 玩家名称 传送点名称 —将某一用户立即强制传送到某一传送点。<br>warp hide 传送点名称 ture/false —设置传送点是否显示，ture为是，反之。<br>备注：warp可以在任意一个地方建立传送点，也可以用来设置服务器活动传送点，所以如无特殊情况，请不要授予注册玩家管理传送点的权限。</li>
</ul>
</li>
<li><p>指令：whisper<br>介绍：发送一种私聊信息给予某位玩家。<br>whisper 聊天内容 —私聊某位玩家。</p>
<ul>
<li>相关命令：<br>tell 聊天内容 —还是私聊某位玩家。<br>w 聊天内容 —whisper的简写。</li>
</ul>
</li>
<li><p>指令：aliases<br>介绍：查询某一命令的相同命令【比如上一条指令的whisper，就有两个相同命令，即tell和w】。</p>
</li>
<li><p>指令：help<br>介绍：查询当前用户组可供使用的命令。</p>
</li>
<li><p>指令：motd<br>介绍：显示服务器设置的欢迎信息。</p>
</li>
<li><p>指令：playing<br>介绍：显示当前服务器所有在线玩家。</p>
<ul>
<li>相关命令：<br>online<br>who</li>
</ul>
</li>
<li><p>指令：rule<br>介绍：显示服务器设置的规则！新手最好先看服规，否则后果自负。</p>
<h2 id="Tshock内置权限详解"><a href="#Tshock内置权限详解" class="headerlink" title="Tshock内置权限详解"></a>Tshock内置权限详解</h2><p>从此片开始，我将为大家介绍tshock原版权限详解，这些权限会用在group addperm 中使用，且特别重要。</p>
<h3 id="tshock-account系列权限"><a href="#tshock-account系列权限" class="headerlink" title="tshock.account系列权限"></a>tshock.account系列权限</h3><p>备注：所有原版tshock权限的第一个单词均有tshock，没有特例。</p>
</li>
<li><p>权限：tshock.account.register<br>介绍：允许用户组内的用户可以在服务器内注册账号。<br>备注：使用方法：group addperm 用户组名称 tshock.account.register，这样就给予了一个用户组可以注册的权限，但是不要忘记父亲用户组哦，子用户组可以继承父用户组的所有权限。</p>
</li>
<li><p>权限：tshock.account.login<br>介绍：允许用户组内的用户可以登录账号。<br>备注：这条和上面一条最好不要做任何改动。</p>
</li>
<li><p>权限：tshock.account.changepassword<br>介绍：允许用户组可以修改自己账号的密码。 权限：tshock.admin.warp<br>介绍：可以使用warp系列指令！</p>
</li>
<li><p>权限：tshock.admin.itemban<br>介绍：可以封禁某种物品的使用权限</p>
</li>
<li><p>权限：tshock.admin.projectileban<br>介绍：可以封禁某种弹药的使用权限</p>
</li>
<li><p>权限：tshock.admin.group<br>介绍：可以使用group系列命令</p>
</li>
<li><p>权限：tshock.admin.region<br>介绍：可以使用region【圈地】系列指令</p>
</li>
<li><p>权限：tshock.admin.mute<br>介绍：可以禁言某人 权限：tshock.admin.seeplayerids<br>介绍：可以查看当前服务器玩家的人物信息。</p>
</li>
<li><p>权限：tshock.admin.savessi<br>介绍：可以被服务器保存背包数据<br>备注：对于那些临时玩家和用大号进开荒服的玩家们，可以考虑单独弄一个用户组并将此权限删除。</p>
</li>
<li><p>权限： tshock.admin.tempgroup<br>介绍：可以使用tempgroup指令</p>
</li>
<li><p>权限：tshock.admin.broadcast<br>介绍：可以使用say等指令进行系统【服务器】广播</p>
</li>
<li><p>权限：tshock.admin.userinfo<br>介绍：可以获取当前在线的用户信息【可能包括IP地址】 【tshock.buff】系列权限</p>
</li>
<li><p>权限：tshock.buff.self<br>介绍：可以给自己加buff</p>
</li>
<li><p>权限：tshock.buff.others<br>介绍：可以给其他玩家加buff<br>备注：如果一个用户组同时拥有以上两条权限，那么就可以使用buff系列指令。 【tshock.cfg系列权限】</p>
</li>
<li><p>权限：tshock.cfg.maintenance<br>介绍：可以关闭或重新启动服务器<br>备注：任何时候，都不要把这条权限给除超级管理之外的任何用户组！！！任何时候，都不要把这条权限给除超级管理之外的任何用户组！！！任何时候，都不要把这条权限给除超级管理之外的任何用户组！！！【很重要所以说三遍】</p>
</li>
<li><p>权限：tshock.cfg.whitelist<br>介绍：可以管理白名单</p>
</li>
<li><p>权限：tshock.cfg.password<br>介绍：可以修改服务器密码</p>
</li>
<li><p>权限：tshock.cfg.reload<br>介绍：可以使用指令重新加载config配置文件</p>
</li>
<li><p>权限：tshock.cfg.updateplugins<br>介绍：可以使用指令更新tshock<br>备注：任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！【特别重要所以说五遍】 【tshock.ignore系列权限】</p>
</li>
<li><p>权限：tshock.ignore.removetile<br>介绍：是否让该用户组免于受到挖掘物块速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.placetile<br>介绍：是否让该用户组免于受到物块摆放速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.liquid<br>介绍：是否让该用户组免于受到液体摆放速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.projectile<br>介绍：是否让该用户组免于受到弹药伤害上限的检测</p>
</li>
<li><p>权限：tshock.ignore.paint<br>介绍：是否让该用户组免于受到喷漆速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.noclip<br>介绍：是否让该用户组免于受到锤击物块上限的检测</p>
</li>
<li><p>权限：tshock.ignore.itemstack<br>介绍：是否让该用户组免于受到物品堆叠上限的检测</p>
</li>
<li><p>权限：tshock.ignore.damage<br>介绍：是否让该用户组免于受到伤害上限的检测</p>
</li>
<li><p>权限：tshock.ignore.ssi<br>介绍：是否让该用户组免于受到背包的检测</p>
</li>
<li><p>权限：tshock.ignore.dropbanneditem<br>介绍：是否让该用户可以丢弃服务器封禁的物品并不消失 【tshock.item系列权限】</p>
</li>
<li><p>权限：tshock.item.spawn<br>介绍：该用户组是否可以使用item指令。</p>
</li>
<li><p>权限：tshock.item.usebanned<br>介绍：该用户组是否可以使用被服务器封禁的物品。</p>
</li>
</ul>
<h3 id="tshock-npc系列权限"><a href="#tshock-npc系列权限" class="headerlink" title="tshock.npc系列权限"></a>tshock.npc系列权限</h3><ul>
<li><p>权限：tshock.npc.maxspawns<br>介绍：是否可以使用指令控制最大刷怪数量</p>
</li>
<li><p>权限：tshock.npc.spawnrate<br>介绍：是否可以使用指令控制怪物刷新时间间隔</p>
</li>
<li><p>权限：tshock.npc.invade<br>介绍：是否可以开启怪物入侵【比如雪人军团之类的…】</p>
</li>
<li><p>权限：tshock.npc.spawnboss<br>介绍：是否可以使用指令召唤boss</p>
</li>
<li><p>权限：tshock.npc.rename<br>介绍：是否可以重新命名NpC</p>
</li>
<li><p>权限：tshock.npc.spawnmob<br>介绍：是否可以使用指令召唤怪物</p>
</li>
<li><p>权限：tshock.npc.summonboss<br>介绍：是否可以使用物品召唤boss</p>
</li>
<li><p>权限：tshock.npc.butcher<br>介绍：是否可以使用指令杀死怪物【butcher指令】</p>
</li>
<li><p>权限：tshock.npc.startinvasion<br>介绍：是否可以使用物品召唤军团入侵【比如雪人军团之类的…】</p>
</li>
</ul>
<h3 id="tshock-superadmin系列权限"><a href="#tshock-superadmin系列权限" class="headerlink" title="tshock.superadmin系列权限"></a>tshock.superadmin系列权限</h3><ul>
<li><p>权限：tshock.superadmin.authverify<br>介绍：用户组是否可以禁止使用auth指令获取临时管理员权限</p>
</li>
<li><p>权限：tshock.superadmin.user<br>介绍：用户组是否可以使用user指令管理用户组<br>【以上两条基本就可以操控整个服务器的权限了，如无特殊情况请不要以上两条权限给予给他人】<br>【tshock.tp系列权限】</p>
</li>
<li><p>权限：tshock.tp.self<br>介绍：用户组可以使用tp指令【注意，不是系列，仅限tp】</p>
</li>
<li><p>权限：tshock.tp.others<br>介绍：用户组可以使用tphere指令</p>
</li>
<li><p>权限：tshock.tp.block<br>介绍：使当前用户组的成员成为tp指令的目标时可以阻止他。</p>
</li>
<li><p>权限：tshock.tp.toall<br>介绍：可以使用tp指令传送到任何人身边【但是没有测试过是否和tshock.tp.block权限相矛盾】</p>
</li>
<li><p>权限：tshock.tp.silent<br>介绍：可以传送到别人身边但没有提示【然并卵】</p>
</li>
<li><p>权限：tshock.tp.home<br>介绍：可以使用home指令</p>
</li>
<li><p>权限：tshock.tp.spawn<br>介绍：可以使用spawn命令</p>
</li>
</ul>
<h3 id="tshock-world系列权限"><a href="#tshock-world系列权限" class="headerlink" title="tshock.world系列权限"></a>tshock.world系列权限</h3><ul>
<li><p>权限：tshock.world.editspawn<br>介绍：使当前用户组是否可以设置临时出生点保护</p>
</li>
<li><p>权限：tshock.world.editregion<br>介绍：可以使用编辑region指令【并不是改变这个指令的内容，而是使用】</p>
</li>
<li><p>权限：tshock.world.time.bloodmoon<br>介绍：是否可以使用指令开启血月</p>
</li>
<li><p>权限：tshock.world.time.pumpkinmoon<br>介绍：同上，血月变成南瓜月</p>
</li>
<li><p>权限：tshock.world.time.snowmoon<br>介绍：霜月【我越来越懒了哈哈哈哈哈哈哈哈哈】</p>
</li>
<li><p>权限：tshock.world.grow<br>介绍：是否可以使用grow指令</p>
</li>
<li><p>权限：tshock.world.hardmode<br>介绍：是否可以使用指令改变当前地图的难度【即困难模式和简单模式】</p>
</li>
<li><p>权限：tshock.world.movenpc<br>介绍：是否可以移动npc房间【开荒服务器建议给予普通玩家此权限】</p>
</li>
<li><p>权限：tshock.world.converthardmode<br>介绍：是否可以转换神圣之地和腐化之地之间的联系？【实验结果不明显，只能人工翻译…】</p>
</li>
<li><p>权限：tshock.world.setxmas<br>介绍：是否可以使用指令开启圣诞节</p>
</li>
<li><p>权限：tshock.world.save<br>介绍：是否可以使用save指令【注，其中不包括off】</p>
</li>
<li><p>权限：tshock.world.settleliquids<br>介绍：是否可以使用指令平衡液体</p>
</li>
<li><p>权限：tshock.world.info<br>介绍：是否可以获取服务器当前开启的地图信息</p>
</li>
<li><p>权限：tshock.world.setspawn<br>介绍：是否可以重新设置系统出生点</p>
</li>
<li><p>权限：tshock.world.time.dropmeteor<br>介绍：是否可以使用指令刷新陨石…</p>
</li>
<li><p>权限：tshock.world.time.eclipse<br>介绍：是否可以使用指令开启日食</p>
</li>
<li><p>权限：tshock.world.time.fullmoon<br>介绍：是否可以使用指令开启满月模式</p>
</li>
<li><p>权限：tshock.world.modify<br>介绍：不受禁止破坏指令的影响</p>
</li>
<li><p>权限：tshock.world.paint<br>介绍：是否可以使用油漆</p>
</li>
<li><p>权限：tshock.world.rain<br>介绍：是否可以使用指令下雨</p>
</li>
<li><p>权限：tshock.world.wind<br>介绍：是否可以改变风速？ 【Tshock原版剩余权限（没有分类）】</p>
</li>
<li><p>权限：tshock.clear<br>介绍：是否可以使用clear指令【注意是clear不是clean】</p>
</li>
<li><p>权限：tshock.kill<br>介绍：是否可以使用指令干掉某人</p>
</li>
<li><p>权限：tshock.reservedslot<br>介绍：该用户组的成员进入服务器时，不受最大人数的限制【服务器满员了照样进来，可以用在vip用户组上】</p>
</li>
<li><p>权限：tshock.warp<br>介绍：是否可以使用warp进行传送【注意，这和tshock.admin.warp权限有所不同，该权限只能利用warp指令进行传送而tshock.admin.warp则是可以使用warp系列的指令，即管理warp传送点】</p>
</li>
<li><p>权限：tshock.slap<br>介绍：是否可以扇别人一巴掌</p>
</li>
<li><p>权限：tshock.whisper<br>介绍：是否可以查看当前服务器人物信息</p>
</li>
<li><p>权限：tshock.annoy<br>介绍：是否可以骚扰别人</p>
</li>
<li><p>权限：tshock.heal<br>介绍：是否可以通过指令治愈自己</p>
</li>
<li><p>权限：tshock.partychat<br>介绍：是否可以进行队内聊天【即party和p】</p>
</li>
<li><p>权限：tshock.info<br>介绍：是否可以看到服务器信息</p>
</li>
<li><p>权限：tshock.thirdperson<br>介绍：是否可以跟自己卖萌</p>
</li>
<li><p>权限：tshock.godmode<br>介绍：是否可以使用godmode指令</p>
</li>
<li><p>权限：tshock.canchat<br>介绍：是否可以聊天【这条权限碉堡了】</p>
</li>
<li><p>权限：tshock.projectiles.usebanned【因为projectiles类别的权限就这么一条，我就放在其余权限里了】<br>介绍：是否可以使用被封禁【ban】掉的弹药。</p>
<p>region划领地的方法是先输入region set 1，之后敲击你需要设置区域的左上角！<br>下一步同理，输入region set 2之后再敲击设置区域的右下角！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>AZURE KINECT生成点云</title>
    <url>/2021/03/06/AZURE-KINECT%E7%94%9F%E6%88%90%E7%82%B9%E4%BA%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Azure-Kinect-生成点云"><a href="#Azure-Kinect-生成点云" class="headerlink" title="Azure Kinect 生成点云"></a>Azure Kinect 生成点云</h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/denkywu/article/details/103305714">https://blog.csdn.net/denkywu/article/details/103305714</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20210306211927.png" alt=""></p>
<h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="comment">// 方便控制是否 std::cout 信息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG_std_cout 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将Mat转换为pcl的xyz格式</span></span><br><span class="line"><span class="comment"> * @param xyzDepth 输入的Mat</span></span><br><span class="line"><span class="comment"> * @param cloud 输入cloud</span></span><br><span class="line"><span class="comment"> * @return 是否转换成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">convertMatToPcl</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; xyzDepth, pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr &amp;cloud)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cv::Mat矩阵的数据类型必须是 CV_32FC3</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">21</span> != xyzDepth.type())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Error in convertMatToPcl().&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;The type of input data(cv::Mat) must be CV_32FC3.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cv::Mat数据大小</span></span><br><span class="line">    <span class="keyword">int</span> depthWidth = xyzDepth.cols;</span><br><span class="line">    <span class="keyword">int</span> depthHeight = xyzDepth.rows;</span><br><span class="line">    cloud-&gt;width = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(depthWidth);</span><br><span class="line">    cloud-&gt;height = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(depthHeight);</span><br><span class="line">    cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">    cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">    pcl::PointXYZ* pt = &amp;cloud-&gt;points[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> iRows = <span class="number">0</span>; iRows &lt; depthHeight; iRows++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> iCols = <span class="number">0</span>; iCols &lt; depthWidth; iCols++, pt++)</span><br><span class="line">        &#123;</span><br><span class="line">            pt-&gt;x = xyzDepth.at&lt;cv::Vec3f&gt;(iRows, iCols)[<span class="number">0</span>];</span><br><span class="line">            pt-&gt;y = xyzDepth.at&lt;cv::Vec3f&gt;(iRows, iCols)[<span class="number">1</span>];</span><br><span class="line">            pt-&gt;z = xyzDepth.at&lt;cv::Vec3f&gt;(iRows, iCols)[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.找到并打开 Azure Kinect 设备*/</span></span><br><span class="line">    <span class="comment">// 发现已连接的设备数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> device_count = k4a::device::get_installed_count();</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == device_count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Error: no K4A devices found. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Found &quot;</span> &lt;&lt; device_count &lt;&lt; <span class="string">&quot; connected devices. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> != device_count)<span class="comment">// 超过1个设备，也输出错误信息。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Error: more than one K4A devices found. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">// 该示例代码仅限对1个设备操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: found 1 K4A device. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打开（默认）设备</span></span><br><span class="line">    k4a::device device = k4a::device::open(K4A_DEVICE_DEFAULT);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: open device. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.配置并启动设备*/</span></span><br><span class="line">    <span class="keyword">k4a_device_configuration_t</span> config = K4A_DEVICE_CONFIG_INIT_DISABLE_ALL;</span><br><span class="line">    config.camera_fps = K4A_FRAMES_PER_SECOND_30;</span><br><span class="line">    config.color_format = K4A_IMAGE_FORMAT_COLOR_BGRA32;</span><br><span class="line">    config.color_resolution = K4A_COLOR_RESOLUTION_1080P;</span><br><span class="line">    <span class="comment">// config.depth_mode = K4A_DEPTH_MODE_NFOV_UNBINNED;</span></span><br><span class="line">    config.depth_mode = K4A_DEPTH_MODE_WFOV_2X2BINNED;</span><br><span class="line">    config.synchronized_images_only = <span class="literal">true</span>;<span class="comment">// ensures that depth and color images are both available in the capture</span></span><br><span class="line">    device.start_cameras(&amp;config);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: start camera.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.稳定化*/</span></span><br><span class="line">    k4a::capture capture;</span><br><span class="line">    <span class="keyword">int</span> iAuto = <span class="number">0</span>;<span class="comment">//用来稳定，类似自动曝光</span></span><br><span class="line">    <span class="keyword">int</span> iAutoError = <span class="number">0</span>;<span class="comment">// 统计自动曝光的失败次数</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (device.get_capture(&amp;capture))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; iAuto &lt;&lt; <span class="string">&quot;. Capture several frames to give auto-exposure&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">// 跳过前 n 个（成功的数据采集）循环，用来稳定</span></span><br><span class="line">            <span class="keyword">if</span> (iAuto != <span class="number">30</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                iAuto++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: auto-exposure&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// 跳出该循环，完成相机的稳定过程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; iAutoError &lt;&lt; <span class="string">&quot;. K4A_WAIT_RESULT_TIMEOUT.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span> (iAutoError != <span class="number">30</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                iAutoError++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Error: failed to give auto-exposure. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----- Have Started Kinect DK. -----&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.从设备获取捕获*/</span></span><br><span class="line">    k4a::image rgbImage;</span><br><span class="line">    k4a::image depthImage;</span><br><span class="line">    k4a::image irImage;</span><br><span class="line"></span><br><span class="line">    cv::Mat cv_rgbImage_with_alpha;</span><br><span class="line">    cv::Mat cv_rgbImage_no_alpha;</span><br><span class="line">    cv::Mat cv_depth;</span><br><span class="line">    cv::Mat cv_depth_8U;</span><br><span class="line">    cv::Mat cv_irImage;</span><br><span class="line">    cv::Mat cv_irImage_8U;</span><br><span class="line">    k4a::calibration k4aCalibration = device.get_calibration(config.depth_mode, config.color_resolution);<span class="comment">// Get the camera calibration for the entire K4A device, which is used for all transformation functions.</span></span><br><span class="line">    k4a::transformation k4aTransformation = k4a::transformation(k4aCalibration);</span><br><span class="line">    k4a::image xyzImage;</span><br><span class="line">    cv::Mat cv_xyzImage;<span class="comment">// 16位有符号</span></span><br><span class="line">    cv::Mat cv_xyzImage_32F;<span class="comment">// 32位float</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (device.get_capture(&amp;capture))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//RGB</span></span><br><span class="line">            rgbImage = capture.get_color_image();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_std_cout == 1</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[rgb] &quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;format: &quot;</span> &lt;&lt; rgbImage.get_format() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;device_timestamp: &quot;</span> &lt;&lt; rgbImage.get_device_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;system_timestamp: &quot;</span> &lt;&lt; rgbImage.get_system_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;height*width: &quot;</span> &lt;&lt; rgbImage.get_height_pixels() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rgbImage.get_width_pixels() </span><br><span class="line">				&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            cv_rgbImage_with_alpha = cv::Mat(rgbImage.get_height_pixels(), rgbImage.get_width_pixels(), CV_8UC4, (<span class="keyword">void</span> *)rgbImage.get_buffer());</span><br><span class="line">            cv::cvtColor(cv_rgbImage_with_alpha, cv_rgbImage_no_alpha, cv::COLOR_BGRA2BGR);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// depth</span></span><br><span class="line">            depthImage = capture.get_depth_image();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_std_cout == 1</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[depth] &quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;format: &quot;</span> &lt;&lt; depthImage.get_format() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;device_timestamp: &quot;</span> &lt;&lt; depthImage.get_device_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;system_timestamp: &quot;</span> &lt;&lt; depthImage.get_system_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;height*width: &quot;</span> &lt;&lt; depthImage.get_height_pixels() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; depthImage.get_width_pixels() </span><br><span class="line">				&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            cv_depth = cv::Mat(depthImage.get_height_pixels(), depthImage.get_width_pixels(), CV_16U, (<span class="keyword">void</span> *)depthImage.get_buffer(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(depthImage.get_stride_bytes()));</span><br><span class="line">            cv_depth.convertTo(cv_depth_8U, CV_8U, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ir</span></span><br><span class="line">            irImage = capture.get_ir_image();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_std_cout == 1</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[ir] &quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;format: &quot;</span> &lt;&lt; irImage.get_format() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;device_timestamp: &quot;</span> &lt;&lt; irImage.get_device_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;system_timestamp: &quot;</span> &lt;&lt; irImage.get_system_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;height*width: &quot;</span> &lt;&lt; irImage.get_height_pixels() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; irImage.get_width_pixels() </span><br><span class="line">				&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            cv_irImage = cv::Mat(irImage.get_height_pixels(), irImage.get_width_pixels(), CV_16U, (<span class="keyword">void</span> *)irImage.get_buffer(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(irImage.get_stride_bytes()));</span><br><span class="line">            cv_irImage.convertTo(cv_irImage_8U, CV_8U, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 点云</span></span><br><span class="line">            xyzImage = k4aTransformation.depth_image_to_point_cloud(depthImage, K4A_CALIBRATION_TYPE_DEPTH);</span><br><span class="line">            cv_xyzImage = cv::Mat(xyzImage.get_height_pixels(), xyzImage.get_width_pixels(), CV_16SC3, (<span class="keyword">void</span> *)xyzImage.get_buffer(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(xyzImage.get_stride_bytes()));</span><br><span class="line">            cv_xyzImage.convertTo(cv_xyzImage_32F, CV_32FC3, <span class="number">1.0</span>/<span class="number">1000</span>, <span class="number">0</span>);<span class="comment">// 转为float，同时将单位从 mm 转换为 m.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// show image</span></span><br><span class="line">            cv::imshow(<span class="string">&quot;color&quot;</span>, cv_rgbImage_no_alpha);</span><br><span class="line">            cv::imshow(<span class="string">&quot;depth&quot;</span>, cv_depth_8U);</span><br><span class="line">            cv::imshow(<span class="string">&quot;ir&quot;</span>, cv_irImage_8U);</span><br><span class="line">            cv::waitKey(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--- test ---&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">//10s后跳出循环</span></span><br><span class="line">            cv::waitKey(<span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;false: K4A_WAIT_RESULT_TIMEOUT.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5.PCL可视化点云*/</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span> </span>;</span><br><span class="line">    <span class="keyword">if</span> (convertMatToPcl(cv_xyzImage_32F,cloud))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; <span class="title">viewer</span> <span class="params">(<span class="keyword">new</span> pcl::visualization::PCLVisualizer (<span class="string">&quot;3D Viewer&quot;</span>))</span></span>;</span><br><span class="line">        viewer-&gt;setBackgroundColor (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        pcl::<span class="function">visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt; <span class="title">single_color</span> <span class="params">(cloud, <span class="number">135</span>,<span class="number">206</span>,<span class="number">250</span>)</span></span>;<span class="comment">//淡蓝色点云</span></span><br><span class="line">        viewer-&gt;addPointCloud&lt;pcl::PointXYZ&gt;(cloud,single_color,<span class="string">&quot;点云&quot;</span>);</span><br><span class="line">        <span class="comment">//viewer-&gt;setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE,1,&quot;sdf&quot;);</span></span><br><span class="line">        viewer-&gt;addCoordinateSystem(<span class="number">0.1</span>);</span><br><span class="line">        viewer-&gt;initCameraParameters();</span><br><span class="line">        <span class="keyword">while</span>(!viewer-&gt;wasStopped())</span><br><span class="line">        &#123;</span><br><span class="line">            viewer-&gt;spinOnce(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">//boost::this_thread::sleep(boost::posix_time::microseconds(100000));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6.清场*/</span></span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    k4aTransformation.destroy();</span><br><span class="line">    rgbImage.reset();</span><br><span class="line">    depthImage.reset();</span><br><span class="line">    irImage.reset();</span><br><span class="line">    capture.reset();</span><br><span class="line">    device.close();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------- closed -------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(AzureKinect_01)</span><br><span class="line"><span class="keyword">add_definitions</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(k4a REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(PCL REQUIRED)</span><br><span class="line"><span class="keyword">if</span> (OpenCV_FOUND <span class="keyword">AND</span> k4a_FOUND <span class="keyword">AND</span> PCL_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;opencv library has found\n&quot;</span>)</span><br><span class="line">    <span class="keyword">include_directories</span>(</span><br><span class="line">            <span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span></span><br><span class="line">            <span class="variable">$&#123;k4a_INCLUDE_DIRS&#125;</span></span><br><span class="line">            <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">    <span class="keyword">add_executable</span>(AK main.cpp)</span><br><span class="line">    <span class="keyword">target_link_libraries</span>(AK</span><br><span class="line">            <span class="variable">$&#123;PCL_LIBRARIES&#125;</span></span><br><span class="line">            k4a::k4a</span><br><span class="line">            <span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>(OpenCV_FOUND <span class="keyword">AND</span> k4a_FOUND <span class="keyword">AND</span> PCL_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;opencv library didn&#x27;t find\n&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span> (OpenCV_FOUND <span class="keyword">AND</span> k4a_FOUND <span class="keyword">AND</span> PCL_FOUND)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>clion输入中文最新解决方法</title>
    <url>/2021/03/01/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E6%9C%80%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CLion-输入中文失效问题解决方法-最新"><a href="#CLion-输入中文失效问题解决方法-最新" class="headerlink" title="CLion 输入中文失效问题解决方法-最新"></a>CLion 输入中文失效问题解决方法-最新</h1><blockquote>
<p>此处参考链接为：</p>
<p><a href="https://blog.csdn.net/u011166277/article/details/106287587">https://blog.csdn.net/u011166277/article/details/106287587</a></p>
<p><a href="https://bbs.archlinuxcn.org/viewtopic.php?id=10529&amp;p=1">https://bbs.archlinuxcn.org/viewtopic.php?id=10529&amp;p=1</a></p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Linux系统上，使用JetBrains的IDE，会出现输入中文的时候，搜狗输入法的候选词框一直停留在左下角，不会跟随光标移动</p>
<h2 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h2><p>具体问题官方其实七年前就有了（参考<a href="https://youtrack.jetbrains.com/issue/JBR-2460），但是比较坑的是官方也一直没有解决这个问题；">https://youtrack.jetbrains.com/issue/JBR-2460），但是比较坑的是官方也一直没有解决这个问题；</a></p>
<p>简单来说就是<code>Idea</code>的<code>jre</code>运行环境一个bug，导致输入法无法定位到鼠标位置。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>由于其问题根源在于源码，所以需要重新编译才能获得比较好的使用体验；其中解决方法1能够较好的解决问题，但是特别费事，困难重重；解决方法2比较简单，但是使用体验并不是很好。</p>
<p>解决方案1的成品链接：</p>
<p>链接: <a href="https://pan.baidu.com/s/1KGRDCcFa0gLw-xQAa8cvaw">https://pan.baidu.com/s/1KGRDCcFa0gLw-xQAa8cvaw</a>  密码: rm38</p>
<h3 id="1-重新编译JetBRainsRuntime"><a href="#1-重新编译JetBRainsRuntime" class="headerlink" title="1.重新编译JetBRainsRuntime"></a>1.重新编译<code>JetBRainsRuntime</code></h3><ol>
<li><p>下载JetBainsRuntime</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;JetBrainsRuntime.git</span><br></pre></td></tr></table></figure></li>
<li><p>下载patch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;prehonor&#x2F;myJetBrainsRuntime.git</span><br></pre></td></tr></table></figure></li>
<li><p>应用patch</p>
<p>将下载的idea.patch文件，复制到JetBrainsRuntime目录下；</p>
<p>之后输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout cfc3e87f2ac27a0b8c78c729c113aa52535feff6</span><br><span class="line">git apply idea.patch</span><br></pre></td></tr></table></figure></li>
<li><p>编译</p>
<p>以Ubuntu为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autoconf make build-essential libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev libxrandr-dev libcups2-dev libfontconfig1-dev libasound2-dev</span><br><span class="line">cd JetBrainsRuntime</span><br><span class="line">sh .&#x2F;configure --disable-warnings-as-errors</span><br><span class="line"> make images</span><br></pre></td></tr></table></figure></li>
<li><p>更改IDE的启动环境</p>
<p>此处与其他教程有个别不同，以上面的参考教程为例，此处给出的步骤为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 文件: home&#x2F;idea-2020.1&#x2F;bin&#x2F;idea.sh (找到你自己的idea的安装路径)</span><br><span class="line">在文件开头添加</span><br><span class="line">export IDEA_JDK&#x3D;&#x2F;home&#x2F;prehonor&#x2F;gitproject&#x2F;JetBrainsRuntime&#x2F;build&#x2F;linux-x86_64-normal-server-release&#x2F;images&#x2F;jdk (改成你自己的编译的jdk所在目录)</span><br></pre></td></tr></table></figure>
<p>我使用的方法是在clion中安装插件choose runtime；将路径设置为编译好的JDK；详细使用步骤参考另一篇文章，链接如下：<a href="https://junlu.club/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/">https://junlu.club/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</a></p>
</li>
</ol>
<h3 id="2-修改搜狗输入法设置，使其不跟随光标移动"><a href="#2-修改搜狗输入法设置，使其不跟随光标移动" class="headerlink" title="2.修改搜狗输入法设置，使其不跟随光标移动"></a>2.修改搜狗输入法设置，使其不跟随光标移动</h3><p>这个解决方案特别简单，只需要在设置界面取消勾选跟随光标移动即可，将搜索候选词框放置在屏幕中间，能够解决部分问题；个人更推荐第一种解决方法。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-JDK版本问题"><a href="#1-JDK版本问题" class="headerlink" title="1. JDK版本问题"></a>1. JDK版本问题</h3><p>编译过程中，需要我使用jdk11的版本，安装命令如下：（参考链接：<a href="https://wxnacy.com/2018/12/26/ubuntu-install-jdk11/）">https://wxnacy.com/2018/12/26/ubuntu-install-jdk11/）</a></p>
<p>首先我们使用 <code>apt</code> 进行搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt search openjdk</span><br></pre></td></tr></table></figure>
<p>如果你的系统版本足够新，比如 18.04 LTS，那么很有可能搜索出这样的条目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openjdk-11-jdk&#x2F;bionic-updates,bionic-security,now 10.0.2+13-1ubuntu0.18.04.4 amd64 [installed,automatic]</span><br><span class="line">  OpenJDK Development Kit (JDK)</span><br></pre></td></tr></table></figure>
<p>这代表软件源已经更新了 Java 11，这样直接安装默认版本即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install -y default-jdk</span><br></pre></td></tr></table></figure>
<h3 id="2-dpkg处理软件包的问题"><a href="#2-dpkg处理软件包的问题" class="headerlink" title="2. dpkg处理软件包的问题"></a>2. dpkg处理软件包的问题</h3><p>参考链接：<a href="https://www.qingsword.com/qing/ubuntu-dpkg-configure-error.html">https://www.qingsword.com/qing/ubuntu-dpkg-configure-error.html</a></p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1.重命名dpkg目录下的info目录</span><br><span class="line"> sudo mv &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info_qingsword</span><br><span class="line">#2.创建一个新的info文件夹</span><br><span class="line">sudo mkdir &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info</span><br><span class="line">#3.执行更新操作</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get -f install</span><br><span class="line">#4.将更新操作产生的文件，全部复制到重命名的info_qingsword文件夹下</span><br><span class="line">sudo mv &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info&#x2F;* &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info_qingsword</span><br><span class="line">#5.删除创建的info文件夹</span><br><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info</span><br><span class="line">#6.将重命名的info_qingsword文件夹重新重命名为info</span><br><span class="line">sudo mv &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info_qingsword &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info</span><br><span class="line">#7.再次执行更新操作，问题解决</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>clion</tag>
        <tag>搜狗输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>工业机器人课程大作业</title>
    <url>/2021/01/28/%E5%B7%A5%E4%B8%9A%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工业机器人技术与应用课程报告"><a href="#工业机器人技术与应用课程报告" class="headerlink" title="工业机器人技术与应用课程报告"></a>工业机器人技术与应用课程报告</h1><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h2><p><strong>作业要求</strong>：对KUKA KR210型工业机器人进行运动学（包括DH参数及挠度参数）校准，并测试校准后机器人位姿精度。</p>
<p><strong>编程环境：</strong>MATLAB R2019a</p>
<p><strong>章节安排：</strong>第二节至第四节为实现过程</p>
<h2 id="2-获取末端实际位姿"><a href="#2-获取末端实际位姿" class="headerlink" title="2. 获取末端实际位姿"></a>2. 获取末端实际位姿</h2><p>由于条件原因缺少真实的KUKA210进行实际实验，因此需要采用仿真的方法获取机器人末端的实际位姿，实现思路是建立机器人运动学正解，将真实误差参数补偿进理论运动学模型，通过随机采样获取多组机器人末端实际位姿数据。</p>
<h3 id="2-1-机器人正解"><a href="#2-1-机器人正解" class="headerlink" title="2.1 机器人正解"></a>2.1 机器人正解</h3><p>建立机器人正解的过程如下：</p>
<p>首先，建立理论DH参数表与真实误差参数表，代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line"><span class="comment">%% 建立DH与误差表</span></span><br><span class="line">DH = [<span class="built_in">pi</span>,   <span class="number">0.675</span>,  <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pi</span>/<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0.35</span>,       <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">1.15</span>,       <span class="number">0</span>;</span><br><span class="line">    -<span class="built_in">pi</span>/<span class="number">2</span>,  <span class="number">0</span>,      <span class="built_in">pi</span>/<span class="number">2</span>,   <span class="number">0.041</span>,      <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pi</span>/<span class="number">2</span>,   <span class="number">-1.2</span>    <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span>;</span><br><span class="line">    -<span class="built_in">pi</span>/<span class="number">2</span>,  <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pi</span>,     <span class="number">-0.215</span>, <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span></span><br><span class="line">    ];</span><br><span class="line"><span class="comment">%alpha d theta a beta</span></span><br><span class="line">delta = [    <span class="number">0.00003</span>*<span class="built_in">pi</span>/<span class="number">180</span>,     <span class="number">-1.03</span>*<span class="number">0.001</span>,        <span class="number">-0.02</span>*<span class="built_in">pi</span>/<span class="number">180</span>,  <span class="number">-0.7</span>*<span class="number">0.001</span>,   <span class="number">0</span>;</span><br><span class="line">             <span class="number">0.002</span>*<span class="built_in">pi</span>/<span class="number">180</span>,       <span class="number">-0.15</span>*<span class="number">0.001</span>,        <span class="number">0</span>,             <span class="number">-0.4</span>*<span class="number">0.001</span>, <span class="number">0.3</span>*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">              <span class="number">0.08</span>*<span class="built_in">pi</span>/<span class="number">180</span>,        <span class="number">-0.006</span>*<span class="number">0.001</span>,       <span class="number">0</span>,            <span class="number">0.5</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">              <span class="number">-0.08</span>*<span class="built_in">pi</span>/<span class="number">180</span>,       <span class="number">-0.1</span>*<span class="number">0.001</span>,         <span class="number">0.3</span>*<span class="built_in">pi</span>/<span class="number">180</span>,   <span class="number">0.5</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">             <span class="number">0.05</span>*<span class="built_in">pi</span>/<span class="number">180</span>,        <span class="number">0.0003</span>*<span class="number">0.001</span>,       <span class="number">0.02</span>*<span class="built_in">pi</span>/<span class="number">180</span>,  <span class="number">-0.1</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">             <span class="number">-0.06</span>*<span class="built_in">pi</span>/<span class="number">180</span>,       <span class="number">0.05</span>*<span class="number">0.001</span>,         <span class="number">-0.6</span>*<span class="built_in">pi</span>/<span class="number">180</span>,  <span class="number">-0.2</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>其次，按照==公式1==，分别建立6个连杆之间的转换关系</p>
<script type="math/tex; mode=display">
\begin{aligned}
T_{i} &=\operatorname{Rot}\left(z, \theta_{i}\right) \cdot \operatorname{Trans}\left(0,0, d_{i}\right) \cdot \operatorname{Trans}\left(a_{i}, 0,0\right) \cdot \operatorname{Rot}\left(x, \alpha_{i}\right) \cdot \operatorname{Rot}\left(y, \beta_{i}\right) \\
&=\left[\begin{array}{cccc}
\mathrm{c} \theta_{i} \mathrm{c} \beta_{i}-\mathrm{s} \theta_{i} \mathrm{~s} \alpha_{i} \mathrm{~s} \beta_{i} & -\mathrm{s} \theta_{i} \mathrm{c} \alpha_{i} & \mathrm{c} \theta_{i} \mathrm{~s} \beta_{i}+\mathrm{s} \theta_{i} \mathrm{~s} \alpha_{i} \mathrm{c} \beta_{i} & a_{i} \mathrm{c} \theta_{i} \\
\mathrm{~s} \theta_{i} \mathrm{c} \beta_{i}+\mathrm{s} \alpha_{i} \mathrm{c} \theta_{i} \mathrm{~s} \beta_{i} & \mathrm{c} \theta_{i} \mathrm{c} \alpha_{i} & \mathrm{~s} \theta_{i} \mathrm{~s} \beta_{i}-\mathrm{s} \alpha_{i} \mathrm{c} \theta_{i} \mathrm{c} \beta_{i} & a_{i} \mathrm{~s} \theta_{i} \\
-\mathrm{c} \alpha_{i} \mathrm{~s} \beta_{i} & \mathrm{~s} \alpha_{i} & \mathrm{c} \alpha_{i} \mathrm{c} \beta_{i} & d_{i} \\
0 & 0 & 0 & 1
\end{array}\right]
\end{aligned}
\tag{公式1}</script><p>代码实现如下所示：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[T]</span> = <span class="title">T_itoiplus1</span><span class="params">(alpha,d,theta,a,beta)</span></span></span><br><span class="line"><span class="comment">%连杆转换关系实现函数</span></span><br><span class="line">T = [</span><br><span class="line"><span class="built_in">cos</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>) - <span class="built_in">sin</span>(alpha)*<span class="built_in">sin</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>),     -<span class="built_in">cos</span>(alpha)*<span class="built_in">sin</span>(theta),     <span class="built_in">cos</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>)+<span class="built_in">sin</span>(alpha)*<span class="built_in">sin</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>),       a*<span class="built_in">cos</span>(theta);</span><br><span class="line"><span class="built_in">sin</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>) + <span class="built_in">sin</span>(alpha)*<span class="built_in">cos</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>),     <span class="built_in">cos</span>(alpha)*<span class="built_in">cos</span>(theta),      <span class="built_in">sin</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>)-<span class="built_in">sin</span>(alpha)*<span class="built_in">cos</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>),       a*<span class="built_in">sin</span>(theta);</span><br><span class="line">-<span class="built_in">cos</span>(alpha)*<span class="built_in">sin</span>(<span class="built_in">beta</span>),  <span class="built_in">sin</span>(alpha), <span class="built_in">cos</span>(alpha)*<span class="built_in">cos</span>(<span class="built_in">beta</span>), d;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>之后，将理论DH参数表代入==公式1==中，并将转换矩阵连乘，得到机器人末端相对于机器人基坐标系的转换关系，根据此转换关系，在分别指定6个关节角度的前提下，可以得到当机器人末端相对于基坐标系的位姿。代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[pos]</span> = <span class="title">Positive</span><span class="params">(theta,dh)</span></span></span><br><span class="line"><span class="comment">%正解</span></span><br><span class="line">T1 = T_itoiplus1(dh(<span class="number">1</span>,<span class="number">1</span>),dh(<span class="number">1</span>,<span class="number">2</span>),theta(<span class="number">1</span>)+dh(<span class="number">1</span>,<span class="number">3</span>),dh(<span class="number">1</span>,<span class="number">4</span>),dh(<span class="number">1</span>,<span class="number">5</span>));</span><br><span class="line">T2 = T_itoiplus1(dh(<span class="number">2</span>,<span class="number">1</span>),dh(<span class="number">2</span>,<span class="number">2</span>),theta(<span class="number">2</span>)+dh(<span class="number">2</span>,<span class="number">3</span>),dh(<span class="number">2</span>,<span class="number">4</span>),dh(<span class="number">2</span>,<span class="number">5</span>));</span><br><span class="line">T3 = T_itoiplus1(dh(<span class="number">3</span>,<span class="number">1</span>),dh(<span class="number">3</span>,<span class="number">2</span>),theta(<span class="number">3</span>)+dh(<span class="number">3</span>,<span class="number">3</span>),dh(<span class="number">3</span>,<span class="number">4</span>),dh(<span class="number">3</span>,<span class="number">5</span>));</span><br><span class="line">T4 = T_itoiplus1(dh(<span class="number">4</span>,<span class="number">1</span>),dh(<span class="number">4</span>,<span class="number">2</span>),theta(<span class="number">4</span>)+dh(<span class="number">4</span>,<span class="number">3</span>),dh(<span class="number">4</span>,<span class="number">4</span>),dh(<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">T5 = T_itoiplus1(dh(<span class="number">5</span>,<span class="number">1</span>),dh(<span class="number">5</span>,<span class="number">2</span>),theta(<span class="number">5</span>)+dh(<span class="number">5</span>,<span class="number">3</span>),dh(<span class="number">5</span>,<span class="number">4</span>),dh(<span class="number">5</span>,<span class="number">5</span>));</span><br><span class="line">T6 = T_itoiplus1(dh(<span class="number">6</span>,<span class="number">1</span>),dh(<span class="number">6</span>,<span class="number">2</span>),theta(<span class="number">6</span>)+dh(<span class="number">6</span>,<span class="number">3</span>),dh(<span class="number">6</span>,<span class="number">4</span>),dh(<span class="number">6</span>,<span class="number">5</span>));</span><br><span class="line">T7 = T_itoiplus1(dh(<span class="number">7</span>,<span class="number">1</span>),dh(<span class="number">7</span>,<span class="number">2</span>),dh(<span class="number">7</span>,<span class="number">3</span>),dh(<span class="number">7</span>,<span class="number">4</span>),dh(<span class="number">7</span>,<span class="number">5</span>));</span><br><span class="line">T = T1*T2*T3*T4*T5*T6*T7;</span><br><span class="line">pos(<span class="number">1</span>) = T(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">pos(<span class="number">2</span>) = T(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">pos(<span class="number">3</span>) = T(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">pos(<span class="number">4</span>) = <span class="built_in">atan2</span>(T(<span class="number">2</span>,<span class="number">1</span>),T(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">pos(<span class="number">5</span>) = <span class="built_in">atan2</span>(-T(<span class="number">3</span>,<span class="number">1</span>),<span class="built_in">sqrt</span>(T(<span class="number">1</span>,<span class="number">1</span>)*T(<span class="number">1</span>,<span class="number">1</span>)+T(<span class="number">2</span>,<span class="number">1</span>)*T(<span class="number">2</span>,<span class="number">1</span>)));</span><br><span class="line">pos(<span class="number">6</span>) = <span class="built_in">atan2</span>(T(<span class="number">3</span>,<span class="number">2</span>),T(<span class="number">3</span>,<span class="number">3</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(pos(<span class="number">5</span>)*<span class="number">180</span>/<span class="built_in">pi</span><span class="number">-90</span>)&lt;<span class="number">0.01</span>)</span><br><span class="line">    pos(<span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">    pos(<span class="number">5</span>) = <span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line">    pos(<span class="number">6</span>) = <span class="built_in">atan2</span>(T(<span class="number">1</span>,<span class="number">2</span>),T(<span class="number">2</span>,<span class="number">2</span>));   </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(pos(<span class="number">5</span>)*<span class="number">180</span>/<span class="built_in">pi</span>+<span class="number">90</span>)&lt;<span class="number">0.01</span>)</span><br><span class="line">    pos(<span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">    pos(<span class="number">5</span>) = -<span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line">    pos(<span class="number">6</span>) = -<span class="built_in">atan2</span>(T(<span class="number">1</span>,<span class="number">2</span>),T(<span class="number">2</span>,<span class="number">2</span>)); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>为验证上述过程的正确性，将6个分别为0;0;-pi/2;pi/2;0;0关节角度代入上述过程，与机器人理论外形对比，经过验证后发现，正解模型正确；求解出的末端位姿与机器人实际外形数据如下所示：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128112817.png" alt=""></p>
<p>图1：根据正解模型求解出的末端位姿</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128112906.png" alt=""></p>
<p>图2：真实的KUKA210参数</p>
<h3 id="2-2-采样获取实际位姿"><a href="#2-2-采样获取实际位姿" class="headerlink" title="2.2 采样获取实际位姿"></a>2.2 采样获取实际位姿</h3><p>在正解模型正确的前提下，为获取实际机器人的末端位姿，采用仿真的手段，将误差参数补偿进DH参数中，并随机采样100个点，得到100组机器人末端位姿数据，为后续的参数辨识及绝对定位误差比较环节提供数据基础。</p>
<p>与2.1节过程同理，将误差参数表与理论DH表相加，得到新的DH表，并代入正解模型中，得到的机器人末端位姿数据可以看做是由实际的机器人的实验数据；</p>
<p>其次，利用随机数生成6*100组随机数据，分布在0-30度之间，代表了100组不同的关节角度集合，输入实际正解模型中得到100组不同的末端位姿数据；</p>
<p>然后，将100组随机数也同样输入理论正解模型中，得到100组末端位姿的理论值；</p>
<p>最后，将理论值与实际值比较，可以得出下图所示的绝对定位误差图</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128114533.png" alt=""></p>
<p>此图为实际的末端位姿与理论的末端位姿之间的误差图，此图将作为判断后续参数辨识环节是否正确的主要依据，如将辨识后的参数输入正解模型，与理论值之间产生的误差与此图不符，则可以判断出参数辨识出错，若完全重合，则说明误差参数辨识正确。</p>
<p>此环节代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 100组数据随机走</span></span><br><span class="line">theta =[<span class="number">0</span>;<span class="number">0</span>;-<span class="built_in">pi</span>/<span class="number">2</span>;<span class="built_in">pi</span>/<span class="number">2</span>;<span class="number">0</span>;<span class="number">0</span>];</span><br><span class="line">DHpos = Positive(theta,DH);</span><br><span class="line">newDH = DH+[delta;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">newPos = Positive(theta,newDH);</span><br><span class="line">err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">x_err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">y_err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">z_err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">delta_p = <span class="built_in">zeros</span>(<span class="number">300</span>,<span class="number">1</span>);</span><br><span class="line">r = randi(<span class="number">30</span>,<span class="number">100</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">100</span></span><br><span class="line">    theta = r(<span class="built_in">i</span>,:);</span><br><span class="line">    pos = Positive(theta,DH);</span><br><span class="line">    newPos = Positive(theta,newDH);</span><br><span class="line">    err(<span class="number">1</span>,<span class="built_in">i</span>) = <span class="built_in">sqrt</span>(power(newPos(<span class="number">1</span>,<span class="number">1</span>)-pos(<span class="number">1</span>,<span class="number">1</span>),<span class="number">2</span>)+power(newPos(<span class="number">1</span>,<span class="number">2</span>)-pos(<span class="number">1</span>,<span class="number">2</span>),<span class="number">2</span>)+power(newPos(<span class="number">1</span>,<span class="number">3</span>)-pos(<span class="number">1</span>,<span class="number">3</span>),<span class="number">2</span>));</span><br><span class="line">    delta_p((<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">3</span>+<span class="number">1</span>,<span class="number">1</span>) = newPos(<span class="number">1</span>,<span class="number">1</span>)-pos(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    delta_p((<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">3</span>+<span class="number">2</span>,<span class="number">1</span>) = newPos(<span class="number">1</span>,<span class="number">2</span>)-pos(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    delta_p((<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">3</span>+<span class="number">3</span>,<span class="number">1</span>) = newPos(<span class="number">1</span>,<span class="number">3</span>)-pos(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    x_err(<span class="number">1</span>,<span class="built_in">i</span>) = newPos(<span class="number">1</span>,<span class="number">1</span>)-pos(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    y_err(<span class="number">1</span>,<span class="built_in">i</span>) = newPos(<span class="number">1</span>,<span class="number">2</span>)-pos(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    z_err(<span class="number">1</span>,<span class="built_in">i</span>) = newPos(<span class="number">1</span>,<span class="number">3</span>)-pos(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="3-参数辨识"><a href="#3-参数辨识" class="headerlink" title="3. 参数辨识"></a>3. 参数辨识</h2><p>误差参数辨识的主要任务在于，根据机器人的定位误差，迭代求解机器人各个连杆的参数误差，实现机器人实际运动学参数的标定。</p>
<p>考虑使用机器人的位置误差进行机器人运动学参数的标定，设机器人末端的理论位置是$p$，其位置误差记为$Δp$，有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta \boldsymbol{p} &=\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{\theta}} \Delta \boldsymbol{\theta}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{d}} \Delta \boldsymbol{d}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{a}} \Delta \boldsymbol{a}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{\alpha}} \Delta \boldsymbol{\alpha}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{\beta}} \Delta \boldsymbol{\beta} \\
&=\boldsymbol{J}_{\theta} \Delta \boldsymbol{\theta}+\boldsymbol{J}_{d} \Delta \boldsymbol{d}+\boldsymbol{J}_{a} \Delta \boldsymbol{a}+\boldsymbol{J}_{\alpha} \Delta \boldsymbol{\alpha}+\boldsymbol{J}_{\beta} \Delta \boldsymbol{\beta}
\end{aligned}
\tag{公式2}</script><p>式中，$J<em>{\theta}$、$Jd$、$Ja$、$J</em>{\alpha}$和$J_{\beta}$ 是由机器人理论运动学参数构成的$3 * n$ 矩阵：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{J}_{\theta} &=\left[\begin{array}{llll}
\partial \boldsymbol{p}_{/ \partial \theta_{1}} & \partial \boldsymbol{p}_{/ \partial \theta_{2}} & \cdots & \partial \boldsymbol{p}_{/ \partial \theta_{n}}
\end{array}\right] \\
\boldsymbol{J}_{d} &=\left[\begin{array}{lll}
\partial \boldsymbol{p}_{/ \partial d_{1}} & \partial \boldsymbol{p}_{/ \partial d_{2}} & \cdots & \partial \boldsymbol{p} / \partial d_{n}
\end{array}\right] \\
\boldsymbol{J}_{a} &=\left[\begin{array}{lll}
\partial \boldsymbol{p} / \partial a_{1} & \partial \boldsymbol{p}_{/ \partial a_{2}} & \cdots & \partial \boldsymbol{p} / \partial a_{n}
\end{array}\right] \\
\boldsymbol{J}_{\alpha} &=\left[\begin{array}{lll}
\partial \boldsymbol{p} / \partial \alpha_{1} & \partial \boldsymbol{p} / \partial \alpha_{2} & \cdots & \partial \boldsymbol{p} / \partial \alpha_{n}
\end{array}\right] \\
\boldsymbol{J}_{\beta} &=\left[\begin{array}{ll}
\partial \boldsymbol{p}_{/ \partial \beta_{1}} & \partial \boldsymbol{p}_{/ \partial \beta_{2}} & \cdots & \partial \boldsymbol{p}_{/ \partial \beta_{n}}
\end{array}\right]
\end{aligned}</script><p>若测量了$m$ 组机器人的定位误差，由==公式2==可以得到：</p>
<script type="math/tex; mode=display">
\left[\begin{array}{c}
\Delta \boldsymbol{p}^{(1)} \\
\Delta \boldsymbol{p}^{(2)} \\
\vdots \\
\Delta \boldsymbol{p}^{(m)}
\end{array}\right]=\left[\begin{array}{ccccc}
\boldsymbol{J}_{\theta}^{(1)} & \boldsymbol{J}_{d}^{(1)} & \boldsymbol{J}_{a}^{(1)} & \boldsymbol{J}_{\alpha}^{(1)} & \boldsymbol{J}_{\beta}^{(1)} \\
\boldsymbol{J}_{\theta}^{(2)} & \boldsymbol{J}_{d}^{(2)} & \boldsymbol{J}_{a}^{(2)} & \boldsymbol{J}_{\alpha}^{(2)} & \boldsymbol{J}_{\beta}^{(2)} \\
\vdots & \vdots & \vdots & \vdots & \vdots \\
\boldsymbol{J}_{\theta}^{(m)} & \boldsymbol{J}_{d}^{(m)} & \boldsymbol{J}_{a}^{(m)} & \boldsymbol{J}_{\alpha}^{(m)} & \boldsymbol{J}_{\beta}^{(m)}
\end{array}\right]\left[\begin{array}{c}
\Delta \boldsymbol{\theta} \\
\Delta \boldsymbol{d} \\
\Delta \boldsymbol{a} \\
\Delta \boldsymbol{\alpha} \\
\Delta \boldsymbol{\beta}
\end{array}\right]</script><p>上式可以写成：$\Delta \boldsymbol{P}=\boldsymbol{J} \cdot \Delta \boldsymbol{\rho}$</p>
<p>其中，$Δ\rho$ 是由机器人各连杆参数误差所构成的列向量。</p>
<p>这样，机器人运动学参数误差辨识问题就被化为形如$Ax = b$ 的线性方程组的求解问题；</p>
<p>使用Levenberg-Marquardt 算法进行迭代求解，其第k 步迭代过程如下：</p>
<ul>
<li>根据机器人各连杆参数计算矩阵$J({\rho}_k)$；</li>
<li>根据下式计算机器人各连杆参数误差$Δ\rho_k$：</li>
</ul>
<script type="math/tex; mode=display">
\Delta \boldsymbol{\rho}_{k}=-\left[\boldsymbol{J}\left(\boldsymbol{\rho}_{k}\right)^{\top} \boldsymbol{J}\left(\boldsymbol{\rho}_{k}\right)+\mu_{k} \boldsymbol{I}\right]^{-1} \boldsymbol{J}\left(\boldsymbol{\rho}_{k}\right)^{\top} \Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k}\right)</script><p>其中，$\mu_k$ 是阻尼系数，可以根据下式进行计算：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{l}
\mu_{0}=0.001 \\
\mu_{k+1}=\left\{\begin{array}{ll}
0.001 \lambda & \left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k+1}\right)\right\| \geq\left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k}\right)\right\| \\
0.001 / \lambda & \left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k+1}\right)\right\|<\left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k}\right)\right\|
\end{array}\right. \\
2.5<\lambda<10
\end{array}\right.</script><ul>
<li><p>利用$\rho<em>{k+1}=\rho</em>{k}+\Delta \rho_{k}$更新机器人各连杆参数。</p>
</li>
<li><p>重复上述步骤，即可得到机器人各连杆参数的误差。</p>
</li>
</ul>
<p>代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 求解方程系数</span></span><br><span class="line">syms theta1 theta2 theta3 theta4 theta5 theta6;</span><br><span class="line">syms d1 d2 d3 d4 d5 d6;</span><br><span class="line">syms a1 a2 a3 a4 a5 a6;</span><br><span class="line">syms alpha1 alpha2 alpha3 alpha4 alpha5 alpha6;</span><br><span class="line">syms beta1 beta2 beta3 beta4 beta5 beta6;</span><br><span class="line">symstheta = [theta1 theta2 theta3 theta4 theta5 theta6];</span><br><span class="line">symsd = [d1 d2 d3 d4 d5 d6;];</span><br><span class="line">symsa = [a1 a2 a3 a4 a5 a6];</span><br><span class="line">symsalpha = [alpha1 alpha2 alpha3 alpha4 alpha5 alpha6];</span><br><span class="line">symsbeta = [beta1 beta2 beta3 beta4 beta5 beta6];</span><br><span class="line">J = <span class="built_in">zeros</span>(<span class="number">300</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">3</span>:<span class="number">300</span></span><br><span class="line">    theta = r((<span class="built_in">i</span><span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>,:);</span><br><span class="line">    item = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">     <span class="comment">%求出j_theta_i</span></span><br><span class="line">    pos_theta = symPostive(symstheta,item,item,item,item,DH);</span><br><span class="line">    a_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta1&#x27;</span>),symstheta,theta));</span><br><span class="line">    b_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta2&#x27;</span>),symstheta,theta));</span><br><span class="line">    c_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta3&#x27;</span>),symstheta,theta));</span><br><span class="line">    d_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta4&#x27;</span>),symstheta,theta));</span><br><span class="line">    e_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta5&#x27;</span>),symstheta,theta));</span><br><span class="line">    f_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta6&#x27;</span>),symstheta,theta));</span><br><span class="line">    j_theta_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_theta_i(:,<span class="number">1</span>) = a_theta;</span><br><span class="line">    j_theta_i(:,<span class="number">2</span>) = b_theta;</span><br><span class="line">    j_theta_i(:,<span class="number">3</span>) = c_theta;</span><br><span class="line">    j_theta_i(:,<span class="number">4</span>) = d_theta;    </span><br><span class="line">    j_theta_i(:,<span class="number">5</span>) = e_theta;    </span><br><span class="line">    j_theta_i(:,<span class="number">6</span>) = f_theta;    </span><br><span class="line">    <span class="comment">%求j_d_i</span></span><br><span class="line">    pos_d = symPostive(theta,symsd,item,item,item,DH);</span><br><span class="line">    a_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d1&#x27;</span>),symsd,item));</span><br><span class="line">    b_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d2&#x27;</span>),symsd,item));</span><br><span class="line">    c_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d3&#x27;</span>),symsd,item));</span><br><span class="line">    d_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d4&#x27;</span>),symsd,item));</span><br><span class="line">    e_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d5&#x27;</span>),symsd,item));</span><br><span class="line">    f_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d6&#x27;</span>),symsd,item));</span><br><span class="line">    j_d_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_d_i(:,<span class="number">1</span>) = a_d;</span><br><span class="line">    j_d_i(:,<span class="number">2</span>) = b_d;</span><br><span class="line">    j_d_i(:,<span class="number">3</span>) = c_d;</span><br><span class="line">    j_d_i(:,<span class="number">4</span>) = d_d;    </span><br><span class="line">    j_d_i(:,<span class="number">5</span>) = e_d;    </span><br><span class="line">    j_d_i(:,<span class="number">6</span>) = f_d;</span><br><span class="line">    <span class="comment">%求j_a_i</span></span><br><span class="line">    pos_a = symPostive(theta,item,symsa,item,item,DH);</span><br><span class="line">    a_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a1&#x27;</span>),symsa,item));</span><br><span class="line">    b_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a2&#x27;</span>),symsa,item));</span><br><span class="line">    c_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a3&#x27;</span>),symsa,item));</span><br><span class="line">    d_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a4&#x27;</span>),symsa,item));</span><br><span class="line">    e_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a5&#x27;</span>),symsa,item));</span><br><span class="line">    f_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a6&#x27;</span>),symsa,item));</span><br><span class="line">    j_a_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_a_i(:,<span class="number">1</span>) = a_a;</span><br><span class="line">    j_a_i(:,<span class="number">2</span>) = b_a;</span><br><span class="line">    j_a_i(:,<span class="number">3</span>) = c_a;</span><br><span class="line">    j_a_i(:,<span class="number">4</span>) = d_a;    </span><br><span class="line">    j_a_i(:,<span class="number">5</span>) = e_a;    </span><br><span class="line">    j_a_i(:,<span class="number">6</span>) = f_a;</span><br><span class="line">    <span class="comment">%求j_alpha_i</span></span><br><span class="line">    pos_alpha = symPostive(theta,item,item,symsalpha,item,DH);</span><br><span class="line">    a_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha1&#x27;</span>),symsalpha,item));</span><br><span class="line">    b_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha2&#x27;</span>),symsalpha,item));</span><br><span class="line">    c_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha3&#x27;</span>),symsalpha,item));</span><br><span class="line">    d_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha4&#x27;</span>),symsalpha,item));</span><br><span class="line">    e_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha5&#x27;</span>),symsalpha,item));</span><br><span class="line">    f_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha6&#x27;</span>),symsalpha,item));</span><br><span class="line">    j_alpha_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_alpha_i(:,<span class="number">1</span>) = a_alpha;</span><br><span class="line">    j_alpha_i(:,<span class="number">2</span>) = b_alpha;</span><br><span class="line">    j_alpha_i(:,<span class="number">3</span>) = c_alpha;</span><br><span class="line">    j_alpha_i(:,<span class="number">4</span>) = d_alpha;    </span><br><span class="line">    j_alpha_i(:,<span class="number">5</span>) = e_alpha;    </span><br><span class="line">    j_alpha_i(:,<span class="number">6</span>) = f_alpha;</span><br><span class="line">    <span class="comment">%求j_beta_i</span></span><br><span class="line">    pos_beta = symPostive(theta,item,item,item,symsbeta,DH);</span><br><span class="line">    a_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta1&#x27;</span>),symsbeta,item));</span><br><span class="line">    b_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta2&#x27;</span>),symsbeta,item));</span><br><span class="line">    c_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta3&#x27;</span>),symsbeta,item));</span><br><span class="line">    d_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta4&#x27;</span>),symsbeta,item));</span><br><span class="line">    e_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta5&#x27;</span>),symsbeta,item));</span><br><span class="line">    f_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta6&#x27;</span>),symsbeta,item));</span><br><span class="line">    j_beta_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_beta_i(:,<span class="number">1</span>) = a_beta;</span><br><span class="line">    j_beta_i(:,<span class="number">2</span>) = b_beta;</span><br><span class="line">    j_beta_i(:,<span class="number">3</span>) = c_beta;</span><br><span class="line">    j_beta_i(:,<span class="number">4</span>) = d_beta;    </span><br><span class="line">    j_beta_i(:,<span class="number">5</span>) = e_beta;    </span><br><span class="line">    j_beta_i(:,<span class="number">6</span>) = f_beta;</span><br><span class="line">    <span class="comment">%放到J中</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_theta_i(<span class="number">1</span>,<span class="built_in">j</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_theta_i(<span class="number">2</span>,<span class="built_in">j</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_theta_i(<span class="number">3</span>,<span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">7</span>:<span class="number">12</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_d_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">1</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_d_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">1</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_d_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">13</span>:<span class="number">18</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_a_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">2</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_a_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">2</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_a_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">19</span>:<span class="number">24</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_alpha_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">3</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_alpha_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">3</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_alpha_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">25</span>:<span class="number">30</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_beta_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">4</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_beta_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">4</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_beta_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 求解线性方程组</span></span><br><span class="line">delta_pk = -inv(transpose(J)*J+<span class="number">0.001</span>*<span class="built_in">eye</span>(<span class="number">30</span>,<span class="number">30</span>))*transpose(J)*delta_p;</span><br><span class="line"><span class="comment">%delta_p = J\delta_p;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-绝对定位误差比较"><a href="#4-绝对定位误差比较" class="headerlink" title="4. 绝对定位误差比较"></a>4. 绝对定位误差比较</h2><p>将得到的辨识出的误差参数，代入正解模型中，并走100组随机关节角度集合，将理论位姿与实际位姿作比较，得出绝对定位误差；将题目给的真实误差参数代入正解模型中，走同样的100组数据，得出另外一组绝对定位误差，将两组绝对定位误差放在一起比较，如下图所示，可以看出两组绝对定位误差折线完全重合，说明参数辨识正确。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128114105.png" alt=""></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>xml操作</title>
    <url>/2021/01/14/xml%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="XML操作"><a href="#XML操作" class="headerlink" title="XML操作"></a>XML操作</h1><h2 id="XML文本"><a href="#XML文本" class="headerlink" title="XML文本"></a>XML文本</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">skills</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">skill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">lang</span> =<span class="string">&quot;cn&quot;</span>&gt;</span>天下无敌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">damage</span>&gt;</span>123<span class="tag">&lt;/<span class="name">damage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">skill</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">skill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">lang</span> =<span class="string">&quot;cn&quot;</span>&gt;</span>宇宙无敌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">damage</span>&gt;</span>1231<span class="tag">&lt;/<span class="name">damage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">skill</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">skill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>5<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">lang</span> =<span class="string">&quot;cn&quot;</span>&gt;</span>多个平行宇宙无敌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">damage</span>&gt;</span>12331<span class="tag">&lt;/<span class="name">damage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">skill</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">skills</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="对应的解析代码"><a href="#对应的解析代码" class="headerlink" title="对应的解析代码"></a>对应的解析代码</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line">namespace xml操作</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//创建技能信息集合，用来存储所有集合</span></span><br><span class="line">            List&lt;skill&gt; skilllist = <span class="keyword">new</span> List&lt;skill&gt;();</span><br><span class="line">            <span class="comment">//XmlDocument 文档解析类</span></span><br><span class="line">            XmlDocument xmldoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//xmldoc.Load(&quot;TextFile1.txt&quot;);//选择要加载解析的xml文档</span></span><br><span class="line">            xmldoc.LoadXml(File.ReadAllText(<span class="string">&quot;TextFile1.txt&quot;</span>));<span class="comment">//同上</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到根节点</span></span><br><span class="line">            XmlNode rootNode = xmldoc.FirstChild;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到子节点</span></span><br><span class="line">            XmlNodeList childrenListNode = rootNode.ChildNodes;<span class="comment">//获取根节点下的所有子节点集合</span></span><br><span class="line">            <span class="keyword">foreach</span> (XmlNode skillNode <span class="keyword">in</span> childrenListNode)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//创建skill对象</span></span><br><span class="line">                skill skill = <span class="keyword">new</span> skill();</span><br><span class="line">                XmlNodeList childchildNodeList = skillNode.ChildNodes;<span class="comment">//获取所有的子节点下的子节点</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//遍历子节点的子节点</span></span><br><span class="line">                <span class="keyword">foreach</span> (XmlNode childchildNode <span class="keyword">in</span> childchildNodeList)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//通过name属性可以获取节点属性</span></span><br><span class="line">                    <span class="keyword">if</span> (childchildNode.Name == <span class="string">&quot;id&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        skill.id = <span class="built_in">int</span>.Parse(childchildNode.InnerText);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (childchildNode.Name == <span class="string">&quot;name&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        skill.name = childchildNode.InnerText;</span><br><span class="line">                        skill.lang = childchildNode.Attributes[<span class="number">0</span>].Value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (childchildNode.Name == <span class="string">&quot;damage&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        skill.damage = <span class="built_in">int</span>.Parse(childchildNode.InnerText);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                skill.printSkillValues();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab学习笔记</title>
    <url>/2021/01/11/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Matlab学习笔记"><a href="#Matlab学习笔记" class="headerlink" title="Matlab学习笔记"></a>Matlab学习笔记</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">矩阵格式</span><br><span class="line">x=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">x*y</span><br><span class="line">x.*y</span><br><span class="line">对于矩阵来说是不同的</span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">y = <span class="number">7</span>;</span><br><span class="line">x + y</span><br><span class="line">加分号的话，matlab的命令区不会显示（屏蔽）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C = input(<span class="string">&#x27;please enter a temporary .c :&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fprintf(<span class="string">&#x27;华氏度=%f\n&#x27;</span>,F);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fprintf(<span class="string">&#x27;%g + %g = %g\n&#x27;</span>,x,y,x+y);</span><br><span class="line">&gt;&gt; tutorial2_1</span><br><span class="line">please enter x :<span class="number">8</span></span><br><span class="line">please enter y :<span class="number">9</span></span><br><span class="line"><span class="number">8</span> + <span class="number">9</span> = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% if 格式</span></span><br><span class="line">x=input(<span class="string">&#x27;please enter x :&#x27;</span>);</span><br><span class="line">y=input(<span class="string">&#x27;please enter y :&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">10</span>)</span><br><span class="line">    fprintf(<span class="string">&#x27;%g + %g = %g\n&#x27;</span>,x,y,x+y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    fprintf(<span class="string">&#x27;gg\n&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%取余</span></span><br><span class="line"><span class="built_in">mod</span>(<span class="number">19</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%求最大公约数</span></span><br><span class="line">a= input(<span class="string">&#x27;请输入数字1：&#x27;</span>);</span><br><span class="line">b= input(<span class="string">&#x27;请输入数字2：&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">mod</span>(a,b)~= <span class="number">0</span>)</span><br><span class="line">    a =b;</span><br><span class="line">    b = <span class="built_in">mod</span>(a,b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%矩阵元素遍历</span></span><br><span class="line">v =[<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line">s =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = v</span><br><span class="line">    <span class="built_in">disp</span>(<span class="built_in">i</span>);</span><br><span class="line">    s =s +<span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(s);</span><br><span class="line"><span class="built_in">disp</span>(sum(v));<span class="comment">%matlab自带求和</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">%s是返回值，x,y是传入的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> = <span class="title">Hanshu1</span><span class="params">( x ,y )</span></span></span><br><span class="line">    v =[<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,x,y];</span><br><span class="line">    s =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = v</span><br><span class="line">        <span class="built_in">disp</span>(<span class="built_in">i</span>);</span><br><span class="line">        s =s +<span class="built_in">i</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="built_in">disp</span>(s);</span><br><span class="line">    <span class="built_in">disp</span>(sum(v));<span class="comment">%matlab自带求和</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;blue-o&#x27;</span>,x,y,<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">axis equal</span><br><span class="line"></span><br><span class="line"><span class="comment">%将窗口划分为2*3，在第1个里面画图</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x1 = <span class="number">0</span>:<span class="number">1</span>:<span class="number">10</span>;</span><br><span class="line">x2 = <span class="number">0</span>:<span class="number">1</span>:<span class="number">10</span>;</span><br><span class="line">y1 = x1.*x1;</span><br><span class="line">y2 = <span class="number">10</span>:<span class="number">1</span>:<span class="number">20</span>;</span><br><span class="line"><span class="built_in">plot</span>(x1,y1,<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x2,y2,<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="comment">%添加网格</span></span><br><span class="line">grid on;</span><br><span class="line"><span class="comment">%添加标题</span></span><br><span class="line">title(<span class="string">&#x27;sdfsdfsdf&#x27;</span>);</span><br><span class="line"><span class="comment">%添加标签</span></span><br><span class="line">xlabel(<span class="string">&#x27;sdfsdfsdfsdfs&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;sdfsdddddddddddd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="number">-1</span>:<span class="number">0.1</span>:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">y1 = <span class="built_in">sin</span>(x);</span><br><span class="line">y2 = <span class="built_in">sin</span>(<span class="number">2</span>*x);</span><br><span class="line">y3 = <span class="built_in">sin</span>(<span class="number">3</span>*x);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y1);</span><br><span class="line">title(<span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y2);</span><br><span class="line">title(<span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">plot</span>(x,y3);</span><br><span class="line">title(<span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=<span class="number">-3</span>:<span class="number">0.1</span>:<span class="number">3</span>;</span><br><span class="line">y=<span class="number">-3</span>:<span class="number">0.1</span>:<span class="number">3</span>;</span><br><span class="line">[X,Y] = <span class="built_in">meshgrid</span>(x,y);</span><br><span class="line">Z=X.^<span class="number">2</span>+Y.^<span class="number">2</span>;</span><br><span class="line"><span class="comment">%画曲面</span></span><br><span class="line">surf(X,Y,Z);</span><br></pre></td></tr></table></figure>
<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%eye(3)---&gt;3x3单位矩阵</span></span><br><span class="line"><span class="comment">%ones(3)---&gt;3x3全一矩阵</span></span><br><span class="line">&gt;&gt; <span class="built_in">eye</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">&gt;&gt; <span class="built_in">ones</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 产生行向量</span></span><br><span class="line"><span class="comment">%linspace(a,b,n)</span></span><br><span class="line"><span class="comment">%n缺省时，默认产生100个元素</span></span><br><span class="line"><span class="built_in">linspace</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  <span class="number">1</span> 至 <span class="number">11</span> 列</span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">1.0404</span>    <span class="number">1.0808</span>    <span class="number">1.1212</span>    <span class="number">1.1616</span>    <span class="number">1.2020</span>    <span class="number">1.2424</span>    <span class="number">1.2828</span>    <span class="number">1.3232</span>    <span class="number">1.3636</span>    <span class="number">1.4040</span></span><br><span class="line">  <span class="number">12</span> 至 <span class="number">22</span> 列</span><br><span class="line">    <span class="number">1.4444</span>    <span class="number">1.4848</span>    <span class="number">1.5253</span>    <span class="number">1.5657</span>    <span class="number">1.6061</span>    <span class="number">1.6465</span>    <span class="number">1.6869</span>    <span class="number">1.7273</span>    <span class="number">1.7677</span>    <span class="number">1.8081</span>    <span class="number">1.8485</span></span><br><span class="line">  <span class="number">23</span> 至 <span class="number">33</span> 列</span><br><span class="line">    <span class="number">1.8889</span>    <span class="number">1.9293</span>    <span class="number">1.9697</span>    <span class="number">2.0101</span>    <span class="number">2.0505</span>    <span class="number">2.0909</span>    <span class="number">2.1313</span>    <span class="number">2.1717</span>    <span class="number">2.2121</span>    <span class="number">2.2525</span>    <span class="number">2.2929</span></span><br><span class="line">  <span class="number">34</span> 至 <span class="number">44</span> 列</span><br><span class="line">    <span class="number">2.3333</span>    <span class="number">2.3737</span>    <span class="number">2.4141</span>    <span class="number">2.4545</span>    <span class="number">2.4949</span>    <span class="number">2.5354</span>    <span class="number">2.5758</span>    <span class="number">2.6162</span>    <span class="number">2.6566</span>    <span class="number">2.6970</span>    <span class="number">2.7374</span></span><br><span class="line">  <span class="number">45</span> 至 <span class="number">55</span> 列</span><br><span class="line">    <span class="number">2.7778</span>    <span class="number">2.8182</span>    <span class="number">2.8586</span>    <span class="number">2.8990</span>    <span class="number">2.9394</span>    <span class="number">2.9798</span>    <span class="number">3.0202</span>    <span class="number">3.0606</span>    <span class="number">3.1010</span>    <span class="number">3.1414</span>    <span class="number">3.1818</span></span><br><span class="line">  <span class="number">56</span> 至 <span class="number">66</span> 列</span><br><span class="line">    <span class="number">3.2222</span>    <span class="number">3.2626</span>    <span class="number">3.3030</span>    <span class="number">3.3434</span>    <span class="number">3.3838</span>    <span class="number">3.4242</span>    <span class="number">3.4646</span>    <span class="number">3.5051</span>    <span class="number">3.5455</span>    <span class="number">3.5859</span>    <span class="number">3.6263</span></span><br><span class="line">  <span class="number">67</span> 至 <span class="number">77</span> 列</span><br><span class="line">    <span class="number">3.6667</span>    <span class="number">3.7071</span>    <span class="number">3.7475</span>    <span class="number">3.7879</span>    <span class="number">3.8283</span>    <span class="number">3.8687</span>    <span class="number">3.9091</span>    <span class="number">3.9495</span>    <span class="number">3.9899</span>    <span class="number">4.0303</span>    <span class="number">4.0707</span></span><br><span class="line">  <span class="number">78</span> 至 <span class="number">88</span> 列</span><br><span class="line">    <span class="number">4.1111</span>    <span class="number">4.1515</span>    <span class="number">4.1919</span>    <span class="number">4.2323</span>    <span class="number">4.2727</span>    <span class="number">4.3131</span>    <span class="number">4.3535</span>    <span class="number">4.3939</span>    <span class="number">4.4343</span>    <span class="number">4.4747</span>    <span class="number">4.5152</span></span><br><span class="line">  <span class="number">89</span> 至 <span class="number">99</span> 列</span><br><span class="line">    <span class="number">4.5556</span>    <span class="number">4.5960</span>    <span class="number">4.6364</span>    <span class="number">4.6768</span>    <span class="number">4.7172</span>    <span class="number">4.7576</span>    <span class="number">4.7980</span>    <span class="number">4.8384</span>    <span class="number">4.8788</span>    <span class="number">4.9192</span>    <span class="number">4.9596</span></span><br><span class="line">  <span class="number">100</span> 列</span><br><span class="line">    <span class="number">5.0000</span></span><br></pre></td></tr></table></figure>
<p>matlab矩阵元素的存储顺序按<strong>列</strong>存储；</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%在矩阵总元素保持不变的前提下，将矩阵A重新排列为m*n的二维矩阵</span></span><br><span class="line"><span class="built_in">reshape</span>(A,m,n)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A(:,<span class="built_in">j</span>)</span><br><span class="line"><span class="comment">%取A矩阵的第j列全部元素</span></span><br><span class="line">A(<span class="built_in">i</span>,:)</span><br><span class="line"><span class="comment">%取A矩阵的第i行全部元素</span></span><br><span class="line">A(<span class="built_in">i</span>,<span class="built_in">j</span>)</span><br><span class="line"><span class="comment">%取A矩阵的第i行,第j列的元素</span></span><br><span class="line">A(<span class="built_in">i</span>:<span class="built_in">i</span>+m,;)</span><br><span class="line"><span class="comment">%取A矩阵的第i-i+m行的全部元素</span></span><br><span class="line">A(:,k:k+m)</span><br><span class="line"><span class="comment">%取A矩阵的第k-k+m列的全部元素</span></span><br><span class="line">A(<span class="built_in">i</span>:<span class="built_in">i</span>+m,k:k+m)</span><br><span class="line"><span class="comment">%取A矩阵的第i-i+m行,第k-k+m列的全部元素</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>C#进程与线程</title>
    <url>/2021/01/11/C-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="501-进程与线程"><a href="#501-进程与线程" class="headerlink" title="501 进程与线程"></a>501 进程与线程</h2><ol>
<li><p>一般情况下，一个应用程序开启一个进程，开启多个线程</p>
</li>
<li><p>应用程序 —&gt; 进程1（车间）</p>
<p>​                  —&gt;线程1，2，3，。。（多个工人）</p>
</li>
<li><p>单个CPU只能开启并运行一个进程；</p>
</li>
<li><p>线程之中，某些内存区域在同一时间只能由一个线程访问；（互斥锁）</p>
</li>
</ol>
<p>​                                某些内存区域可以容纳固定数目的线程访问；（信号量）</p>
<ol>
<li>线程中语句的执行是从上到下的</li>
<li>多线程（异步多线程），同时执行</li>
</ol>
<h2 id="502-开启线程"><a href="#502-开启线程" class="headerlink" title="502 开启线程"></a>502 开启线程</h2><ol>
<li>委托开启（有一个参数）</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.通过委托，开启一个线程</span></span><br><span class="line">            Action&lt;<span class="built_in">int</span>&gt; a = Test;</span><br><span class="line">            <span class="comment">//开启一个新线程，执行a中引用的方法</span></span><br><span class="line">            a.BeginInvoke(<span class="number">100</span>,<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//可以认为线程是同时执行的（异步执行）</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有两个参数：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span> i,<span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.通过委托，开启一个线程</span></span><br><span class="line">            Action&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt; a = Test;</span><br><span class="line">            <span class="comment">//开启一个新线程，执行a中引用的方法</span></span><br><span class="line">            a.BeginInvoke(<span class="number">100</span>,<span class="string">&quot;s&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//可以认为线程是同时执行的（异步执行）</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有返回值：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//为比较耗时的操作开启单独的线程，如下载</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span> i,<span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">            <span class="comment">//当前线程休眠100ms，即暂停0.1s</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.通过委托，开启一个线程</span></span><br><span class="line">            Func&lt;<span class="built_in">int</span>,<span class="built_in">string</span>,<span class="built_in">int</span>&gt; a = Test;</span><br><span class="line">            <span class="comment">//开启一个新线程，执行a中引用的方法</span></span><br><span class="line">            <span class="comment">//IAsyncResult---取得线程状态</span></span><br><span class="line">            IAsyncResult ar = a.BeginInvoke(<span class="number">100</span>,<span class="string">&quot;s&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//可以认为线程是同时执行的（异步执行）</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            <span class="comment">//判断当前线程状态</span></span><br><span class="line">            <span class="keyword">while</span>(ar.IsCompleted == <span class="literal">false</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="comment">//控制检测频率</span></span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取得异步线程的返回值</span></span><br><span class="line">            <span class="built_in">int</span> result = a.EndInvoke(ar);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="601-socket编程"><a href="#601-socket编程" class="headerlink" title="601 socket编程"></a>601 socket编程</h2><ol>
<li>通信协议：TCP ; UDP</li>
<li>服务器端创建Socket；客户端创建Socket；</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/01/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式语言是一种专门用于字符串处理的语言</p>
<ul>
<li><p>检索：通过正则表达式，从字符串中获取我们想要的部分</p>
</li>
<li><p>匹配：判断给定的字符串是否符合正则表达式的过滤逻辑</p>
</li>
</ul>
<p>正则表达式表述了一个字符串的书写规则</p>
<hr>
<p>正则表达式就是由普通字符以及特殊字符（成为元字符）组成的文字模式。</p>
<hr>
<p>常用元字符：</p>
<p>^  匹配必须出现在字符串的开头或行的开头</p>
<p>$  匹配必须出现在以下位置：字符串结尾、字符串结尾处的 \n 之前或行的结尾。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正则表达式（字符串处理语言）</span></span><br><span class="line">        <span class="comment">//检索 + 匹配</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;sdfsdfsdfsdfsdfsdfdsfasdf发士大夫士大夫&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> ss = Regex.Replace(s, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;被替换成的字符串&quot;</span>);<span class="comment">//匹配字符串的开头，并替换成&quot;被替换成的字符串&quot;</span></span><br><span class="line">            Console.WriteLine(ss);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正则表达式（字符串处理语言）</span></span><br><span class="line">        <span class="comment">//检索 + 匹配</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;sdfsdfsdfsdfsdfsdfdsfasdf发士大夫士大夫&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> ss = Regex.Replace(s, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;结尾被替换成的字符串&quot;</span>);<span class="comment">//匹配字符串的开头，并替换成&quot;被替换成的字符串&quot;</span></span><br><span class="line">            Console.WriteLine(ss);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本语法元字符：</p>
<blockquote>
<p>.                           匹配除换行符以外的任意字符</p>
<p>\w                       匹配字母、数字、下划线、汉字 (指大小写字母、0-9的数字、下划线_)</p>
<p>\W                       \w的补集 （ 除“大小写字母、0-9的数字、下划线_”之外）</p>
<p>\s                        匹配任意空白符 (包括换行符/n、回车符/r、制表符/t、垂直制表符/v、换页符/f)</p>
<p>\S                        \s的补集 (除\s定义的字符之外)</p>
<p>\d                        匹配数字 (0-9数字)</p>
<p>\D                        表示\d的补集 (除0-9数字之外)</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只输入数字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = Console.ReadLine();</span><br><span class="line">            <span class="built_in">bool</span> isMatch = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i =<span class="number">0</span>;i&lt;s.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] &lt; <span class="string">&#x27;0&#x27;</span> || s[i] &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    isMatch = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;密码&quot;</span> + isMatch);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只输入数字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = Console.ReadLine();</span><br><span class="line"> <span class="comment">//           string pattern = @&quot;^\d*$&quot;;//以数字结尾的一个或多个(*:一个或多个)</span></span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;\d*&quot;</span>;<span class="comment">//以数字结尾的一个或多个(*:一个或多个)（空字符串也是符合规则的）</span></span><br><span class="line">            <span class="built_in">bool</span> isMatch = Regex.IsMatch(s, pattern);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;结果&quot;</span> + isMatch);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只允许输入除大小写字母、0-9的数字、下划线_以外的任何字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = Console.ReadLine();</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;^\W*$&quot;</span>;<span class="comment">//以数字结尾的一个或多个(*:一个或多个)（空字符串也是符合规则的）</span></span><br><span class="line">            <span class="built_in">bool</span> isMatch = Regex.IsMatch(s, pattern);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;结果&quot;</span> + isMatch);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>\W                 \w的补集 （ 除“大小写字母、0-9的数字、下划线_”之外）</p>
<p>\S                  \s的补集 (除\s定义的字符之外)</p>
<p>\D                  表示\d的补集 (除0-9数字之外)</p>
<p>\B                  匹配不是单词开头或结束的位置</p>
<p>[ab]               匹配中括号中的字符</p>
<p>[a-c]               a字符到c字符之间是字符（字母表）</p>
<p><sup><a href="#fn_x" id="reffn_x">x</a></sup>                匹配除了x以外的任意字符</p>
<p><sup><a href="#fn_adwz" id="reffn_adwz">adwz</a></sup>         匹配除了adwz这几个字符以外的任意字符</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只允许输入除大小写字母、0-9的数字、下划线_以外的任何字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;sdafsa&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;[^asd]&quot;</span>;<span class="comment">//除了asd之外的字符串</span></span><br><span class="line">            <span class="built_in">string</span> ss = Regex.Replace(str, pattern, <span class="string">&quot;#&quot;</span>);</span><br><span class="line">            Console.WriteLine(ss);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>{n}          匹配前面的字符n次</p>
<p>{n,}         匹配前面的字符n次或多于n次</p>
<p>{n,m}      匹配前面的字符n到m次</p>
<p>?              重复零次或一次</p>
<p>+             重复一次或更多次</p>
<p>*              重复零次或更多次</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验是否为QQ号（5-12位数字）</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;15151151515&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;^\d&#123;5,12&#125;$&quot;</span>;<span class="comment">//重复\d的5-12次</span></span><br><span class="line">            <span class="built_in">bool</span> ism = Regex.IsMatch(str, pattern);</span><br><span class="line">            Console.WriteLine(ism);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>择一匹配：</p>
<p>|                 将两个匹配条件进行逻辑“或”（Or）运算。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//择一匹配</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;15151151大师傅士大夫12【】【】‘515&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;\d|[a-z]&quot;</span>;<span class="comment">// | 相当于或运算</span></span><br><span class="line">            MatchCollection o = Regex.Matches(str, pattern);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> itm <span class="keyword">in</span> o)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(itm);<span class="comment">//输出匹配出的字符串</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托是一个类型，这个类型可以赋值一个方法的引用</p>
<blockquote>
<p> 如：int 是一个类型，存储 整形数字；</p>
<p> 委托是一个类型，存储 方法的引用；</p>
</blockquote>
<ul>
<li>定义委托</li>
<li>创建委托实例</li>
</ul>
<h3 id="定义委托"><a href="#定义委托" class="headerlink" title="定义委托"></a>定义委托</h3>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo迁移</title>
    <url>/2021/01/10/hexo%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo博客迁移"><a href="#hexo博客迁移" class="headerlink" title="hexo博客迁移"></a>hexo博客迁移</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几次迁移都很顺利，但是最近2次迁移发生了错误，所以特定记录下来，以后迁移的时候傻瓜式操作就好些了</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>根据官网文档看步骤<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
</li>
<li><p>git安装</p>
</li>
<li><p>通过NodeSource安装Node.js</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210110101009.png" alt=""></p>
</li>
<li><p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li>OK</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>博客迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>AR入门</title>
    <url>/2021/01/10/AR%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3cbe88ee5581a52df9ea738ae5b32fd29969763576237409ad8ff16fb396a65b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>指导入门</tag>
      </tags>
  </entry>
  <entry>
    <title>SFM-1</title>
    <url>/2021/01/05/%E8%BF%90%E5%8A%A8%E6%81%A2%E5%A4%8D%E7%BB%93%E6%9E%84-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0c1eb7bd53fbdc4a772698caf75905b5e128d2210aae823e20e8ab12037a14d1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SFM</category>
      </categories>
      <tags>
        <tag>SFM</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04内置输入法词库导入</title>
    <url>/2020/12/26/Ubuntu20-04%E5%86%85%E7%BD%AE%E8%BE%93%E5%85%A5%E6%B3%95%E8%AF%8D%E5%BA%93%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu20-04-内置输入法词库导入"><a href="#Ubuntu20-04-内置输入法词库导入" class="headerlink" title="Ubuntu20.04 内置输入法词库导入"></a>Ubuntu20.04 内置输入法词库导入</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于需要在Clion上写代码，但是它对中文的支持并不好，无法输入中文，为了解决这个问题，我尝试了搜狗输入法，虽然能输入中文，但是无法看到候选词框，体验依旧很难受，万般无奈之下，换回了IBUS，将搜狗输入法的词库导入后，体验还可以</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>IBUS架构，默认输入法</li>
<li>按照<a href="https://junlu.club/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/">此方法</a>配置Clion</li>
<li>安装深蓝词库转换，github上有，<a href="https://github.com/studyzy/imewlconverter">传送门</a></li>
<li>将搜狗输入法的词库导出文件转换为txt</li>
<li>导入默认输入法</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-开发库配置记录</title>
    <url>/2020/12/25/Ubuntu-%E5%BC%80%E5%8F%91%E5%BA%93%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-开发库配置记录"><a href="#Ubuntu-开发库配置记录" class="headerlink" title="Ubuntu-开发库配置记录"></a>Ubuntu-开发库配置记录</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>由于配置库的过程太过惨痛，所以将现在以及以后的开发库的配置过程记录一下，以供后续参考</p>
<h2 id="2-Eigen"><a href="#2-Eigen" class="headerlink" title="2. Eigen"></a>2. Eigen</h2><ol>
<li><p>简单命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure></li>
<li><p>源码编译安装</p>
<p>git clone</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;libeigen&#x2F;eigen.git</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake ..</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-Cmake"><a href="#3-Cmake" class="headerlink" title="3. Cmake"></a>3. Cmake</h2><ol>
<li><p>进入<a href="https://cmake.org/download/">官网</a>下载压缩包</p>
</li>
<li><p>解压后按照Github上的提示，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bootstrap</span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装系统以及花屏问题解决</title>
    <url>/2020/12/25/Ubuntu-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E8%8A%B1%E5%B1%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-安装系统以及花屏问题解决"><a href="#Ubuntu-安装系统以及花屏问题解决" class="headerlink" title="Ubuntu-安装系统以及花屏问题解决"></a>Ubuntu-安装系统以及花屏问题解决</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>马上就快寒假了，想到回家的时候家里没有这么好的科研条件，就打算买个笔记本作为主力机，教研室电脑作为Ubuntu的机子，然后使用向日葵连接使用；今年已经配置了号多次Ubuntu系统，今天记录一下，以后直接上就好了</p>
<h2 id="1-制作安装盘"><a href="#1-制作安装盘" class="headerlink" title="1. 制作安装盘"></a>1. 制作安装盘</h2><ol>
<li>从<a href="https://cn.ubuntu.com/download">官网</a>下载安装包，格式化U盘，然后将<strong>.iso</strong>文件全部解压到U盘中；</li>
<li>制作完成</li>
</ol>
<h2 id="2-花屏问题解决"><a href="#2-花屏问题解决" class="headerlink" title="2. 花屏问题解决"></a>2. 花屏问题解决</h2><ol>
<li><p>安装系统时，采用安全图形模式安装，最后安装重启阶段，一直按住e键不放，进入一大摞代码的界面；（或者不停的按Esc）</p>
</li>
<li><p>修改代码，在quite splash后面输入nomodeset；</p>
</li>
<li><p>快捷键 Ctrl+x启动系统</p>
</li>
<li><p>进入系统后，第一件事，并不是修改软件源，而是在终端执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;default&#x2F;grub</span><br></pre></td></tr></table></figure></li>
<li><p>同样，找到quite splash，在后面加入nomodeset</p>
</li>
<li><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>
<h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h2></li>
</ol>
<p>重新进入系统后，更换软件源，添加附加驱动等等，就不详细说了</p>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段总结</title>
    <url>/2020/12/19/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fb10728960d3be67be3e4401a38069f6a1eb0c79b1afc76c819617577f67286c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>ArRobot</tag>
      </tags>
  </entry>
  <entry>
    <title>大学生在线答题打开复制权限</title>
    <url>/2020/12/01/%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%9C%A8%E7%BA%BF%E7%AD%94%E9%A2%98%E6%89%93%E5%BC%80%E5%A4%8D%E5%88%B6%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于实现“大学生在线”答题页面开启复制题目权限的技巧"><a href="#关于实现“大学生在线”答题页面开启复制题目权限的技巧" class="headerlink" title="关于实现“大学生在线”答题页面开启复制题目权限的技巧"></a>关于实现“大学生在线”答题页面开启复制题目权限的技巧</h1><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ul>
<li>谷歌浏览器</li>
<li>油猴插件</li>
</ul>
<h2 id="正式行动"><a href="#正式行动" class="headerlink" title="正式行动"></a>正式行动</h2><ol>
<li><p>安装谷歌浏览器，<a href="https://www.google.cn/intl/zh-CN/chrome/">点我进下载页面</a></p>
</li>
<li><p>安装油猴插件</p>
<ol>
<li><p>打开谷歌浏览器，打开<strong>设置</strong>，点击<strong>更多工具</strong>，点击<strong>扩展程序</strong>，如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/30/iKardxQjqfvOVc1.png" alt=""></p>
</li>
<li><p>在右上角开启<strong>开发者模式</strong>，如下图</p>
<p><img src="https://i.loli.net/2020/11/30/9iLyc78JbROedsa.png" alt=""></p>
</li>
<li><p>下载油猴插件，<a href="https://wwe.lanzous.com/im2mPixnyng">点我下载</a>，下载完成后，是一个<strong>.crx</strong>文件，要做的是将其安装到浏览器中</p>
<ul>
<li><p>下载完成后，放在桌面上，将文件的<strong>后缀名.crx</strong>改掉，改为<strong>.zip</strong>，然后将其用解压软件<strong>解压</strong>到桌面</p>
</li>
<li><p>打开浏览器的扩展程序页面，选择<strong>加载已解压的扩展程序</strong>，选择桌面上的已经解压的文件夹，安装扩展程序</p>
<p><img src="https://i.loli.net/2020/11/30/3VTR9M7SHZoCN82.png" alt=""></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>安装网页限制解除脚本</p>
<p>打开<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits-modified">此网址</a>，点击<strong>安装</strong>按钮，如下图所示；</p>
<p><img src="https://i.loli.net/2020/11/30/mhzNHLXOpIkPUb3.png" alt=""></p>
<p>安装完成后，任意打开网页，如，百度主页，<strong>鼠标移动至左上角</strong>，如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/30/w9k1FPehMJzsAVQ.png" alt=""></p>
<p>可以发现有解除限制的选项，点它！就可以在此网页有复制权限了，因此，<strong>在大学生在线答题之前，需要先点击此按钮，再答题</strong></p>
<p>至此配置结束</p>
</li>
</ol>
<h2 id="具体效果"><a href="#具体效果" class="headerlink" title="具体效果"></a>具体效果</h2><p><img src="https://i.loli.net/2020/11/30/gmns5GQjYivwUlA.png" alt=""></p>
<p><img src="https://i.loli.net/2020/12/01/rlnXqy8dzUIk976.png" alt=""></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>大学生在线</tag>
      </tags>
  </entry>
  <entry>
    <title>将ubuntu默认中文文件夹名称改为英文</title>
    <url>/2020/11/27/%E5%B0%86ubuntu%E9%BB%98%E8%AE%A4%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E6%94%B9%E4%B8%BA%E8%8B%B1%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="将Ubuntu默认中文文件夹名称改为英文"><a href="#将Ubuntu默认中文文件夹名称改为英文" class="headerlink" title="将Ubuntu默认中文文件夹名称改为英文"></a>将Ubuntu默认中文文件夹名称改为英文</h1><blockquote>
<p>转载于<a href="https://blog.csdn.net/jeffrey_li/article/details/54947502">https://blog.csdn.net/jeffrey_li/article/details/54947502</a></p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li><p><strong>方法一：</strong><br>打开 系统设置-》语言支持 将“english”拖动到最上端，重启系统。<br>重启后，会提示更新文件名称，更新后在将语言”中文“拖动到顶部，重启系统 。</p>
</li>
<li><p><strong>方法二：</strong>编辑~/.config/user-dirs.dirs文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.config&#x2F;user-dirs.dirs1</span><br></pre></td></tr></table></figure>
<p>修改文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XDG_DESKTOP_DIR&#x3D;&quot;$HOME&#x2F;Desktop&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR&#x3D;&quot;$HOME&#x2F;Downloads&quot;</span><br><span class="line">XDG_TEMPLATES_DIR&#x3D;&quot;$HOME&#x2F;Templates&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR&#x3D;&quot;$HOME&#x2F;Public&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR&#x3D;&quot;$HOME&#x2F;Documents&quot;</span><br><span class="line">XDG_MUSIC_DIR&#x3D;&quot;$HOME&#x2F;Music&quot;</span><br><span class="line">XDG_PICTURES_DIR&#x3D;&quot;$HOME&#x2F;Pictures&quot;</span><br><span class="line">XDG_VIDEOS_DIR&#x3D;&quot;$HOME&#x2F;Videos&quot;12345678</span><br></pre></td></tr></table></figure></li>
<li><p><strong>方法三：</strong><br>打开终端，在终端中输入命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;en_US</span><br><span class="line">xdg-user-dirs-gtk-update12</span><br></pre></td></tr></table></figure>
<p>跳出对话框询问是否将目录转化为英文路径,同意并关闭。<br>在终端中输入命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;zh_CN1</span><br></pre></td></tr></table></figure>
<p>重新启动系统，系统会提示更新文件名称，选择不再提示,并取消修改。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>文件夹改名</tag>
      </tags>
  </entry>
  <entry>
    <title>clion输入中文</title>
    <url>/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu20-04下clion无法输入中文问题解决"><a href="#Ubuntu20-04下clion无法输入中文问题解决" class="headerlink" title="Ubuntu20.04下clion无法输入中文问题解决"></a>Ubuntu20.04下clion无法输入中文问题解决</h1><blockquote>
<p>转载于<a href="https://blog.csdn.net/dyg7777/article/details/108334293?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/dyg7777/article/details/108334293?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242</a></p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>设置输入法</p>
<p>将 Ubuntu 的输入法设置为 Ibus Pinyin</p>
<p><a href="https://blog.forgiveher.cn/2020/08/20/1597932898303/ibus.png"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLmZvcmdpdmVoZXIuY24vMjAyMC8wOC8yMC8xNTk3OTMyODk4MzAzL2lidXMucG5n?x-oss-process=image/format,png" alt="Ibus"></a></p>
</li>
<li><p>下载JBR</p>
<p>下载解压 <a href="https://confluence.jetbrains.com/pages/viewpage.action?pageId=173178989">JBR</a></p>
<p><a href="https://blog.forgiveher.cn/2020/08/20/1597932898303/jbr.png"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLmZvcmdpdmVoZXIuY24vMjAyMC8wOC8yMC8xNTk3OTMyODk4MzAzL2pici5wbmc?x-oss-process=image/format,png" alt="JBR"></a></p>
</li>
<li><p>安装runtime插件</p>
<p>打开 IDE，下载插件 <a href="https://www.jetbrains.com/help/idea/switching-boot-jdk.html">Choose Runtime</a></p>
</li>
<li><p>IDE在jbr下运行</p>
<p>在 CLion中按下 <code>Ctrl + Shift + A</code>， 随后输入 <code>Choose Runtime</code>，打开对话框，随后选择下载解压的 JBR，点击 <code>Install</code>，随后 IDE 会在自动重启</p>
<p>就此结束</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>clion</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04拨号上网</title>
    <url>/2020/11/27/ubuntu18-04%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu18-04-拨号上网方法"><a href="#Ubuntu18-04-拨号上网方法" class="headerlink" title="Ubuntu18.04 拨号上网方法"></a>Ubuntu18.04 拨号上网方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于20.04系统还没有成熟，博主使用的相关的开发工具还没有支持20系统，所以又重新格式化装了18.04；但是上网步骤这里卡住了，特此记录</p>
<p>网上的大多数方法，比如改正true之类的，对我都没有太大用处。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<p>转载于<a href="https://blog.csdn.net/qq_38649880/article/details/102651760">https://blog.csdn.net/qq_38649880/article/details/102651760</a></p>
</blockquote>
<ol>
<li><p>输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmcli con edit type pppoe con-name “YOUR_CONNECTION_NAME”</span><br></pre></td></tr></table></figure>
<p>把里面的<code>YOUR_CONNECTION_NAME</code>改成新建立的拨号上网的名字。<br>然后命令行界面会有所变化，接下来开始设置用户名和密码就行了.</p>
</li>
<li><p>依次输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set pppoe.username YOUR_DSL_ACCOUNT_USERNAME</span><br><span class="line">set pppoe.password YOUR_DSL_ACCOUNT_PASSWORD</span><br><span class="line">save</span><br></pre></td></tr></table></figure>
<p>把用户名和密码填成你自己的账号和密码就OK。<br>接下来回询问你是否想设置成自动连接，经常用的话输入<code>yes</code>就可以，开机就会自动连接，比较方便。<br>这就设置好了，然后输入<code>quit</code>退出即可。</p>
<p>就此结束</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>拨号上网</tag>
      </tags>
  </entry>
  <entry>
    <title>三维重建基础与极几何</title>
    <url>/2020/11/09/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%9E%81%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="三维重建基础与极几何"><a href="#三维重建基础与极几何" class="headerlink" title="三维重建基础与极几何"></a>三维重建基础与极几何</h1><blockquote>
<p>学习记录</p>
</blockquote>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>多视图几何中的关键问题有：</p>
<ol>
<li><p>摄像机几何</p>
<blockquote>
<p>从一张或者多张图像中求解摄像机的内外参数</p>
</blockquote>
</li>
<li><p>场景几何</p>
<blockquote>
<p>通过多个图像求解3D场景坐标</p>
</blockquote>
</li>
<li><p>对应关系</p>
<blockquote>
<p>已知一个图像的p点，如何在另一张图像中找到p’点</p>
</blockquote>
</li>
</ol>
<p>1+3 =&gt; 2：三维重建</p>
<p>3 =&gt; 1 + 2：SFM（运动恢复结构）</p>
<h2 id="三维重建基础"><a href="#三维重建基础" class="headerlink" title="三维重建基础"></a>三维重建基础</h2><h3 id="从单幅视图恢复场景结构"><a href="#从单幅视图恢复场景结构" class="headerlink" title="从单幅视图恢复场景结构"></a>从单幅视图恢复场景结构</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164053.png" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164136.png" alt=""></p>
<p>一张照片缺乏深度信息，从上图看出，不止有P点一个点可以在成像平面上成像点p，红线上的场景点都满足；所以说，单张照片2D到3D的映射具有多义性。</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164617.png" alt=""></p>
<p>考虑两只眼睛观察空间，模型如下：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164554.png" style="zoom:150%;" /></p>
<p>O1与O2分别代表两只眼睛，两个相机，p与p’所在平面分别为两个相机的成像平面，P点为空间点；</p>
<p>理想情况下，P点空间点的确定由以下公式确定：</p>
<script type="math/tex; mode=display">
P = l × l'</script><p>但是实际情况下，由于噪声的存在，或者由于计算机精度丢失的原因，导致两条直线通常不会相交，实际使用中此方法无法做到，作废</p>
<p>所以，求解空间点P的问题，可以描述为：</p>
<blockquote>
<p>已知p和p’，K与K’，R，T</p>
<p>求解：P的三维坐标</p>
</blockquote>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="线性解法"><a href="#线性解法" class="headerlink" title="线性解法"></a>线性解法</h4><p>线性解法参见《 Multiple View Geometry in Computer Vision》</p>
<h4 id="非线性解法"><a href="#非线性解法" class="headerlink" title="非线性解法"></a>非线性解法</h4><p>最优化问题，求点$P^<em>$，使得$MP^</em>$到$p$的距离，加上${M’P^*}$到$p’$的距离之和最小</p>
<p>即：</p>
<script type="math/tex; mode=display">
d\left(p, M P^{*}\right)+d\left(p^{\prime}, M^{\prime} P^{*}\right)</script><p>求解方法：牛顿法与列文伯格-马夸尔特法（L-M方法）</p>
<h2 id="极几何"><a href="#极几何" class="headerlink" title="极几何"></a>极几何</h2><h3 id="极几何解决的问题"><a href="#极几何解决的问题" class="headerlink" title="极几何解决的问题"></a>极几何解决的问题</h3><p>已知一个图像的p点，如何在另一张图像中找到p’点</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109171145.png" alt=""></p>
<p>极平面：过点P，$O_1$与$O_2$的平面</p>
<p>基线：$O_1$与$O_2$的连线</p>
<p>极线：极平面与成像平面的交线</p>
<p>极点：基线与成像平面的交点</p>
<h3 id="本质矩阵"><a href="#本质矩阵" class="headerlink" title="本质矩阵"></a>本质矩阵</h3><p>定义：本质矩阵是对<code>规范化摄像机</code>拍摄的两个视点图像间的极几何关系进行代数描述</p>
<h3 id="规范化摄像机"><a href="#规范化摄像机" class="headerlink" title="规范化摄像机"></a>规范化摄像机</h3><p>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><p>规范化摄像机指的是K = 0的情况下。</p>
<h3 id="推导本质矩阵"><a href="#推导本质矩阵" class="headerlink" title="推导本质矩阵"></a>推导本质矩阵</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201127092425.png" alt=""></p>
<ol>
<li><p>三维点$p’$ 在$O_1$下的坐标是多少？</p>
<p>设$p’$在$O<em>2$下的坐标为$P</em>{O2}$，$p’$在$O<em>1$下的坐标为$P</em>{O1}$</p>
<script type="math/tex; mode=display">
P'_{O2} = RP'_{O1}+T</script><p>由上述公式可以推导出:</p>
<script type="math/tex; mode=display">
P'_{O1} = R^T(P'_{O2} - T) \\
= R^TP'_{O2} - R^TT</script></li>
<li><p>三维点$O_2$在$O_1$下的坐标是多少？</p>
<p>根据上面的公式，令$P’_{O2}$为0，即$P’$与$O_2$重合，可得三维点$O_2$在$O_1$下的坐标是$-R^TT$</p>
</li>
<li><p>两个向量叉乘，得到垂直于极平面的向量，与$p$点在$O_1$下的向量，点乘为0</p>
<script type="math/tex; mode=display">
\vec{a} =R^TT \times (R^TP'_{O2}-R^TT) \\
\vec{b}=P_{O1} \\
\vec{a} ^T\cdot \vec{b} = 0</script><p>最终得到：</p>
<script type="math/tex; mode=display">
[R^TT \times (R^TP'_{O2}-R^TT) ]^T \cdot P_{O1} = 0</script><p>最终化简得到：</p>
<script type="math/tex; mode=display">
p'^{T}[T \times R]p = 0</script><blockquote>
<p>p’：1x3，右边图像像素坐标系下的p’的齐次坐标</p>
<p>p： 3x1，左边图像像素坐标系下的p 的齐次坐标</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>叉乘变成矩阵乘法</p>
<p>若$\vec{a} =\begin{bmatrix}\ a_1 \ \ a_2 \ \ a_3 \end{bmatrix}$，$\vec{b} =\begin{bmatrix}\ b_1 \ \ b_2 \ \ b_3 \end{bmatrix}$</p>
<p>则$\vec{a} \times \vec{b} = \begin{bmatrix} \ 0 &amp;-a_3  &amp;a_2 \ \ a_3 &amp;0 &amp;-a_1 \ \ -a_2 &amp;a_1 &amp;0\end{bmatrix}\begin{bmatrix} \ b_1 \ \ b_2 \ \ b_3 \end{bmatrix}$</p>
</li>
<li><p>将3中的最终得到的公式，将叉乘变为矩阵运算</p>
<p>记 $E=T\times R$</p>
<script type="math/tex; mode=display">
p'^{T}Ep = 0</script><blockquote>
<p>E 称之为<strong>本质矩阵*</strong></p>
<p>p’：1x3，右边图像像素坐标系下的p’的齐次坐标</p>
<p>p： 3x1，左边图像像素坐标系下的p 的齐次坐标</p>
</blockquote>
<p>此公式反映了左右两个图像上的点之间的对应关系，也就是本质矩阵的内涵</p>
</li>
</ol>
<h3 id="基础矩阵"><a href="#基础矩阵" class="headerlink" title="基础矩阵"></a>基础矩阵</h3><p>基础矩阵是对<strong>一般的透视摄像机</strong>拍摄的两个视点之间图像之间的极几何关系的代数描述</p>
<h3 id="一般的透视摄像机"><a href="#一般的透视摄像机" class="headerlink" title="一般的透视摄像机"></a>一般的透视摄像机</h3><p>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换：</p>
<script type="math/tex; mode=display">
p=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><blockquote>
<p>$p$为像素坐标系的二维坐标</p>
<p>$P$为相机坐标系下的空间坐标</p>
</blockquote>
<h3 id="推导基础矩阵"><a href="#推导基础矩阵" class="headerlink" title="推导基础矩阵"></a>推导基础矩阵</h3><p>思路：将其变为规范化摄像机</p>
<script type="math/tex; mode=display">
p= K\begin{bmatrix} \ E & 0 \\ \end{bmatrix}P \\
K^{-1}p = K^{-1}K\begin{bmatrix} \ E & 0 \end{bmatrix} P 
= \begin{bmatrix}
\ 1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 &  0 & 1 & 0 \\
\end{bmatrix}
P</script><p>设 $P_c = K^{-1}p$，则上式可以写为：</p>
<script type="math/tex; mode=display">
P_c = \begin{bmatrix}
\ 1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 &  0 & 1 & 0 \\
\end{bmatrix}
P</script><p>由规范化相机模型可知：</p>
<script type="math/tex; mode=display">
P_c'^{T}EP_c = 0 \\
(K'^{-1}p')^{T}E(K^{-1}p)=0 \\
p'^{T}K'^{-T}EK^{-1}p = 0 \\</script><p>记$F = K’^{-T}EK^{-1}$，上式可以表达为：</p>
<script type="math/tex; mode=display">
p'^{T}Fp = 0</script><p>F即为<strong>基础矩阵</strong></p>
<p>由于$E = T \times R$，所以E与外部参数有关，又因为K是相机内部参数的矩阵，所以，基础矩阵F与内部参数，外部参数都有关；</p>
<h3 id="基础矩阵小结"><a href="#基础矩阵小结" class="headerlink" title="基础矩阵小结"></a>基础矩阵小结</h3><p>基础矩阵F刻画了两幅图像之间的极几何关系，即相同场景下，不同视图之间的对应关系</p>
<h3 id="估计基础矩阵"><a href="#估计基础矩阵" class="headerlink" title="估计基础矩阵"></a>估计基础矩阵</h3><p>已知$p’$与$p$，求解F</p>
<p>通常使用<strong>归一化八点算法</strong>对F进行估计</p>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>三维重建</tag>
      </tags>
  </entry>
  <entry>
    <title>C#-文件操作</title>
    <url>/2020/10/27/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-文件操作"><a href="#C-文件操作" class="headerlink" title="C#-文件操作"></a>C#-文件操作</h1><h2 id="查看文件属性"><a href="#查看文件属性" class="headerlink" title="查看文件属性"></a>查看文件属性</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----------------------------文件操作-查看文件或文件夹属性------------------------</span></span><br><span class="line">            FileInfo fileInfo = <span class="keyword">new</span> FileInfo(<span class="string">&quot;TextFile1.txt&quot;</span>);<span class="comment">//相对路径，只找当前程序输出路径内的文件</span></span><br><span class="line">            FileInfo fileInfo = <span class="keyword">new</span> FileInfo(<span class="string">@&quot;F:\VS_Area\sikiLearning\文件操作\bin\Debug\TextFile2.txt&quot;</span>);<span class="comment">//绝对路径</span></span><br><span class="line">            <span class="keyword">if</span> (fileInfo.Exists)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">                Console.WriteLine(fileInfo.Name);<span class="comment">//文件名称</span></span><br><span class="line">                Console.WriteLine(fileInfo.Directory);<span class="comment">//文件所在路径</span></span><br><span class="line">                Console.WriteLine(fileInfo.Length);<span class="comment">//文件大小，单位字节</span></span><br><span class="line">                Console.WriteLine(fileInfo.IsReadOnly);<span class="comment">//判断是否只读</span></span><br><span class="line">                <span class="comment">//fileInfo.Delete();//删除文件</span></span><br><span class="line">                <span class="comment">//fileInfo.CopyTo(&quot;copy.txt&quot;);//复制文件到当前目录，为copy.txt</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">                fileInfo.Create();<span class="comment">//创建文件</span></span><br><span class="line">                fileInfo.MoveTo(<span class="string">&quot;重命名.txt&quot;</span>);<span class="comment">//剪切，相当于重命名操作</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<h2 id="查看文件夹属性"><a href="#查看文件夹属性" class="headerlink" title="查看文件夹属性"></a>查看文件夹属性</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DirectoryInfo dirInfo = <span class="keyword">new</span> DirectoryInfo(<span class="string">@&quot;F:\VS_Area\sikiLearning\文件操作\bin\Debug&quot;</span>);<span class="comment">//绝对路径</span></span><br><span class="line"><span class="keyword">if</span> (dirInfo.Exists)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(dirInfo.CreationTime);<span class="comment">//获取创建时间</span></span><br><span class="line">    dirInfo.CreateSubdirectory(<span class="string">&quot;soki&quot;</span>);<span class="comment">//创建子目录</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------取得文件内容---------------------------------------------------- -</span><br><span class="line"><span class="built_in">string</span>[] line = File.ReadAllLines(<span class="string">&quot;TextFile1.txt&quot;</span>);<span class="comment">//读取行,文本文件</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> item <span class="keyword">in</span> line)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] image = File.ReadAllBytes(<span class="string">&quot;1.jpg&quot;</span>);<span class="comment">//对于非文本文件</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> image)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------写文件------------------------------</span></span><br><span class="line">File.WriteAllText(<span class="string">&quot;3.txt&quot;</span>, <span class="string">&quot;kjsafjnksdlajfksdajagsjdalkfjk\nskdjfksjdkafj&quot;</span>);<span class="comment">//写文本文件到相对目录</span></span><br><span class="line">File.WriteAllBytes(<span class="string">&quot;3.jpg&quot;</span>, image);<span class="comment">//写非文本文件到相对目录</span></span><br></pre></td></tr></table></figure>
<h2 id="FileStream，常用于读取二进制文件"><a href="#FileStream，常用于读取二进制文件" class="headerlink" title="FileStream，常用于读取二进制文件"></a>FileStream，常用于读取二进制文件</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">FileStream stream = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.txt&quot;</span>,FileMode.Open);</span><br><span class="line">            <span class="comment">//读取或者写入数据</span></span><br><span class="line">            <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//从0-最后读取数据，放到data里面，返回值为读取内容的大小</span></span><br><span class="line">            <span class="built_in">int</span> length = stream.Read(data, <span class="number">0</span>, data.Length);</span><br><span class="line">            <span class="comment">//输出读取的内容</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(data[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//另一种读取内容的方式</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//read命令，读取指针不断偏移</span></span><br><span class="line">                <span class="built_in">int</span> length = stream.Read(data, <span class="number">0</span>, data.Length);</span><br><span class="line">                <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;所有内容已经读取完成&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i&lt;length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(data[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后关闭流</span></span><br><span class="line">            stream.Close();</span><br></pre></td></tr></table></figure>
<h2 id="streamreader-streamwriter-常用于写入读取文本文件"><a href="#streamreader-streamwriter-常用于写入读取文本文件" class="headerlink" title="streamreader,streamwriter,常用于写入读取文本文件"></a>streamreader,streamwriter,常用于写入读取文本文件</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建文本文件读取流</span></span><br><span class="line">            StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">&quot;textfile1.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//读取方法1，一行一行的读取</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> text = sr.ReadLine();</span><br><span class="line">                <span class="keyword">if</span> (text == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//读取方法2；一次性全部读取完毕</span></span><br><span class="line">            <span class="built_in">string</span> allText = sr.ReadToEnd();</span><br><span class="line">            <span class="comment">//读取方法3,一次一个字母</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//读取的ASCLL码值，强制转换为char</span></span><br><span class="line">                <span class="built_in">char</span> letter = (<span class="built_in">char</span>)sr.Read();</span><br><span class="line">                <span class="keyword">if</span> (letter == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(letter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sr.Close();</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;c.txt&quot;</span>);<span class="comment">//如果文件已经存在，则会被覆盖</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> message = Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span> (message == <span class="string">&quot;q&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//会一直写，紧接着文档末尾接着写，不换行</span></span><br><span class="line">                    sw.Write(message);</span><br><span class="line">                    <span class="comment">//带换行的，同样接着末尾接着写</span></span><br><span class="line">                    sw.WriteLine(message);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sw.Close();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Eigen几何模块</title>
    <url>/2020/10/26/SLAM-Eigen%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Eigen几何模块"><a href="#SLAM-Eigen几何模块" class="headerlink" title="SLAM-Eigen几何模块"></a>SLAM-Eigen几何模块</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Geometry&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 本程序演示Eigen几何模块的使用方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//生成单位矩阵</span></span><br><span class="line">    Matrix3d rotation_matrix = Matrix3d::Identity();</span><br><span class="line">    <span class="comment">//旋转向量使用AngleAxisd，底层非Matrix，但是可以当做矩阵使用运算(重载运算符）</span></span><br><span class="line">    <span class="comment">//定义旋转向量，沿z轴旋转45度</span></span><br><span class="line">    <span class="function">AngleAxisd <span class="title">rotation_vector</span><span class="params">(M_PI/<span class="number">4</span>,Vector3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>))</span></span>;</span><br><span class="line">    <span class="comment">//格式控制，输出时保持小数点后3位</span></span><br><span class="line">    <span class="built_in">cout</span>.precision(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//将旋转向量转化为矩阵形式，AngleAxisd转为matrix</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;rotation matrix =\n&quot;</span>&lt;&lt;rotation_vector.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//将旋转向量转化为旋转矩阵，AngleAxisd转Matrix</span></span><br><span class="line">    rotation_matrix = rotation_vector.toRotationMatrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用AngleAxisd进行坐标转换</span></span><br><span class="line">    <span class="function">Vector3d <span class="title">v</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    Vector3d v_rotated = rotation_vector * v;<span class="comment">//方式1:使用旋转向量</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation (by angle axis) = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    v_rotated = rotation_matrix*v;<span class="comment">//方式2:使用旋转矩阵</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation (by matrix) = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//欧拉角:旋转矩阵-&gt;欧拉角</span></span><br><span class="line">    Vector3d euler_angles = rotation_matrix.eulerAngles(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//ZYX顺序</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;yaw pitch roll = &quot;</span>&lt;&lt;euler_angles.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//欧式变换矩阵</span></span><br><span class="line">    Isometry3d T =Isometry3d::Identity();</span><br><span class="line">    T.rotate(rotation_vector);<span class="comment">//设置变换矩阵的旋转向量</span></span><br><span class="line">    T.pretranslate(Vector3d(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//将平移向量设置为（1,3,4）</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Transform matrix = \n&quot;</span>&lt;&lt;T.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用欧式变换矩阵对v进行变换</span></span><br><span class="line">    Vector3d v_transformed = T*v;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;v transformed = &quot;</span>&lt;&lt;v_transformed.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//AngleAxisd转换为四元数</span></span><br><span class="line">    Quaterniond q = Quaterniond(rotation_vector);</span><br><span class="line">    <span class="comment">//输出四元数系数，(x,y,z,w)；w是实部，xyz是虚部</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;quaternion from rotation vector = &quot;</span>&lt;&lt;q.coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//matrix转换为四元数</span></span><br><span class="line">    q = Quaterniond(rotation_matrix);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;quaternion form roation matrix = &quot;</span>&lt;&lt;q.coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用四元数旋转向量</span></span><br><span class="line">    v_rotated = q*v;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;should be equal to &quot;</span>&lt;&lt;(q*Quaterniond(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)*q.inverse()).coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>Eigen</tag>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hololens与六维力传感器通信</title>
    <url>/2020/10/25/Hololens%E4%B8%8E%E5%85%AD%E7%BB%B4%E5%8A%9B%E4%BC%A0%E6%84%9F%E5%99%A8%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cdab10b42c16ec9e39f9f5b115fb6bcdde9324bc0b84f75efc81145293bfc1bf">861fa3301ca504d5f4d4ff9ce2916d05b432d1fc65432356a763819399384025ae47cad0859800784659c3fd6dce9dbd85b92ef127d936c211e47a2fd7d75be2d611d0d7e90c9ceef02306cc0035e2aaa058c96938a67f7dc558b733f94a811c359d9442dded77cad372cc7763425a04830a9d61e74931737e5c8cf85f0a10e3b21d70030e7245605e7266b880d5416954c2af5f925102ee074e44f54abf2b483fca840ab297b87c9904341bbb917589bbbece4b6ca4c693dda9f4a26f246e6904c161b71c81cc40096bc1145ab3665dca63234e636e919293a175ec255c494ab43842c0b186777ab27ab35b5e1b5b588258a9ecb30ba35b7f9f076dea2aa1e2972d99f78281d77a63a78d83ee27279d39adcd75a281163962ea444571fc6f2b61f851bffb33148e9e39d6654c36f93172949971db7d6931bf89e35fdbd5c7f94939b5dc6d45abb079592093d53f13b9c65ee6a6d0d855755ae3a34fc79af452a7141f00d313dac26369aa34b1e1bf350c0ecb8dc639d00e49d4e5be747d53f33aa681a669b20f2ec154048ab3702e56e59da432c28f787181c944a36b57f230477cd457e398b8d05e6c5962f561848a12561ad7e3b07229ebc842bfae9817237726e5321b8e2cc8a33aff40c84abb40f965125bbfa661ef21e9569e4744a22f81d16ba874a070c19cc460c0b5ef3dd847a7fa9f9eec2269f249e0ff4b39ed788f77d942374e3d3cf5e07a4ceb1eec262650cfd095a5772cf57dbb998992f6f61d5d9ab81d597540390e456838e74901ed8328b750fc07a9723e0a559581521f24f0383fa4146964508aafdb662798de5afdead271277eef7674e5949ad04822d4582afa06b3fb18adeab28a9b15348d5030a38d4a8c50667c4fd7329bb19f81d8c522d9900a4aa6fb54bd758641d350685d8bfea4cc6ce3c34250c7d5afa2ca65908a86b25b8923021261735746223c8d127a1f6f204f20eff2993b4f9a3dda35b7b1c607fbaa21491ad5c795ccb69848df81eb24774339fecd66566c51ab494b7e7d14978656ccf67a2fc5893ce8f9958c806fd053d7bbb0086492d75a898cdcb912f7531712e127a5a184f1e31e894ba6d5d994b1b22decd90863cecea31434d84cf442558963c82cad2d979de265c1196b43f831071b512d5e67a48dc6c494f155c0180d0aa430218a5e37c6fdde06a7e1f9cf4a0eb26c16634869744c71730c3fb00494f97920efee85824fd66c7729456a299bfac259f0ca6d1bf3fc2b37080ce4d191ac5236d05b367b79cb778bd8758afe26071072237af64c2b288a02e663003d404f92a8a024915e21fbe8d8eac43bf6b889ac5f3ece139a3b0ced2805f3cad00cb787f7007be5cec82a43a4b0729c64c367e88ba9ea68208af200b4e2c7a33f52b0d2edc5e292ff4f0e9faed6c5d1c7f56331a691f05b87defeff4cc1aa3e3d2e7c743d3ab61d1dfbde4900fde082b1fc36a1a565fc8b4e525389724dba7163031b529e8696a5f0b4bb30cf4c01748d50f0049d1723492fda3db0e6d2210f9b7658121a54d3ddf3f6bc5bc8fd09c63954013f7617ea41334326cd344def11d82f1fe2ee7ed1def108e2ee04c1ac1f017dbb15218b565e318808de0d225663b90a0c57564dca756b880d4fe54a459d117e228ef80bc1f52e3cc97716dce78486d1b9f9d195da65f90fbd9f0ac89cd0019b67b3dc448c9ce1d13a0a4175a313a013a51aa77526e666d142f3328920c1ffbae87f4337950cb0a2825c52ad0ca64abc83d8c68053fab877e5fc533fbf7e11981e23cd99916b3ba4ade3562b28e40601b8a7f9ba3052f38990d1c36860322af7ff29be06ed6dacecd64daf6682411febf0d0cee24ab24359b8575673c94c83d257a4c8a0867dd2ecd83d96fdc092202abc115ef3dbdd3100372e7039cedc2a51891b006f1988d164d8eb324263883916841d9a3f7ef038feda2cc34af1976972a2bbcc712e3dffa4c8d0782ca6902d6addd3c31976e3678118df8220c1d77a30ba7ff6b799d691a68650a42fed455e29a63350dc41f844e9dd5ca6e82de8c49e29bf7327137a4a3a10f3800717bc5ba42f328fdef087250ffc9c14b18823a002aa3406a0f51999843c0645b7978b10235557ea0c62d015b9139a7a7d089da61176291e5f36921165150942de063b080c8334d49d37a1dbfca6c4ae2a3313d77cb3d1b94b8bf61b1260671d42ba4db61de6d4c4e1e43e8ba5930eddc34b24485d57e571d18a80015c9e56f7762a4ab966ed434756a5deb4973e9c842728421f5935f8bb96c2dbaeb9c94ac7f4e743883e3aadf905338acfb089fef4e7d350a36a65a6e89d8a51461b7d3f140a12eeeb02e2107690dd939aa35c54631b7adb5edb3ae89740a5eb1b10231e14e2d51dbd232ad2f8a75bfb5d5f64c259d613fa5ae2d24d079a779aac393fd1de350a2c39c8920a560ed460add8b934f96549aa53a8e6bd7d7b243e4df800863e978ca7a1b11a1741856cad515f87895f4578f6e193186c36f95de9067a67bfde20792e75aba567840ab71fa16a6449ccfc73835b5aef6d209437b409ee05896dd89d130ff6ea82bee71d1d7c063070c1cc9f6b845902b50b87e69fcb973c8987dca71ef863d6efdefeac566f7766944cd0caa4d7e3453ec3b7f1a8aad638d98bc30d150892e7eb87bcf0b6fb9f0a7d1706fe5c03176d97ee4cbbc2c6dcd89823d60c86d2998b609eb093f6dc0a88c73d5e3aa366aa3255218d1bddf64e4227587787efedc7b5229dfa270702ae1d3f9e8e5305789007174a13c18d9d3cc1454c95983eef8bd2eefb5b62a3ebbb6eca82dcf7aaf7d01b499d23d133478c3ec049c86db0f82de099527dbd1a725f1aee66720eaeee1a1c03d244981fba8bbe0ae42d8c50925ddd16ff82be1f2127311a43303db54f65daf9c934347ae1a9b5ffbcd11b6256d51c4f9e76331ee0cd4c6b6e4407456e7371f9bad65043851def7d7d95fbfed91207b27ce7b0a831e96b136bfff21a468a22e2d5ddb015e723f53818d84bba4b1bcc4c476b2e3977717591aaf193f729b43be74394691160c742db9a98374d241e00de402a7472f8bb5b7938412a4c39ecbd4bbbdc7a10edaa921b61339c40d7b576b57210ec3ddb48da28e4ae9be6d0aa9211c12680de1b9383c1d60df34cabc1b1088681649541dc2777346310495e45f4db963edc4a27b8dd0176c8573e28351f2f652883b33cb1ea1a8ed78aa20d4f5ac28bc9b0b9a92ab8925af5b38c9fc2ffd9315397b0bb9c611e0cb92a3979d1ec83a8d074fff75e82ed337ff9fc4e4783a3b31930829d51ef7c556af1d53f547654fa8c07cfb36e15585928e85bb761c6bd3ad6cded5c687a9132242d72ed392520dc9019e9239ec06c765a8e3a5a91e78c4ed9601d8153e496433facfd05a1748c0e1c6f7d7a6d0e49ddd89e41de6f032b3781c8833aad8dc317c87b4799d534507e2f9ff5a40d911210b8c0113a877ca480e5885add66535c3c7bc84826934d3458343b883050c5a500b0c28434b948255689f4536d2ef7a89af1be4fe70757103f4f8dc28ee0c227dc0ce80f8cbc5e1359d0654565f8bd3d0ea41a9c94653dafc24c8167129d898dbe41d9179b58253c6712b854521f25f04b3236da1d7582c714fc6fb6e0961f80fd40dd47cadb5bda26ee1f0cb95374f48139c1674556ebb1279bf129fb46d3d0ed17836033db4bae2d4d993c6f2d2fa4aa8f53b1dee9796309ebac3f84fb2758ff22d186ae73d9ea6aceb011f325f74423b8a6fce56c24a21c1a315de6314e6851608224c57ef7d4f094be40f60dd89480f7067298f94d8b2590183ec4c8f63172f0ad5ea4a477b3b1e3479dfe4c4b6ffc4f8a050d6dfad6d4b321ac23423268bcabd0cd2bcd140ad9fa23a3987b95cc89f61bd90ced093237fc98e59de6354605d53af617ca3327fc9d5705b094b5c9996d8fb877b489f57225bc16871d63252dd257b5ae9ee1034494c4e428fd0ddcada702c8d1c2635d4e2e3ae1e37a1de452ddb07a12b7a8c1869244da817df6e9cf9f3828b22f26d782a4a77c474fb81191d1262ef127ecf35310576b0206c17f8e42a667180adbad7ad08b83aff6c12f4d6b5a265719975cdbe2733d3211bbb277fd4e3d67a734e2cec158f9b55ab8ee4c595cdc8b6571833b52ebe8f42914b230a5c1a1d3b47586cfb9e3b460a7c115d52dd9b026b8c244afe07dddcd9a99b7bd6f65d46e2bc3acd1055917fb763d1761579c4001a29f190cc6db0cc2540a592fa629c2d3a0bce2f805151b7e83e20a5619139df470e489861334afc5f8bb24a1cb55622dfb42ca16f4d67fa8a11b941b706d4cac01630b4426c4f4906ae3e262652fc31f4ff78180f92855a600b9735fb1ab90c751be55a1dbbd9fb454de270097a2519204dcbdd30da79661fd72c2557e1059554152f49a0df9b7ef78917e112c8985e7a090bc6ab48b618829385f2695111ca0a39228368eced57de3bde8b4b7800badad241e737f8b798c741e0092e0311d16da327bd73b5a1e0b71d0f9dba8420c7c5f58a90865b6e9696b96d59985ca6cec61a6decd393c8aead9d0d130b82dc4fc9b1355b4d4682d3200a0b64a7f20e6b38f9d05d51fe92ff3e26c82c33e722144ec8f9fc16a3cc26481f6463ddba0e845c0121a98ca51fddf6d0a5265c3d4a65e9bf176d4aa108633d9348a06b67a936c2beb83c7c1ce96bfd818cacec695160d5ea6eca9c63beb9e9b61cd5bd6e841d6d569dffe904ec3e1823d57864e8c83dd5e36ed531107b7de0cdfc65a0b616997e0aebf84a32930f1ebceaf154fa6c41f294bfe8164b9742b6a74203cd138382e8b2dfa4b9a8d54fc5d4a4516daafc91293411c3de3a69c58459666e59f602b5416669344ee8cc9fdfdd74a8c7d51128963ea7147d84fdcbf10f3f643914222928e634a8786577b5c701db0f97f2464c7b44f00c653c213b437e1f25b7e108b06c9ec028c0593d1a85a12476696ff016ce43aac00e8790876729c1afe146c3a03f1273f6d3e11b62e1c4a703437a46362ab8a8cdabe153e0ffdceb16f03a1d55b75cacc2a8a006f8aee0892c329903420aeaf1c4cfd9b671b3f5d77a2a08ebcb47fba3a8a198c84579ee571a17eebef9c3c6e79ccf60ddf79438aa39facf2ba6d14d5e12a7b444140baf2b63328bb4fc38cb79a850f8b5d490a02eb4d755d64184824eccf6c8b3cef704bdf22deda19e0d4e465219c400d5ca7d6f1204b76cc02bf768792d6da758691e06f84036617033ccfd101b45fb0cb04ca4a8ff08e3f2486ec923e8194fc28d7d2af1cde70fcb0fcf0f9640e0b2192af4d032f9e942648b2299717dcf856c317c8da18887b77c752a91dca8c08ff7dc87d36d7d4600944a6b5a44a1641ad25a61114d30d585bf40904d88f17bded62eca674fe73f5dcc5412a7b5897868f359ed7fb7c4f8c2c4524e3da7e82952ea3c7ec8f32ced5d1c5ef018fdd84c9ff1fcff5a52e74573333af56008571db4789410e25dce4a8b862b88665438e4e2e964e6447e6155d47e07cbfd6c07bccda378687673985b70cdd28170b0996969e3732708795b767fb0f6cc1c38d7e6e58cbc52f1d45fddeed82871988e994a520b6a39708707280df0158e76541db37c8b0bf7219033ecbea083ec6d84f0a7c6629b27ef9a721e75b967b3216462b618f04d75a2176d5da941874b4be6b7ddf86c0c0cdaa8942ef2900cca1212fb00a132acd925002bed1cf3568e6dd468777bbca32802b0b2b1b3e8f41962a7e425946d424bc1e01ab7c1a0e5489efd57a7cc7f6792d117e26d13b8f175902ab59a270844229ba15654b43d2c19c70bed6fefc17ea737dfe039389cd2b769d572bc0b45dfcb498a20abf02bae5e9b92f5d4c63f1fb35a766c132d2ef4ada6419327489d8b83207d53693fd61e135e56251bef99c9da3c35f06af671f8b79c1b9548cdc2e14ade2fc423a55bd565deec4a9fb04eb9a63d4cb70a1340fd020364b188473758fd14013501b255e39020ed30d924b5228bada9d4ed963744dd1e34075ac476492544e26902a832ac62124c677b139ae9d5009c0dfbe287fc2696c5693ddd19eb45553aa9afc4c3b14a797452fa0c60a3ca4ada1b6b1e3c5ed0c70a636ee990c87e3b3c8eda5512b21d94c56abd15c076591497bfa926841b81d81573dd14d11dd87f5de295008d3a783b8e7bd36cdd981074237d27ce7f166c6293fca0f4d198f3e3deb1c74e5cfea40ceda644407fbe544455945c28e992187fea2de56d3b8592ef29be2a79332f84ad6e91a6b458a6be6f88230838deda80238e7c0ba446b436094c737c774cd768abb1980c39ad8d351ee429103faa892b816d3379370b9cf55ad74dfef009d94403d4b2aeb8dfaf1170922779e302f1975d703eb7a5db11a7a46fd88d081ae3d9c7ca14acc699dceae8a396573b2346c43050bead32d5977cc0a07a076b0fadda0b5081a9a60602a640b8f701ac2e54115601c03ee865908053010f2129af6d349b8028ab387c30bf7ac9c23346a8ab3b50214e434c3807ee3dc290f411a93b7cfb2f1687aeee4f672956fc03e6f0bad33bf188f55279d7e2384ed720235b0f378145a2cc3dacaa834b0b75e2bbe1de57891b083ce47ee230a12a12c8b36c7510a6d49d86c5bc40b60c2412a9e6c7369b11107c87080fb7dec32f7fb5fa87d948a0bbceff624ee5ca518e60713efd15a45fd3cc2dca4996104281552796b5c815e257911f6a689c3c39e64cb00223314473c0d885189d5b0546323d60efc717dea35c46f91276426f9aa4c0876801b55289c14510e3c5db0c00e122c5f1635e3c26904127851db43d8ac1b9f7765662708f1bdf570b35a11e5ac5d263bb359d49474d7fb9230060184a22484c13c7238666334bc68e5cd9aeabfdc82b65b5d2b75425ebb38d7d549294eda6636484d3c430a3095b0d04c1505f3e14b2d32b886b7ed985f7086bf9ff786f8951dde35ac81e2c22f626d10dc7e00ac8bad221c8b5166b6da45b0779b561695f004195435717e724791cc60c717d04450b3a85e4ac11a311bd3a1aee03adf6c36390c4c8d341a47e8904c6299c26196de1e77fb38e1102ecd66dab41a8e0bcd47f3d12de239883ab05dfd18d4f2dba4674feb651af70ab3bc4313513f60bfc02d9207177deb768df1e3299aff7afe7e3986216a3fe9ab204ffe5a28bc0b02c51a02dc78b92f2516a5b9b354ed344de642050a5c30ad3af1efd1c2e6bcd97420ed019fc0910e991d81146425ae33174135bcf88719b3c2138fe926a65912a6f76493f18c4d0dd6d7d9737e98591d254fac75e6bfc772efca09a1ed9a6c160e58d648c4a4d1a59f575543ee85596091035d984c33377d669ea037800c9678c4ec5aecc5da34d5385d8360147c60944e4a1373d7c80cac64ff689cfb3982d3e34a4ebc055de9d8c59d1554666ceb6119f3f3661fa09e5eaa2bf94bf101082db5289276b2798c032a8a98fbe10bec521652868aa959f9416fd9bad26692d19c21ff4b0ff4f7825f81406e9cd32e9d137919a06d1dd7b3b597f1a1f1a4ab9bcd15f48946b6deb823a9d03ec9c2ec591219fbbe0e19ab853ce615d1c8f1c41852f1dac2eef3f511bee3c71a71c02cb535f2e4cc220648c9e1ac298d59f7f89136f08db7dfc3a49c07a22effc12b6b482ecfe103210c21547b789ab9bc3c1050e2d426ddb00388e755297f0a99d9d0bb60c2b76f331879844160d0a0801f3836a23942d87f5689b38c1c3d25df54bec4fe958fb36a09a7b0809a362a1be5911fab733f7a0de5234943a4a464b6c4c287a1166b1c306c0fd60a31cf20386a9f2f4e95f2cd3b19eb0ebecc48b680e8c83451a84f7978b3f7581e445242c24e36c17beaf86754bbc7a0024d1a695a176129103fd9dcc62fc604e1ead212be19f8653e457090beb913ad45e31397fe28c95476ebe2096c8c13603e9909f71fffb7edc5ab5ac55f0524d63c5cfd9e5180a4396992570aa18a0092193f758c88a3c2da9cbaab2d5b3a708dcf87b90107e8ad12f15200ecce45a25eee447806f56b569eaf9e5abc0dea01b5e970b6384cfeaaf6a173c717896e750daf94ad84f393c285f5da4071363bdd837f8063f75fadcd0f6cec1cd69ab6e2559d7b805b81a65895c46d9312aaa2863ecb90953909680d118585fd609b3510e6868ceaf9cc261d51f4b9704223043421995294d56cc007f1a767d2957ebeceafcb4bc1e40e205df59655de40c2ce5efc277946ed45334a87c78da2642cd9e9884e65d776aae871ef5702eb71c7433966fa082e5919ef1ba904d98b81221f62a22e0b4da11ea9d6afa5ae821ce129d1e47470516965c48ab7b5c3bd72d47cada7444b5f8e13a626a8b4517ce44cc61bf7841464e689d5db21076b9ed1f37ac8109bd738f526d5d2825f01b467a769d527fc382e053c464e3c39438e6af310e2d62cd25dcc91ab263be8df10b5bcc79b83346fea6f3b7b04f969a0c225eb28663570b690d42dd1205b01205021f6420203328c32939d8e9fefbde84aa167d69c7009a8e6879df4246f30348ff857130f0f86f088454d360afc620d30fdc11ddb78bcbf244d3c74d75faa0fd5a9476a9ffe8aa6d95ae8bc313263426679310eae5148410c714c4e5fa2dd208b2d2c68257ccae115e5d80c481ca10240b0f4d17c4a5cf17fd9a718f5cfcb5144e233b677e17215184bc75b8e5119afb916377e5ac21c766bba8670e6d721ce4a23548eedacd0ce547c90f5757fded41807273efdbdb314f2aa21a47eb68d9ceec91d5f3d5d419265183e1a4ec979bcfbfcce184b24dda3623383b3f0c286afd7b2e375806b9f40e952c0b8bb38bd163b1b28a9604034b4dfcdfabb975ced1fcdc3dfc4e6cb4e58a8caf3e8fe89294de3010fb2a789052f743e76e1b3e4f2e2786ed875d631f421d66a0f82f851832aebe3a735b2ae63e9192ccad7e9ab2d2dd99cda5203aac9b083b40f9f76860aec97269b432a1738bdb1318fe9d65613877b062d4658e447dbd23cf03cf74daad89b32c19f59f3206881ee4333fc6c0ac298bf1002de5274df4bf477f76fdbee7d484fbdda3dbb88f32b157396d29047c2ab19a0f0c010064b7be3d85faabc6eebf82dc6544328a79f7db0b0b7f526badb33df95e162624591aaf255b9d6ea58864b1f0ea4ee9c3f34f07343b4244ac4ebab8e462fc335e6c623d1bfdf8a485fe1018102156165c6265fab22aa961981e412b438ec8174501699abc5b8e2f7363811e6d0003b454447937d23df3da681bfc92702286152682f641b73ad6aa6d4f22d366134b432150a3a367f6fcd641a5821e81c82dd0bda0a97c26a36f250c36de5ee1c7b1aed52faa90372504f2031de5205fac283a02b0044c9e5838f438f8b13cb7c81b5c96f0b2293d666e9f06074a1bcea8594d51ab3d3d4508db8976772e50e9fa90566ac59e1872371a7b7d8d80e0956c64ede50ff532c20beebab1f3df46178b87eb9e817eff80f4198c7d63ac8fbafe91faf4a05e0a51c46096cb896c2d21e2528e1b0bc43fd0c02aa7369e41061b62178ecf8dbd8ef38af074a63290cd24b56317f281db3d1936fb9a0364548148075bb1b8a3101833ba298907b61224db53c6301cabe89fc41557cc1786ee31bb4ab4dcbde2020995f59ee3cd2a623e697c21799d18d173c9672bffeb7a101ffe9d32609c6f4c97c6031213786e78a81a8c9c9c273322c6f4a8cd7d5ee3508a6b1dd8511ea0982d1c55ce67dffb55c52d3da2ec4beab15272a93ab022cb52e313a1d1ad00ec78fd509e8228432c1e45c18901d58717f0505124fc78db859759d01457240f39f0ac6bfdc9a3fe5e0c884cb490b7de84b7bec7f057ab7f62c053451e833c4a0f91162b9ef662838cd85a2a1c9bf746ce9871c2594b7f315b282de60a0385134b8c2529d9fbfb78da8bf67cbd3fa90043e069bca2eee16e38c9d081daa933deb07e6100525e348c7f08608f41c0097bd711b50cef939fa216d2efc1ab1acf752a662105f1ccbb664761d0a86838588dbffbf3fc3fe6ca4d4eea610ae5e1a9153fea27e676c25be53da27147df86b54f3b2df9bc10ebd17c301ad19881e1277c521d95529133e4d117305d7a2d4da0b1666600b49325f1fd9d05db924d95557f8a5ec08b03bb5d9406dbd592b24425cc0f1947432b238937bff590cbab1898694201a90cb754e192a0eb48c76009108e12a06c67b368d65b8a793aa33417f6bee625b8e0bb644e97b9f15547d30204ee96d564aeb593d87e62a391006a053f9c996fe43b5702e785ae39f0a0f7d103eb59fb5b9dda616f57b2283d0f1fe6c23032fe3c775d270f63ccc1f8ca1ca1f36940085cae8b2715b83371e730240321947a117bd8370c59e37633414ad5680e7938574b064b3cec6b1c32402d5ec6205c1e61f5a3cec734f7efc0f053ecd29380247f73635d3d6bb1aa4e958f9096afc8e7e9bdc05b0f934c446f9d6d18c550192b1990bfe39df1cc9ba191f354f72772fc29ed218f6e10f240f226b91642ce88c266cb3584144eb9708d84fc7567d61013a3dacf1a3e2d3a8e1bcd39ad60589eae103b25007c0013423bb616f95fd691f469ea3d7301c59cd89885038968514b023d0f20817bf5d3d8c836db98047d5ebf0ca8b7c0e2879278afa61f88d5411af474121aae3c6b524d4d5e4485799b3c9305179dff7ada55b3627098658c36fe261d57a5ad4c23d4252fd44ceeadc1fef8c868219c28f6c77536da32fdbebc58fdb188f7308e0f0bc50bd552f2939a9760b43254edfa341e441ff870624a8705807ac2bd840850cfcddae256818863ef14765d3384ab318c00bf4c9a07537fc2754e4d3523b7b2ffbb48a7a44ff330811ab5ffa43747e9193c6470ffd33534dec37a5c30d04ca8901b1a93d6da44aa2885bee85f58a96cd8a81c84c1434f76450a67b811d3d297bf115d794095864f227da82f7f2b529445b85a9461cf4e9e76c83a9f36fe316a1c0c5332039799dd1e3d47f1603878ada3e2d1de28b8346d7370d6a5461d1631eb12702a59212aebdcca6775449a06529d35367c1451b72818f19b98b3d65a264b6f9f05368dd361d2b5dcb758c96697ca38ce1ae17a3fab521733233ac5b8eb16e33be4c88be51fa07b361345ea9d0e979fee970763411fa6ebf43ca4a3f09a484b740d4c5e024c4c3289a56a5f6b00cfb01d10b3a314d735dfa7cdc6d3a9b543a0e988dd4abc4597a112b8b1c936daef3b3b073a36ca33708772719eb85e38c27c0373c1019fcfba633b7c5fae3c637f7d384d57abbf8a8f40ee48920dd12fe5036dda36ff8a243850a4ab21257003103f312d8132d99e44f16d3f40fec2a3fa7630aa6b576fe75c02dfaef5fa77eaedb948a6b203468859ae0ad6497a5636349f08f3f50200af5c092fb746c8627b4a5b502281b271c56559a3aa04bf1b055db80ee7fad251d72c112c1bbaff47374ad7b96b13300632cc8e8218869e2a203663b3004491c4af827eeb27a5f977589b007af66c54ea85f936a62571ea5997a6fdcbfcaba218b4b173a18388d18afc97b58e42f85c76c54aeab430648ebcbccef1beb2e03ca1dd297f6f736724a91a25bb607642d98e38305d92169fa4239d7bcc937d948b3d9a7123de910231af61b3db854ccb69a0dadde275ef474a8d31e255870b599a06ef6f6ca491a65c5384b3b4d16df76b19883d6d26903373e09f3772b4ca2b93165771337826d7f749bfcee1c12651ebb8c2172a78e0ed47e5ec7bfb3a6fca276d2767e489e71c63414f481849354c79287c0f05ddae12b341d241800e4b39e274f9384c5392e028a697c7d1aab1dcd0cb44c4ef8a8603ab620119e2f45faeb090836e41a762c089a9aaed2bbd59d065327e62ea7a4a83a82ddb8c35d6dbf00b949c3cd6fb132818f8ca7e1e50a0b8c94a78ef3e329b3da23412a940a11b2c93a33f433f1fcbd55cdc14a3a1860f21f371f880b256af86caaaf2fdaeea85a35aaede040610a2739d9bc319dca3d3d026b6f2b7c7afd4f3a96cdb7fbd9bd8b469c2e1c05ac3086dcc154ae484dd5865e23e8f11bc5f8ff20d4874f5630a304672c4f5ea55970b72a63803ef2b36454628fdeecd2333672b671db8e2c3cab33428c161b9d0f5422aeb4cd32216f6dd7a7f7036e38bbd2523086e65c4b081d7085ca69b8c73ae5cf55cab8e9755263ed600d67d27e43a2548e1bdb15282e9181b73b19727e592fca8cba9521239bfa6f417abf91e0bfb9c0ea3467fc68bf953238a4e751f51fec6698543ad41666f7726368127c7e0311e5a3f13c814996167738359ece7be57425db782f525343937809d3b7d1cbc7245227fae834c4cf956ce4cb75aae346c45efd60522b9d02ed45fc2715b60599ad9f2fb3265aa27dac13a8486d7678b66ebb49a4acb71d529fa5b4f9b80ae9999b26068be7c87d69a82c259f9bcf8f45e2c80c0903def2ba1b618819a0538cb73fe636d5cd4ec60ee71fda16f528157d10cb73f799a04c55e8ebddf7399ffca88151779f33c2114fba7ea0beb14237b238cf283296ef03ff3cdc7518b8213174cd7d6244e5083b29de731a7df1e94b9ed4afd7bcf8ba5fdd5ecf8bbf2b575ce9ae7f79510ec8547363a98f24da8a26c0d91302e40e84308c2152ee3ecd8a8760f0caa0b148340c30c77fec5ec78ff42c1c7cec1f15fcddb763adcdbdc9072b518f069575c4886814d5e0651c97e21b6041c0be4eac5c1a304195bfb68b5d29fcf7bf1ef92e84be6d315b717dd7baa4df3ee3a9cb00d7776bc6d58823926cc63bf1b66ee9d31b01c4423cf77ab0d38bd1b6d252c9f11e7b60dbaa132d08227e0279380fb4c252cd4140eda19c4983b61b28a245ba90b037eeb2229280332b414b5ccec73242def1e0f76a5075c5d8b9215cb47379c17fea27c69fd4aa0ef533cfffe212378f263f6d013c8fbede74ebb1760356b48912c2a20238f9217aa6261f503db8edfc56537efdf76488b22244b2f15be9ca7b51d1d77bd773b50fcfc42368fb895e0258e0412cb685382307795431fff5cc82ead8f8f8b4b058c6b70555794cf62fe1de7c25cb985f41760d0820dd325e6f4213a005800c959327554a0798853c7e027bf926fa41228813ca733c6ee36c4318a7cd7441dc7588e8fddec6506e99eac5ef27c55029949effd15fdfe110c9117ff270fa4fd4cc339bff8475544e3b06efe9e8910f9a690b150997a3176adc5440a7319ab274318f889721fe430ddef99f1f1d2d3e900d5c728c7ba9beb18ca35a9ba48b97cc203784e26c047c225b639c355b06b7cfe518014e6c68c11d43c1c5f83cc5f0c0ae99de2ea391c0b6af7fb2ca366873d82159c74e1c4451e120d6cf5da909ae8c1b8c01afa49b7b4dac586b1ccee08bfc2a19ec068265a872f68bd439f8263fce6d0bbaf27d7713659014509640278de944ad91305d5e5af58f9bd28973ad98fd77eb813a4daec20b25e8f31140d8285284fd3225ca49ce3c83babe62d620ce51a5d7262de7f60d303e36d22287cdf9c5f39a396920b4fd16cf8bbfd7122213f0e08b4406963b7aa388a6745f055c278f9f23377ab55ec42bd6c24ce148e64abb2e30f8e6d2bd7ac179eb30f036ff99f46b884e6c06568ca00c7dd2a942703afbff8a701f1e35013d852a8f0c9db0a8b37e5d97639744dfec7fed954605f6a00b67358536627267085a53f2914c471b1a0bb325f7c89ab0efa00746e5187b61a820ffe27d1b5d36fe94b931c5dc80c5b04b159bb6b994d9b15a91d7f0d952db372314e2415af8f42bb80bd0678e7015f314fa741d6a5a75834c86d0c66d87fba817398bbb9b0182a7df57ba7c92bff73396f657188b85450ce1874599998737b506406d60210f130a8c78e8230dc246480fd63971b323ced97be6ad0aa704537ec4077d79dd08b0db64fc6046830beb12eade6bbc78db89439c2d343778a937d3d02210634c93b847031e47ee8fd7531dcab2ae9ba9afd7e1eec55f778710ae88f961c50e3f0bb0072a02647a27def048c3cd725e18da2b615447181299b0ada9b6ee12e74a2ddda34e1df526418fa2174167517f4b77ad54f3afec8282a57e52c729a093c263efcda47dff07b00a91faf8dab82c46eba20ac2a7c27884dba5fb2afdb4874c87c6c4d1dd7ce14f09b6da106869bcb5b9bf0cd66de9d2deecab1d1d6369dd52481f7731d00317515c2015152edb6a8b7d91e19f1c31534e16120864f213afdd9283b2c6ace4fe61cde82505fc41e94107433c104671473fa81463655a685b08d4a1e70a052814e1a66172cf8af57b3bc8758c52e2d74c0c0e3d92d50aefe5383ff0cb6983d8cc9fda340e9d548b73faaca55706cb29fe50240fe5a7e597ea4392583aa0d41ad76a2243d91a4548d2e4e664cd30c66687f6c2deb45cecbdf9a82aa07ce3634d744c5ecd7dfc6a3708d269483322cd9409417a87fa2e7cecf523149c91013764d7e2012bfd3c6b283a0c812490b961d64ba7e11bec31a6a4b7ce1161447848d05e9d8d80ef796e95d32af42d03a3028d4651b8476dc5fc6c3681ceb1cc782fc0495e931a951665a0532822940e60afc0070963b950dc2d7923a22f63cc8cac5db4f807c0b547897b1db8f4e772b2527205b02153a054210893910bfa386b4a523b979cf65ff0325f045bd5408770cd9eda0c8dac04d1c96760d4661eb32d1b08460d6d09ed8d1a225db2a65048cdc931313f626a40c7e96f5474e1cdc866bcd8a25e345d12eefc7bd6cb6b949ab3fb4ed6c49933beab505a8bd204489776ead2cccf17f3f0e84002110b0b81f810e743978444352bdaa434363427c19abafd14a28b0590a4be807ab2c2ec4abd6dc439cd27b37f404e79996f7cc127e8dee8076d8072701b52c5cee5bb7ac7d9ba91ec4ab24d942b7cce68473acf5fce3f8d19f4ff8d5a55653ae6d7c3cfe51fb223c2ebeed8ffe5c0c4ca0a7a484206465689e810ac3fa24202a5687d69c500ee527ad7b94b1487eb79d8680bf7436b1e0926324b3c6e0e61ea1c3b29c0492490341afac1febb690f9c341ea82ae4d705009ed4643890d4bb37089eb649047229244d75e918f5a969858edeb5a2f678fd125909bf376dcbe9db133250a93c4db7647399bac1a1a6c2018d60ac85cd39e36516cfdaeff4b0a1ae5009f9927149fcbf0dd574fd1a37af87ba9a78244e73a97f3a93bceb5ab12c2fa77ba0df1c447d5a76538ba5f5908d7f688f4c286d1eb3ecf5e85de641807b5353841f82552620f58fdac1f6cc6e2028fab9223ff7caf6939466c7c9d4e851f9666fe92edef381ff0e3362fa35b8c1bb1d338e04c068ab98ad4aab4c2be992472d6d40b04de3bbf8d684eae414f1149834cb2623c488f234d327571223e20dd4010dfcd156f546170044c70c1057a6c2b99360e613456ba88501d9fa703456ced7078c347099878adcf5f9cfb961c8a0e142f310be4bfdc180fd5e9af973876849f23438ac11f35a1d98dcdf79d08682fd3732028c19bb4756c2fd632f365bab51c4bb110f0a8998f664abf967a0158fb7449828e1ce331b824616c2475d41bc6f64809194d7de36813eb9ddaff08c9cf6ecf0690369fdf2bbf7a72924fb81f2db65373edb9b970e8317fab3bbde8e1c09d7da92b4d40a314d0c387f4b1d8fabe0baacf2073f1fdb9526b153a355529cb8bf71b808e821f112116e0cf2b3f68c32f4de4017e8bc25d848985aa3cdd10208c305291a7d2827c0cd9a14748c96890a0c0751c6d15d810e8532cb9504e1bf1c85ec0c2eccccd14bd96272d4db800b69ad12aba24796c2d2c6da9fdd0658948c216ea8d0ce7f104b77f6c12407b0d4fd81d6e8a402dc4c5ed43dac393a92a567893340fe23592ea56ac294400cb23a319b2cabfc2b1063cc6e54d062bc25c40cd95febf90a6691e1e6ea0749b8111d7be1a0f51166cc07e5c23f7985883d0420d13b9cba375cbaa8fd475d963e52d7d945a7785c130d890b86b861a921b5629bb4ec6a1e4ff6a895f5e21b2437b053b8c4a28e9365f63cb4868265e22fb138f90a77de2c5ad9fe47ffcc78be2e4b6bedaac4e8b17672f36afc4ecab2361980d647f58293635227625c022c09ccaefaf2cbac160d23fbe87c8907a46e57cc879dbfdaf39917986d261e64543d839f05f439a0e3a7a7c3ba2d7c7eb3823cf9c90b957b279b928e13484a5f4e8b72e4c89c192669ea0fc93556ce38e7f0d7f98a0ede1c8db4139c180b7974e6863f5c8ad8146f051538e6e014778f9ba8f0c9cd71e0af5a74c3fd90d2deb91626b1b1f035250d1521761a4da394d1b8731a7287b569831cda3673112adfcee216174f42f6af01480219859757ddadd765d0a1b70ee7d6a264af0f0582f1acf6fca5e1a056cb5c7d68f6d35f223617d967132e6b8a4c88db0620ae467b51fac5b363f4c4df82a738c9ee69847c921dbb9b5762d8b42395fd1898c166c108b3259bf67537bcf67b778597256d3fdbdc9777c4b95ef03323837b7650e058c214e27f072342284ccd07311ec965d0a6a5a91f67c21f344000f9448661c79f1f5c0ac9c355924a3e3d9dacd7efe4439e0f8c9084d5ee88a949f95385d7a0b2b60ae12e36331c144b6015747c818c9eebc83bffd848b53fded11db2f8fb17a25e1bed809784baf1cd0510c9b5724c8e07bd04c215b6d01ef9744dcaee9eef03848e73c332dfa497b7128bcf0f5885ceeb4da73123dddadf7c26f89fec8a43adc304702ff5767e32ee9ef0be0ed29afae11806e522fa70483fda48a7172c8badee47c859214faa93e87c2c2e1eaf0eebad0b308a92c6e143d88c2051cf993c2e66aaaa42af3b058d02498da4938bb61768ad38316aa75d44bc76330d939edd1be4099a337aebf404d5a82d83075b8744a4d815d629c458b118352575704053ee5dd8901b2faa7f305f65ebaeb4de426e16c3b6f5fa2a2805360c1252c5443d29164757711c2c1c2592a06c5048b8a99fdb8dba59779b5e4c1b18bc9461325d2d7beb26b5eda3474e0dd50c39e5a118b2409386297427e36a3f9a7b1208798c90a794733889e7c726255ce1a80d74f050b56a32fbab9929e9e72aa867f8edf006fea5e705ef5edf1a82914d87243269343023b25bdb2bd62f9c3816c0e75cdb11b6e28ac84dff8b26d7a79ed7585ecb701383d206f194fc82253e4312786c8f2a2c4dde32d48bdac64f028d243f6779e736594456cf21c0f23ea8a2ecaafde85bac2a3ff6e03c0fb3c95ded6f90c670e7856c189147c7d0776eb3233a094275ddf8c62a545c25d7aeb909efbde31626213cf971f8277292188a61440db93ccd764a8d4cf677730269b21653342f5525423830021f47ebee95cb36a38588880351442f359139ae1b74765a42761e31ccbbd5d9aeb128539678608b345036ff656827e4f3800f80e2dd9b60ede89e0895d658e3345944396bca8077243b1deb3e2db1969d770b22960a410439142ea37632816c075a237dcfb7a67f58ee801c69f6380365a798b6e05953e1cfc0c490fca424fedb084019de51dcabc607fac9b7616d82e030292488b8a0d278cd7913ee6afa73bf69114bf9a756ff201a3b3749e256a61a0ddddb217c9652166ea885d37d9996d62f767219fbbb99626b36a3316d1b30bca55e8502bf791d1ae21a6152c5cf25141aea1a597c974f54daff3aafc4632d1e75e3b5a2ad7b7aae3c9d12dec1295b2272bc0695ceafe5cac79442e15933920903a0b36bf7763aaf18e40995f902163529e92ac7ee12a9736bb558a8bedad5183c88ece7267d35f1efcbd861cab9c96dfc075a7a12ac328dd2cae1827971d0788ad232bd0f32aa0a896d5960d476c56f51d1c85f6a0b52f56023db5e3ecfc52821376701e39dfe9fba7658a51870b4895799ace76adab2f209774c84468c8bbb45f1fdfb2d6fba8af9fa8573047cfc8c82c6cf9e1cf57a450606d734ae1947485ebd9a4ac03c57219f441af0216ee7db1bd9c6503ef89ee04bce2d1b5933d58d28c098b37dd6afb1fbd3d5097c04aa0ee391fe3264f47941ac3104bda1fe7aa0aec62b7827e7fdfd79296da2b1d4f4fb5bb4870a81d63bed4532dd9f68f06a2f680e6ff361a23a28c349cf319a9bd08864771f210af8304a4c2b303452fb0464debd8bf8cb3465f978453b01f0e925656d3c0ee5a8a1760e7ce7620b240f4b43bf664284de9d650e57f59aded53e92beffd3076ee157a29e93dcc30751f417dca5aa33903ce7616f2b6269152bd567813020eb2e9c89a386d4169c5bbfd85f7393f613f8310885d5c4de50fe20e430934d70df54cc6d0f050b01aa902767b62b266e2d265d0c65b33bf436ef09c593b97fae3447ee84a8ef80be511fd72ad474062bbbcb2f6bafbf5391632dd2daa0a21696a48321ef594492fc44835b6b96f1b649f848546a0d6bc41240ba79402cd331bb88075c03de9676613e982d2cfc781f738518afd870f36e7b3e0d4171af51472780664ec7d96c20dbb6a9431a2a90aa08ce5da9bd7898b78c6db6b25d9e259a2b1ac74e39faa09749982f79dc8b3b1c0b959a0d0db53a84e8ddbeb4fbe09b19cc5549062eb1b8b6ec12fd9f16119b9ee2222c4a9b0009d6d379bcc755bd9a71c78cd54f442ea823395d134d98237b382f49095b4177a347ecc8f56c4482e7f1fb0269a84038c6e1795d4d9dcff104623fec827838d4335685a82c3a78406f551a28cb1363df32df86e87fa57c968113502fbb430af5707ff83a8dbfcb9800f8592fd82dc0bdf544ff7bb07db6d9699802a9ae791f4aa39dd49be2fe10b08e0de43243c3e96cefcc71137c474d14111e38ed307335a2f50173140e1c8f1cd8ce5ba22091ccce5167c191c13dfa7cfe312a0c5e996e37b84396fa79218350010f732f517e441d0242d824e99f9e4a139765d32034cd896d6a1399b9f184520767a835b061d10f0ae2e2ed773fbfa5a74b0b2435a06ac45973a7aa909de3d5162e450eda309b5aa0631c520c4ffc2d68a911087f58f8199374cf02ca8fe08616ef52b2ecc5db8dd1003f1bb7f8005e773a789bbc0fccf5357a3fbcf5ac704e4630b8e649b038ed0dd0c84a68abbe9a8a45abd28734e4217318bab16ff080ad910b36256e899614f29cbe69996fa9660f9f28de0b56db631516ae0fe4cf27cd94d01a0e5a9c7d6a05ef50345c93e5d051793bb0e0673422a6107091858a37ebdc8b2b743a6dcc2b5e41f734b8289540f749e20a2e54dd3aa2bc6e8758b912af3674fc77c861efc46f3ece7c65580938416e6864c9c9968eb0540485eea3126743199b3cd45e46e96723ad5ee557a8e4d6cd77dab37b45d094029ff4d119fa6d35858caffb247413b8e5de06867dc207943f48a47dc03154675e1df011c99683a5f349a28ece636d9da34b78129896b2c789925a798ac5320d6bb190987048bf10fd76ef292b5206cfcdc93dfc7de580766dfbaf23e69dedbeca2ae6a926d1055308c23548a9c2f467bb2db9535520100b52444f2039a7c75895c5d896624007962b5d237276ea8d0f2254edf4d8dbaed00ce8dddcc609aff51ebdfa11aab50012d8914727b02e912f2c5c519134df9abdda1fad971d4266eb89ded465d426d3fb6a8b0a83d7243490bd43e5e9b8c1c62e641201eb0ddaeba24c7b8e91d428136781493c7c25def154dda3003d804fc105b83bdf8e0bcc9241f86b378a88142a52aaf4204000bbc1a131f972311c76f18313ac3e39009c1cbd583e357971ea6267f9f30c88aadeaa8eb7622a1a743fae80b0bc7b6332819f4a9bf944bdbcb0ab1c7bb6b229e0d492c7f2ac22153e26901bd33faf81dafa7f535a8057776bb1f21dd69217af89845a92769add2d706178090f5c74bf26cfccf7d8c71bedcc80cd4db0ad919793643fdf750bf05f56d12bf844617f7a94e4c0b5e80e73de9b6158dad5d4feab290d7faabc51bc3240e9c616e0410d0a60a34bc0fcb45686e0d3e526c3e0f756f2dc014c503ea5a1f3455d4d4b0b1f49c6941309baf613b42a1718ee294b38724113c61d0cee2907779f6947201733a09928b52039e2eb17459e846241a39f571742244ca867e615a2195162ecfd4e5ccc284c1c27d21a65ab14e793ace344332c681517b7cbbb4f2ae260335a8d1d9bd6131bbb1940d2a7e248c5229209c1426073cdaa7f8ebf0c1ab4b1339d6e1b2504adba9067fbdcb81c4021a309093db4d4047fff9510aa4d7b02ef07071e478ec6c81df801ea2c8105e8e010d83c9184973465eccde7471c8555f14bc275211f303cb32f71e3a671aa45778d5192c35e833b6ac9c58d3960ba12a2cb51543e08bb55ea6851d1259edc3a740a1a908a5068d97b95585133f2da4eedc0a1311acc9b36d7506b2844a338fe3cd98e66cabaa3847c7de73ab451d0e6472ccd19d1b2fb244d6ff54659c11b6cfb8cbacbe2844201d8a07f4f471aefa4ba4bcf3cc6a9a8fd04736f6e9926b973e142e1d498280f5955dee300c15505fd364ace8b5f347d4a68707eb9324bfba383be43358696de01def252763dafae9a7adb75184be381b206f387f5e950e3451188c11a4929ed0595ab104e1490e1f0f796a8c83abe90d0d5802b97059037527ce4bd363b46545112757e72b900be352770f3222a59888a59dcfc5a4c17fc76cf70bba35e0314194d8c1a08fea559d7635e87470a190cfb8de65dffeb6cdb25ce4774dcef0e92309764045539c222e35d3360d5ef47a1497ca7e6483673d861766556f343568bf927de3ce26e08a72d9bbd4afe19ddefa899876c6f5bcd2a76fe70764126f1c590e65a7f26b9f5d62eca92e49d904c488d1c57da75dafeb912cb371eea4404b02b66e507ed67aa3d04e6b9d5efc27d5697440eddbd7eebe6c54175e7d56939b461c3194e50fac35084aabc8ff9bae7dce938787f8ed52e5f8282a5f41c4f947cc688ab0723fe7b0086e0af0a2494a5ff11a78d0d7962a671b1daad388ec35a02e4bf1397d70d4d2c1e25d5b9e2b8121ab8b55fe454a4ef4d3f277f5784bbc48554ca38ceecfac1b8e62ba6e843bf221a1bd0df175bf726adc6ab4e549b40798c31d2927db2302b4b0794f041f5a96019ee2ecbdbe7a7de97b7e5ba6d237772506454ba4dd5134b24f2c3e85b2f3a58c2caacaebaae646f8824069d964e478e2295715c56ba98d78a364fb716377145418fc7d582d2bd1f72600bc35905e64f813b19a87c199f89d960e05136dda0a8754ecc4b30e9ea7f426de64c719679118f6063905b2961e08ad8cd8ceddf3bc0090b7b8e1bc6236b90727c279a0a9d57fb88da17164176f9363084cea327104ad2b2a805f5984c6f3abeb85db1c64b95a3240cf56544f2ac7f1d801b29b276a2110a619c8b4126167c7302b26aa4279a4babc39e4bb8e51b38005b66240b2f8edf0bb5d306516fa9c1920eb250bceedf032bc5fe95a8d09cbd3887b0fdd45c88acf62f6ed48ba9df820332c854de399425645c0fb4677f6288a761e0c3ee62d091645950f50613ba4433303cbfe8356baecf5d6773d78916d47bf643c7e5f0ef8e4d43ec5bbba376016f7d4df5498cea7260d5b029aba44f94adcbee69fe3a63c478465d2d41f9f7082fd78284fc02d4bf34bd58df6a3070fb9d22ecec1b2ec159c172f96127d5680159692022e1624d7795f414e48e46577f5be8750180c7dfdef921f8f634f2df8c529c6cb487530eaa2e09ec704cf0c6501f26c6514c7c78c51a7a6525baa86e339d47d394ab9efa1c5099554f9afc005465849e48d9ad18085c7bd0664ca65f1e65fcdc5209df2d8c3e45852e6e37a3747006fd2eaefd133c156faca16befed45566dea4fb02b8d5e963c89b240d7a0683ca37c41a1b568329b7c0c67c44165794404c3eaed47d6ff563b26a6dceb7fba1f0f6477b9fc846925aa2f08eb70acfbc680da7a06ecefed06a4e6a0c8a65657a21f177638f2a7bc7b078037eb00f17852aba8ef7b7c4c88ce2f83af48f08f983b66098a0106ca3f56d84e10b48b5cff5deb2aadbfb9fe8de453b2f462c067f7a0ef75fae33c2da6bcb698ed5b9a71e1b569a148281b32e32be4931af88b97354dfb74bdae832f563d52a34cf63f99b95c5da1fd81b5a788e5ebd14daabda58a4feb5490e3471f9ddd820e387147d32643c8c481d8889e04ef8ec49e30773bf3082a0a0327998a032b8f7dd1a062d3ea305462f79fffbfff850fd89bab7242e51428413cb0d3ee8bd4080a28d898b7872112bbdbbc8de38f0217a6fc6f01d891993a0e5a6fc89daf3344dfb98849b1883c52f4656681a04999ebb6b23c7c06e5a94fe2a5a6422b37a98d684cebdc43bb523b0d423c074a0de45498025dfb0f4762956ed6e0ef784b1539544743dfc9f2906c6967b17c2179ad3cf1401aba4a2fdd73c3da284301e5592221eef9bcbf1bab80ec6777f2137d2bb186b0c1caacd946815aabe2218de06cbaabbd223ecdfde4f47af049069ac2dfb1fe540bc811057b7988858fc25921b8fb3b0df246ad04088aaaf9496f366357fcd5ae467a4210d6db567ba5a9e3cc698e6a23e549d5c3f2b954e3fd40c6067e0af492ecd69e330dd23bedda3439585dc805b774091d81113ede807e8283c5f7bac35ebd32704b759bfab2f57e0b88873367ad5b9b497d119a457521e90cb855a8810f9d679ce8433917e9921c1c5147c3398973e265a94384d4e0e495137325ba551e68111d87f996685e00b6c54b57488b0f04fa1e567b9696efdaca65f385d5878c14601b1920ec8271772c64d093aec0d776127a2513b0ea88148af6776f7e18311a6c9cb920a02fcfa16a139522542423de31ad99117ef05f553a86641e0ee090bf65499eda7ad30ebc37b9bae03a6fb14209633082bf99ae6574e84b6f4679d4c02c4626426609487c84027b174e43608be3fa71245cff90ce603091f3f0de2a651b5485c0a22ffa2003a571f8c7290f2eed929777565b463aa50ead13431344b9f656de5cf74d22dd3d90257cc0d75e8a7f3981f342278a380647d31e88ff776e6a1b29d9e9d43c13a14fbf566d22388aa54467a5b54961bdadcce180ee4cae5b71ffc720a9791c28b93694a79680e9361a47637625a95bd74afbf1c50ff3188b32eed886bf6d24100cf617e6a0da069484f00602e9eed33e094b248b4ead52a75578c142ed8d7b8af8da7514f5b875c6b95a076d6cd182949359fbd917af22cacf7bae620afe350b222f762ae06338b4cf1e02898b4b6a221987357f9349178b25a010ba557972dddd48cf0c3b9a17db55c88cf60c4d9ea3edc950e61612097c88ae9073ce433f59b45c2c4d3a1eac843b304c34b742027f131ed5b7576cca54aefdb6823a0383e21906d2b6b3f3f6e8e29705fda1cda12afc019ff594f96cfc21de7110d3af13ff68760ef63a0c2ff92da821c78172409bc49a44646940bc8f46cc1261c5548d9dae87d27e494e13bbf01727d13b83ae09ce8f53f456f1101ff260c667c4079212aad7766671c049c93ece35fd3e62739276ce348d2be2047bdd80fd79f691dce029f896e0c8e9dc53352671c9d8b63d0e275884b7524b09daeb1674f0780386b23f3be21494914d00b54a2fd27b204f4d3376c1e0eb566af1375bc79ed6f21cb3063db8073b132a5a87d4be84d108d40fd2a51bb928e59a9d4afac5d36fe93be7fda663f92e301fb2d134219905b855958b7a6bd92cf70212d82968cd3bdcd50ff9bcc458f0835fba225ac84995f9961d8c985e27d0a9ccf67bd8ea86e2208fee72737216dd1c3ee7d33d6e78c3f8961cbb6505713446be9a6097ee471bc5de8d284c4e1241656f92fcf3302210b8c144d8285a8e96dcdf070d2047fbd67aba750c0895c76e2e298c5f7d75ae879b4e5d28cca47ff5fc2f13ce1c89183e000da719d374099f38ba732feb0371ecec2b59f6e2a84d92e82b3a94bc1ca2dfda7dadc40410d872482f7f4bf7b6ba89ac063e28c3e4b8b65164d577429a7f142d4c6c5277ec1127fb03298e99356c4b42b9221f93dccaa9f071e0ead3df0507e2a30665f76535c5538307765ef10b74fdf7760342fb5fad2940e2f81202f29836d3c54fd9f6c284977c2dee8dc22ad1a0f4703a1ca6bb38a3d0fd8ca804f14bec4a72668abfce3f34e1d871789fde7fffde1800a7cdd0179eb481e37a20db4b4567929e0d9a19a1da96077eab8ff5ffd433f131ef976b14052c4e81c5ae3782f5fdc1ac642e9cf799dcc2043554626aa60e7f2eec25863a085116dd6adf7036ff8247fb9ff1dfcb87d57383ebf4db3d3022acb201c3e62de21e54269381990485ea65023be3b585974916ec8ae56fcda5baab3ad96655340b7e32d7d2beaaa6af4fdfb8c22ef95395ed1dd9a7a5422a8f27f0b45314cd083fd1b6a37f46c16eab48b53e7bea77d3bd566643c07707b09c41953f5023ba72b1acda966c2a9169862a934547012b07806c799b83d22c6157506308849d9c6b484496c39482e7c2b221751d49cead391b4dfc9fc3bdf3ccef87cfc476d45e82f49fb416cf5a9d7f2b9b17b18b7c2ba9d1e69feafa3712b38662103b5ae2d1d3626c4db10bf49396ee6a56dd4d985e1829e985cad36599c32b0487da92411cd090e9b8e2c21660d07ce5ca74fd9153997410719233cf1103f45c927c58372370601596c7b89b1977d76ebd3d266b20bc7b5343be63bd5efab075c686ac070f1a317e986217f8ffa9b80ef6c11295385600a74d739f5104464ef398bc9594f6311e963b5b199a00e3dc0a00511ba4dcf298b99c30b395bfc22bbbf33cce9e675c5b8989039e12ada01e4833eec858af8396cd6056163ffbb8d28f74a76806ba26a2be753df4a69a5c8f7f13b610d121d1e582a23e007ae1877f4f7f715a18efaf9b350ca5a6e023bc36aa80add287192ab9eaea607d167f5c0a4283493709b72ec9499d2c43e163eb6ea715711f1fd9d08b10e4cd5fe60380eb5d4a12709eae9d2fb513037c16e9f76a15935ad1bf8466116d2c4f3beac467334dc020825b26f7ab3cf18063f8cf463dba754914c80e2f67c710d3f4f4a3f229a857470ab168009764fbecee6fc13294c18789db3489d07e4bbd21ecb19d95f7d48fe75fccf08e2147dba542cbf79c844750b99f8bcf6eed0bec21244afe0651730b368e71862f9700be8d82c404ab03277e88646655df8a741833d3bdb9a47d428320a970d891aa7c2961dbdf79be6fe2d952f564f32821492029daa94c47b920f8f2225ac21e10ffd8a6dc2b9e8d9ac7d74e05c00e5296840c8eb3f9fd64cefad7352c0b6e138e512587040d80277dd08ff8b19fbf6fc5802a6f1549f33239e79e5ab49e424c2fb1186c67a9a640425b9b95d6c961ca683bf4926681c78e709eee9808c773353d2f783ec031dca0df7fdf53fbd5a6593aac8e30d8760afe91752d89b21848e61b18439f4b947f278178be11f0ce335085ac7dc916fbcb490118f02147f1cdf8e7c7625829902c19fdb32d8a5c257025ca79775ac8dd70d085330386cd3880cc7c26147c8044ade6c4e4d3ceb1b189eccf89c6be675c0df61187840b0fa3ef4dc2dce4b4fb6b202070fb0e4dc5ad59401c35f29930163e176209e61f2cd11c925f225a4d832172def54cdba3ea34dc86d38e38371c79cfa57bf1f6146d24b66f5420ea6082ad7c92556f0dadfe1d5d692f78d567819e1e2ca8b8a5ada370f2bf0992ac949a2d7693f40af805e48237e2d7b4143ed714dbb68a923171d2b845c943c08e1b0da9410b6c2c38bc06b78a26c28872fee6647e991c02e79e9b3f06a723df06f8a457a5ca01d2edf87b5215dc647cff60b42968bf72731f891e284794b606655ccda6ba94412845889565785327a835a1bcf359c456b1cd7499aa5ee9394bf23d85dc5fa1ae20d86a468c393cdcd7dd84b605d67067ff5e005787834f69dc5d4a37831d723b601766a8dd49c1e68f3b485a25dfc21404c4610d0424c282ce0c68ab8d871169680c52b22114bda150cbcba8fa919ff4c3a1a2bf1e852c1a301358a04ca36aac8c9bc38f167200906f3296f73ccf301c629943b7d8afe0b07fb6cba76394c2109c5eeeb8588e1aa9ef9ea8eea1510514efd5ea3afc30ce0ddc6128b89c384347faeae17d12363746425f1756ab77ba432ca6dca6543fe91d0f40d91beeedb5b91b05fcf3a5c62d33ebaae4f5e66479dbbddb49364f404d16d517e9c0227249210e890e5d49a37ca47b09a88aa7dd97579a09509d657ede9912b7a9b127698c2f1e0c17e82f346ff20848d65346fbab461989c51261a1d429e4eb5d25f69bdc525bd936cbb729cbfc4a94396690f095300f73ae8f9616eb046c08cd5dc54ba9483b471f91eb95ed200295c05b0bf582b1393fc4931cbfd04d629318d076eef84597ac17a72c058bdaba831ac366f7cfe352a9bc020239a530641140940fc480906335aa67a3a8e26bbde7f2b31049ece6f96c2bef544346e2cbb11bcea1ae760a3c131ee92325467ac317539f895a2bb9f025edde75c2ad98e4dd36b5d0a3d11d0a39123885b5dba7c6e18d9f91ec7373334b8ec2d54ecd27fe00c58d46d20758c91ef234e9fdfd56eb17f2b60340edc590617cabf30587a85d3d1cdc11781ca6a4aa678720dd86b4c55907afb211fb4bace28cac38b807d58e2d61bcfc81bc543cdcb202b77eb228d703e226e8bf8b16f8470bbda9859d3a26e5809664499d47db0becbe9e5a577d7c6b245469468c942f323a3fa1ef290ae72aeb23cc9a369f06bcb741c0de3b37279d0cb16d2bd01fa2b2d7137ee3d82d8adfd668748b92bba107007dd46614c0a86b4745acca545112882dd31c469034302acb5dc543d8e818d2dfc79e2e3cc67ab0aeda74bf59bcd3b4c73ce6ee77c866f6902ae6a3f5c100efc41bebee9d9c106bf782fb300b6d05b3092952404625686f1a2b1517bf5314427dd2eb78f6d7450d51396a1a36efe727cb61c6bffe862b89fbb715ab3f2374d12c852cf2d543b85fbd8362f45d26e4891d60c4027b72865d1400083fe3a4cd0d4f80aa551d6d367c8f4e9b0f4f55038a77284778d7259d37bf0c542961592d90b1388ccd6295c2ab998524ac9f4c81f7a9fba1ab78ad707111e58531f841841c17662fd14a556e9daf27d7197e9d39ab437c19430350173eaff7f9a4d14a5f8097de2154feb8a8a32944a94e60869e75825246ac7d5ceda1d4c8136decbde04be0ff9f8e43ba9eddd9288ca7b1a98de0374e4fb33c2dff89ca1a3678c5942b2d892388bf8f20c6ecd5047d9439afda838ac7f09868724157a78a39e3712eeeb6b301110ab6e653eb13e66f34b310d6ecb9b4aebba925e7933fc8e933954a5f2604d4ff78a460347e4eeca1d12f2dd5bf77185b35bc6772378bb8aad35461a5adde5608468171f51d50a440014073e6d2de6fed74847327c1731403be1e2744513e5ba4dfdd87a2815be30fa2f575d6bdb0146fe5ba620cf998fc5da37d6feb8b0057c991f7868297d6e2d24cca7f89925969c756dfa83912c25cadc0b14a1c702f2ec68ddd3a33b295d36f54375e72a26eb3772fe437a24c66af85e6a260479b557fe1e2d221edcdebc1012631cfa7b19cc4795cf79c7b9d7dfe1a363e4152c39d643ecf7cd57656d568469c4b8588c128b5998c22c36fa63fb4c4373097ed06f32fc569998377797b017e76b1a4f1a293c0d5781492c1e390c8e7ec8f39ec033b297f5449bf7df48681da30b8ab6d013a507a374d3d9653d008f30176af7705c844506824bd86e253baec5dceb9a7feefdb1794388d802f73c0396301ef8e6ec1815029cd0b51ed219343ebb75a39e31e99fbf240fd68c72d1504b2a075e916fdf7a1b502a883267535279d8a197c505f1f3aa0ed050fbc085f7cac7e4d19a1fa2c20f26749e0e2802bf3a34cc63a737ed3f3c8b777a181074cf56616e2e9c3ee176b43ad9a28a7567894dcb74c51085ed951a6d144426aad0ccc61c196f8648baaabeee76232cc233f4f8af0083e593fad80cfd9ff0fcf91683203cfd7910726f95f6a4f0898ec4f669961e3f0aeae65eedffac71d0700be03cbad8d26718b13d354b78dd117543737808378259d7b7de8081d62021fb46d318d392b2b6cd4a67dfebdb9b8d62d3a881fe08afefc752503f50b7a75f40f5c99b5e296bc666589e0db5469df53d7c87b17937cddf1b14e1fb014921d5d5d13b393c7c216a8e316f1744e71ca2cc5872240c5abf6017f5d4a4d7719966637a91e766db4ba4b4049063f7c89f2138d8fc473a83b0def18caa587a8988b429998ba28dcbaca6ae8ca49705f08a1b4fd553c5ab790c6e59186f174f5f1982c2053f3a4cc9066c15f7fb928aa99c30c9c0cfd3bf8afaad83d698128c9f0ec03aa7da665fda9ad950bb3fd81885e2dccc9c870401832d3f85979a6543c93ee0509122c567978c3fadae8204297ed18becda9d241d3207b806c859c81936b20bd4998912ec8168e297f19db8fcc314a00284bceedb9ac1c5440fcafb85040154e7eedc065730af04b89941dca42096d3b0f2f9cea5625be506c36e50071ae1fd381cd657369afa1b21c4e275f83cca14da8338f48f3891e6e3ede06f310aa4e9c7d242dee994f686a9dbb5c209948b530a16570dcde610266bd64c3fc73edf5ddc986d7b510ea1a1bcd225a4d6c17bee9f9d754d1006966a776f2baaf26b7d307923ffb1e132f2ad8c8fc22c7627eb4e40cbc9c72b501ebbbd8df3a6ce0e30006770444c32ad3bb53446cb0994db63cb8390ad14ff135d2a6d8f63348112adb607c987e5527c48f5b9127e3a38d70478ee69de2c527525cc53b87325cebaa06c968098c5960122c54429c41c4f08faaaa894c62e9ca31f4dd2c303ebfd0805520159f2080abb0e171836d17624b2fec6e7359a0069f24bb8dac4598cb4a39320665f425a5b58325456d2d09d4f0be962b4903ab71662d52502abd2e116006349e8d3d49c5758d964bda760201c707477737d970f5270ed2c6acfa802d4257314eabfe5145711e9517fbe1dd6db760cddd92f3b070b18588852b9672e110c43d272bc16ee81027d996f7cb22ae93033b3b5cfc97b0e2f8886a5fc6767b564f3c97c163a023eb09ef6379d902e9c05ba502cd37adf25ec4a8b6ca8e2034b7167fb622f2e1eed0c06a669345ef6a6c1d054c15ca698cdc8552147099dcd9098060158a95b309a760c1163066951fffcaa7c50909a7f8381611ea168cf67b0a5bdd181ef4995b7ee9587c348db5833e1cdc7607aebd69b0a54585ccbe300605f1d2b8f152dd67c3516496af3809804771946535f1300651f012258dffff1bb8e58c9156192a508b216b0cb391feb24b29be23640889ab14fe4f6b020992e37bed3e9233c7a8332fa745a70555761989ec31b66b95cb59233ddd7c06643a041c77f06ef12522597b376833f0d4a74d840622e856569c0e5f53d88ad4b825b1e2894f4ccb7fae31ec6af1f22de5d851c5282281fb960353c84f6f389979286a2a9c0eb9de89a63c524c7fac2e5e2383c46749be86d6519bc62f9d019b94e49d59099267e61bc7ea31e3db7af77288b00fbbd8e112b68ebb67fa31879b060235dfd4470b3dc80b9dfa17999a013bcc9b13704b0b82532e9b7d65005cdc131a1b3dd21b0b4e5ba2f678520dcd026d4924cb304f3a0bff8937c0293542b4ff54ab1974c5461feec22cc2a6d5e2ca32ddda8c9807e944aa11d4194db5c63d9df3bdd81720ebc4917dafae6fcdc837a7ca5410f242b21cfa9dd0cd7de9842800c772a2463882eae0979be5ae13ac6eb1b0f82afa31a50256922dad99afb92ce8e9ecfae92ae0b79c9e12201a656f2fe353d71101cd4b768613adfb297e5b73ad90429d4947ed12b9a4554001c69b72d4d6e2c41fa78abc59bbeb621509beb92c3fea30923b486a16a9c916653cf7dbc0ecc863713114674aa1acae8f133f9c42d2044bbaec907ac14bec58ef02d2f099f2773f8a7cd760489f1a87bef94d7f71f64d02cee5734a5998760c48d903a74c470ea857f76f621c7985ec79c953a269bc9cf575c10bd863dc76fa471f18fdcc6ff22a321c0465000d0dca8775c960a0c2e814088765971a4a9375292cb84006b22491bee4e8f01c3ee498cc1d62e0eec5869ca9eaf28a201f117084e9d0daea70d6d13fb3784099fe28c3d98aef0c626d1c4221bae2622f55c949d24c9da076f5ba8be12e13cdd4e450c2e5993ed7dcf52518f57642c7d71fa264a1ef4fac43e2190a71c6dd8529d71aa60215d8cd0855fe461993c273f5378b6e55ff73d632f3a7a04e0da651f02d884097253f023f8a71afaf7d22d394a862116b943dd76aa0a7f6ad5d122efea87bb779cb694a5e13997a330db5c5d9dc33f8af77a6de95f90f6802395070f00dd6442d56dfcf2528af1cf0749b8146c8e3ef55d64118943d14b6334f4bfda25af75b10e3dc94b2fdceb7f063d392faf88f536b0b662a54bf8b771b344f29646f2e29ebce8c4feb1ef18d3d53166bae0ff900918b6514ff6085e12951c1e3025b912c8ed55fdd5d3756f2fcc5f3aa2683a3e3a3e42a62210429b81622b3e5a17111b9ba6c3e9a791a9215b0731e92b4e65e3356ef21ab118932cd337c98b07c121d955771fe5e62b5f978c653712c3058ecdb16b646cc58189061c3ddd02f7bae6aa5f9b731b569f07867d502de8acb73e6eee52e2f0c24e4fb5d25d7164df57a2eead10694a18f16703484081a272bad42edd72704f4ebd1219cf4cc74ab707eda14babb0961a6583bcbf4bb7940e1601bed5a9ad996c91a46fdd231a832a6eb29db50e6350c1c9b32976010f2ec5af3f173d8bb1ab391945d12991cbf88202440039d64386150fcd6053db0f028d32dfa18053dfb4c9eecbea329f406e5c85915e180e478c72fae7e7ff18040e79eff5434466bd6e0909370d8a088db8e355af31ac02dfdc2f7ac5d2929eadd6b63968f1b9450952ee2bb50a33dedbd766c2440ffe4b6934c863138fa3f72004b26e5fd6616eb065156848cb29538a674dcefcff87974f1ed625bf64e49411099aa63bda54c064fd81c5859cdd68c8affa6a5e9e3cfc04d5d40f0b56bcd8d188978b7d72bc1ec9ff1b449df70114b58895610d883fa961a1957f91272a5afd9f445f25b14b19fdd88a891936f80c98bb003cbeadff0e17d3db5aec243dd1f4b79eb33245d23959dfc81711cea2cbc12f4b1e60041e406a1aa9e64aad27cd12cfc5b4bc66fc5d5ccc4ce42b189645ef9cf7a603214131b073d2dca6e209550403c6ec1f3790d3c2f788643e99596b6c6bce8da4461647c19d908e2e4dbcf0994825065b5436d7f194cdba0f5320ae359cf48c714778eaabf277dc5de7b2e49ecff465906fa238e9953863cea9e84d593ff8da22ba2b7f385a67a82dc69861660e4f9a83c6f6d87131ca22f0281e39d12f8e2c4b904bd39a2b5ccf8fa562f92e38617fac4f9d2f3f71c29d8767846f0bd14dfb0483f5f9154e348a798828d07576f2f60460cdce7bde61581e013bddd3c7bbcfd411b0b358e92292726ddff234ee4490a24424d7db9c55c4d731fa2dd3aefcf5ca82201c29a09c7069e9ee855b4bf3cdf9307e05f364d09a0640170ad869f02be7f65b8650e1da08fd4c54575406f41c3f546b4a0dacedde7abbf1dd4b836bcc91fd9b7785c3e981444ae401dbcda07fdbafbff29e65f411355954a62d65cff611c016f2ac47ae4f0dfc67499f936e4e9172ba545c93ac0191433ae01392661d74433a3657e0c793f35b175606e29d6d499cc7cbf74c9da6c3ab33fd53537dc2d9a00889bf71c6a0e15c5e146de63ab33837178936c15bbe470f966823fdf395c0a4c277e5b202d500ba77b77a9028664cc9020808124891b41a520d8c4ee472c581d7327d3554b9c5ec6f7da2cd8d262c80467df242d815656bfc0d9d06f0e386731067f4079151cd7b64d1df44fbf7fe1d9add886d3ca557f0a448f6d582258afe21ee87e9b061cd543a7401b6f8bcd43b52f762fef66169fc91bd7720c9917782a3a481fc0e2903df4b5373ada339bdbcb6fa4b6aa10907282a2ff611e5d3f38156f58cadcf1191c07ff157fce73c27cdbc8ec2bbc81d407a0ce3adf9641f7d98b22a9f132b52a28ffb9f2f9c4780a04a3d9c5eb2ac18885ea0d96984991d82401172fbe7c6a25ca5968b50a97c2383bfbe185a7fd981611db2aa54883c722ef72092a6de2a49d50617b86100aa2d8daa5825cc67ba3115cead010abeaa9875fcc21bd5c535834db8a04ff03d6171e8d07692f96d5cce345838f01b7762db957523429d41cae230bf3f165da8a66532721e52e9656f00c6bcf4d27c23aa73a956d5c765c17d79f81ee94d0c0ce3d5fd852f78bd659c3cb3b04326d1f5dbd59dbc89b2cf7da48b1418d192cf2a2442e5c6ba78f126db77d00c02b5c979e4ba62a48b0779100d59f956b5748a931daf888416ea8ffd52a40395f8cd86607a00bb5bace1d5732feea8801029f0d0b7abbd7b8f812f3d594bb514257eceb8bb5137a6a2e279c61cf046b56314b9b1f8ac68ef5d3ed75d8c9864172327cedb1d4b042113c17511d8b1a5cd442ef84036c2ac8b858b9f356cbc4eaa2b8aa8f6490a056f5715b43e5a4c4cd59a07147351057904c6b4f48cbd89b4d441859212246bfe8db3a62b12e5bf1a79d3260d5b7ba31af631e2801340223081b0ecc41f97a87d89b7f4e2ea02f5255f2b34cdcddf6a99d47ba2882b5396763d082bbbf97bbd5eb65b52a85b5a7a5c3f253804d955e7fcc3903848dbf022441048eee36033d6c90cfb62e74480370015f55d85d7156405ee78dfe2672ead8ee550ac4cc34835f7344c5c80bda9dae5e8b39cba28b7e062df276cae4fa59665335919e2f897f948f867a431b3bf55bfcc86ae5275f1587b4aebe3b2bfa7d4fb9be1bd51140a3a3f8cccda1f5c9534eac926d47575e062b549d718fcca0d29a535cc3e77f2cb71873a6ef01adfc25c35209cea5d76a9bf396638128c7dae6d051be84783ff1a5d0c0e05b9c2fbcd5ac28699e4a3219f638304607fa2176dcf3ab996c930d7c9e61aec1cdded91c44e993d8f72d6dee9da2cb0ec32a9e213a735a160899b3447803ea43b80ce145d12f135c715a4e93d760d606ac5dde91295ce977315756679a5135fb363caeb74b6e343c857a4fd239406f557f53a676155f6f0661980a7a045955025011e15303ed671fe94ed67ba040692a3544933917e7fa1dc49783a4cd41505be648e5737be1b73528917881a8f68fa5dcfee7be79ea0fc4f2e85a381fe9613e271c3b2e83cfd5646e8366558a94202f2d37bf9b34b98deaeca0df6c33c81742ca99b31208139b8ecc80e511cd3c244f2591bee7b1d07800bd0eb6e93c0c804b14063c44ca85b50eaa78c84827760822b1d59080fb8577e70205e2d6ecf37bcce50f9ccaee2e939c27549d31922e558e07dc48e2f6c2ea9f666bd893c212312fe7789d62ff7197d560eee1e61b498eb2a01e2591427763a0e39aad8c1d5957bfb212cd7318c64d016280b48205f89eeefa7a493488178084e3f5f6410af51ffa30e4659f6236d21275e9a198de0a25cd3371faa937638d74a40de02dd27691391a3ff74912aed377f658742485a77cd70ae63a420d3f6655338d55cabe37e11ba0a20b38b873fd62763e05ce97010165a5d4ad8f7748d05be89fdf434e0a25afadd98d2246238229f6e435729b3eddbd90e2525abdabc3d9ac7da340f2f59f3ed69acd00f875fd67c934dfd5f6475b5cfedf4036c452a5da479722966a461f15e5a58d137e6d88d2867683bec75f14497a7beca221e7dd886dae3ca0ece21f5a656b5ab33ede85ad50cbffff27aa5ef46d195173674607ccbebe544ed0bb632220e38cca2e6fbf98cf72819bc8c10c498e0bbf067d77014ed9276b888daacedfce07f7f88280e1418156051a50d1d660650e5cff35fb3efee438f0dd91d383b3a09774fae9ee5e164be4a9f64827218d9e9e2afb60b05365c0112a9836508a7020a048eca6a70f00a724dd016935aa7c59912825b86dfeabe29ba0fee4116ab61f2fab7ca1ba72e83046c10aba7869ff48635a9e99e6a026c08879828928d810b98a0824b0c503bde5acc58b78568d49116c014933afa219342c81d82b57b3046082e8ef6aa413def264271c67fc254b96ae9341e6e786a363fa1afa0463c74ef1a04e0ee1570abfb0758aa3aa1919677df1dff98996fd82f98fb8c5826063764324cdab1c95d7a647e2e774c06267bcdf891b094f6ed1d48318fbb31bd7d1d72973d5dba21faa79d42384a6d2f6d8bbc20b34c26636dae3567eb99d1a5077efb9c6c2c1497e58ce4ffe72d0951b14c33453d14afc6a44d64d71d0e38408d37d30e404867212777256a81795fdb4aff805900e6482347b9166de64a396a2c36706d72a429fb114b47beb0cf598d5a81518cc05cf3a61660d37517ab3cf20b8bcae3ab343bdfc454c27c2eda4a1f0a174b8d7f215199d3a7cc8b35e17bf58a9cceea2683ec5d30bb6de4e1bd2e69e0a2e75e4cbdf79ff0fcb3b17b88b8cecbddc8447f5a588bc760e495fef50d531b1c39dca224612e67d85dc165327bbfbd7c5a84cf052389ecdf1608160e2075abcd5b951e83209ea60902eb83c42a704923977092bb7224322796df517161f945daf8ba94285443dc01c4225fe8ed5e763d6dc3e43c091128061275ca9be08816b38f37b7b54e5c8b8432e13a05d2f345139826118e0f2ca694e7707a4784595a695095e8ef4feb23fca00372270aab109f8716fb709d9ea07ab2672618c2c939bad0324473623bcaa93db256441adf0f1eb25ac78384452dbbf22de03ee5ce2620842aa4ae4d9b13f7791d1893cef34c9b65e8c7da7dc704bf5ea95ade3410958ac6e2db2cdef5669c52b2cadc4e6fe85fe53251a21d9455d10196af5cf30d811e4e1206d3079262fe141b9e482d5b276b1bd9ca499999e0b39b6c8b02631da58a9487c478d6bab836672a5f89fdb3bcd1a9607f4202b0979ab67d7e20e395ffaebc115b5ba80f5e4e85e0dd8607829d073a62fb2213257e4f27df6179fd45a8b7168c61f11498d9959ce6652c92eaa4f24497d363e6b32b1c00b402f6a2e7b3a8afa2923a5386cb6a40bae7569caf1663ff9da14097848815e757b9bccc40b9c538a04ede5fd0514f05aaa3c6cda6eac4d7de524da46fa32304660c9133ae05a5c9e620794ba47d4d91401add186f86354ef4e4db1d9cfc20e8d0a9ab4d3843d99430bb9ddcedc2ea9788c81b6a702e0000aa3acb20ffd55c55f8ef7594d9e07546e6dd99c079ba9e8cf849eb2dfe57eb76cc740f83d0007ae3ef27bd51c502d4c79ef1b9afae6151dc68c579d0adcd4795fa33ee5f4b9f116d61def74d7293e60bc928469934dda29f6bbc348327f682bd00e156abb37fd1097f4dd4ff4a41f0a77ba41de1a2e525d576de095820c1c30bd39e4b76c884cace1bc83ab0ec09ec4b9b0c627e84321c5fe0807bc19bb63c3f76309e1a6efa55e6af5a31a1662334d7bfbae58b0e8021a93cd6b21f6ab08251163e2f1cffab1a2204479496ffb2c05e3ef1f85a6d4dcac111b3866e93387c2406e9c97a3a3abbbbd1585cef9d8efbbd052793ce513d7fa5f29a482b76d35f739c7c74201ef39cd794e89e45067de59b991b0c016f17eeb7f5aa62b0e64d0023b7cbfd0801ed1e61eecb0fdb154dfe7da155d4f09073833626ccf1bef99355332cf576993b5ae1ef59cea9f055c8d7fe41c6adc898827aff66331d35d8102ab5787ab3f49eafab2a6f1ce59500cba86bbe345f119f6dbc4d4bfa5847f39dc6eb50a10791b735f07897058decfab902379335d5cc5c10d1ab9a4d064689da799ffb4ecde42ac5a9059f9a8e048ebc095b94ec715e292c00b8070921217014ab2bdfff49341e5e9293b756b067d6b78b22cc1d8e07f8a1ecaa7465287a3b9dbb1dd04be1fc1d6d1bb4033671da3964026022c2846a2bb8e07ca6b39b613b828e2ff051d9dd32843b8bc1df65bea7c4f75c85b0e5b3683651a99ccf3657942bb5ea13a3b3d2f244002ecb53cf60324ecc72b19b6e8355b3e5e9b9d6e188b0e369c0607a1c6e92f5b6b1f222864d8dadf748498f852756b41d8bd12396a50406ffa9a16ed32ad1dd78dececf4b1039c6cebded7a5a2debec50e8eb9709f82dd749c10efd2cf431d3120d086839ecdec64ef731a3abe9d989d482b24bb20590baea84f968b4b743f6232826e9d8375ae1ab027c4b89bc2c4662ec55eaa5d02fb7bcb2c3a86272df5a93fea27e865c9dd532d50c38710fa9eaa926fd2143bd69187d71f59187146e17acb0e01b9829e6a52a412e48397aab878bef0527ca9cd285963bc6859e71b24bfd046f3dde7f62f64f2391fb742adf020c030ee6dc5e78bc2aeff16991c23cdc68fbc49ab815cf88f8dcfa9978e791f82d6b0262cccf2bc77c9fb1d00b7cec518bde74bf9601cd38ad20ce83f1d3ce5e9b27a5b3756195cc8fa32a4360cdda47d4c5e028071915f95288f54511e2a9af81a6215e4451bc129f30a60f70a76a847e1c086f47fa0e3a4ea7cb7e1398d6d0f97ee51c59791ed52b8bdd66e3f9913c1a566377224797e81a8fac0fdd20e096e2b1a12f22693d1ba25e04f8576c9bab378a8c86a93c2f21b1d75ad89b4253c867be11f69634a8540d6fa9d8c2effecae6152b2d11ef7b5206629e1a6e943295be00d3db2f17aacacaa89f4621892c47f25c5ec37a367d2e16d49a93686f55d7c435f7cfd6d8ddbe330fd81e26ad08a28cfee1ab9530ba9045682e45d48adc246f8ca564f95e1d58992e953be75fb7ee703f44490fa1cb5e10a30c4b7b1cf6f5e3a561dbcec083b58b79e3f35263cc6256e1ef91187a488d02f205dc64cca56bef01da326ad4ad08b0231d5d376255c876ed84f958c38cb0842dd65efecd780f742dd87e440c5f1fa0cf7eafdc78a0f183bccb3469c4dadaa001ab405d3d4438b94422d9bee8fe8cdbb075704669be1e36ffeb330e3dfd4f53917651c705a100b57e4d8c05f759535a5cce546a9d78bd39254fc5253b3560fba1f3d7022eaa566f0101abea4ca1dad95bc33dacd64e5f30f111f6682bec8a4287a4169e701bb3e971d22a97138e46b2d8674f436fab74e9ba14cfcbc672e49d3d701aac9d5d9a354314a5edc49c60aaf63f35d39df95d4c6b98c30e656fe397e433f741933e1512cb960f045ac78ff6c0dd8808e01cd75b108462a762dfad79c42be2f94cb5b83f8b409e7bcd24a02d71e247f3c250ea5baef0251be8a0854e0fcb1027d78e6dbab527df72ced60d51047bce18afdfa3b26f779c784f3e5fd777f3514f9cdc8155cc6a035e8e8a059c563a04bc5c767f58654d9a571596ed6918db23abbc893abd112940c358aadccb341be895d412bf23e6283c672d51a2716c506d59931f85279cf623ab48927ebf59f586cdd0e67ee9298fb91bfd6abcc23d0969f293759e5769b95511c399979a989474eeb321744f781948002968cdc42753e1bbd724c2a8480a60ef7e3d3bfc22fa61802b1c573b124dadede0df5a118e838ce37ef880b2e34a7817ae148930cd314caab3d904beb783026d5f693cc364762987399132cd47022a7bb3977da3bbbe0c12507d9dbe2e9e221f6100023f246ebcd4f5de72fde54cd1642c72a9aae1063df3ce5441235d73297fe4173263c29607a92166f01e9bfcbf4e871088f4e4dc5e4d0d84f0c568b6a920f887f1bd3a3e50ee967f10792ac14b5f60c28cf0fb654b68a5e14c98f5121a94122d635c3df75c4fbafbf7aacc520e518fdbb949073a6aac782dac48c2254c74fba5d41d294f13ed6dc5104317ac173765ce3049d1991c2f528096285f18faf567126eb819528bd7238a5531c2f6fed67cea5753eb92cf62b59346b190d63fe72ce5cfd8b0cf92909b3b6e4f707c57dbefcfd82b6d6d93127c749f687e8ee966f6fcb21d854afd605b536eb5e1ff4c2ea2e85fdfbacb1230d7e78e148d6817f5a23c5ebaf447552789ca9b9e87f30246b93657656f9b7ac21a6e57e59260df7a18184bca45225d841f973b9f40cba6ad5e79a3593ade60bb2dfd543cdff689e7e31ad52e18ad5f52ecbf18a138db7daa598ab46e987534c53054d76d316a91ceb5bc62240e377b0c64f7f3f8b47dfdffad4eba0b3afa213eee65bc9e4868354cfe10dfb1308e8e3ce218b33059f6501c53e024dc580c79cfb02b39449526b4ac0df5453d1c76a4386da5baac634f4b5d3933bc5c8f4049b38ab8aa965f45ccbb4e70b79101e257e26faad0bfc76e7cdfcaac342fd77613516baf30d71d81e48195b7c193da182a654f7ac28fe739a6b16b53332eb644f40eb907daccfdf737ecef4c0df1b662d276d1479537b81f061fa0b04e24015a27f0c09ea78c8e5111cf80426b3d286bf6aa793902a4882bd1c6975c3fc1e50e932b05a3731506adfdb0e9d841ecc2f1c2d3f70ddad4883a553530a4ec34595cd5c1b818ecd34bc973952b095e0b556a142fac5b4a9b836e05f87f8bbe7b9c45d00d9a658616c66702a64f548c3c5cd657d1625e63dd81876e55d892b0c997d633d6fab1efb67e218d97ebb39e2c9dbb7c2e6e5aa5490eda8e766d3edfa8ade98f319f0ced872075e4ec7eaf6fc9d65564adbf57e013f8981bc7c3abb85133885edc9a275309800c264835641180fe3391b0066433288d2a4c5608bdf9fb2d0c093256e477a06c63e273bb10785e9316506bbe7914e5e49059e792ed39b4d81f7321e1f330a26b389ebb7452b43d14e56574d5fbb097fb3b83eb389296fe60b9af36627cc50deff1523da82eb155bbdc8002a9ff4f8f70661e8d67a70665d7cb932943712c4aa1189a489de10a846ee4407c8460363b5582fe1ffc406d0acb58b196f4acdc8ac50d9a90d314a8796cfc79ede517dda051d9c4bad9eb78c7141f4fe89eb64d86c77d46cbf97e7224d1784748af522714f98b1025d402deea5c6bf1ed4a465efeca961bef9503c18b03c17a9f0ff5ad03306abd37915f96f11d3f29603ea5ae80dde35963e519fbe345347df9e92db0461892f20a9f95ab7b28e5104e877d0fa0dab495fcc5ebcbc31f15d64e801a849b409b300f6b9f56e08cdbde8d6850136fa38cf279cb0850ccf50a7ce85ce8810f32206e1c2462c0329f4f7563ba68b1e13e3c2a3dfdd1de13a54dd3d60adf6bcf6f1c02a6cc480f6bcc2431bc01bcaeb66b505b278e958162975537aec60aeb450c626cc5150acb618ee43331bf82c21a27393ab78e344013c62a4adea2c333e9e4e579fcc6d707f3160e726c15a35c1984e38afa54d9fbb8494c517911614645c16eb31c72c1b296c1aa0720ad408ec9edd44ca223685082f94681ca7db30b5f5aae79c02f9becc58bda14dcfe2da163ec9153b92e921ddd14e72bfeac8c049c01e0d17b831a9fab1ab2a14e74c7d932a9fdf6cddd7d813dd8fc0d9a5cd1e1d7da0ef7d2528583be4a41373b89b57361c4aa812ad17f72b506e9c9a72d2fa2afdc9bfe0d041977fe4c2dfaade570b0870bf7ddfaf0e817afaf2f006654fe9fa1050d7a23003ee55e66bc5823d467c1dfab35d9c5f527a275ee7791b6eb9390cc49abd299a969ecd13864d9e3c6e7f4ada4c7bc1cd7670fa780b2e53bb5975bd9471d31b218be32f5ed8551f3fd7d05a2b4051ebe3913ca8338f3e0025e4427c04fdbc19afc75d426d6b4d99d23937112eb18fbb7e9c68473cc8bf430a096136e8cf07e4a2249694a5ae873b23db0052202f108949159f7d8b42b463f0abd45ef6ebb4834b2b70f3f5e4dac579137e5111d722c6bea8f842ccede348b4adff7060082c36835a85e1ce8d463e6d74682eec878739d7d62617b4f5586b5bcb8b0e12cad6f8aaa0a156c0716b15db55bda3aaabeea9d614063a5c0961eaf9c8ac9e3297ca245d669f410c631442c2581518510e8e65f5f7dff189ecb3437e7a36b6e9cf62897e4aff12299867fcdb250b95177cf7068fb7a782dac509408d5c499333956ff3f6ef560167518b8fcdbdd7fb0d293f1b93d332e1e24ada235446869364095bfd14ba2420dc7b544b834d5f5ed5dab933d8355d8aa60de51ccd85b6d18c5b55e3a9279351de7b71d4d2ae9ed36baf274a2c1800a4b4e85447cf75c84e62b44c7896cdc9ad51442f11edd8cb724d5f0dc9e9757862a8fbf4581eca5bf5e79e054046a8593612b54ac2d1b08f0add6b35aff65fc65a77f625582b19c92ddef4d66606ef950a87149731d578d3a0020c8902719a4443fad0388defedb6a7f7da3a8ef618dd0525e690f4c6cc84f93d931a470abf3a87f972e3938b76b5aaf80a609961e3b575025cf63b3a72858feca1a12287a82495bf8c0b0b94ba9cc0777064e4cee0d736cb9365857f617f8279f0b985edc13cbc87d821e052fb81cc53d792bb2c94f053492bfe0589caf0879ca5aa8483c217dba5323f6b01818fce15b750554bc4740e0bc0c097ce3e4793860ff42d7a7e5e5bc1a23f25db7bc34346bb7c1110ed288b2218e65004b572970439f60ae2e7b00eb57830f00a15d71dfd4f5c95d9461da9d0da142aff6892d023eabe8d1c38d207b7100c7fcbd2c4614a777170b3cb516eb1af4e413765ad1014bad620083655ab1ef00a9893b3f64fc63979ad7e08d8acd934ec0741c34f485355befe2397d47ce4714e66914788753cc5515bfb4721e650734ec170b073e831974511f348c2253cadf4440d2eb37712994702ffc75c25394e9fb147e26089a8dbcacfbb96f9dc7fe977329594139d2c0121eb35b6498b9733d7f3ef5035124f51213fda7a4d0f338293bea794a96ca5034447f03a0af149b30fb3a9108458127af6690875269ac4842c71d0c3d3b4da3a2372b57da686bf6dd25022ac4f0217bf2c73e3c040bfecfa9eb856afc40338852d456f41b42b1628a12d986732c521bba65196d011cb0d18c784c47e1376aa036b61fd54e60f04dd46c9c92f7b67959076016732df6ec7b948b22315f1799dd509672cafb5cce79148812ba0c98a6f75a2a145940b9afb8f9c193b93151b5ed20f12d24f272f215ec14ee4980804d37ac4701b7957d40870f1fd487cd5e3b454276c20ef469a3bef8699e935220d2f32e18a55e4a8c56d4a1a1c40952398aaa5cd556384fa2ef267f86e20f297d349d225e04fdee046d444388bc65c661f92f0e7e3b593011378e5f1777601ab75a3637adaf362aa2d2f5444424e3bb4d40f0491a581c3f44c572e9ddbff45fd36f40e5f1214bdae70e7ae8e416c2c55db3c836470a83788900ab45f9913776ec12c8ecf07dc69252bb9d61b4efcc1ff9ef1212a2558ca54f377d65344d5d5343e3737c3f6e4c573ea667fa8cf136f52790c4bab2da9aaf2dcf4bdca46b3da759280391e7cec664b2adce9e15d150c38ad01521d2b32b623c457667fd907a31886d789fb76b23639def440533e95500ef00e885be993bca43acb910a017228df5f3ac0aadcfc7ba9f3c18065c05095297a32233116982396524690be9323454d8609b47f2160fa6dd84179fb3bf0941c00bcecc17830448191498a53c4dc988c5226651f7c4a130cbfceb223690ddf8e0515d74b7c4e4c41ae9f4c9db4f3e952d48c1a22041b797813a47767bef41c8657489fb0eeb419bfc5860e462524be6cba1b2bafb492ae3779e731fa1d0494f473aad604c89694c33c8047d75230c42b3fb3b0630c87f440b7a8ef5d658148357978269f98d03e15f02d0452963d9b9ee651dec3a1820bdd6483cc7128ff8ed5ff4cd5f401165bd2314b914e81dd4268427531370a4ba01e734e909b68a4e291642a7da7aca69d247eb08b769ebabeb21e1d10db1849f34733a20e9ed8c3bf64544a9cf3d7e248053e5bee8543c90b136e79088cad15ad730245fa762e799827ecc9335e9dd326421632be42f9a6dfee60fd4d64ffd98bb3cb03102eeab75896a6fbb4f2319e1781ed4e0d1d7b38b87c1849e15f7dfe97098724ad720e6770654e8e847883e6b47fc73a66406b697ec16bd2c4a71b645746913b113e97e7cd08169e4c448b4f94f974295185af44bdddfcbb232315b784675ea0f9feab580b39f82a32894933d48f122620e10604557d262f619bac7db18694f118d7e7160993544488ba1665a1d8170a042e6b7a5437aa5eef6952ab4aa7f4099908156d48ef2005b0b6798766a66d94c51b793cf181bf9eabacb531b39155e36e3268e9fc94bdb8a392d63d40d2342feff0b95a53d64e4e0d37c4af3acf7ae61027292506057782993425a612c8ef3fb42091c630b37803e0ffbf53fdf08d50947a87ec4ed8896fe5aa640f30150b01ffd93692830e9859fd0737167e3a9833d8358009c046de282911a7430c90ab7f1717013593930198482e547094eb2307c9770471697dc3e495184db786467c29a4902a5e97cb4f759afadb28434157999ba28b12ef68f63166d65b9e4900da6f0d392bca707f6fc6a6e0508cfc66ed854e7530833cb70a6fe9ff84caa806d85c41f8f59c24f67c3ee6a848282f0f8c1f71440c1a8886e1cebccbc7ead5de63fc7f6764d0e0729786f10fd1200c3f6d1a6a4fb5f4339b730adb3acfa841d841b9ec81a8307e40e06e2fb25cbf8580fee7a7e2cb6fe603b71a762b0ceae5ed5b698742a6520dc8b7e5ff76305e6025dc704545adff6c4ff899feb63a5c0e363d819c95a14db50510652f8c98c8d6639b867f8a8fbab95ed04f920f1cd15bd9d7fe911b05bc45479dde35186902fa7f49a929f0113a9f203bf42c5ea11fe06fecf2d21d62573b8e485104927c8af3c4aef2ba6fe45006911c783b2b61272f0482d7fdc5127f5cf996863979eab2965d1be1c0f817deb943defec3bab0631cc02c4e028105354a5471241d097cbbc0e9c8f4513c4fb256556bdcdeda72b1a313d988cdcdc33e12c5da6baeb16f93ef5e10dbd3e760cbb3e649507d97924c3dc6f6e44579aebf1d662c7c8d14350b7cecc282f63c9c2eb682f5aa601aa8467b91cfaf91a45098df0ef44cded47a864bee86bcc10f0fda7a8cea059ab742ebc528af869617d1381844b0c862232918c40682d299b743c3cf6627bc2f04921570cfb91070c8fad2f57438ef64445868459e8a26f11bda36abe6aec9ac09758327a965da5f3d4976a4634fe7e7ad3999ffb82c057a5cb76bf6aa7b2baca0eb9734056dd24392117dd88530489809f0e43f03c2b8ba626aaf205e67594a0cbb131c79173b5a52c0f5099da501631c38bffe2873717d697478e644620a6ff09938cdb1bc752bd35f81c1db220a7ae7df1be680843ad2f02a105cd3f452ce8e0282829a71fed05f5c45a560a8d6b2d060e152560f183d5050dbdafdddc6e57cb897e8a07f58c7a636b336151733e2943180ddeec476f1d703c6515f7055e5d533e8025be90875cdd247c6043f88b3621181dc21c4cd0b7cd4367d663eb242009ded03b8f3d0ec3519a4e02b07b07a2cfa4a3ff7d76615fcb20d24e28a29370845f86bbd8a0df46767a5a0fc62c689b317285086b3d22ccb214783d19af5404e80fbc280f3dd7cb1f04b73558253dba8497dbe9bafae7d9de606a1cb232a68b3a688c1da4d8dd543469b1504d25a7acb7a6f57a9b2e7a3e20ed97a48b69b7b1cf34c48a7afed0067d253bbfca327e1f72cbe71f937f143ebffa985310d9ad86dfb05783a6f5f8e0e9853ed3eb23dca0a3795fd4b24b8fc43618aed402810d9774333941367cb1b630353ae1a862324b090c003b8a2d4876fc85ff69184941f9dc78f09caeecf42fd392ff1555c2554331e877ba40658a566601766e442a961bdc4146a4bdadd6fd0da956a5c1672916de6a5c5fa22c4ae8327658fe951be750839500c3debb15acf3494c4988a50b44eae29db25d0ded021ecc432fe1c950b9263323cf4cd1f7c459ae6b8990a30fa02068ee4e41e253fe31c2bafd43605bffeb45246cccf65b40b45b8feacb2cdacc9579280238634db2709e81f73bec2251aca07d0c4af251d2158fa447a4e7528d9ecee16bd0969a81d3c7b8392aeae10d415056b26c8173149d9c2fa4c3dd754a8b6dd21688127403fdea2f55f7e8f1211fe5c7b418c7b9c9251cf9421c980e5ece76bb120c77c8d45b85b4894d0f0ede139e70c00a85f43cb1196f82bacf9a08624aab7a96ebbf38cdce387af80888eb1e4dfec93259acb09826efb3b499cc41126897a92b759115dfd551e61ca370979fbe8fc0efd3f3c39c67f196b98b167e6c49a1e6de21d9bc17a159c8e4231a01ea15aa712ee59606bef4b9a41a3b745400cd621970509d2a2a02d5df3945c42a97b24840b0f95aa88c85d013315b0b9cccaacc75965d0e061af949f2cb864e0523bcff7dad108211a198a381fcaf6ba7f3b16b7cc17004e268f873c9aec07860c3c9e28757de81152b947b5265f34bb870256685091327f2ab716dffe8cf1253d6e908298811cd51ee01d08b5f7555a851f87e9a25219e0850bd5433b366de7786151117809db8c3671f6cc73ca43eed14a5684d820bf1aef5923e6965c9f8fc125e3e19f07b01d1c7148215388e5a440211255daf3c860753e965a7a3bf9566ebbce69f3cff343560f7fec184a4a3ac561a8c3c466f2ed34b9c9e7b67a7bad5d7fe97798c84f5858199a19f9c0f9ea0b44026ae2f57e5b562769d15382366f431550e81ad49582cfccd39c9f6033593ba0c67e2456a94bcc6ffefc23da18a6cf61bbe3699d0902e41b015ecf7a8e5ae0907c25e4e08099e2055a383c049a5a9622737b727858342c22244a65b2890f93cd070c86be9beeaaa9e1107064fdaa218b5636fcbbd3711a145cb7e4b7c9761bcc8956c958f3392240137ae4b525cc3e0a88e661b42ee8e6730b0c7bd805a327e843c6daa433b2ed520d45f868a1d647b3ebe2a732c47260a692a7e671de1369885e740aee5c799c9d01c1ea45d840aee6db3ce06056af07b3aaad45fcf1a2a6ed51eca476a5112f0383b6c559206249c2c61cce82be95b48daecdab561d6aee321b7cc641911385967de02835dea9b21072b86e6e2daa2190190abcb63c29807c03e81edc0a79739cab3aaffec82ea50454677ba15625b6eff0bfa19ea02082d51bd1d715737290319652703c12a7c2e9e896621ac09a7f0a46df4ccfcf13dbe8605854e0a8b821b11ee526beacdcffdb57587f89d63ae292ecfe77f3b9306c30f583cfcb34c12aac7fde9fd66b32baf9858887feefe205da86862eafece03837c59f95856a244e029f771ac320e5bcc4729b2333fad3104293aabf7fa6e2e8852827d29a5d1a187b453554e6e07eaa88d237559e8d1dc0e0811c6f56b63b3d8346814f29fcd92944a7f2a087405b23e1f057bae3e92b8a6741d685ed1e33aa179e6cf4a660726a8873f1943020cd5cee8d8c71d505a229527144a8a228af371dba4b97f9e28e6df66842df5d3d6265069dc1acb47c8f5f04d88277154c240450c77c76d42931a17b7187d1a86d0f288b70d536cc58ee21888db00e6183e9bbd78a8c4b06a412bf8b894701cfc932a7a34b52cc5d857cda858c04c39eb5c833dd817cd4bcd63ad5058d6661433b84b89ff62a0bb9e7a948921e4732e3ccbbc0c5ef373fc49ebef8a1509b5a784513327a5567efad20efa17cb7e28e19e5f51e071b1af879122c7a46985c3dd0d5df9aeda8bc73158c0fd0ffa8f1bda6b2c455b3f6ad832a8ae53752aff52d84ce9f3ef41af4655d958fb3700c57362ccaa92785bff4a9caefd24df592ed5255d5f31c058759f469292a82a50dc979bdb9dfd16fe273187d8058bc631cc363c05fd07e85477a75d3056e0548aab34ca4560a8ec99314bea34d1d5ddeab27bba38b20217e38f1f3b48ded7719955f340e87a12d90c92f1365a74d7ece249e72794266ebcb39b3ff2289c0fb7643a387637edfcc364404cb2fdc7e796f280b23c3185edbef75cde1ca814a0b55805b47409f7f1ceccf0284186488627e0f9ec425f4de5d485728943299ea22283b09b9e1477f97723cb4f91e32ecb90bb102f30b6645fe8ebafc1520394b072a3f9b86ae675b531263f149467174e6aa7840a3573d294f595eb4bb8441be977931bf070c6f6b7b50f63c4b240f00ac4abe39815a2d3170b7fde1c064cf71bd1b95d9bb7c67b890c0f4040907d8874296394e564db2fb3760f6500b231cfbfefbe30440de404462db8ff0e99fe2a711102b908733096c5eb72f563853b7c502f9f3208b8c8186e787b4a9237e3e7aca9dd2353ec602609d6b001ffaf05811f745608113c14508a67a95c43a95c549e174f3a8b8f20d8247f3c6521f1d377d5a45604ac1c97b50cbdda82ff4329d87f0f9f5d275a255b796fdc2924c67b6e510fb48b246bee452c55238d2e0569a75f7a3567141a1fcc2c0c0d77afe83ce7f21dfb6716599ac3b24f9169b873297eceaf74e0f0d42228d63f55d4bb6813688b06e44457a44dda08eb6a6cb5478f0b04e31b482783adde134987bf2e46519a7ed2643286fd27e8a161543c5a905ad536c43d0c039d40a7bcc0bffa46698f1224661830d4c835f426a001cbaa6d5f879d9f308c99eac914f9ae2f95e5f858c47c9ced1d569dd3986f62c09e48e0ba3fe479417ec57d4a9290399dea21a23c416c90b24f029de990537378f01a9fa9d20bc3082c62bbc71f6a5ac637a1f435086c0e19042aee9e7eb9c5c78e173e8cff79d9fc46e7cc5d37cea07d8150a8072ff914b19a30e33cef2750a05e1740b7abf8af53f8bd426bf45e9d22c23948990e5424a1411330f3fa162ea7ea193064e8a9ec73fccfdfa1d2906d309299fb575be3e3353fdc5ce256309cfa9879e3d53b72b416d66c36b9cc85e889d0c6aa68bddb07756f012a27317368bc19bc79f3056a6bfa56b43b64fea3b9d70907e608e07a0dadffebf46587392948640fd042b24e4a2c8d4fa68386d019287a81d9ea5722fc2867b6dd4f1a010abe5d122354f919a3ca6414a815afa1f50761b5f38396dbd3a3abd195fcbdce02906a1bda81d96a973f706de0fbb7b398beb52cf30056a03bc9a408791019638a1a2daf7d1f195976aa5b874eb52eeffedfed62df4c0cae17a2951f1b3bb0165da8c48651a6c64135fddd4523497c3d0cee8375fe1a99aeecfc703511d2daf8fbf740537c445176b5c8dbaed823bcacd8a0a1b7b8697eb8362e0a5c8df78045130476b39a96cf38c4d890e2abaef9437e4a84a7232d1a4c6903986b2284cd23e6b4fbc3fb2d529fd6898604bd24c0a2d1d6af26bf3726b98b1edacadd3f4c05dc23d0fa0912275a3bc374bd1ed818bd52b40c1ec1e7c0d1baff6a2a9a5a043d061d4c09de322753f5c2cd5ba40bab3c1d6a78465b39eae6fe8b7f6ddc18cbecd0ac4209d4969cb361454907c9b2e091097ff8520b00767238c2ad1183e8cce22ba27467e5c3585b531093d698cd16c8f43df0495b182f57293a924fcabc1c659563e5c11f7742f349299f7c61256027986e5439d8c99e02c31633bfcce13a8e597196038a458327f591fae307638821737db00d7319f8b232bf0024cd2ac0abd977a75fc8a153c9ff47bf4d46766b5095b517ccc089176e7ff5afa7beeb1c0573bff9cdd3d2d6962a02078f59e0cd049a00dfa9285e502df8ab97a0306809383e74ae6df75edad84005fada52f71abde53088d7b32e50db5a17e648d0a6adfae4f2e7cb10dc5793eaf3fdadc4208da1e226c7e42250291c696bdd7343ac3e811622bb5bd15f29c5007c47afdf76bc6600fb22a0e1aaad0220a0b42636def9f63551e2963149b3c9b4f3a5be3fadddf427aa381f586442c80e4fa913e8e0ee403ad91a9a9fc4dea2474a277859820e8c9f6680d5e6880d3aed41730e9dcdd2d0a3ea0aa748d02a32d494e8a07320514aa760dbc1105ede1607f5f2468d992c321d62556616a544baf86230ce469768871c161e2b2d5a18148590eb2160484fa1f8d5afbfc2a0e72ed692d40c79636676814bd4b7175b5fe682dcd5a0506dc70ff3b58c7f7da2d8fef527aa2bd3ce090674b23fcf192b7b2f5dcf44138fd98cfdae54ee454e9de91cbe75f3a0a332ff74dc6978792c0f74386dd04107f4e6f3e8e807c6972799ae6d85252616048ec9bef199efdacffb683044d3c4bc1b15835957073c698972bd5c53a635ca7e93bdb953d6b046fa9ddb8a6532751f2339cd753afe21e1d54d2fb5a29d503e246fb368b901257d58ebde474f3c45ab7947aebe881362f3eb23fa983d11f4a2946ae09a77363b3f12c9fcd9d2d5ac436f20744f9ea0930951adceaa621f3b429bd48d25348b0494eb08805fb503695e72221c9137d71aa70439895d8e30faed6c959684d6b9bdcb91f1cc8509d082822c6a9d1aceb399b4f365d050cf9c9a946d298798b6aff6a4987246502b88e195521e496e30f0d73c5374c13dc10dbead3fa9d654b1629da5fb170ee5135c34bc68dfbaa3d1c17cf77c74d6e4dcb83fe2a8eb9ab6fc7c2c2978612e8493c9291ab774a2e52323af399d55ddec3ccafa18ecc127ea081ef8f7b1e5ffc36188572ef6ad986881756ed76f52ca28e12a26e3dd6e2a815b0e8268174612800813a7e48d2b7193ca1f21d1a9659daf66acc0a368f5e128100d623ac3dc599e1e7ba2a3c444ac23364a22ca59a6cd7b13419b75e65a4d44a71dd0bd77faa575a4b0d858c6892d35089334b12767745bc6bc868513725c85bd941c415581a504ac8ecad9d377c2b255cd8952dc381ac2c4bbb2987c7fad31e4a34d7fb61d7c3976b05044b846c09ac27683472703e67d1776f37c716cb1361892b3ffb4859f0b00f47351afb3a737d009d8db2264d461e5ce9b773fa953ee5cc735b8fd5a887a05ed4fbfb47ea14441385ab7b616a8192e14a07c52067075c13193567f04dcbb4ce2a10ab74fc1ee28db4f67246f33d67742c1cfd9a4305a74153a0d0c1a5e0cc62126b7a396bd7fca658cf40e514cb0166be941271e8998f792db33716672dfdca1eb16a6f51bc87c0b118633a41c73d8a08215e357d4ea6b4756ec8d7dcebc330e5798b5930e57c9ac43b64adcfde960f3d89e0fe1341e82afa57adb5bf4798c902b0b5cbbb1b2ecf19e9cf467e1fbef0b2793dbe31f7373515a8cb2113c6900d03873ba2e59f188e6254097131cc143b04b2497277e9c1ad699202f7401ebc4348c46d8d69aa1f0c60a4e522d2f539708969fd90f6c5036a3d95f2f71dec964f2b9cfb3c904ed5185fa1abba0f3b0f98352587e1059742366929c07b2993008e013480dfc37918deb9234cb4f8aedfbc75c212b576db3f318f3e7937edd1fe89d430ffd71a5d5a6aef4cc9aa9ad185b544ac869d23a123199b6e33e23f3459a51f05b59ba715a65dfe2397e73744619c3f9c2cdf55541aac516edb2e79852ed88a444bba37ff54a31c787189cc61b2bd968c716de20425a4066cca6ab2e32e8bb17806bcbc52300a0907b069a2a76cb544f7ac5867d6cd07e59ae9ba704bb6e2bc39e4061974f265b2bda35e09baa9d7f116626eabf78569a4fbb2c9b98e053dfce05905004fac06f90d6f9cc1b9881d169a867fd006dacbd386e35e47f4333116560384d0392ebd30ac2d3a2a60fbb578a5ae10e8b83ec63d3756b76f86b6f66f7b0edf650c0e403615082f03cdf92514ebae54a5a9a2f67acdadba2a8ef10d62284629f282e14105bb27d31c461aeb98299e902661c4d545409e13974deac6aa4ac13281531b4dd64044e55a8aa7f73fa4f0e21b09f740b7a15f524d2e29a4a8d07f08ec25fee441cc5e22684fff3a96d842ba1243f4ff5e10c3b86eca9f2ea992fdf0d5bfd25cd2a3931073bd0d9b0e455765c24f6cc6ff3ade2b8f6ce4a33ba46c5df1fcaf07cf2131df36bf9d82fed51dc0891ad5a93812051b9bff8bcc9748b34328d73529f111fe0002f40cfde406de6e95d2f8649a97afac91cbc43a9f62507829531ca5ef19236114329788e445a06c3cc12aa4b8dfb42f5ca1247c4a307adfdd0f63ee17eec9ac2bac7d5e907cd61761716c47d9994e1f92ff47ea3705141e95210958b2e7ca34df5a3390eca545417bd4c17c90b5f1bc5e6a104c6fc171d7afeade9989b8374322c27c3a5c6d0c4e378c8a33321f4fcdd0c4dbec05388c57103b5ca23a59e7bbc4446777b21fa9b66cf35baa9e97731ff76164dbc1abf06caff1fd8089b3a574287ee9449b24c451a741639f9982ef98e4c8aca87735773bc74576d1ed0f2621134de05fe3b913eca566e2bec9a9141d4de9ee384fadc08767ed7c4e9c327f39c45798f7104343ea33f87bd5850e4ef913eb198622beef1632981f064f676e62368d147191cd19beae720f50151610281cf27b3438459e6917d1e50dc233bd44dc79f982ad9b6d6ba4113d0ab147d171452791f32b59d12a701c9d5e09781a280d42f86338e67fc3b59321b981309b89768950e7065140de7292bb37968b1a1435a959ea285576a4d2650847b310355f6dd5f6ca0234f9a27283d868a88611e675cbb53b7dab025b1fb17840287aa56a9e191f967481d6023e3a3cd72abb6c0a9444f4de0567c36b1d83fea62bae5af2cd2be3773169e3bcf5feba0da80dfe95d0e83985ee6d263ed8e313814fde2753551ffc4ae45ece711c350a4cbc36a5890e14f415551fa9ce712ef7c682b9f3694353cabeca17fcaced642cfc5459138e1d08cfdab193dff5b620f4f035f7bdfa73097d73916a2bc6f109946f3b6375fec2122b24c68ae6f2ea657b0651be0d4516bb646ddbddbec5424d6f980eec1fdd3c38aafd8e8f70b07e39d5e710a7cdafec4da3c0280833ccaa20d4fbfe6b5c7951d1b8d8a33f28230c053ba08c7543aecf4d697a705032553495a4c7e5583e4d87360ab632254547a4f5e361e6b3871a44ea6b8ec08b9786eff2f5c5a122e9eb9a5bc22fd0ff99938aeba7ed2b1da05b06aab4582d9d64b46cd561e599db5001b5bc1b33d3e223c1ee8774428e43138b8dd467f281b2c47e590f2dc7b439ea83dc0a9567b5e12514383141cf4c84b4a830f46e70446e348fb71c24d9647a8d8526937e64e69b6d62ab6951106f81f35cf78191cb143b628fda370d5c9dc3a16fa4e5631f9dca737738260397c9ac572c84f15d78a5f9b4f2db5178ee3d413a995c16782537fabb7a75d6c829267d28974784c4dcf6784ca084994f0d9da79aee6c7f95777f9991b9dd1fab5be8416a781bc0878ed6ea89e82ed03fcaae8488348efd2781fac45d25eeb4638e45b04ce90ff3b25cb34ecd0b114d19c200b90b27c488204cca4a78996678950735ecc22ca60761a0c8c052c66dbd01c5751dc0053385cc626a1757b4bfe2eba01dfd4b41e84a255fc9de0c4e9de66160e6e26120b25a3be1e9f05bb8045ce395a42acb2bcf77d86df84080625d02200938c9f793aef6c84ea498d67a1267f446b6ad2f5b116ea970b2e7464d26d4aab216fc820d554424220c0a8ad9bfa42d31ed67f7d8fb61c2f435103d6b83f89731823edd16926b38d2f83099316e137b0b53f54526966844fb02051a34328f0ea6346536b0a98241374ea5a876e4b440023916c30e4ede11ec889c75a04d67c1083054ca8debb513a35df60797752f314b354d573c483f7c4da5f7a99608dffb26606a07d315dc5a44e69d83e1c8b0657dd933ff7df6260066f552584253a7e6c1c2ba4ecbd7db9336423a3edcd43bd8e67b938e26fb7e1f04f31c236034637c4b8bc9f22c7d69ea56cae07adcc245442b6aabee37f1ba99bca4138b3e10af80de4dabae60da651984fddf89d85b4a3a146722916b9ba1beed83d6b30e2418dcad836a0217a910b415443a24fc2f6368520bdc6d5429f961b828d60c3f4377da4881d5f30f5b956ffba60d1ed062570a3a26548710f85b89f2967dbd7525ecab4b5e334b537cd40d4da10e908f9cee09f731ed0fddb563f798d8be57b464f7f5878fde4003d6b6754b92781fffa7f505b82d30cbb7d80ba2c5a12315f9ae9522a3f6724d8720b90d5980e5cd58939d7f03a7f21f9c3180be8eb21f17ca49c55e9e96c651382535b4dd09e69f9afd6e0895605369d2bbbed7f6e8ed53f48c49b966d7e99adc3b681c7069e2adf7cf6048404fde6d750c2e52fc75a84e69a4157720011e9b96585a0f71119c1bc9c6f8d3c419bd0d04eb26c0faa999479a7739a8e3b228eef386e07fba67eb7f4accfe8cd0c7c75541dc95b664a10120ef620744558c697f75026392625d8759cccf6a574792390efcd55aeceb9dff3f5456455f99eb28e6ebbe3ed122f96e7342f92d497f08b639de1c3a72ae0472e1587936626d0321a1f853b9e8d54dd7a9e299f2460db30c7a90f2ca7d87662276da0e842294db91c75f86a63e92f2384db85d6040b18f07cc68b597b5bc091a657b14354a3e1a48a0dae3820d67513b410c1ba87196bd40160cfa577b8447fa1ce4476de876da528a09c3c629d41c4fdbc0c4f43e5536b57b618bdc27e2a02f60156dffa51ad38d342833818ba857d8fa9a1f6dc381473c5b3735265aa04e70d4b09af3ed569430a8b684585ea153e320d9583fa204df2108a11379d2d2b8aed81ff4f45164b8b1915f71c17f1dd59072105b1f6a4a177bbd22fc785e39b018a203b3d5ab2948c9e873961ec5483483183d87fcc255af676d26a41850db7e896ac095ae279c9b1ee2c6d736f76b565a5023ece81b9d5221013956105582048ca66c8a5993223b8edefc42d229dc0daecc17b1e9ffc4f426baba898178b18274239679fc4c201d573f0e7aa383e9a2e5bf3a3bb279fe887fd5dead0a061a5e2d9009e3eab2dfdfdd2fe09abbcef53f165a2fbd102d73d4f1e959924821f781eba67064aebd02283fe7f691cef3df8ddabb5f5c6a6a6b800e6213cba807fb300f8ecdd14434ff1d0076c37280253c13eee93785d4d1c339ad0a3377a38ffc423cd61f816081f2eb693fcd99d3f267b1bbc85c870a30f505af50cc8047046ae592daf06bbd2355a0f61c80d92f305f059a4f9b456653b8cf6a503f3abc7bbe34197d7548e121f8c7182ded51f78b42c52de05d3e3724bf32188eee7cfaab58cd9ec2136f07fb2b2f71183266e9d9865e1fac13326876465b17bf2c53a732da5c4b834cfbab2c1e02235ae27009da11700f44ca0dc35f369e80b2cb506df4f92e89ccfa17c1892f3a46c217666a1ef51125c9f46e638a7e1f794f7d8267e5ec6377305f08f22c25fa29277c0e64436eefbe955ee48d446626f3537079aa0b89d97e22d6f0d904e278d8450e2d0dc42e1b6ead2c566a79ee6484474cbe1cef01f4ba5c97a33c9eb06b1353cd16fcf7731101ed082490ad735830f78cfc9466cd10dae8a008836a649403f9ce7ac59e7f3a62269e64f44d94305ae3ae7fb4bec187cce656a1d0174354de58e940703857af946b94ba16d95327f7390dd3f18a509fa85965d9400037bdbf9bc097edddfd668b5ceeb0cf08c0756947672ca9fcc885f19469b37ac93bc8c7ff79f128508b85d64fe806e213ce89043bc6d026e59742c5ebee0f72f2b711e74d31c6f0c908e22adb43a7dd88b3ccd72d79500e9d9ae8e0f2ac4163c77d0ed7ab4192c1ec411a5b4b870043377deb4ccfe031908c32ce278e8b3c14ee751618b758db064fbb8442819d8fdcf8bf3cd83d1695e402ed4551bab8174e96d6630512612e6cc02e8338d653d896bcf2cdf39510e17c48a1791d6ec09ba3ccd33d654737d5962495a92d2b1c819b10506dcd46bb06a25fe2df291de501613b4f6be03f3c7a908d0d159ef18d7b76432f1ada8270168056d76f035a2a7157fe5ec55ef0fabf682fc496f0ce0d3d4f451af14c49072810d187ebd405ffda6fca81631d3f98e7ab2fee083daeb8575a32351631084f4f412305c38d673f61ce43e72e09f1869ccd6b8c24b09316dc9bef12b9ef6dd988e4d6f1737f7a6f777304c85b9877413dda758b074351fe8888e7ccedb19a2ef39f1d569b7d90ea21ed7ccb8014351faf38b198abac67b35e612d70f950201074614d73ec16b6f9427d2fd573b13749a49e184b742fdc4ce19b3d9eee9c96d0b62b30f35cbfaa06e5ff89cf8af562bd14e3bf4a60cb60e34ac2a318343f59d8d2f719579b4f03060bce22f64bb60329e221286d20e3582e40da2554f5770a8bfe4d138e25d17c9aa28eca07100323ed9018916970995ffd9abdd1912276016eedf2f73fe40852aa36d675cbd381ba8139c38fccfa871bb84054f7295a2a39624b2d6440265793cc690b9c20d2d02aeb197fb0a4ba3fcca209498472144954b154760bda5ec5c929f6b453cd6395ca58e0f369b65e7b30273d46292ec29c6265a4dec8dae7df6a3edf5a81f4014d3cb450dee5ca03625bfdcb1c8f5c9b668cd83e2a03954d035c727781b696dcb9a5ac759a3c71a0fec43557a3a674228299ad3cc82ca36d1bf2241cf668802abfff694daad086bd4538c45db66727c75da18991817bf90a9cb9aede87e09dfbf61e5ca2e5929e0febc97dc62b6ce466afae4201b693ea0c11e421417a099982e8ab6e91b7d69dbf2fea0d6bdc822abf1b625e3981b2c3f66d1d7ead6f3299f6c67e67130904146af391f7f598ab0ec810ec58a0d77717279ae338eec0ca2ea6cecf1f1aa9cbbe764ce36dc6baa07c7c5b78c5f7ba7bdcbe20ac6ef5e083b27cfd5d3f6f5e25132c8f7a21597bf440effa99bc4d3f242c720c4bc935e24a5485c8ede533652b26edf3ee6903f08544abdf4c183feae13608eff8184b53170badf41a131bf405e9d10f5e428de5c7ac700c53b90cfbba0debe8232a7ab9d5f6262a56f914b13262dc3388cd7c90e969f161caa0f4bf894a4faa0720ad4a54408596ba14fa7ac7a6ba8dd237340aee37dc954318a9b97ffd4bf1ed6e9b134d1567d47e7036c7f3e94872aeede8c87bf25fc97203d824dd71793f045dbea20d261b900a13351666c2df205b1c437c76fe22ad47a146af5165dc42bcfcc68ad327f735bdc3af17dad28b13108b66df38fcc6d68b6659193e0b1ff63ffbf5b7ca02ae881bd3ea249b6955ae8c0b99c07ac592711f58b5eeecb965eaa0b326c188d14242ea600097e756db3356e206d0f1765ac5865643d1af7fcf1b18220e5a601d680c16da1a846cf1d3e3858d1772f53f4a4b57dd38c999e7089e7eb943b524eb5e6cfa7769b6cd6eff1b4aa3d8eedea0c96eb431ac19041036a14581634cf1690ba5e4edf892447a29064ecb24befc386965f8315cbe022e607f57f4064a05ca5ca90ec3ad063604451b7e32b8c7a28e14a6c89561ce3aee36d53cafabfa543b659a50ce50b40f9d5e7743444ddb4c5649b4dde6767c25ed435c24592beac26e4475f271464a8ad6d84031a37eff57ce085657ac38a9a6fd96f7d8d0ecda5f4736f08239472626b3435a025af888b1052190251216e8e43edd6c8db1817bc40b52993bfc14bc2d225c384f9c2b1aaab9776dae000ebf2a4c9575a34ad006490e41cd0caf7eb55e35a494278c7edbe491dfee5b6aa3275caeab64e1d162bbcd577ff9d34562412e26da24b315c828fd8bc8e1112370c4e1c27a55914f3182880977fb116d46cd0ce59bddf1954c8efa9866b0b06b3a09f53623c872731b99b80e544deb22a36d0ad007c746f4215d704067fd3d28cfaa9ac8bfa2fb079887f39b2ab25cde91e0e9c0b6016fcb335c9024fb325cce108f055a94904827fa48393382ac25219ff7b0603f929e0cca3decc305d97043914019f5cfa1564cc02ad5d9fbc622d31a4986995ba9d358d9d6e697e8bf7ea631eefe6855ffdaee953cc63ac3a0e9d0118a11d16c644f2059822738cd874bca543bbbe9214f23b4ccec614a7ca933bf896bcaa3b1dd7eddd786089dddae535468c52f9c8468148353243f9ca869f8378e1a2cf485a982250dbeba1dfdd0fc639307c13591264bbf1b93df4f91fbb300aa1d01b0873986545a6df949bf1cdab13bedece949cde7b42481c84a9c71700a07cb3ff36d08a62b7607cefb15f98c9d96cc2e7579a4356e7c605d947b80ba660a26799b56bfe4359c0a41a39366af1dac1185d7ef7bd63fbe28fa7068d0f24e096be7931e6ab0686e8a7af95242bac0c618c8d91c7249f23955d9df716d94ab510c9b6a81712a275f51528a1c8f0a8c88497c170056624112b109cf77dc777023f27e5943d7daff6b7a0eb579060bae30f20526315bf68c5b797fe08dcec15093575c2f2d86225c54c046651ca4e3d5b52af310b765406a60b940d9090c7254c7ae511d7ca0bc3219d382cc8e9274d5fa52896d70f2af55bd8286daf9cf2318bc1f85451274b0e0b24dced98f2b19fa63d8b51a1d1491d263c87632640688fa5844b32118ea366a81a0a5c6adf4339c0a7ece7213fde7ecaead81f1e8a47584df165b2642b6f30668046ecd1abfcc86afc8c8175d6388d7a88cee7f4fb8ad1205675131e737e5372a14f6ed1e6b4b62829c83b7ef1f74f5ee83e68161298a4fcb68ec8cac11bbf3080c96d31d389d58607049e0dd94484cdbd53242de6389dee29b373d85c14decaa500add6e32131814b6f80c7d01d8bf6a8dca9cdb9fcc39d113d74fcb4cd1992181669a8c5cdc1d13c05d916b3750c7d1a3ec1b4bda24228e358b7d499c55bccd189c05de15ae10865059a0be03bd930573c1ea3e77987322a21d2db8b65ca814d41e88a3df422885091fceb4dc3c3c4caa56a61c8a5f8b7c771c225e64aa756dd57d137511e9d8227e182bf6b01a96021d260730393d96640d479ae79aa09bb588686cacb8fab256a3801d022b382ae8ea5d15cf04b6bcd33399cc5337dadb64759531798a75a738a1dce2b84c25af392c5fee2dd264dde0d43daca3b1fb3244f31f8b8f95ba5e62e45b6ddf9136d1e5e73d6fa7d0e33ae29a97905af7330fa25b1b07c766ca29d2739f4818415cc66c37c9861198c7a7d243a8ac7987ad39a73c81d626e85a63dbc957a4bedd9a79074a6dd15b614cce879e347defad90a456e3a1e5a35ddcc4d77303db4ba09699d1e17572cb941e922ab46e120e00dc490262d03ddc3b44df3da37f4e9e3bea640102d5c55bcdf44b5fcee01d4959e0fcc5c3d7fbdfa2297dc9021595ec20fa9a973d9350d4c05d8d1a3374d52cbf28a11f78d738cb4f196e19a2aafb71e6048d7b25d2f7d3d9d049e433c08fff9c52919ec8acc1036a850ebaf8c0cabaa26cbef511add2f96ba15ad2da239820e7d030825ebe619052a07c0e4491735d859e007e7d4ea7f880d749b415654ce962aed6528aaad2001f90d53bb99a336c64e5697ea0e53bd940a8539f58d16ec02558425b0a874e9fe978eedef48b22e5571a840234f51fb5a7f7e16e9e301c5ed909585dd1498c48e4eeceac935ae9c74070be2a131b7d3b1aceca9e34e01e1b43ec295d59c1f552939119cc611c4537ad3acfce851d9a341f387f29064498a84bf42c9c96ee4678f999975052063e5d12ae693e50a1553ebb3ecab8abdd5ecc7dba10a55a113ba6fdfcd4e0c837903ac80f128e48f44b7a50eb1f3907f9a6ebc15ee45cbc3e8ad18021d7d08b031a23930be0a9b291b8ff24efcc410858e9e68fd2cc71b3c5b609a2fed9e68b8242c65ba0f6c810d9dab8cc2e77d074ded9e4f8c3ed5cbed0e7a2997e4c4190f151ebd26df1227b0aa2d48816668a81f3f97bdaf7eb187a765e25ef329e48daf1e1e6a80864b03584e5e6fd183375aab41b76c3c2ffb67fe1949d150b7dd056d0ad5e073807e57248082440f721e41a3eddd37638feb6cae41630d656a57766122bf86fb747a18971de25eca7f527c5fd8f37c985190780db8d95d8d17333fa4243cc92e9bf3338f0767c620dde02bf2beffe5e8a4781c1053ca9232af5f588b6dd5ee4b7cea03f330ae721e52631da8b08d62b5264fecf0a1bdba9f85c27db81b3eb613e5c939c65dd93489b4788b9e368354d68c3427bf8825c222ab2eca0d34afa0cd16d4c3a6a73cf6dca7a143ec3fc66377ca92fcf8ba40bf47c9557b18fcb89fd4760dfe99873f154755be189955361b76ad3ba5e970c1c240d44a4e457a412e7bb5bdde27f0e91e106fec3951f8c524f2a48ea277c47bc505024b569b8766d2948d205bbcba248818d84db7714010534a5b6fb9b2b7401ed8b271e74665f795fd27626f4b25c01ab0c9a3dee3c151830e131627a09ea64c67555f175afc38fc1600f9b416c24e8db3f5205583d79c9acd525d97097cc14ae5375da86bdc0a27ecda8f9b59718f97b8c25798d51e12e6a16138d16d09a0c479df9725ed220f9864b071686edfe53c1669ed0e9965a39168bfb2c9656ad64eca97cd1fda71f56470ace2a94dac522e763cb6f6126d584444d04c3b132e1d2ffce3a646476ce6c0bb28cd90bb29c95c38715e5107093e194e2c462979ac49af427dcf9252e8705124bb43e1ed0833a59e3f915672591e16ebbed79212f85c86dc16721429bc6fd58dd52000c579bd7f042e7d535b5db7d59ecc3effb1abb0066a400fdb37a30e8ce273e38e7fd0df46b8714ccf92741b9e7649b9e72055716a7e72a18c6af2a13229e6b5dd1cafb15dc73ee9bba6e16f72d56d31595591eadbb7f6c05ef1619466a60271b021f23acee8403840b5aa19217b2d4ce098e1338964e5a43bb16c22f9ccea127c3c03155fb3e4a31cd5ce7c765444732836f2b7a0459b02df2fd74166ed75e5a5682d63f9545433724a25e8766e3af5869b35aadc8628f95ba577375d70dbce89aaf03e3cb600b06fb2117f692bfd7ef0ea32e9785a4e924eb83ebcfced26e26277af26bf1aaaa4469fb23b0a3394ee041f21c3541c51a50cb2cfdeae314f078db38bfd46fc17e69c83d15059a52f20e49ecc6b85c20a2cb1ef71e2b8b93a7490dff7e59eedb38ec6564658881e666cd682a13878e7de7b05bb5f22e853b1a3e71c0f344b5bd6e7658733c1c204168b4beee1fbd149c3ef9696e03781546c7f70d8741759360227d4b545742a0d723778c6011c29879ad4b8f20ce523875b7cf0677b8dfda528a7d0fa57536ce60cf562a0fdc18e9b6e49778f976a94060476bd5d9e076ed7218920be8c6c1b859f647c07a086542c6bdddfda6b3a8d01812ad800fd0f53b1890818faa432423da80e07ef69c74a54da64d3f39e606e156f67f4d0eeb5011c6d97e456067651233d887f4fe8305e825412759ee8ee67c4b5af7830663e13d2b9ad2a30ebd666f98fad398370d4446fe3052498e077dbfcbedf5586d77f7b73b29007289f42c0f3f66803b81926e9028f1a27f5b542d05323fdf3ef1acc0ed975dd5726bd0e0f69d1744fdd86c1fc86dd04540eaa4d694f7e0dd40a93985a0f777a5ae1b760ede9476cec14031b60015cbeda627a29de092377b6056a891409b28dadd29c3c40461f2583285466b164daa356630bf41fd8b047af3af1b1afd78abea3cb0d612f635e5a9ff70100e40cdebf04e96e38732f8b610726774a43cc358741bb8c7ee6aefd69567a39a0816fb35b88db2a17b525e8a8d2719c935a97cd25c90144cdb519a149d6f0078d3c29cc6a53b2e8e7d6f1232e1e79c79e9f1ea2bcb6379986994d0a96630b0dedadb466b23799b33b56cb50a25ef0ea887b60ea96d6888540b7565671581cdd6da4daafc441638c21ad372f72b846d428550f72e13655b7eee045c8ddcb160d0d9a8ccf49facb66bf4475a9b6d8bf22c49c0fef4ec4be466b178384f40bebfe1d9428625116dca4f3fa472248e06fd2305e1b4b8d5be5157ab3e29fa1d1c84dd02781d0c54adbed9e931149b72a762eb0afbbb34ee8a1cf5f3cc9de140a17f6dd70b1a8f633d4b9a85d523b3b3290fe7663fa51b3d5a68b45a106a06b77769a1847186e8614dd220065308d74cdf28d1f5be7160578a34f14f16e77f848bf9a9c7621aad396e9f6cc129b70b6f89d195ddf0b9a75e1b03ede05522b9bc636ec5eba53cc839ee372dbe6d18218b00a1b0ab2f222d765fff03d367659fe83157d24e0fd6e408753ec9d3919a03cbf231dbac61ce33ff0cdfa18d69214648aaed72260553c231bc408bba7eecc8d511b31337cac7494ee8b9bffb0aa31bfd0ed8713a2a26cf1adb36d61d774ae3adf2e8c721e72919b5feecd3ec467e232e9d4c1fe9be0d70521bc65db79a7e6dd988275920c1a0b943a6151cf06d604f67570b75b798604e45d72c01e02f2de6e07817d8276019542d46d8fd717b35822da9aaed31cfe25ef86c2b1298dcecb2524966bcbe620d7c71421221479343e1432f730496d4f39533367ca5c259dea46c87cd3cc4cf1ff83468f6e6dc9a4ec79a76c5814250e1c1f7de42704a467934fe3c9d9f16597d63699e1f589c3d2865b6b781c06ff84910055295346f35e80d554f1f55cf0874d0a1a938a10510885e31576cabe85b371ac5ed18e8b6a1843a6c37467577cba69b61f079a391968e8d6bb33d5d58414ae28a3fe32a0b39fe138b3a15b8ca6638e93ad1cbb51b3c1e3970ffc28601c0ee17cfd9afc5f20d9dfe9b00e5f6e18e7d2cacd36a0c1bfabe4a6b0e075e7689119b21725e95a352a3291e2d5df0e82cca7155a2e5b98057b7fc03e509cace6b148633254e44f5d2278fb3b64b693d311e00859189d6e4929b6d58d3ab4b9812c33c7d4a78979428292c510ce1829eaa3c04c9d9b600dfa7628575c2ada674aa7953e74c8365c6ac94afbf0155a868464044cb91230aad3e6d97e7ec86973a2629224b89a2fadd7f35c4f01cef85b64281bffc83e2710019f0db0dbb6ceae6525027807dcd22b50453ddbdf5f2a7b0fc57a92c0eec76741d7e77b8e558ef8aa0f0ebf9b9bcd00f8cb0f4c588cf30042afc3791d047092ccdcf3db7b4ffb946b2cb2b158822ed5ad33260e2ad5100c967c2eb63af7d835a7020a794054ba49b18ae3f23a078d3e61663e4a65ea8d85b9e2633b75c78a0efb26a64aa1d5ed6d06e3a171b36ff55be25b4e256b6e9a482bfd636cd643fa77cd8d7240a84a589f26f677a8b69ac27d95e34209b4bc8405be9e42e0373137f0dd0ee2cb5e2fdeaea945e580b26386181ec41b2f5feed7d40e33f7d5338fbdcd41462cbc15d0fa02ea61573d2ee2ac9dccb35ea30fdaca95b65c0ef4fe91299302e9861e608f231e7cde446b8b7102bc773afd29ad7c9964e0d35bd0d36a7144d6f16f493f2deec51e9d2726c931393c78c91a9789db41e5e93b6883a1ef944ff69f21deee2b1f491eb69597270f21e57a92414c038e7f11e4876c09e6f429c0f34b1ae0b59bcac92eb46b33c076a95a00ebe8e1dd419503aaf6ef232d2c2fdc74bf87b7f8ced7ea23d4f1184356692759d3f37759ebb950033748ed5aedd1bbd5c2bffaaa8e8ecd10f41f48be5bcf51c52205004c9a0406fd1ea3a673d29392422ea77babb2d1186d9c024ca50110ba6b93773a78a895ab8e05be10e2c03c2012c3b37712d553bd6ac097c5b6677977b7cb0b71eac3fd6d0de5f69ef01251e96f6e781e882c863d6e5ab51697bb0873c1c1d583351608bd1e1ad313bff233dd084618b44607ba331b11f92b0df5024485f0b4e7031ca72890f57ed2cc9dce11950926f10adcd2881fe0361ee133e15a6f1ddedf9009e7cb0e319fb1e7cfd53604bbbf45caa80aa8f398c46da93e12fb6969307dd52d7b897528604f477cdbc8ec149f0af471be1fc33a7931e699b970acef3b6e39c8ea2d3d0079f8bad9403653c00576546f47c7840c61fe0bb910e52d2ec2d5bf4566086f84d62e77c603f18f686fc6c0de51a8b7f7fd462ec47dcfeb12608790fb484ae56fb233a4dc3e07b2531679bf56023b13402443d6d02bbe5f2089bd26c53b538264e023db171e780b759c058fc39b9ca30f006bc7b5a0788a287a20e5a9f009c377450b969a051da7c213343c45a78891b87dab02d82b875f343e79496219d61d78cea7cd252a1f9e31196c69705d1d0e99cf579fbf93148d7001a48f17e29cd54eb6b98d8871c9fa97fbfb0c8230da5afa49fedbf187ff71fb82ab4442532d76f9551aa4f9bef39041fa098de007c715b543c737ad5fb34bea49843406f4cd9bd9b39275c99814857bcf6c221454ab0ffdf9f9a5248fc24261926f70114b305648e4875b6a988e034895dc64db3a0212f60192ef2ed8868eaf40656bc4f4bd054f22133f6875b42ba186ece6bbb49d572eba30d45525250170f263bffa0c698c36e2bab98c048be98b930c6431fffea8463c2f27edd2b5812ddb83aef3c5d405a3467d65291b09ab36f6b8c15bd8fff9037a9c76b3193f0fbc650247428b0b413d636206ebdc4a8bf859503111dc7c9538037467309fb1bc350c9c9b0e6ae9c55d3fb2b720e55d16992b65a91ff763dba850725b72d4bae053c4cbe997f865e87fdbd99649d9308add50963d9b5c6a5f6d9a45d78bbcfcc95126854be322b45b3f3a5ee388c8b8585868ba35ac36bc8c5933fc44eea1e6ec104d50957ec80e609df8f88555184566f0150ac28ddeb1aed9d03a61f439b3f963c74381f2070f0ee0e7cab1187ce6ae96fae08cc668302ef41adfa36b83bc7c1d80274eda7dc7da8fedeefc1a2c86edaf2911f3631b256f98739beeddeeed211a2c8c47e1e13ed4243b093505f8359c7ff7637633a55be7b0e7b465232586640100db4588aaa0696b34e5d3940fe5ec6568b209c549562beae751e47047f88b83e9c6947f62317e189aaa1cde8a78cf23cc8b396f3e964cfd01258557c7e7f98f7a2f7d2b7603fac68a127a4fd8f1d13291e32263059b3105df54fd013a7402e60d1a7bd0eb47b989d1a947adabe1297a3851f3aa75690802f69a1ec9841a1862777f9b7abd5887c4fb8b1aa45215e0ece748a6e41b2eba65246a6ab7a1bd121f5a3845f320aaf7712bd6d9ab22bef53ae5c8c93b9924cfcf1280301dbb7b80525a636b6c6123fe5f3f1f2662dae9af462626fe7d4ff409641271c0dec77716f00d644d5125d17d37205af500240d0d28ff785ca53a4db6d04d68ea0c9e6a93a8f8f1730681209dfd6ea345e20d432811b525dba3d43bf3a648f2922d0aba3b2b448c2966b92c5f3c02432f989e085556e2a66d7a096aa5556a96637d2d71179adc486768e84337fb0e1f972786e535a293cfc82b759d13272f1b829dc0ab533596e4f42d265ac11106d320a5824a820f16c1e6f414fb2e67a69f02a819be3ebd90adcfcd01e4f5aeff0404fad1569acabeaec73f82cea2dbd9a08f84e7baa2f3e32474f9e462effc230659854339196d921bee3a531323b424850271930a5e94be62a9f2837ccf7b4f238861719650aaaee7226dc97a6f7287b056e7552820bd198c897a871f20d5cc3f50c18447b64e882f4a307a8732762785659494db78f00fad3a83962647b919840cbfe6ede57821ad47048f56a1bf2bbbfc6abda9c20d295767bb5271ac10362fccccb1b4387156c0ca931be33db32a70194abc7db2d1907a912e11a5fc4df6818b2694621b065a5d535ba0595c3530ddf398f2299f41204549bafcf9bd96bcfe24f5ef14bb39bff5fd056a1b5ea3fbc0668d33e2e974299a4ff1d41640b26378943830d724d5876966dbbf658f1014d887d10907b1139efd49f6eef2b145e33dab972ad5550b5c6909b9fb5fde9f73708f20d8a60dab91e35a7289dddb29aeb468a9632e821ccf4eaca19a7838b59bfd8684948c037f433b356d738e075108ed1835bb2669d767b0a929615e238934d61f497b36d7e82bd3d1322b23f422247086f6b24cf481f3375b523f9800fa6e7cf51ddbaebd887a3ee21915f269a4ea07c647dc0b72f907b00bd70475f595b8e5a7ade03a413e55cec3d2a3c3fbcffab54a708d2d8f782911dafcb23bd99c00ba1f9b3aca5dc772afa2aa36847dc2c78531efb95095e45bee0171c1451663a659eb885ceb32fb8bcfc5a7682ce67c1059cf37b369e562d76b9234e5320fc2a97496cebc948547bff806a31f97b7ece032d09d405a4d49d643cd3e2453657b103bb1157f48fae7e1661dc51a9f442808a1c937bc33d8ced5a7481f57b36b4c1589cfba07caa215a4114d18e9d8befd2c3113dc4a419652bf1315431d12edebd16572e9b58194ab3eff2ae689844305bfb834e021710c13f53f69f79a1043026beadf38ee6ebf2890cd7baf1d33defbb457985ee3fe7adc4b03d2d666d047b58f43f1b25d27f07969585534398632f33e5956df45e73fa81169377f15c8c87f30e32149854d272511412514a8ae007dab20cbe5cd95e6d8dc5a936d3f6b5e83424e702263f9f94bebf347e488dfb417f69b00e3bcc597ce3916231d317c3c9666f796db3a626792f50ea01399185011d676078546420c8bed250aebf3d305ee05ea222da7b23a42f27068da585f1c29807792c1e0e7b8b599dc3fc7d610b72828b43728def613805bc4b5f5d82f9235376850008f9ffae7b77418e715c90e1073167fb3c96276616908747e4fa0c712513b5dfa15b1600f16c1b627cf34d140b05e52eafc1fddb41ac20a73a15edf8512f720e528ce0acb63682787302588923296b90178b7ca49439be34d009e3955475fe2304606159e0f2744e4b80d27bbccc894cd62edef63940fafccb180724ee6be06350ae96f12713d96321af81417ea3c14c3af5bcb3af5f010a45dcc87d713b81e3ac04e128bf2f3bb83ae843ed14b279e710ed1a5e21445183f886face649689820cf43060c98e21b61e286810ab6af2c25ac4f3921c8a19751dfc53c3089de2332a5146197a560ae0e66df8ac363f383e1701eae0d25e2ba15451ff1c621963b360415c2b59a110f3bf07a8ee889313be43ff86272bcd1eb01dff17d1703a4f1c1c85712ece65039d2e2aca2f754e47e694a9f709d45db56a7b55aba01b2347ddabc4588ba34a6578f519a20986b40cf7537e552fc830cfbff717d89fe519faf22c97c8fc69afe4b252d37c6ffb6f7dffdb98a55c67f39c52657b891a4867bafdac387e034e977b7495d01bda8679601b1a4bb4f91f37d49bab4f57e14d12396cfdd855cde5917d57ca941368a7e8b7199bcd253477fafb7f173549232f070244993b23a6fc16bc7755f5d237c4daf27d5d8d63a1bba7cb469bbae8c97973575b15e378ea532130e8b92d167dd23095317e4a80f4bdb05f7bc0c197db1b4d4daad05f08f680f541275fdc383715114145cf2daa36f595b690310816c571ce14231633eca684540fa4dd86d5ec4f35675ec2a1dad9c1b0643a9a7a79b0e382022f294e16e132033946e36291f92c9640b5df149a37e4e9f7bc1ba029f5ade87fbc7ebae5b3d46e69704c0bd5e1d66a9bf362cc6ebeccf88d2ef548e9151b750bfa7429520eb71ed178e863909215dc78b40f77d67e3c1ede754d1412ea9854b1e75be2a8cc459f74e05b7104fa0371799cd0cf74182325740563514f47ee2324d4a4882739ee5deaf9fbdd4045c2e5a6321bbeb4033e2f8a763859c82c02d44e680216b16420f47bd45a9f5a6c77511f9d83a5dec6b1290a169a2b40702df15bfbf4c6cc0b2bba9b3409f120368fb232614bb9f67d49d2897b1c7f9c4b95355f8c18b5b659df5035224d5b443803c9d461c00b840978956c852ea687927783b0c1cb1a2b8240cffc66b424ef8653143d108228f274cd5b425b8861303dbfb1e9fcbb656a0aeaab351fb1f852a1b49b5913027fb4e1811e3668dacec981e29f1d02c23630c5075891576e194bb3725a3c8f93e234e57ab8cb84a2f98aaf91a7122d30cd6ff7536e3265722c3fe4d6e24b701ad62c66f2ece8ad81d3610ae1c9e40a59d5b5720e78fb044d3957f42a99aaefef45412efcf0eb9116ca76ef4ba775a33239b3a152e592ed617eb9cd6da2450b9e2a961cdf11aaa48f829860f5f1e0a81e08cc62fa774751af576224d62cc1d4fa43c6447ddc6976f9b5e1886da12685a739f192a8712991c75260cbf0c67eb58604221c66b62d0ed9c68359834ae32c97ea667097448620797cc86832ac168a03f41cb6b9dd21ba76e98be9b037881d5abf9093bcede466690254373e35edd70713662dfbe0eafd9e121154e8272bbe8456c764ff7ce6a19f70733c3b3d2b66fbd49e2d1b48fdb708d94440359cf7de402f5a4a0d9007cc57a020e1257db431ea61aea2d8fc3122aa8608a383e9ad28b70d2cb6435c71f251fe977f7ed49aaf413ccf7247ab1a50458a6829b53a408ec67549fbecebc31ea8de02ebe8fcb32b77b268437b08737bfe6bffc1fdb77dbba571f46688c449a63496e7973ee75d76e070b3d426abb14c7a73d7185006b4ddd1467267cd587aa938b8da0cafa4e821f99403f3b280835311aa684f19a62281576549e169777cd202ee0691aad59fc24d1dbda80896067c229a0a553a366fcd62906e5f2d0306af0ba14f6117b6a3d015421d9e5ff93b254f6d1e5d9f9adcc82492f8c868031fa596ad4d208eecdb6760ad0e1b9e2d615d14ac96c80978414097534f52cfb3c48be39c0914bab4db45263d886c1c7797417ea0aaebddaefc8d68f24a52bf60116bc9bd1327ecb8a894537eaa0b5843feb65fbeecbf1589cbc2338728650a7a5d176b67ea52a98e967950f6566ffc88dc27e0d12725d7df5f7130638142399ecde5b4ac88cc9a09a8310485d72c7b886318b6d75651b30a81e7057724c562ffd8b0beaa1a823c5797f4304b23039ecdc24ed07df3f1ff2a6802f2d0933a87a5475444ec1c4f75bc38461df660a6de75641412774f87c8b3f3ece561b202e212f6e2f4e3e827a1a8f9ec8c16adada82dbfc7c81f3e61b517940f3446bc7154f6af79477acbdb6eeced92a89c46da38f284048c9dd12a8d2ec575ead902688c6e57ab5dbc6b222dba263cdbcb49bf989d73a5ecb4464e38738f7651fa0da9fd10e93e0501571e05b84ca15cef2943c4e2ac642c78f3694734942b3bed4f8a7c53dc8980a562ebdd436679502468b239cb6754bf3c4129e514379ce05f29cbaa5ab799b5c2ce5eeb1587c63ae5f48e6b751aab2aa8333bb871cc2cfc8675178be3776d937c1e40af00295ba35eeb014a1ca959e12646d22a6e83829ecbe03c7fd20d60dfed1fb40cc7ffc6651269ac01d561a5448f46b6d0f269ccf369078c68a70705bdba0e7c5532bb3cac7ac2d1eec4afbb3f3901897b13506bbf2ea5c3e899b16e6bbc14f71f0131230d75909d0b143f43946fb9b65479c9a5d46fd9dfd596ccaf77d7917b3c17652b3b445e880a353902d6399ff30b1da09ac7912dfcefe876a374a5239c7452dbb9b1c77b9b6f0cc4512e382c4317921483253a8c14daf8d859685fa06007b463ae0c5762659f5c5e2309e5a2e57b01abc991ba3d07af19e1c158af0be1f0f09a31ada0cbcca68ffdffc5de409315a4975dd825611eacfdd4666b69504e4c15634552e8c1239fa6b24c6712007683a376b50e47205c0382a7a4e4bfb871c0b6bb979baf2c15701e0bb9e47a67159fed945914ddfe89754ef8c40fef56e90b38b5756c7bfd85c29bb5bd972ad52d29d734361666a493fcf5120435364cd013e52d85fdb12876d8262aeae8795170bd781d7e98673b371dc656d7aaea5dbe50dadfc77fe01a75bee4fa3621676b603d673b226a0a5feb793b3b0a7757eb5b1b5371a7b14acb1b15d3f0d4edf80531a13c1f4b033be26309b8a7dd14b62e432799e3d42e8383c5e19be97c4b9196927cee8e8c67653a7508dcc141874c0d2b45937ca36c7e3eedcfd26fabfe63cf8bebbe837a316af71fe7fc334c9a5fb527d60f26ae53ddcb54a8abb57813d40e4afd46a74c2e16d63cbb7effe82096d157edb73b4ee0cd8d726223e1be514b5935c88730ad7f579e44614d61b2bd6bf7e0cfd03d8bfe031a73e83102a659ffad5a7609d82f68033b739a52448243e2515c94967f80851eda6451bc6f851e9fc5bbe967bd636f2d7c64899c9f782940bade407b0be763ef8ea0f4e15493f801592732d97eaa29bdc057378614f1418a392bcd1f7227a7022d46f9e83f7e75cbdcbc9370d2d79c649d1b2d04c3902e3e3b9772adc7d456d26d3a9c8dcf6c5116fbdbabad0734de5da136d7b5b69c15bfe94c13c2e69b962003e350ce94a5728559b15b859036661107d7f4da6fd9d16ca212f535c15a1254dea780bcb2a18ea206d41e2874308fd1eb328654193f7194a39a8425a70ae181e0bbea3fc1d024c41691068a2065386fd3e38c812b9ad73d35b501aa166f8873cbadd7781b998720fcb76d18b92634eda71c257dceb56901ec80fb073f610a026badc8b612ce4f13d6cf91cb0807275c9be09b507c3bc028dee4fe119f2f17eac4253b4d95ea2ad8ba175519156f8917f4556e192c041160a788963cb81310db9ab6df27b60209b3528081c2f718a063ff0f611a0f1fd45438de526641fc9686258479b9778dec112c5c6c8c76003c42bcc7812f9e184c3e0c1628c95f051788cf6f6702376c312872d6c100b4f9e7edfafb4cc9ac3b2c64a5ac453fe8c318e6a57b324d51465f2dfb81a3790d5135335c40247cafc12f46220d34d8bc3db477ade2a735ca524d85426cf1081e0a1f9e4a725b866a44c8bbd4be92eef2341b5d575f4bbfdd7d251a338e50e65abb467c1f89a04a6008c8c9c0608708d14174f4c7cf505841a33f72c86c92459f9e83bd3d0cfde29f735e8fbe1c8029c8e4a656ed453fc52975fc56a5e571350b3b4732f8aaef2f0107beb1ac044781efb25b719b1958f223f951fa991675a2638e47524638ec3883a9d71188e4721943fb1111ea71a046937dc2a7f0750ada7926a0dcddc84649e6439a60eac2bee961e270dfe11d960d2a1b583ab94bcbe2228890232c5c6a58e660374e94f45906027518eaac36d09c6068bf0a764e4314c2616f3243fe8df13ad3e1270ba6bd9f635caea99bb393f61a1729874958c28af022b59cd6a96961715becac273b256a3b13f24aa9de3ff66c544488d24227364cc3b2a06905b46694e04d2f2f9ef0ad6f46879ca55d064f8975d4dc8b6bc00b9d83a8bf26ebcc444ebdf133977097bb33bf64f7faded45bae3d7fc0e9db45cd68d6447a9d8c109df8346e2724fe24e95759d75ac53f5f64e5d2cde2ce95b75b962fa337a11fe5c342169b40249ef01f065c4833220e22749d71b3c4293e3e508f236d4e00fcb8bd6f86c5936fdca5770ae25cbf06f224d0992f0ed77516559ba8837931a750a705ac7c334db65cdd9185f927ea823caf9d44b4ae3848fa7e96470b8b90aa070c61162bcbaa4c56ada894f2fce68f9175dd228e5c7120e0a20d77b4cc5b5a4858b4c93172b963da6e7b25285809566e25240285c6924c555fd37ed5f13368b16f81eb1ee8330f20468b396371581eccd92979e8a77feceeae5e0d606f920420f7ff8122c4914a937deadd5edd5ca38737d2a42d5e1d162ab09e1ad0b0026abf33ce9bc340ee885aae99992b364e2d8b9a2c4313ff143ce513735125554896cf14e179f92fd9203f87cee3c4bf3d380e25e69dee1960e1ca51d1d3f87f51ae1fb7ed5d259f76c040868fd8fddac85611c86e7e1516e74fb28e2cb553ad2980bfb9cfba6913a5b64761c724faf5e88f8231cd908652dc39107019b0b40668e0b3b8e1c0f4b20294f070370e6f6bb78990f2ef5dc8fcc1b92a15bc147d10ba6a1c952052ddb76194a6cf1bdcca884f0cf0e4d2308234ce2fecd0a1162c2c149fa2379af171080a0c952b3e4aaaee638de00c064761e40b37259478d30d62ef83bed39989b23e81cfce690c19c3f75b0c813f4d306b2c39efd8d38336afe46228e7acdc8b34e6cabc593f7664eacbb31ac4b1f685599abebec4849a8bcd0800d0ac411ffffe8821e72a86f208e152d1a07eceb2eb3ec1afe7b1bc13ae8ac2871a2f67c0628ed0f12152aca6ba98257fa9a2ffacefc50272b9962930dcf2438f1fca8ee0c7f5340bd75e81bdf1bc7acbffa858784868618c55490a3d9964d43bc0ab25808b922c98a2474b2f6b5aaf8e88e6481c9aa7b872157ba2796349eef679c0163b7c371a86feb1932b5b037d3e6bf58e7e27d8ec8577ed6e9f27283768573302c7e1d81e72fef6e9ae0f87d43354dc5e15f97bd6aeadbddbd17803f3466673a4beea6f4d4690566cfc1ae93f08223aaab29993b87ff8dfba62504576643e13303f98ba9b730031a216e9007883012a0ad546a198e495a5d942501df5b76c87f9edb2cd0b340109bfb503bd526aeb2b54464a9ab0ab582e121cdd6c7c2716bdee19e90cc6390e04c877e732d7aa5d6b7cafb337881a6101252357fcdcb96bb5d811a1896c623e0d51e214e8856d79f57520bd29da926b190fec36f160cd24dae964649ab0b7a056607335ec63054400f4c35eb052312211da80fe9d751e29e1e7ac4a7c05957161797e4e1fd7ea2ffe57cb7d0e966ba3d49b66290aa53e103192ce81d7208214cbe642ba8f3e5bdc1bb937a265c97a1da6904582670bb34af245ec92cab3af8e56a393c2d50fea753e24c0dbdc5bb3a50a108a5c444429f22ba492e5b6164961957cfee21864bad44cdd512a437262082c47e523824d5774c2b8e288affd28616d974abb73f92a860be79f33ea94967afc9a5caaa68fbf7579d36c900dc6b1f599d0c580df0ca347293f57f2faf4c079f55d48654b27d8f757292fd0cd95a25b18724e96c76b246e61f952a7f788af6c96e18b52ab74dc49af1e12b8366a67f0e55deb1d72a1e0945058814440312e1d89319b21de67d9d0e5841186191789fc336a0ebc52b4900375dd3db2ca83225d5cea9ee997d7e86efce3acf328f5616ae998416de8197603a6235d2f54786b01b6cc71ddeb7fe62d196edf9123f4f2f8507925cf6ba9e89ce82acd3ae09dfe37fbe3b2e81cbae4ab5e2dc9e42f1ed8f5796a078f94cf6dd372430d16dbf8f01e90c80a19a87511ad86d17705e370368a2f8800b7b9dbdac907243e615b3771bf1f0399ce2b2b3bee08e38ab451326221b7871f7b39c22ae5c89119360df97eef3ea830c55b5c00cdffc79d6c9817ade6a850847cb5f3365286382d045b9591085070337184f2fc8103da6aa9525840465c8520ffd69bea8abfc29a972a2f4bd188c1f00e3d36513d6ce5dbb3aa15ea74204421f48112f2fab3fe904af4730e6071d6d32bdb783d1f61ef4c5eb15ece1d692a6436541139541c99ff2adcce3ea1c8ff0b49a4473090861873abd3cddd43159217f21a5a70192780f6e6c7940bb849aaef61c9dfadb023e7616a61f956d5aa7925dfb75d905050b336afab68e047827c9c809751f8d49d6f954b406a9d3e104df994415f070685724db98329247666fa3bc8db5b3b52f7737df9013fa1c2c642eb0877d4e4ed242246092893eb5035bb6b837b8afa85dc9fcadb3e0607712a89008f41f6170d73f3c05d658aeb47b813e5515cda4022b65b93e952263169cfa9cf84426d0597d2442f53aeafaf9c31000a7b88325014f2502111e76116133f405a21fecab16d64c17c7677d8e7e706cc6fba5def386edc0fd5063224d7b644eeb3c8d4b7235b4ba0d13a789f3cfe3ab6a19a62d0f8a93b9a969b9c81106af389d3d8ca1dc9b665e6ab654d128307d782fc043afb6df52b0ce3dd14fcc2f29c4a362a6e8870d4118e232f4f2748d4c23e61f91e9cc203d5c0e451e423f46571c710613d9cd8c0bab84819e7b1c782f7fc7b5833ec41d0c429e9d221dcb6bbfe26a07e0e3fc4f55c7a10e14f7b7a2e681b341c611ed8ee7bf8eb80ead20b53dabd9ac061d5b70678c0c0011fda1299b4d7cd8118c27343cd9065f11f2c1867bac6a570d726fab632c4c738f5735a0e0a8b8f8add50efaeb6fa90369667230ad262d575065498b89b39cb3caeeda23f87435be699c374c89d8ee7fd517d12d24dbd5924ec7a03a0cc38309ce12bb2284b16aa7249c5f66ea2a8fb78788525e8ad337eafb6b3be6610ea43e165e38418b626bfa6f3fd47fd31abb52d15b3183eba6e91e4c45f16a0779670335109a54c1de181aca90c83cee958581c7299825de223e82c7e244d71544b8e27a2c36aa57d024d187a62ad4daaa25193a59bcf0b50e4be54656db373efe8f48dbda9b5404c1ce79faf299f908dbe1f9a05b7f8ce682139531c828ca871e26eaa5c77ab5624a4dad45370514f3c2cba40bf0e5e22795fe4b95b46f28230a6e245384a75600d17875b7c9cb00924a34142a4b1e058325ee5b9e07a89409535e43aeb7b35661eb1e0774ef210927bdf80aee2266edfd75e7bf581d39b797d57621b028211f470b9df0a9acc289a9dc517f2626526765ce511e5b68c9f5bd464c97eadbaaaa3206eb10f66d0696c8b5b543dbab81e3f922cd17ab9dea482a85d422e704b7d389cb0c282ad7e0376395ae860b01c76545586e7c600495e333e5ab2738ac3300efe1481da3438175e64345247c5ff7ccc8fb26c7fd7429c81b8b07b54a2c83793feb543d13a1dcdec652ef8c67b9e159517f40d632d03a840faf6a99e26ae005aba71d261f8fd6387742b58687ded9ae13769c4e0552ee5e68d7147b010f572450a9396bac791e264f5a1166f2b53ce9a562577b7009bf4ee17aae0fd62573019685cebfbb740407a4fcf50fa7fc9f9aefdf661d7d13266b2f171efd6ba366e5e6e5a31dfceb1992ed48df01fa5fe33c4edcf3863eedee91cda584c9178b3cd4792fcda23aae55290690c90a5199fddb90f3398a086040d53639d97e97340bd824c6b7b9a3ff62f15532575ca92d2851f3f4ffc3dd5ab2a8a1cef5090391afbb0fda08f94d784ad72a6c916a4e1438b0153bc2fe2e9f66af34c9cd7df2ee8859e6f3216f0de81015c58a97a0dbe00bf8bb1cf07c945a4d106c6482985694032cd726adb79f384c147d1239e0e1030cc4af89f0135256a407b59802c71ae3224b8506936efa70fa3ce859f2754b8b8dcdb9a99b92580ddaf65168f80519142bd19ceb6b0607f6f358129e2553a577f272bea0fc5ab8d5d319cc9b2d3cb615fdd5b1fdc9f22dbc8440532a887c428c0d1a6532acbcc2c43c0ffef36b1a5c6312a28b396d2b87bc9da6dd9587ff4282db07cb893dce3e3a09677175d0118e25d1565f6c9424fb85751fe3f0212ba710408e1284a0d467277f6fa11662d61ff50fa0d82d881eaf8e08f35e709ada3b4b65502f182be60d1bcc7deb9b19337657f515166d102d4b9410a258f330b8108e9739166a8542067c86fc42753add06228d00c515e11080914b4249833e4569013a4f75975e63f55e7b8cbb7c97909f21863248e1c45cb5579cda6bc85c32016e5017c64621c49ce297277e6315ccbc72bc24f976266203607352d44258b7edda5e634cd946fa9e616d834cd1372ea59825eb1b75b7e383481db0c9cdee391a4ba7aae1cb95ccc7579e8840a4c71e494135d421d72973b3a299c94eed7b3b6358c29dae6d30128ed471337132b0fb8cac9df4955c3bef26e4148a5d8a27b19a337fd21b0731af8194fd54ebb3fc4ed3b86d3573c4f586c69cc530c483c228cce9d7d0cb230b1cee6dff59432884d03e9669eb91abb8d329cd16a7f2ca9fc77abc53966bdfb2a7134eb42814df163e6a0cbf22a65577307149d823287465f375ffe403581e27e5b052be17d131ab1d5f7cefecf8223f6ebb44c4a98eaa8ce3b737389d9c94e0fc339eb7a25c4162ed9b61283fbaed8054d6e7e61278294e0b77ed4d67ff9616d2c0f80350d85f8a0a7c762b4202172deef051acd907f445249e367e6f08be7a5c8f8f9ff581df26a8a3bbf202b76059a3fa53b8e68060e6e20d2e4ebbf6c00461afe9ae35f281b66ed86fad3452e86545ca92c505cb808a01b17974af0cd1ab1d5c285547051335258ff5489e10bba015599ed212f765e041a6108b86e4863330439d9d33d023121bda43c715d2137b3ab314f4c0aaf81798bf96a18a60978c1ffd16a45386965e3bf828056f4db07b21bf16ef4b461e607d0434fcbd7a3a285913671b99f83be7d757c146f5669352951f48c337c2696cc4ad3fa91e39519bcd9dab9d61b528c3ec66eaf308f24b0c84fd3114b3f4b05588e49f10573ddf9756ee236a7c86e7dc1f4666abc1587fa0ab2c860187c12ef4f66e3c66107e069082e23cc1915e30375960f29f40098a30eefd4d7cec96c79645327bb3f77ce307a4a3029d49413e9f7d8a1bcc9e21755572a5efb237f8add7c4fd425e38b7d250386f6c82db34dcf73ddd60b89afaecbdcb1d2611de26e2bd9118ae004b7e5134868bf576e55dfd47749c4d96a7eaea23974500e457059e0fa19b9bc476717a41e1f9a95f8175e5dc589df409c802290607c081558c2b51cda565564a51b70312e5c0dfa43a73f02e13b3ba286809165971940c632ba648334ed5a53b25f04bb651a03e6143865afd5fff613fb0bd76a323322f4b6ee6345e71a64f825144cdb8804ab017efab3aee80a1ca18c27e50ce70f8d166065b9ff96861fdca4d644c6cfbbe87c9b50932edd502c0220f824ca6b02ec3c64fdeed4945278341dc9e5726a3f27e1e843a5fe6ba3b89f70075c44c8b1f77976be6a45720092fe7cdc683aaa51f720bd68451c5a54847e1602217cc24fcaacd590c8103d59bc112d59fb8feefb93eb7f81ea6de34336f92c6f13c249a48c470cb49fb0894805ffb3f06473f3536b4fe4a8b06e4737a42ef795156c62149e593d1f761ed11753ac8d5334e6ed3dad64142269f8e7e0726dcf165a4070b624ba0021162d33642d1b6d07a79d80836db088a638b93ad610d1c3e7a564e1832a7f19c6b7234d41be5030688488017d4a345ad7f9215f8d61b3a59646a84d8e8606d229e70db91524b9efdedee1ebf8e7d4ec60c829cf6bc78e823459d20399e82329675358e58246fa03ab2387cbfc2c25e6f467bbf0c918e6a63c64697082b3c702333c29497a6dd9303ffba44750c806a34acce01865fd80811659565cea9d7c0b4f497080ec56c799734c89e39cdaed50b8d7b14f4094f15bf5732649f13a1cddf51cdb4c55919e223a498955ca0dc8d3952a68028b809ea82d68cdd83578baf6cf78e3acef57f39bd8e3d6a021669f3afff87a661cfa5c4df7a1c4201cb4c0cb579a1d30bccefa0357bd07489e0c1c6915bc1a895aa3c15f23c8721a23e1713ff5688c591cb7cd66f8e14c85bedce5551d459a69c333c69ca3b48057898851a5dd270222624b08ab1b9fbe91f23fa99de51f8820c674fc3e5efabf40ca68f6d7b83f2dee7397622784d30ae0d35f363dee6d38a0636e0a4340768e195db9b4b8ba1f2e66499de7d00aea436215395c2adef9f0d4d2feabadaa454c3efba142fad59a79c2b87305ef52f723755337efacfc86117aa4a8e4b138285bbedf91ff043505eae5d2d48de69ebc33e7c2a3e912e971846535481481136442b336e716076e47240b0922e237fd9acebfeb1576b1dfc20e8ca2d6ae5dc1a82582f9e3a7a6be21f5faa7f33ed5329fa57271df77cf16ce5349552ece1fcae16f7034392f22509fd95e7299bbb77144f44b3edff8fa43d90c3a3c1814109599c0007b6dfec40c9b1549bfbf8ef328eafd0b73e166c5ccc00d5b541a5c5bc118b74ed173b5bd0cd26439d91d62c45d6a65217ba980131975d12b6616041b359a3bb751f1abaebfc43464784e31ba7f92385a0645e9c73e54cbd0b9262d48f7b5040398cc647a62258592f99256d47a696ffe21299cb0ed30040aafea56233242e783830eae3406ec9b8cf1b187b184b85ce3b46e5ac7eaec7580ce1f4b72b101a15978cdf97d6dd7642dbc8e843218a95a36043ca9f84837f250f30a800cf329da0ba7ace6d4d721685da1ceaaf267d4402b34b8b77f0c876dee2786322ad0f443439a6038c9e63bed803c0fc2ac633408d068081fdc3e4f1800a3c3e1fba5137a4a1b938bd6b111c3839b2b7b1efcb3fa605d11bfc182e9f833008638c143ec1a6b038d929894a0cd6947bb8438a0142f8770986553ba0cf2247ad1051e77b47938f3e3b3d7658588fd66a87c04e5b47adfdd6ed0ab09ce96a15f7e5ac556ce62bd68921ee0971997d7f7e8bda447d26a9234cf89e8c109102c617b6eea2e8b6c7c2eca28ad3ffe6d6acd8c92c5e89c2b51f672cfd6fb9419f5eab2c4d83cd498981c3356698d5e4a2f5cfb630482515b65c34920f06c0907d14851dd36d2aec4508d1371fff03244a20463747a5ab23e30dffffa96f8deb207baf9e6038300c33408e0166318e7fc10186ed5658a8241d8da55a3cdef2703b8496c1f0ec5219771ba3d22f24036c456e39e4aae6f2c0159ced269813ccc45e07fc3f6c3d37166174ca22024f9bc54b04208920ba4a6ff99480c1fb3afb5b4e8dd2470720010533a72ab58b14503090d3410631536fb7983fdd22601cf60dbdd426daf190cb8e521163e053be186c1dd2ba6db7e282ba0e75eba453de2d698ceb973bd44beb8c891603958f199a7da646f814f1cd78c82c54dd35ebfc415931fdf4971b0eda85e640e0811b167ff2a6f8700e1b9c76f7391ecaf8d3875038dc9a3ec9a8ca1315dfcbaad87a1fa761774ef40f104e6660ad23f85e6f30ea0373e666c3952fa627acfb86a85d2c07f557497503eacfcd4f0f1ff4055ed1137cd2f78b0adc3767e699fb11b42b1b22c6dc9bcf684193b915ce7408196d5462684419de109c72e0a5f5ba82ca1b3337feb4ac63abea95843d7b7dda6f5f9a53bd4218f6d55ac5cbfaa78160f3c7041138b99094a6eb80ebc26f66e3ca82909b8f5acfad30722e8bb38a2ab5f785adf25fac18fbf6a75d4d7af20b8ceac242880528e42118ca26cc68c3c3d572abfcd1600971d4797cc85f15012e6666b1747b6b58b0f93856801d596783810c7b9e39c84faf21374982fc0a6737a9b56421c09712cdc54f021ffb07e6689f29b8669ffa3d6ea1984937ccaf899c82590dda8f8a30ef9587b2e1fd928353f0cb510c7be5672e769d7649e279c93e0b1e402897f8f61797f4d3a856ee2413f92624e9630029d2619dca5c258e4bd0caea131f75b97d10433e167f35e6e6fe92ebfc0a721a2c34697988613536d4c2b0e2f38db70552d76baf3d282cdf2dca7a04a319fd3defdeb1da4f3fcf9c75962a2e5ed6c96eb4f58e452bb1f2ec84807b1575a71dcaf7309e5c86082b73e4bc987138858d6fd3ac76438d65f686bde1c96ad1ab0a8c606f0f92af6026aab7f1c4818a00a2d09d6a3f4cceb4d202f296b8780e6c7f54b9abce87d00e9088066f8f07137def1eab8302963cd33478470aa25e6da4b5429e7ca6040c15f9d84e008d1231cb3cd2c11395dd69205e4c5baffc13fb50b32a47db725d860f7f8334148ea34e0a8c43032d0a043ea2f7f5645393f96cb32e3b5bfe90f16f3b85bee1c1389758c6643c31ab714dfdf5a81d0a469a9bc56d434e49817706760a1babc6faf82fd71c0e03a9cf9d3f1bbcbd7640ff607594cd8b0615dec9c202f478c28d849fb4138fbc4d8333e3f4cc3b6d196118139669dc9df66645db4af4b48cf39540f3322fa32e22be0c790360f8e87c8b318d422fe1901d97395f02018283c08f03bb606061ad5f7c6269da0d5537dd43453d0eef85dc6ee2dcb441324bac8b11b4ba708763d8f681ca4737a848e0edd74ff9995d10e287badf1573aa92665add6aa73191580bf0f5df60ea15b88fc722bf24717aca5789a1ed35c1f974985d4168feca272c6b8715fb6261ca9f95f7696efd09e0de9fc5cdf04948004d6224f1b3a6a3e2d048f441e27a58da1544bd81ffd0b07ab54f9ec64f828b7fae0ad1a81c621ea8c28392bb5244d7ea5d7b7aa6346fcd4b7f425d649c0b9fe98163c10e53ada17f7071c815fb47bb6631a2d3120ea16549e8f6ba3a075d5ee875f135db28b7f7708035d06c80a9bb157cbb6b5d4cdab28fa61567aa663ce3ad69cc46fc6602ef53b74ac56519f6b87650d3ab6b97e10d8ee782fa670cbc5b67335b258184cafdca1dce09e96d56c1b17f353fcb58ff63a5d52e614abc653a5a45c6acf090b8fd21603fa558b85153ad623b01193f47bb909a85f16b257de129b3b4be5544d81f9b904f7294b41f2a2c5d2b4061a8a61c5f60d30ad29e39e92eadfd0f30d09a83749610614402129560693ef8bef522929b32db215d31f03dfa9c721efa74d3fe40f5ca0a66135ca58b99e51e810e2ac34e8d19601cd0c22e02b70f04020b9841f4deab7f3855134874c2a8f9ad41440719856b8b7099a9e5c9784cd63522b189a359d278210edfa9c17ec7874603c119d8f69f73211ad1791bca21afb7467a9b7e078cf0dfc7e4caa38bd7d5cbddc89c0720592e0b2c6e11fd9ed449693bde2354bee1f39c1bb83917ad15e80f8207578e9c439ede65895bcfabb8d1031a43f618880a7eae97fc31fa9a56f2dcc8108f7580c8c6d732672a4381b6f695f29ceafdce25c2aa65e870d90f1dc1669307e1820fbfde34e78de5a6c66ba6b02d547b7122db7707cd421794124ae52a8bba7b8a4df01b34ba0ecfd3941ada95c22feae7e8e877f4ddf2e3fb3c2df1c075c6fb54b1629e8860d4f70182c060f4e92388f667deb394e93fcdfffa3afdfd2373546cd5b0dddd5ef226509cbb5bae876de85cbd63198431e14294e9a5bdad918e60d4b9c8a31623b9acb61a172241340c21b4b9d3e92c8a8d586a5f05295b9904bf14ef5bcab97c0c945675b3380ce992b1bffc3ea305b8761ac41a2dee6f1c3fe231633e1bc387a10a83e946309b3de7ec673577ed5ae87e53897b7240d702b223c4254a0ef4662d252ae63b8953214966d3b9bea49deb79e64c2b738b77a5040a5ea3e0f0c6f420dae7542d45cf7c6d9cef3545d27b4dd469e9f25f63d5df9e5ac8650d805d7e843942e1ef77f1dc06c01355065ee3af57573567ec2a3a95c9363d5b57b2b57a9bc256d10717665f3608cc82abca9ce25c367b6436b88f97e5ca3b4ecf29f237ed1ce10e1bfef298a6069043b4d67bdde9f9c2763c8eb166148a4db2f46b0725c86b715f1014b7d2252284e4da8244ac23c295ade68e680f7399f8b5aa9e00494e6e07f6cf25fec8bd167f142ef9d5157806e56bcd830e56d5288cebb18c4f427919fdd4f40b2706c3a830061575d20cfbc6351f3985791f40b6c65a5a5bb6a59b9ee984b31c9d5886757b5bfdddcf3b09f038a1facce6c6c23ab5543e938034be3703b0911a6a58eceb5ccce6053f3e3f2a11221b2612dcc69e13c12f96a511716d1356da546215c4a5b547cb406a3a81d6592e68027a13e8910284ab3b830504cd7172fe1fb292a92d70d81de6e9777c712daa1b30f91ecab45e82f6a04d19478af5a1d80a49672c893111953c14d5e60f76cfa3b2fb60626cc06eb6db5127a8c5a22572b485aa50d5f7e0239af90de8e4182caff9ae22ed032be3105670e242a8aa7e77dee2dbcdb950683335a181b8772afdf43ebfb229eae71dbf8fb1ce3840ea22d3717a6bee7d62967c4d939508f81af06e59cbda4a57070241f7be738cb17c2deae1f849b85162623d70c50583d67da6c0d03d3a48e42f0c548e2c3eb3e3d9bc37fd8857b2ab1020c83b02a49915a26ce0f48f6f3a5ac40563cf7d48c6c83eae2c18df7dba34d6169b71cd7756c756e8def4204e9f05a03d20d6eb81f7e33b5e0a190b0d69978d6f1c47a8c154106b0d284705a76f5e860d8ed0ef16ab8ba49da54096acbba90d1b2d42b0642ea5ea28db788e7daddb0a836a2411e3863808e2ccee2b2866b149ee1d4506a4d5e89d692a1ee604ac9c6afdb1316a580ca92f4dec13fe2c2f898c3968ab92ad295014fa944e8eee81dcecf55edce54867c47dd1301af92db20323bc334f55700165f21ae39f84bd9bd9ab94dc2157a68862adf630476a7948a78026b776e263cb1365fdde3df2734a1250fdbc45d310303068a5473bc50009c270fefd2c552b819b0616c1f27e5055cb27838c913e0f452eeaef4dd6f66071ec5e75af5ac33915f65cd44052839890a47f827d80adefbf93748fb5e110fc92a56f33530ecaac7a9070efa7e3bb63e0bfbd136f472f6176f08ef2e26a7e7a6af617032c56be0966ce8f3892b05a66a92cc4644000dad0b5e63041a8acfe07244d7f0aff0a8c02e1548a7d85b03c9852a808ee45911ee46dff87f49fd6254ab16fbf24dd7cfe3dc4cf0a5daa977f4b7857621c8f46a3c2f7b1ae88e823cc5b359a1971daae103b8a5ea1a76fce5bf96a601eb0c2f2422de3e6e084cfc74a17f7e3dd920a8162ec93d33b01c87e49656c2e74dbed709acab089d7c73bec5c89c2714afa22ab269f4619ebff0f9eadfe5348cde14ee708b07eb80c0b9aed422a09e06a007f3d207f9ffd0de901d0c85085d6fc8be7c6cd4b3052c9ac07aac13aa62411d161d064e36cebdc0f5e6c4e97d909da9edefad92551e63e294d8a75156bf2eb95d30dd18a462f4d9a2ea5acf08bb5a9267a093ce7124b74365709894db9df93666bb624ec4a653a2d8515bc293aeb186fbcbab3ccfa127dd5de7a9b1be6bbc99424f4618bbcd9d699d459911c0058d337b1b15ce1a314c469baaa974d4cc338266bac6d3452342e9a50e7ec35bb74f8ba308cb74e0b70e71c412cedcf3d10bc8c10933c88d438b2329e38f65454c305af69f9c999890c8d87e3fb4196152c4e2f81ff6fedb2dcf5190e96f7a9fe0a1da7bcc3338b65aa6392897b5f2b25dcc7708d43bbb44d11e9c4117a6f38ff44912ba9058c556a91d670c1ec042f56fe26b8a75fa0cabf2d18b3879c2e88a7882e3fc525faa0fcd86069cc60321b59fa3d716a78c4e4efd720f52ff20197c38c252254bf82de342c1f0ea8c27c34b01cadbd150a1bac8ffc7b0da803f03ae7a88eb12b53d343cd4188ac5a0bc167ab8759c5f1e1efca769be4643ee2ec4adda16112a4038d12172d46288cc1392049e62cdc6d1420be002c01be46659b5ce829cc7d16e9ab95e81aaf2a639fcb616fddf3753cd951ae48c1d5d7e6cab0ff1a32c1bc0278fb1db1772dc9b89c30f4aff457defd0736ec8b099c95eac6febde1ea6f1b6a6f7f6050f9a0ed597d64bac8decc41d48521bd08ae4d7ad6d2e39124ccb43cc9b24b3d5461b8ab93cca75a2ac1e075d1f4186a7a991b159bd9c5f1eb13303df85b7530407c79cb00059d0196c9d6b9de037a4402f11c279e49a549c3d9227dcea46954dc35fc82ed750dc844d52ceda9c0858927141bd7e4c67b9d7a4802887691717fa1dbf481b8314bd392316d03110dd9b5998510115517b00a8edb1a4aa4c7adc6906146ec64cf80ccce1877817f135e1f30f9963b837964df1f03c60ea520ca70563fb449020b6a277c353c0deca39da8cff8bc993ec9f86d1d05dedffc26bb6d4444411668b47be1072e004d8eb81c4e48612ec9de80cbb7bc9a044e18a21296bfa57dfca1798c2c25b39b8ee651dc740d672a2f5d7a4da8c6c7bbb0b6e816876c1602e26484a10286cdcfd523d685e93eec85352a819cb447a580356a151303ec7efbd1c826176afd4e7ae8a92cec07b9325f7a6c57827aa3892521c55679f06b302ada7e5920b8015a9e3d3e12cbcd454c6d11b33e8c0f2d75446c041a74cfa15bb8286cde25ee19c52e0319fb5c9cb11085f32dc3fe8d8525b6e8b4d62e367aa457b315b4bacfbcd1167fd3a8e98796fdda2b5e2590c142fb574ca6e930dd759f496f304baf0a0c6159bbc5edced425ffc72720a3d1d2cd68c382cc89efba2959e2828e4524c449ac7060caadc5c847b098ed313dad558ef240f5b6c7f61befd7bcf6a1cd3fd99b1f32a421815b311f3cff85515e1ad6e842165941f1a5ceb40f0367123fe9ec17b330a61b0dd0d00dbd081b10eb9bb89030333dbddda3b2f50326a9b226771be98de431a5086be0f4221c958b817d83c2b2874505165a6433f1eecaf3040a7d5d4f85b49956a11971fe7c3ecc4dd315e79b4c4a3714699a3ce8fb58c3c30bb063de2040304491fff96230618d9296dc94b228f82f4683a989442c2328c9ec99f15659a6c26e14dc086659f352a45e92eb8c9ef20b58ad8946bf84540aed9f1e9dc08e8ae5ba8fdedb79a3fe28cb90f1b40b03280bd4550123f79e8c0dc8586fe14e0209edfaea29c11288f7e45c286464b5c3b05215295bbd6a5c9ca4bd81ea624bb5fc25ab9804c3bb6a83f1aa48ed4f5ef1b19f880e2dd1a2d7f8f70bbcba94a47865ed11af4fd62f040a63d38686a158f187b273e5809b78441905ea4a473cd31d9ec57cb8b89b1e55f07d3554a6adde649e7026150ea36653526ed4f4b787e43200e8d98d8e39adea531dadacb9049c784559e7d461581f24103e9a92d4eef635041c08305d25f42033dbfc22b6b15ffb3b6f17716f9c31cb4bc05f2b77649924f048c26aef84abee9e300c1f1243591107fecbcf3d5a2a8fdb98c65c118accab41b5263802f35dcbc0e50fb728a240e7179f6b5c7676ecb83455ae52f29de06130a052288375e548f18d6e2f2fcb71bfce04b0d78673ebb0a6b3811970c56f82b3721d48ff7eae77d851c081493e3e561fbe59a3a0e36ac36338f00d1188e8fcfabe9241d4d288f5880c62e2eb36d422b18310d95b4cac275b6e51b57d2b120e898325a610512d79c9be6bb9cda9d9018497b452248c631c21bd35ced1bedcdd3327e9e6b4b98ff61a4457d05e72b5a912cc1a999275efb9f849e5d09f85d68f2ae2f726937a8c649600a21436dad0a5eb9fa4a1527cca992c6b608c96ef4448ff13bae7f94084ab7296c1fcf76bf8c53cf32bb7bc82540a21595793aa469aa8ed792dcef7835c7752d048b432943b219606ce2b1f26e57438f5d426958fe39b828b4f01fc552fb3c3469d930939c20f6e3d80e33c04712230470db759f6357718782d051a806c74979de57962e088073fa118cf34cefd75db4a3e11cbedee0c4310c0119ce38ee7a972af71b607f8bf23059fa8366452e5a0a29d4bbf86ae422b644b617d96e523becdf5442592d6fac9b48e94df07e0e52b34a0d95a706b635ff7a934b130c3dcc59f18d82d7bf1d775277298ef4b9f3fc3956d25635618e49144d0f524479a37d80beadc12f886e3e6a47b0659a78b17b8aad61c5cb0ac0bca2bea753ce65eafeac9f1e33949faab52a61291c37ca7b60ec51952eb0ccec86d4ec595f859e64846e00a1e2a325dd5873b8417bac50e3eb754c216b88972c5677e35b4a54d76c9d5eabfcd96b1226753caf5bde32f0fe0edcac9472a45b133da6b8b9a614c1c26813cae87b6f653cbbd5991f6b5e9223d18fa02494a1aabf249075a7a519b4725a621f82d3c20414df336b24b5c5e746baf1be6debd360984b6cb6e5808b0506c94cc08788a64a5ae500550abf57768dee675172840f6cb550d2044131a1ff26934159b5508abaad96e45103a1157d963192da2b6056f7f5e4cfc17c69cd7800fcdd0b17358f9bf6a33deeae9c7a69aa783667f4ad8c9ec70d6357bbcaab057b4a305ede1d23c522ac3c794fbaf0104e4e308847e0eed4adf2ba8e72de0e6a0b7d0dae5f681ab2fcc24da9344bcaed3892cba32cf53778371c56f9a10f57a5d93a066fe306e2bac7b3b9137711a2350984e3662de5a680019a4e9f2e872bbda6dd8e28ae94c631ec7fa32609996d6518100b4baf548489237c70910dd4257147dcf226d9e988c0a080b9b313b1b4de26a65af7d7ae01bf08062c2b1cd1d26da05a3df1f0ac890462865168b239676dd8face286a579011e5d816fb4dbaef82f9afaa3f98ce9fd502ebea8c14494523215e45bafc3c466833c5ec0afbd22ef79920810cb5448622f70d8b9402b6458062f80ddceb4a64f2a596b3d00c965ca211a0c19a04e27ed5948301532e37bddc35f0306e619bc7fc1c2348689e778c60f8b06d6f7c983711b55c43a470474b2b305132f608340a7317a386cdfe63dddd240602134dbf1dec116be718f3e9e202859a590c63a434cefa8e3c665a4b2092b95309d4158b3ad5146db2487cc155e8009b39928a578337d665f89b3de95b8ac7e7c2da7a54df8b3622feee1d31a85af9be02c26ecd2e62a416959e124c87b4466d60078c8ba96a8b0d556389ebd9800b6cd5ce150f15032c1f1227d36b94d93ba9284399da6c4dbd269d7bde366d81550c0ccdb96445fe85d81f5006920c974ae80a5414f29adc44b66abc6b225693658093401b063c297b267cf5f09151d087d2b930a6ceffd2c8db209012abe7f9e96fa9107af5cba14629233e29b6967251eecc29d5bd683a01472561d9668cfe0531cffd411ee43ff26190d99517f73c2a170abedf77b0396b718308a90508e33caf92caa5fa19032ae565588453c3a149c6c77f116aae006a5b525242b7a459683c6c6dd2eaa2db32d3cf8c032fe0eaba1583a3f02debb82b1eb1a08e43f46ab2f1c481190f3f6a6581d0d3bc86a15ac8225f72de0f153aba44430f358c9ae2ed0584712247572a85039e3a7783c5b338d422b47b2d9ac20076d05a68d897f37a71cf9fe4b22be433bc163ac06ed23a6ceb21a5abfea65641fd810d1eb42a9aa29c6b0382a80adecdeca1f6127beb3873e4bf9cac02bcdd431a1a94fcbfce795aa2ffb4600217f156db0db93243ac508127bbccc4dd7772c28f0eaff805771d02786747e308d90e0ccf2cfb54907604bb7c69295f42cc91bbbf682f217097fd1518f487ed684629021ec6808c6a6943cb02c2c9c1b00a40947eb6bad18121055dd3930be016b18b8dc61eab717ad25725889ad8838cba6d66161de0050055d64326a0abf0dc5d7d2195b73e13980ad7a4ba4f80f9b20be15352d3102952967dcad4a7c68857e45bf8e053cadcd6bf7925603f5399ac2ee92485761670c71ffaf92169934c9f5084eb93ebd1b7b61cd30ff77fd92c7639f6d63446cd21eb58d26741c2427c377e1385745ff13719cef3f920e2bef6271f06d9bf2a4f026b2b5f4fc2b42a7c0e968ed529c9d89f4e923c14a15f5cd4df892fe2457ab5d0f9e88ed19b1ab00929522058c1be05cda779b25d03e268d7e684d72fc532299ca5d893b8890f1ea7a6ad94401d3c7fc85d6995c88dae5b45c0e71a6b3193c8676c7b0b606560abc9377aad73886650c4159eeded01d27f03c64b3d4607aba648fe6d86321ffe85bb5618b18a4151773bc10c2fc0337da0027ced2ab23ac80cc5cf5251fc51408a175bd39533b4a59496ffd2cef5f8cedd0256231b99f61f3a69a9a9909a45cd1e1e8666123575ea29bb95d2609684e66313ed2cb53e51c1226c3e5468735e6f9341729aeeb104e5490676aaf0257d681a7ee8add15cfcefd76f9eebb0f401519c56a4b12c9ce5fab50dd0024ac638aad353386bc442bd61cdfc27e014cc503f468454c33f2acf6c65b0c660e9711359261fefd725d5583f2573db3c48f0a712a85d2e81fabfe21d66cca89d95031f0d4cef41a0f3ebc0cf282baa47fb99e00766a0e70cbc576a8d57e94d35f191f1d5051a6968f796a0b1da53342ccf2fb922040cb9e7f445763b9fc83b9d1faa3c0889fa7b7e7cee7cbf6de8eea4135d6cfdc0fbe13a7662b384fb930f66389a08f107e9eab43485760489f64eb5f90645f3df97c01f4db8a03653935fd036ad87560249a9c91ab1229954a2fef41514ca8df3bac7fd6b0bf591bb1bf7b6f421139f31f3fd3af67f48e52be6f1f1bf3bc705929a0d04a3f34fd77629025fbc1f43fefad1051eadb8ab7f5acac288913cf355a37b109f78cf8442efc021fb6c6ae5997664b6f77b7c8c7dbfd6f5260a20ba769e17f8d5dc9681a2761fa13d903bd76bfd17e1843dfd0e074cb7d2d237da3bf49f33e82c38881e118907b713c9f4fca5f1ee069ec0509a93fc508a2a274ab7d0f6ed030a33d35684b3a1d632a4836ca1a9d5b4207af116b756ab63df9831ce8d42ea99ce3012b3b51fb37a50af98d88dcca9ee6f88a8465232708870aab3ed53e58cb7edbd87c855fd3276c865bf28fee29decfa9e60101143525b4bed5b6739e3d379cdddbd1f53662cf6c41f0f5dc6bf5cecf5e3d00ce93fd615a08d6928b0432927212ed295a8566569e2c917e423b1f9c3ee7ecfa4cd7fc876fcf0c5fe9766fc08d67793bb0ea18a15a6e5045f7c1b9657da359655b3e890c06b5c1eb40313e98e7fd371e7dcfd7324dbdc09789fe9c2edf40c4b4c10916d41acc693ad04fcd6d49866b4e43ba0c42d434bc099e5be962ab20c83d86c149c98d1e5a9797e6f8f62e95d886f1d22cd962a4edf664d7ee40956622a289eb6d177f854689955cd4d15a0a4e33d1f574673f892d37a9f3ae57af6eb6e6e02ebaffe63145c9a41ca11a362c2e6774b1dc40d4f68d17a214477e18a33e7212b98ad68bb09eab36c79f4c33e8cd701e619cd6119699c7d36d5ea21066977be6cf405f5372284107d5cc046ed81dca252689aa554a880876d8675980541cd2c1a8538348939d2c423962fb8a61eca0907c1bb33aecaa735eb85e510073621cbacdffd62845e79c1911376d6309ee03b7942864b6605dc04fc73d50234290f503a8ba9ee74cc0b9808653c95cccb88e3a4a3b2f8dbeaa4d73d4f5b1ba9e3452ab676b6060afa8abbb435ca037950e544ad11739dd33a2f8cb57bf84e2d7b98211c0814bb9d56f1871fdbf2b59d5eb30c69cece73eddd90f1895ca40c6f96eff1232bb52154306dabd8bb4aad0348ef141a4dbac026f336e6cf1d612aa382c3f4f619b7a2701f1ed8716b010effb73eddf1bec31d188bec4823277207ebf3ea48e735b098a7ffb70f719a648f5feb128c6795209788bbfbb02fdbcf5cf4dd2e1cf6befb9b1fcf66c4e51f196a3c7795e791c86562ce94f69009fe4f11e61cc10f9dd862c18da5ec2f81a0941cd8432002264b0072851e5c251a8777b3fbd8edfcd0079ce4b782371aa584bc9733b8f56949ee310a93a61a3d74e3c6543cb9a33b26feb35191122870f12a7e1d59410cffcfe6da009233afdc86ef7e8c8b14e08e6d8e9f943c6c35f81b14e635dbe9ee1465c2e0fb063b0989c375fb82bbab65a02f46441f2c19cc7a8afb35e0348277128f3fdadd2a02571643a9174bc394e9b3469ef04d061c88b7b4154e0e17523df04afe2752eb2d16927af78532654ade5be5114b3f3bed8d43a4205cfbff7cb6e5de179cc229bc5051e59c38d8486f80e5e5c02737e13340729723e712ea6b36758afa22484d034506ff42f016a31b3f2b00d6b1f87912a883f68dab47297b4edefbf20c39d1d55e28e68ed2ffbf2b20f126085c395190b4437296cdc2930ee46175d212c0d1066956987ceb33a0ec746d004b2effb3238b0cc270dcd564b5be1080e819c905d3a3b759d950b48ee4963f870c93630cec7714ace53bdc70b457d4b56d966f423045311c93fb22c9a87e570f85e59298ec9c4a4be196a962c5ed8724de1e100119050f4d066eb958c5cc5f734bd1e23c9f0860fb21931fecab260365654348d1c96f8e49cd456c00bdf4e55665183ab004275b35e44989f783a2fabb58d92771345eea56a56fa4955f3949a323c100b7f38fa0d768521e11deb44e45ff438bb1912698960eb840817f65479b0d8c6ef19e4853f8203561bc488592f0431331b9bbf50a74cc5022ea5f96e7c0a3335fdf884d7418e9e36dbd1cb8d66e777ea63cbebd8b183853e307c47a11527cd81a26216a3cc4a086334e09c4c1a6346f86d1d48a9710d85964163e4dc5f5452e2c8c39d5532b107d841e68fde72df56e08d287f665b9bcd093c06fe10c21a1afbc9950ff7a4e8ac561159b32f6cadac5a3ec55783399662537ba5e993028c7a159e779f0508f9a9d25cd121387c77f2de9a69188191a113c71d2fbd3287f170adbea3e6316f271140878ce3cdf5daa6f5ce63a2b980a3875778cdde98159ccf4893ca1a30c9513e7511a1caab41f3d9ac79d65a4d88d5b9aaa50261368c58b5e35ce8f89aa899a867221ceee14307c15a4741b30311798a43875f77621c7695bb051723b8db9ae1a4be69f4b41365c1871695af147adf516b8b38aa9098a06f1bbf84509a81549df5d6c0e9cfb9f1736480f5e030fb9836a1f6aa3ea45850513fd6d3302ec7d2e7000c958cf446ed6f0136b29c337f4b412e2ec155a1aa343adff5993325a5863e8d500ce636b001e1465fea129e60fbedf34dd91323f5fde92d3231368d3260afebe071a3b2c0a233f4934775fccebb0aa8de5670bc81e09a5057ef3e0a646e2544f6b43a20aa74dc388a076a77f373e848faf89e7146424e9fdbb512f1fc144e139452ef4f5148ea7cc770385e76f22f57b4cf969167da99afb6707007e06c2cb25456f8b19a33c066b93c0c3d45fb47cb7686a436d5403891d989a9e61e7923b4347fe7eb1ad3e2ebb64b3130a0477788981ed69de5f370adf80317678047d50235a2c8baf8da314ad5d0df0fa699362770cc72e7080b0847412a4017591a70a846c57053e841d47914d43e874165f0e618627117f7903c71812ca275c8d7331abc18367cd78bf53efc2e42686842dfe7e2dbd3f7ebbbe88e7014dee479215629d2bda1167db3ee5302261babe78e3d474f54368fc9a31f3323f5720e1c4e8795d8d4f697cd67f454c3939e6451b76165f0a26b770359a214d94c71d10963733a5fda6cf76f9daf261e2394954efb438796e1647410cb0056145e69de59e82155ad4c43157ae2080dfce920fff53c02e2ef3f49300e9476c66d84a0557271a4cb5b26a23a02bca84ee5214bffa8de79c27b006f60333af9a17f7ec109d1ead4fbf683263559e003537cebbae83851e5fdab997e6698ed2e5e6e49be4ea16b6882e72bb270fce17548c2a4de186a0931e8e1194dbbd5c7640b4869748b68907d464c7ec552dd574df8a97836b288f4255ac96546eba5b88470998337535636553e072a8461b2bccb23b111ea2b815663c0f9b6684f759ef9cd06c32b600ef3e0b05287d4781135b766dd1760e31c5ed87a3375f6fe72bddaf6354c97965a69ba9c0093b5a08667e4af3fc381d0a7a4cfb3dd735a0360fcd284e4facb38db1a474a7dca2804e9bc238ab9fdfefbb6d1ca6b1492b34731d8a9a992fb1b5609b3dbc1fe61712745abafdee4b03e019dcf20159531656a2cc73d71c4ad4eace8dfd1be31dee5c3cce0310580c901284f7cc1afde859acd44ead555289a7d2a94f24758b54c5cc37230d89ec7108a8e0deccea490b0112ff355ab11e6537e208c5f2f735634b1fb72e09b4d846d1f3d42962e06d38f0de602c7920da79c0cfcd6c963c9e591afe9ecbe6fc0fc3ccde8f16d1513954342bac3dfc1ecd62d5bccb71cfa59aab50974229432474f2c258e2241475a98eb25c0105eee200e4b22c45b0ee5d89b01b2b47743fbc320b57d73eceb8a9aa938bc1499b3b9e440b35a4c3093dd0633a3c21fa4db541b267c09a7ff0b1a66e12ed69d242b473749bab77d8b32834cd7662ad9ca36cc94bdbf89e99c5a6e976054ec50c6faae2774e6887b7c62c83efc27c5f24bf6e2821e8853e1076031049695a7476310306c1729f146327d0a74387f1330d9e9c4423179e6a2de975cfa3a2432c800e2a26008f821ac8010813f96b3b34905310d98e6a0dceb1511d797e737fbc457fa9a1eda885e8f03a2b4e827f97e172429d4ef9fe2ad4cb29dde940fd0f20a0d7b7aeac820d7998b6face4d33f59dcb8bc0cfdfab9ef1b86dff185edf051513ed98944b59ba5d9d9fe2c1dda0034001fbebe72d856902a00bf1ba855e68add3dad35911b9a4501717f6c4dd1c2b036fc68c704043eb959574721e831d5451beb467515394ffc468096ce475a28e7a0e77a8a53ff8ab51c32a91c0ee4b12cbadcba822d7bc1bbe64b90bbd3673bbd3e4fffeb3ecd6f8877be7f66e53fb31dd279ed0fd69b980a68e0265406aa12a0a6c17accc03669d3f4a6fbeb90ba4a186aab42c0c494fdb224276b56ff40e3950857aeb0d2ef76d5b7f2dba6f48f51a2e75c2649f2c6967d7ff3eb74bec6826913b07621ba015d7c1debd0cf8c6d703ba46281b79a1c9526dc3e25ea4c1f132578ac7a6841e0fa2e50280889ce0ce462e4c1dfca4bb14af5a7494838a6ab84e4eda629f4cebb62875c98342916f3d37e2aba4545850d483793bf2e64f6a4e6b6e1b3242fe78f0516132fed404186c15d315472b010e475f855124242220954827ff0ac57703fda5c13c3105e3925f6be9e4cc7822c33b2042437e53172b0d728fc6cff9ad109268a73094d4759c054bf10466875f6d21ecdafc12cd089ccb850f47a6d024b076cf4c145c47578556bb9d3fc0296db0eace6b207534141d1988ab9658a610395e07372215b4fbc8b9aad3240e9aa11f5e960b337e376c6ae2d9d8a580f633cd99d3f2c49d0bc8e50c2bc10b2fe279b36a5ea78367efe586792667d0bf6a4f6104c22e245c19d7ab206f4ce9a1f62d03c911e80adfb4599977d23ef5a2f912376862ed5ac74c3b3d818fdfa4deac33a3b39b8ff0eee0dfbecda9d34e2c2f6823c89307def1461c9cc642fe7a8a5e04e8ad0e6b83d67cb61154a5f33abbf12e1a7c9f6fc0a1d430f9370f3c1ddf80f9000992a1f4e4690667caac9080f5f4d8461afe5361d6e5994d7159cedc5150252b56a908bd0e29f24404ff0a5e185b723c2d89afd6d6837c03642404b057048cddfb62f38a21606a80c82a449eb968ff756b42874ed6ac046ad48b9cc33018e3488e72ca9f6b38264dcbca771fb6df832d83d8bcf8de9afefc5fc94339203bb8d01ab8ab741f8ef1dd4b111f261c6d64cdf00ae469d0666386708a823f17694bb026182f8651d0b107b3aa3df4886b7f8c74936188415c522691e8c490fad2d299a67b0435e5c760bf097075979498463af55622f06c5918a1e2a295c13a2f9abd302bed7bfcff3aa2621d3c927221b5d8dc12dcba872703da8f3daea3da9d1c886309ba0d9037bf4090a14e498788085321f690e5c0d47a8942ca29eb8153fb5e0cc5ce2a34ab9dd5f434ae66df233124e1b03822c0c762b9c9199e4dfba2b770f61d03905f1b51762a10eac16623f0e2a3a47e501637822907af7a90c85b33d37db96fbac98723c0ba96633e44fdd80f6244f2d85ddba6b33d0773214b9595eb37b83428a939b470a91568ff2945706d447e960d35a9413a1723d10a80b088863a2b3f605934159890c30402db0c697ebee68e4073e222bbb0954b54a35132e5b8ac59d858bdcdd4a36a1667f5c9b841b6edb889227c76220c0e36b61f481b3783458ef63c17d450d2524a22fb807a8d421ee6f7c077a9d2616b7586aa872748faf38f0be55e53b0f9e15fca735bf409fe83c6b246a8b5b889bfb46e3331b06e88c8815fb5e1714f8e0265ee8000db85b01fe085e3fa96c30492012ccb67dcf039ea151a323a48a8a4207f58c7e5397078e2251a6748d508381f2cda6029b1e0013a6daf7eaa1b46fee9ee61e9193ea403c68931cbc085d1fb9e411b912547fc8988a9f11f6f03c3ec2e80b72f935ad658f5107036f107f48e26d68b029ec9f426655814745f08179d162480008c1d4c651f713224b5247e1422e3f4fe8b83746530da788543eb3ecc952a64edab9f66f16aef2b2816bf9de7b198fff1f7e81e3ad716e11b3d3bb4653c505c82f9223f31e25540666c1cfaac3ce138330f0cb82d406fbd004f8e983d03de4b711f804e8f466888a51c9f859d36661583cda1ecfd808596dbd0f33e2652f3c672a34caa8c190d2321a177b9a8b7c28ea2bc8fc078362db00d75fd66b8794b8e0def99f115ea218b6833b1508ed0efa1182956120a14eb54792d31ccb4adfbae90178e667a5a9babf85931779dd3b0308b406fcc389b406a26fae9f9159463eb313c310c7b06ffdfdcdf420880d2f11b633a99ad8984173d4cd1a047d4f0bd964655f78ba543b4d74ae31ac34d6a47c07961f30241322ea7bf3ff809f4ec189e177a265a46a544dab4ea7aa950863f571f67483dbb282edb884aab70f178bbb640a5c0b817bcff166214c7d515383aab2c9c522801ac8d3737b01d6b93102ba3c39f586cb0a2a940a7d2156ba07412b23e2e41b50321b08cafbc3693731e1e26262c963152dd9dfe0766699759b2c4c5e592f9d22a57bd3ff09cd2c6fe7f5923eda4ff21457c933494931d58f17e478e34f9a37fe5fd9f76051fb508f0d7a32a0b8a47b14879f0c5d85ebaa095418226ad5d471e2e5143a76901d82d52b21ac0ce8837d622361bb2b3aff262a80f5eb06befe9575f104a5d72e49aebf96787d2a747f725d3d9f059106c0e00d336f73c67abbdfa361b750f4c34f9a9402063b1c526ebe164e3289a761db14dbf22d9959ec8884a1215de4d8bcc2ff2baf7f3fbfac3287142f6705534421e600916a76ddc2e5edd9511ef4abbcb11ce4ff66ba98d93322fca3ec6e5e1ae40c9125f36ae9df0fa3fdbe2f6b62c8ce652c6498d46662fffd99ba8780f51baa2d0c1aabbf036870356b93353a4b27c0b5f858060c49fcf838bd9095b9f611ac90bff5fef9d6705cf2bc8c975de927d8fb32da78f008ca9b6caabdda1dc55847bfc5faf693c96b986374297987805d7f35cbb119892acec887bd411db70bf4d6a875f1e0ddd9c2c1572eaabe588371b5da700c07bb37e06e887878b50903bf6a2261eff868db1c642670f358a24c553dc075f4ba53871d36090c68c66fb004b7e40f13af192e2044533d6881bb9c803b39028d43510ddfd1a268068c01800e966c690b14456c0da16dba008898afc5f4a8d6032bcaa6f85db0e3f68456c9f5368690758f018d0524242e1ae279c1536e9419e190a0c0796e5beaa858a7368895896dbcf1b877630438375bd3cc9c2c99946f9ee7d67e3b6a460981ba15c4a7e4aeb1a2b2451aac819f062de8edcafa5e6bc62f18edbb2753076457839ba32d533756c501994b3ca34f3e2581a6c7726657007dabd1dc956225871739363621d4dce6f987a54c38c84298a1758222e22debd92582e5473fdedec8f926225553a2057fc1e01a1ba3619427fcd56228c4bd7acaf757b02aee13540a91fab144ea379f3d34fd2144cd2c1e76c0ebe6bbd55cecfa24ee0fc841b02f6cbde3aea0540038e527fdbfd01e5e61440e8341ef887f3df315dd9433ed25b4640a5ccd1d36fb12dca359a3ad6b486dd3d12372f18b14f1a4f53937aa22884888ff94c6e78d710c26b1554b8d8f2c42eb92bb788ed722c3a2fc1366929bd345cab572f9a65f083d36a125b589e0545bd8c648ef014109fbc8dbf9056180e66e13e71de230c082c51760ca27455cbdfe5add159f4adc342f40085082a1e469dbc0a58dc7c7a5f52671e44580627af120c1a705459104096378cc31a7272bb49e975aeae584c6ef5baa4ca4e401ea6983ac31063e20d1d3b420aa5a4233e0f28f40820ad9d06a38b4a3946dfe1620d9a7d923338efeaacaedcdcb45b85f1405a2d967018b9daf50f78eeaa4f7dd801fb251e42840ffb76d5ac632fd42e66dee1eccdb5a164bdfa775d811e58af264661647854626e6e57b920d77af9b4b98d16e47901157a68140780c46bfed14f04afae8b20b0570dd30636d3d0a2cc389942c8a507543f91974225ba8163490fc81023cd8afc63516f71dcb62da8c6505d2a972d01f681c3abe42aca04307d36073aa8a2125e8a3bfc49d66927daf61069fe7c26c66d40ad7734f7b3a408c0b29da555cdc5c83f3aefefe03cb33750ccd5935f877df771a86fcf91359c9e9495223aa509e9a09ae6761f1198cbb4591eea852fcff41bc362696d7b285b556043b8aa0ec6659cb1cc0d97e89ad3e2007589f4ef07e4e39bb7c06a61385910116f23afe0bad9563d5bbb4b3ce9cbdf3c6052a5cd3fa990c01fc18e4fc33809ad1d795bd3b08637a5672d44b196770360eba4c4f386b3d8c80295a7c87d8e26a91f3a56cc0281930d8bdd7ef1e7694e36457ab047e094c587b023fc51bd58787d91201502e326187055790cc3bca7c4856ae6275bb914e8c9693d8966b747305af035f49bcacd43be650ede2e6066b707518c34d968df1478a05ea8de7f118d60f8a47c3dc117dcb43035b8a38eed686f1275227cb37c93b90a5492444447a717a077a2d63d7f37d175c0f8e0029f70a03729536997b51fee23333b8bdc430c393ed78738843d620dd99eda1b31ddfc28f4df37deaa23a29e8c449381624ab1962a5e7a86867453313111a643ac52dce1871d808843d017d0d47f9b295fa353abc5f8351aaaece3603aed0586260ac08791d5d2842ea3f6b9f7047ce1284bd236ca3870955d3c31ed92fdb0be19b43a3d4943cc3bec1df50681c5eede938cd6ee6e28f3a6961451edf1603acdc366216b39f62a20a6160d3e746c554778efc0b54dab9e9aa9534153aaa45045749df2120800927351eb8f1787e257837a8db6bfb87430dc597ed5cbcb820257b6cc8b6a45075326e314810bad6766eae4fe6820dc0011bdc6111e7d1380e6978d5baae5c619bf9c34588a13308945244800c27fb2454314b570e798f568cc7a70358cbbb770b57e303c5f8c025668d1ed4e91f9092f5a6eeee99506052b6f61a3318fb398daa2a3268c0f95056765044a707b9911a9702a3e00e0f862d829f7ebed637222e9fb02e88ad2fbb37797058a13175ee25a386c029227acbba301a1598fecb0aba755e3250e93acd5480fa1039000ec80e72ef80de5593c76427fafdc8d9fecfe96aa4034a49c38c19ec4c1d045849d4a3696cf44410468fc655e781c21e738a900dd28fa2b97b64a737786d2f7ac5ac479e9b3a251304aac7a98bf28ca628dc9a804c810cbb99ef27a8656d7b941f387e785035c60c6e76816d334ed37352f4f636c08af07b89bad39ac2a0fdf930843a7e0ae8d119fab9b06dfeb2d8b5279cb3547c3c7fd8294e1d3d2de6752a7e1ec63ccace0468b41bab02e4dd38ddbe354da1255d708f69d1481116cd828c62ab0f65c11c36cedcf27e79c24ddd0a8646a81b2ddec0537372194327eea5af5135c2d92183c88224e803ca1a223a5a779d337b8ec9853a0706febc56c90b1f92a59757c8bc7f4acf25faa48938e27f04d6e441f59c3eaca0bffbe462a41fc938f84b9fd3f3abe316587c119f521b04bc3df425b83ddbfeb4072fc666fe39724cb40f378ba28b7466fd017156939cd256ca63667936ab92149c975ad36c82a2f85035e63bae59cdde716cf9a53468382600ece127b7a623cecff8a350d24a0149ff7cae4a9b813b7f643940e59d8381e9b50050e95bb4fa6060db439d15e336aece3ea35e911fdec91603b2d9c1c200800607ec5e339898489ac3bd7a78a11e740a50bf6182dd48afb130a21ef5440d80e74ffe5263a66eef03c5310ee92cd7bdf0c27468ea4fc5fca309e00ca907eae104bc11d67e138864ff1389b1ecefa3c29cef05a66c455a1cf44e6c8974f0542a4ff29e73ad0fdeecd6887fd0b48a098b58ae298ed2723fb9cbacc13c89408e634399351962d42cc33d4d927a7f6c3ecd15aac69ffc43991a7e3114cd9d58824df7f821620c4baeff320f4eada242738c6f0df43513f5e9e92b31c762a89ca10c66e9aff41229e37779b168b380e188646a39ca375fc913087c76232d594589a03f9ad88c4eebcc41ca2ec963e641a7aeb729769af8188cc44cbc63723c94196550351568047dd8d5eb1469a0f0066d8e660bdf4e2c073d76bc20428e45cda34803ec880a514f268cb22122e02d70df534f292aa87f55ece44d193d1fcc31b5f380f89f92500c5d7dc0b26bf7d126569d7401de543551efb09e3b0310de137b280c99994221871d3a1458467116375feba3ef6f4dcd83c5f8057f2d278088f9b61ebca887ef008461f07c4f1db17f787</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>udp</tag>
        <tag>Hololens2</tag>
        <tag>传感器</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP-客户端无限次发送消息</title>
    <url>/2020/10/23/UDP-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E9%99%90%E6%AC%A1%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5fee387e35fee133ee5f7e6cde41cf485e9c1bcaf0b1c89ba3b72d39a27764fa"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP-简单通信</title>
    <url>/2020/10/23/UDP-%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="993f41efcde82678a1e43808a697c428b51129af38b84e86ad4d9e547cf2fe52"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Eigen初识</title>
    <url>/2020/10/22/SLAM-Eigen%E5%88%9D%E5%A7%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Eigen初识"><a href="#SLAM-Eigen初识" class="headerlink" title="SLAM-Eigen初识"></a>SLAM-Eigen初识</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************</span></span><br><span class="line"><span class="comment"> * 本程序演示了Eigen基本类型的使用</span></span><br><span class="line"><span class="comment"> * ************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">2</span>,<span class="number">3</span>&gt; matrix_23;</span><br><span class="line">    <span class="comment">//3维向量,3x1,与Matrix&lt;double,3,1&gt; v_3d相同</span></span><br><span class="line">    Vector3d v_3d;</span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">3</span>,<span class="number">1</span>&gt; vd_3d;</span><br><span class="line">    <span class="comment">//Matrix3d实质上是Matrix&lt;double,3,3&gt;</span></span><br><span class="line">    Matrix3d matrix_33 = Matrix3d::Zero();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不确定矩阵大小，使用动态大小的矩阵</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,Dynamic,Dynamic&gt; matrix_dynamic;</span><br><span class="line">    <span class="comment">//同上，动态大小</span></span><br><span class="line">    MatrixXd matrix_x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入数据（初始化）</span></span><br><span class="line">    matrix_23&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;</span><br><span class="line">    <span class="comment">//输出各个元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;matrix 2x3 from 1 to 6:\n&quot;</span>&lt;&lt;matrix_23&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用（）访问矩阵中的元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;print matrix 2x3&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt;<span class="number">2</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;matrix_23(i,j)&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v_3d&lt;&lt;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>;</span><br><span class="line">    vd_3d&lt;&lt;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;</span><br><span class="line">    <span class="comment">//matrix_23里的元素是float类型</span></span><br><span class="line">    <span class="comment">//vd_3d里的元素是float类型</span></span><br><span class="line">    <span class="comment">//v_3d里的元素是double类型</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,<span class="number">2</span>,<span class="number">1</span>&gt; result = matrix_23.cast&lt;<span class="keyword">double</span>&gt;()*v_3d;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;[1,2,3;4,5,6]*[3,2,1]=&quot;</span>&lt;&lt;result.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">2</span>,<span class="number">1</span>&gt; result2 = matrix_23 * vd_3d;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;[1,2,3;4,5,6]*[4,5,6]&quot;</span>&lt;&lt;result2.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//矩阵运算</span></span><br><span class="line">    <span class="comment">//随机数矩阵</span></span><br><span class="line">    matrix_33 = Matrix3d::Random();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;random matrix ：\n&quot;</span>&lt;&lt;matrix_33&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;transpose:\n&quot;</span>&lt;&lt;matrix_33.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;the sum of all members:\n&quot;</span>&lt;&lt;matrix_33.sum()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;trace:\n&quot;</span>&lt;&lt;matrix_33.trace()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;数乘:\n&quot;</span>&lt;&lt;matrix_33*<span class="number">10</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;inverse:\n&quot;</span>&lt;&lt;matrix_33.inverse()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;det:\n&quot;</span>&lt;&lt;matrix_33.determinant()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特征值</span></span><br><span class="line">    <span class="comment">//实对称矩阵可以保证对角化成功</span></span><br><span class="line">    <span class="function">SelfAdjointEigenSolver&lt;Matrix3d&gt; <span class="title">eigen_solver</span><span class="params">(matrix_33.transpose() * matrix_33)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Eigen values = \n&quot;</span>&lt;&lt;eigen_solver.eigenvalues()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Eigen vectors = \n&quot;</span>&lt;&lt;eigen_solver.eigenvectors()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解方程</span></span><br><span class="line">    <span class="comment">//求解matrix_NN * x = v_Nd 方程</span></span><br><span class="line">    <span class="comment">//N的大小在前边的宏里定义，由随机数生成</span></span><br><span class="line">    <span class="comment">//直接求逆是最直接的，但是运算量大</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,MATRIX_SIZE&gt; matrix_NN = MatrixXd::Random(MATRIX_SIZE,MATRIX_SIZE);</span><br><span class="line">    matrix_NN = matrix_NN * matrix_NN.transpose();<span class="comment">//保证半正定</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,<span class="number">1</span>&gt; v_Nd = MatrixXd::Random(MATRIX_SIZE,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> time_stt = clock();<span class="comment">//计时</span></span><br><span class="line">    <span class="comment">//直接求逆</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,<span class="number">1</span>&gt; x = matrix_NN.inverse() * v_Nd;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of normal inverse is &quot;</span>&lt;&lt;<span class="number">1000</span> * (clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通常用矩阵分解来求解，例如QR分解，速度会快很多</span></span><br><span class="line">    time_stt = clock();</span><br><span class="line">    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of Qr decomposition is &quot;</span>&lt;&lt;<span class="number">1000</span>*(clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于正定矩阵，还可以用cholesky分解来分解方程</span></span><br><span class="line">    time_stt = clock();</span><br><span class="line">    x = matrix_NN.ldlt().solve(v_Nd);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of ldlt decompisition is &quot;</span>&lt;&lt;<span class="number">1000</span> * (clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>Eigen</tag>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>融合NKeyBoard与滚动条的适用于Hololens2的通用Socket通信服务端与客户端</title>
    <url>/2020/10/21/%E8%9E%8D%E5%90%88NKeyBoard%E4%B8%8E%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8EHololens2%E7%9A%84Socket%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="046b10d797dd0e32f5d4daf2b599cd7ff436bbb8e8715107076f37440dcbd9b6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>Hololens2</tag>
        <tag>NKeyBoard</tag>
      </tags>
  </entry>
  <entry>
    <title>Hololens-Socket服务端</title>
    <url>/2020/10/18/Hololens-Socket%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c8345ac8cb46de0a86aded054fb0b05afa0102cf78b58d8ce4eade3836718a20">861fa3301ca504d5f4d4ff9ce2916d05b432d1fc65432356a763819399384025ae47cad0859800784659c3fd6dce9dbd85b92ef127d936c211e47a2fd7d75be2d611d0d7e90c9ceef02306cc0035e2aaa058c96938a67f7dc558b733f94a811c359d9442dded77cad372cc7763425a04830a9d61e74931737e5c8cf85f0a10e3b21d70030e7245605e7266b880d5416954c2af5f925102ee074e44f54abf2b483fca840ab297b87c9904341bbb917589bbbece4b6ca4c693dda9f4a26f246e6904c161b71c81cc40096bc1145ab3665dca63234e636e919293a175ec255c494ad40a38d4c6a6084e755149e8b05c4913c9969ec88889160ec2d4f107df727a6da5db1ce9d0076c7373c102b970f56e1a941acc2ad6cc34ad9786d592f7b63a2dc69b053432d58f4942ff7fc11b552f80d0286f3bbb9498f113ee81e14de0d6041bea2ed7787fe2866633405adba5031d6f8e9123a97da67030f094b026e64abb89ef35e6bbc3dc040ea01552bc0086cc07651876449b6f1aef879889f8d1a88b0d1a3710a4671dff004b8e452a7f210e6db41cbc78e62a23419aed3d191609e484a08f6c875e4580b1e7805221f922bfc574e5dde575e44f99504824f192dbc1d6bd918bf8059915acea4e8790f73ed483742cbd5dd9fcf22063c9c55c61b03c1d4e84067603012bc9aadc5adcdd4af6fa867d9cce1eb18505e99ffbf7251c1d08d6816ff302a9736fbe97e0e944a9236ad9f4296a1d680777f0da7468b70c30dda09df879eb5dfe7b469b86eeeb3e4eab80c25bed472e3d9521f591795bcc7e6a57fa3f07fcf6bc5b01457d7633894a8d7c0eb962568112d6ac6d5c3a51f91e488302058e73469bd8d9e61e0826960dbb37e76be430560f9c032b5cd0b189963aac78fa99851a408e05a307975b5b945d4ed7f259ae345d12b545bb9fd41628ee5f0f3395e1f0e5f443f038761749a6d88c26ab859454a258185bdc77c09baa799596b5740545ec313704f329b889c2d821c16d30ad3cba397dc1b64ddc7f03a3bf864e0599f361f5086cbc6cc9c852debfac51ef64d8d05d896c34e31fa1f2c790bf64b431040ff688d4d0fc68c55c90b76240efec0923b5ac2d2dbceb03ba84a7c56410ccf0af2a194fc94c1c96550cc6bd343e4ae01072d06ed169ec4903b862f45029d6131ed462ae2012b9ba66941bca2c35acd214cf3a6b7c2f9e28939875af665049ba8123ca382b8b465d738963135cc2abfa33c13a75dd834372708dd96bf78f7e8bc5aced14ba5492ef2cf12c45af41ad9f4c64d1ef094b049d39bbe9726b75137276d3c40d7a5656409b4e907f4a4cd944d3749c7ee19d54b7f593f7041f1f19587257def99499b0637e95ea2df98790d7ee94008bad27590525feb294b12c568cacd8caa4c5bd029217740e54a6e30df5bb35dea0fea09ecaf84529bcb7fdaddfb7232ea19fe456b8958a33c750798d23176a60fa408364f5fffd6ac3fd4e193c99337b298ccc7f379d14064717a5944481a6fe9825b4c278947ba3968e1dab902930069159aa62159592e176bdbce306b8630c4a8f5389a0f34a60a77adbd050c6d0f4cbb371f4294342554483f15689a78b22bb61e68b20d7abdce765564c36bfa816642f7880d93ae191e8bd025ae70ba9cc08ec1caa209f651eb8e5914e3bfbf0b313a140e2c6054e80daa3dc50e0a540ce69b76166fc2f6416bd830ac01ca50cd58b39134fdad6de6712db14ff6d11bfc97df27709495b408c7af8ba09fd96e2093b06f56366a835f81372f0448913c73bfc52b163920361c12646064575fa56d1290e0d0cb2667fad2cf39e575d7ba34306df892d1c4f6e727e561e17474a489df10c177f467630c6cac85908a6fdc4f252089ded6ff9dee3e42772d5458a0000bce49d23cd32ca84eff5087425a42f3bd23e34baa407b564787eb51d6b04681d50b12c7caa96974d1b0a6b0407f8ee9ae1e95b4817e2ea147b035ac2f92638788303ef05750a87f90e4dbf39da52d44812b10adff073279fb44703c3b8c442a505f6876aec16f7a4e9b385b3c6077dba1e81ed3ef51611e24fc5a7fbb93d9273e9175eaf9ada0f3b0ad72cd3220a82ed9d894eee24dc94ad009227c66dc301974ae2f980cb8ce6cb8c7a1b18ec839d91305e4d97f6fde46cf8eb6c7eee2fd9da5883c626b0ef06a47949bb9d4da3f4a343d229eb87307d45b8950083d57634fcea124f993a929fa6ef2271f5f4a27a6e09dfb3562606bcf5b18ed1536504fc9890c9ebfd2f6f6e8cc352c036292a505bd74bb71e653a04ac085959b9b17dcd340c2e823302a5fd3a83b460fd3b7dcc570ff8bb95208a6eabac85800013fd0d709e060dcb7a9267f815f722b79c737830d63cf4e0cf99b86bb9568de2b740a73574f94a8b142b94a6f9e972ba377d6ef3b88cd4dee943ea98f17eb1ad7595c541f0768e698e75f1b1060682e2502bf48b2ed7891c3dc62f4a1ed694ed39c8e3dd05eafe154d3089ec7edcdd4185f86b6a1d05dea8c1b6d71298d6eb6d83937a87a37ad9d852002e1d778b4205f69e11c01e7fb16b05a59513a2e59047dfc0dd0ce766509243496e9b319efc9a7f98a8c2cfd1da1196e10eb0bd64897cf22815da772019477d42d5f33758e8379cf827c10f30755fc9eeb7fceb85cadd91f880e9d46de797b988337e8dd631ac1a3e9bb0658b5006322c48c74fcb5e855cf2746c05dedebfcb61aff0fbee9f6aa2420236209f5149201663d4e47fda22fe5593189a2a6fe069cca8894ff1bac5d5bff48c6c3bbf89be373d3e3cbaaf3910718761cc2dba3daeb772a045ebf9dbcab7b0d2ffb8fd8b3e8c3a1a936d8c280f1d55b3abd79402f31c3d10a0e24f11536b215019c441e37b441f3240323fbf971387bcb081286b7b3dc8bee22ef3bdbbac5712c18190b51eb450e3fc02ca89a5232bbf8a7e3e94e3022d73595cf43cd7bcbc16ca86442d86cbbc2154ccd676d3c9d93025cb88e167677f906f878c0f764f983ca2dc886007126f94fe40bc5ecf9a0a3255c432fd45097684ad2fc73355bfae6fa1fc164cd40d6afa2d9accc96afe298f8d973c3dc0aa455b2950ad790051a8af958497054b9b9e37dde5d2b8d3c51d1d5bb2058842de6f1a2a149cdcbb7cffd65b06d614d245c9f1fe1cc8da3f73b937345a9ecca477b8cda7a714e4c6a7e48fe8c9d575ca6a0685d75fdff74983fbfa72184d611ca9349bda21bb2d95bdbe93c6dc2f6ee1efca7fe07c2811aae4cfe6717d2c348a2228020ee17e929d6096b55c8830f6bf4136bca13c0c3006d5045d1e0937e357f629c1ffcaa7121edbfcfdee77fc3f1ae43027006a34b58e86cb43ce2928c93364eee884c5d9f849cf7a1239d5a170ede95457532cd79e30bcdc90c67ffd6cbd52d31a76180795b55a3b1991dbbee18d41ec27e2f7f6ad3ca89f6b0e49c8df1bab75edaa04082cfe591c6b9337dc575b160b6358fd074fda76357a9e77806249b16d5fa8a6afe4289b846c2edc46aafa07cb83914f5d92be29be0a7b08abc8d0600708b7dc1de8e44bcc848c6a8e63b4f969c6bafc18c71f58a44cbd22cc28e2d9d8820bcecba793c28e651d312a9c7927259e85880e2b1a1b803fdaead5a38d4868f59c34a40b1590a16a9ee88589be85ce67da59da4e412773b3384476fd28b5b552437cb232553c3cefc8c8c7b22ab40ac76ae0e5b150ac59a0e3f872d1713313527c6c4db0854dcbf06e4439f3a11e410a53d7ccc4228ba8b8320f1202088897acc8c89302bd867f8b608494d33a2b917a75ad697622bbabab665744739737cc4bfb029c1dec43c30a7d03c85c354f17c35917bc91272e30b65232b0b45a330374a299ffdaaeadbfeca8e72c3621ac42917df7dc5e9c590476b100d204ea46370f666aa1cea779e38e0b1ff5ddf02d91ece29ad16c45a8ef43c4fd0f6a406a0921b4bcce2db7127961d9becb335b5c1fdea41ccf4d78e3a641d1fb1aff5600612bdc06bbd9968f34a3dd3acadb09a14fc412336ab28776d9c293eaaf331356f61153d6a09017c75b28396a6c3d44917789c17fabfd474257c5e167293a6d8c8379201c65a51c7ab2d5071593953079159796b87c1bbaf89a5514ce0ea9cb3435267b46eb31cfae1eae2f2d6236098154105b515f76423a74f2326b92dd42b6be7fc88c16a25066aee02332bee6b3ea492cfb863d04410d55af46721455d7c43d52cbe50abad52c739d0c7853b2c6b5ff3b7776faf5ecb80e9d3c9811ab3c0d010146890769c990a7d4a2abbe9063cba0c9cf9d1fa7a0cac0ce4545bad955c5fc67c5fc7bbe70889c025168c63e8c5243f03cd557e25edce9d55233b91af16fa20a0d7d769a1d81ff7215e945d71c9bb1a785c7b0896e70ee6d8bf184d76719134519cbc426594192cbb4cede9241ca35e3b5ef8ef53408be769f0fbeb7afc014beb92a73606b289de5f3fd3ee29f4825be237a8416359301b2357f37a44aa73f583d41fc061a820444348a9ac72986e630e2052acec3a1256aba7ed9c195de4cfe40bfca590f88b14d3a5f566742ac58e7932c7e1446dc5963ba31f8250cea3db83a0d91083f974105aa9d5dc07c7e5fcc0bc9e516cfef1c62587cd5aaf6402d0eb0b30d8c9e4e18673fbdbf9206acec41f1c2581f3e4ea40ab00b52b1fbf01b964df55c50857a8db910f2e162f000e4b7f878da31cf66b268e41b747393095fedd12fb05e20095667e435e5a0c43e19e362c69e4a5a8e107706a8b57f65f39648b98450be1840b5ca7461012fce1bd1e4e04ee5718fdfd4db8f468e544f16ebfe30c935142a15af4fd5adb068fb95a6ba0775a03c8b765bf2c2a1d630af1a6c35ad6823adc0d2b067098211e0b153c8cd685290b21c572856a3aab0edace9e6d0b8e5afcec8a5799f889b0a792c68e2bb3de1bcf74b31ef1c9cc1e2a87817422b85870a3565e42315c71d4885b59479f50f33f1fa14adb6519c3df70b46b1aef93415c9ef826f29bf569a6d39205e888ced935f6bd8b141e476ef8cbe672e2f5d11825a98d64363eccd091f53738ecb6504321f19f6c0ba7d0e17e995bb1824291b7e774d21f6a7f837c9c50aa3f58da8f5203414cdd0b1fa283fe54793c78d28f100c5e3df83490a765a5a77fde71ed16cff6e5ce964617148c42bc91dbb7d1114012df4a1299ca10c52f4f56143c6420ca3a8e899dc60f4ee6ae0ebfa1b3bcc2720b9fefaa1c4554fd441ce860000cc437d389e25383e8fd66b3b0491a2d43959984fd9e5f459323713fc324d0d9bf6fe892473047a700aecbb4012c1147862aa3f039d35b863d49e2b8b224c537e655d305fe74b4a6be0f7e0e7037154dc938078a527932ef6542970f07411119e1d145992a57abca50aa5f84b1323c0ff46da52fa393cf58b4fad22aa7b5d285e9370248be4cf6bb97cdbd5875fe48b99a67646f6f7d03f25b6841e02089b60e19c1c85580d47b3121f19e46d1db7c2dc88c48d4c6ddb397129c4ca2d5256352446fdf8058a950384b564ffc555fe1a96b8bbd0777739448093984bd33d5e681941451b8c9737b7cf7d2b00b291c519834f6a01e1961eb2e64a8b56b72bbe7d1d744beff5a4850c665b8f41be28b7e98b29d28dadcc201c487071c00066800a58d70bdebc9fa7d990e18cae4d2649c89dd62b1637246eaf7c57ab4e88f2b211b074913a3ebd99589f41311b97d15d680e63b3eda3b991fa47394cae9a9173e6d7af094c5e2dcdbea9168a385687547bee2d539eede740ff1652eb9cac647f1461de750aa2f3bdf8d2b34a5a8d799d72539a27691c21bcd84d95ed00bdfa9c99b9db86f99368923b8936cace28cf120245102acbc7a3d03326b3c0a67b482512a5955a8ba9c6479608c3a2b376f554dd287c5c419c5da160d65d7b3bbac5b094fcc387559266a6b53443c2a45f433d815002db923e25099c0ae5bba928cb3854046504d069b5018f4aeb8df93eb5775f58e6aba06fff6c6c48d030a6e1497e902386f613fadbbe27c948962721fc2960b5faaddb6dbf6bfd8047f4e11853f9a0e45b8b6699b381170453c33dfd93619b82a6916c2742e414fe68263f47bc47b4444ddaeead1c7ff488b04d456251345c9d6425a09efa3dd792f9287ec297c3f97489fe1e697c412abb281a229d8d0a96b6788c618a98f275c39258632de8d40cf6c971ff788dbe08127a05be5d2ebc6089abd2b95b6648b896a01c1c2560eb3b86840ac65a2ca2e34d934b3573a6a8e6cee225e1ae083b49350576bdbfdc389b2a0e20402d41e3c1d039ec542e8ed860c78835c808642077c0ac9930fa26e0b4079bbc0519c0389ab633777428f73c915810ae8f961278ce0d0cf6e4ff28e9261a26ace88adb3958d88d3482647d89980a89c10416ef0551cb9261acf0ebc357522d6dc477a24798199863e4e37d3fe7c8d3d498cf7eba141f3091a6857fe4630e84b6c53d582f545220a8083b298afae841a1ee644250acbdf9668ff0cf1cfae67c75773371a886e250e00640f4d399d4a56cf99ec56b21cb02ff5b4d95a22b8fd509c1f9ccf1897034f8d94927fad6a57807114511112bd54e1c2ab822ae1181766951a631068f8b984e6944302c984342d93c65f028ee4416c70ff5d168f2566ddab1d7ac9f0bdc85f27d5c19b064e9c34c8dc54097ac40ba13146d581644d58cb6a47bdea59b3855559ed74f04e58c5c170137d6ae6187d5fd37a7a452fab54925b2fab1bcf8b28225fc0d528ed85d7186ed8381c25991a5a8d1d09fc4325b1adb915ac5004b6e3b0b8341f4bef7157e31a08da2a9e6e2686101a61b794aa0473f5193e1faa269e5362f7e61a80561f3dfe409d60286db1a59e9586a3d7a84ad847664702d415f0fe98b07cdc058ff0d7eca2f1e25dab832b68936514cfa5215b8e2c9197d2d5aeeeb141cd5a2f1acfc806692cb13b38ceddf9685e7beab0d2624f81264812f40ca06390ea098e99a9f07e3e1ba53df085f601bd528824441d2b980d8735f560ad2de5d64306b3e6fd5a0a2a165352bcf39b3cf1cef83a3742fbac4dc3c4f7c8f472b89d3ef54a29ecc9cd2695c836fa4d9d67d5412674d10073a3f30deb64f8b5c1982bd9d930740dc42c7903cede3aa6ac2d83a2fe46fdcadc997cf41495b536a5b4ac880fe2f0d3425867f658ce0395c91f6cd3af252c12eda0801d8b4a20f8d1b3669e5dec4e18147066844ac655b78f615c68e0d96bf41dc203dc6e616656e6bb11b6fafb5d174f5c5aa7c36dae341ae1e7c24d779bf95f5429f453b837added8aa51cfc9b402f6ef20531bd2248298eee97aa483ac7948023dddc45e90ad060e9185a69cf2aedaa14f44a6c31e597b1f821960206b00ebc664f1d3c77d1a3a1c7dccc7d26990fd7d5be9a3daac7cff0f740ce77ac4ebf8d0335824ba5c33078dd1c3e69969ebfae6ac7ed47129f416ac2ff51130f82346722f93536f648222e7058add85710e9d7fc7df9150c393142cb4b60b5610245129bfa54aea6b3167625b305d0022143e1aea9860a363785a90c8070b6267cf6b4739eebc895ade696fa037168e7a05563b6439fd3de28f41a63f71735c961679a93a9f6f64ffdde7eec944f77ae0ba12e558e22553aa35090a6ae1e1018d91b917748366df86547fd87907c7518ede92040ced9cf10981a80c255ea761d8fabce44f106468f26fe17e448f5140f7b15cf0a9fb3ced24ba2c93d317063d60ea02653c8f28bb022abe1e8c6cd40b3396277409ea1bbca6d7e331bede572755914e578aa8d4ea06c4ef81109ab19bc3025e8be7359bb772aa9bc60fe539bb93697a4ef385f78b47a307448e2b9145977d97c6a63ca8439488f1570574b5eff1cf65e0b92d4a8b0e76425bf273e712c33939697124ffb17980cc3bf99f07fd54030705f016195ce649f561bb263548de9c359f80341d260b828dc4d89cf584a24eb1543075898698e10fe89f2076fe36851959b0dd12cc65a1ab7c2fe67f365c72e6389a5b5a4c33bc87de5c4f657838abc71ec50c10da2504dbb7002f90c779ea5109ce42c88abf87c405f82ac8ade9b1527cab34a402491620605aa5472cb98ddaaf299ad0400846148290edf32a4cd97f715635a15bf11722723eb62769187ea011221620bbcedaa22d0fe39a512b0b587e545a765f03bd2881c223271b93dba3428487a4b1e50f728be1002c423e9c048de73be72a11074bc7e14c95e3d10fd96bce3dbe1d423fef9a41d3f2ad62becf3c89cace33b69d0f2996c4aded76df8044eeb8f47e44637b01aef7714ec7fd53aa945ee276291a2be32f1c2781b1aa5ad79fc9b2976b2fc3db900dedcdc5ebc931f3c7b247d771cdde20722c345554a73b823290906a11d57f09f0201b925e5d5f7a9840c8d33a130244e728b525031d92189f78907d67e445b92808fd1e372fa84164ca18cc9263bd74043e55bf1beee94971a81c442421ab435f70e3259c332749421c5f59d47a4ba8d3b031fa3b9a311ea071de5aae37d66df75a54278300744ebfc8d50048b38092eaf528de7501184846988897f5876615cc05d0440b13e1a1dcb357d834ed9f6541ce0803d36ac2a20929079e1bf00bdee32f037301cacb0583b9ff67aa3aa1d1bdd1e6c3d8712ecdf2f1a456739ae284db1519db1ce915b4115309aad6b6d16772ea50a9da34d758414a6fce32e589322eb846992c06110a2e90aab89f3f6634bef5e82d3c17362a4d2c1614f6064b9ad07546ab5ed498d3ddee6a62f850ec9e8cad1a591b005306ad085d49536596030944fdbd366f44234c111065f8e42d233862a9ba94beb50b07b870463433a23889b3bd9d66c7ce72e1cd736b6b522653bd07ca0ace210e51f1c9e74699811b71d44e437e91d6b809cceecc3c98bb4456d93d62fe30ea8c73b24c8b2b74f9e287f48710f174cd237ca1ed770ddd1dbdc9885594f17b7674ed47fd1670bc887ee35efe112a34a322da126f94b76b65475b77441a38e4efe2b166b702b9bd8e68f0340b088a4a23904e0043602580b71cf1ac9ded1d73ac3737241ba235267a9fd6c5a1e3afe4f02497731d5dc08f653f3bd3ed2d796b35e88c2fab49b5dda186be91c632c126f4fd2371180a02243c7fca2366b5afdaa1b89efd9b7e4cf12c236aad24cb3be17db057d6972f05e7e24f4662831280f01488b364979e568880b793d244d76a4bcd2e4182e3e15dca48bb7c4d2a7b743db8ecbcd288d7f3793bae82b651f3d5e22f61212677c1fbf4e61434fe3a5aeed283e46382ba535a6d6a196f42a63262ec774884a994a48a4da85b205b946b5b4780969c8eea5c239409055a26bb8130d17de2cf12ea1e7bac6b697c9986f89bbff475a0378bee3c304567f97d154bb78b738f7840ce84689f782410f3a35b057db85aeba297deebc8bf4ac510a743461e0acbd275d9bd09a77f13c220599e7be8a48e9f82a83509f86ff61bc5ad70ea973fc2c600eec2604d583f6bc3d06d58ef6a3d96fd835265e6a19398e5a8dcf5d904f92fed51105f937f2bd1a2b1dcdf54e6c4518a494b2268210d2e2c2f3f627ff7c28aa193c99f6643e3ee3c5c87b635b8708061d821fa15809c08ed259048f1dd450253356165423bcc1c87480be14562f38fce120ca8d8b7c8a252562bb9e415d78a55c3106bd4188dfb125950e71be2cc62cc8472b0e070e8ac6823d51adf08bb7670034f64a4d936383edfe4ed315887675f474125954868e0deea8a8a5bc18136c9772386c93f700dea3138a11596f63355112d44e97ae8589339167cc87fbe8118c871895f624e60736cb6b7b2c0162b52ad7af798ba12e4813f56e731f2be44d8154bc9f184b4ff2ba34c65999f003fbfb01331c92a371536af73c1db534bc0a4be88f5ffb992217c5ed0256e881c0484f65e206de7648b1a60427876d812420f7c2486fe43f7f1fe2a3175423c3366ac110cad1a30dd6863d13953c6bbecfe9024ee7a18f90b6e31695bd757dd444f90dfe258b237e71228874f6b87cb868baedfbf89cd5982ed36b8413c18ea6fdae501c6d4082cc5bf9b5dd41777683264f65ca4123783da54ffaca5aeeda8cbfffd59476fea7f8449cd4791404acb2743dff3baddfa3c71457af420b4a04f0d76a990224a1a549c03d37f941b2c3cab9a5a73b0fca61d332649d9fbf4d37519c76247dcb96c0c340facb9eedc512bf524f86603d85a7e893fc84dec62db3d8f1f65a597c1dfd162499d6df9c7092751f5022405330b13ec7e9f68253a0d5c8c99cb434299fce5b4e9e6c00171347b9cd11ad0a5778aeaea1387d68c78f5600c45e854cc5b878ac5c737eeedfc4b917da0cdb69ff23e5d86f6d7ad88fd5f61fdb2c5bf26d9261379651ede29ce87a513a93a1dd238a1ca793e8548a62d1a3397aa7e28b463c581e961559c7dc1d5a739b3a05ceab3931ec446822dee3ee733b6767bfe24307300e97c20233129622e866d4668104a7fa5ced500972bbf1c8400e33e07dc83139de180e92bba2cdc0ec3df20dbbf72c40a24d7d5089cfa711bb2e7ddd200083ee76fff1b2e5a0445147074ed114fe4e8000a3ea46c81d2c0e1b75f424c916d7e081bed072498a3ae846b4885d053590b3de4eda3d01f282e1d15e03f1ccffe6e1452f92858625abab526e3b5be3be4e90c4d932f203d0175b9a2822376aa44d856451de9783544526995bd23c8375221afd169088a94052c3fd3ad16f6d3eb5de9b791a84539c08d739701c282d72f238f3964dfd0ab3123406069debd36c994e06b73a6481cbeb36fa02daca8160add5abc45fbb248d889dcc7c59307e04298f193019e3abd71d6974b0d90cc7e57c5dc77cb3e10ca6a57553d9e1699806b67ada143848f26218db413af7925a712ae44bf826282598b15346aa300bde2d93c32c106d9ec14004b0d93a2902804eda1416688383d0e8e7019c03f41b84ab7c5b78dbfed0067ef7109262ed805fc3ef3c5067ba36a40c6dfd4f07a467b28b35b5379bb2556427f76c4d35b8a19dfe4849cb5324168281308ecfbb46a15ac50d3197410b72cd5814fa82531563d1df27e320164672db4ec623b84e2584a56016de8010eb5be0d72662f1c710a80c9c02a1b5ad3ad99a949ec0a5996b90789449aa65189c88796de3e84ff68aca75801ef0847a600d337c1f01c6a5ac293620431347ec0fae377a6331fb332187b3e7c871174d9bd688885764fecbc5dc9fde7ba2bbfd3965077827306b562d5679bceb6bb3464315560b18b3858f23afa63475bd8cae8f3acfb0464e8b29f2f02acbb063045c07b628943ab1f346457c464e8d3947a050e91e2e3356289275f37fb6165d89eacb2f007a38c58eb91aa9ead59366d2337ccc15462cec4f8ebcce639cee673e50629a8aabda9a675ddfcdb177d5388254f31a670b4d3e37c181617e2cd78a15a21c7be1b0b5c6c723002ffb0d3d17a2a25954f258b9b74c9d95bb6321717e81e04db34db9d9fc6378035c8076d0b727f99a829e054ec99c79b43f17fda217f459f90c5bdb4446b8f434dbf51f7f399cc5b871f8efdc2d11213f213e07ba359c332641c1d900ac25fe539735e6eb21335ea67d32e179169a07eb75c110ea263727483bc16bbeafa064e5c964d562e21480cdbf5b2eeacec3dc76bb92ef5e6c283ee19084df83f39a25b0000f8e6c304951b7e5ef4fb72b69027b96dfb3036520f239e08b16885aeee27271303105d8c516b86ec50ff2425d452f56fc1dd10ce767134e638857e0963dcf8a0e1232ea07a7391ae0629485792b6e41d877aec551b169a11255d41fd4711a73c42136bd6041b176288635cde6c9b8fde01c670baab3145650b765b68eb555709d2b08bbe9f473c8bb020bc564ad0e0259f69fb4b6046bc095b49be3379e3a3361c0a844be304d091d14547dc3cbd707c16e213655c75fada42be5ab05fd2ccac9fa492ac305e250983aa5abf0b52c904ad7bbf579359eaabfdc82ba0fa3c6db6304d7122cc8c7c600e5bfc9e43b45916ac473b0813b5cfd029c4ea404962b44ea2cf3670e66fa66f418ea3e0a3c6f0e5fdcc785c2d22dec3203898380160a5b61111cd0f884c08d3c10eb063fbb073834e82e1ff4c2013d6e106cd69f59e59178f2780864393de46a989218177309e41263e0fcb0fc97a97314274e646db94587f94bc295c0fbb444cc5def80dbf53d8d0a9db7e91b42598e887736184eb584e215b6a680446cb54bec986ce9b3c31cb906c2083317f0e39579bc5d3d120dcc6e54a42a0e33807853e9d681414dd5368f8cf14fb5080f2bbaf018f071ad0f8107841a0bb170e760d33d0eece73ae6a1f5e7aac3351f92ce6c9bf5c55411e1cfac49c45980da6396d9c59ecffb66d2d60fc4cd2671797bd5ace84ff1083e28ef0144353d76b32487bf17fd69611827ad96587f10144fe47a01086f5604de33853ea77cc8b5e34ceebcc682c01cabb93d382ab83c8f7f21c8925c003e47051978d6c492bf54df584566b4fcc059bcd963149452fc05c331b1cb08d9d7edffe97bfc933f6b2b2c452361dbdfc38f0f26a6be0c2c93789db65d113cb16d6d1e03667d8ca00e35a3fc5c9d67d0cf19e63a91d3036af61209859d2eb80687c587131a9219666db627249e20f843c6a6ff34a52bed494fbcae795115a8c44f5deed831f9a74176c89b6e2fd68b9028f778fbc03f745d0d33531ebb66fdb37d9efd22f9c526cf3c38b13e98d938a5cadffa7da641ca9c6b03f3b979c241fe51b436423b67fd7f7fe22fd378643d0f51d1861ddea2ccf551a2427ce1b7c99e3ba0fdafcf9c049482f42210d1a3040740581d0ffca4a21a9119da392cd49663fb9fbd68ed583e7d3244cc08746fa551e59652776954765acb10052e27cd250444d9f214860fe5771a1d4073ee4e755e69edce9c6cc8b2cac9bd02edc30ca9aadd4a06df9b64f9952fff62a277b1d0f278e7b6256c24beb243bc17c9865d303992048d42bbfafbc8992a55d4bf1c7ff24af65532bda698cdc211576396cc034e7901a443ca4fec5286f6092674a106519679b141d2d397b5ef4af661c34b5b8bdaef49463e1ca5a4269f1f969edec551357f8c4585c4d1b0bdaacbc7d5e3b61aac7fe3914ca9bdbab219cc22dc759c72af5f8f682d7bb64b384326f3275d538a4dbf2693f3e048dcba9aab01b127fc598831f6cf02bcf2d5317479b68625a3ce96bd1446e753c055b93202b3869279e40895e9b9aa50c5092f0c3e3ddd7f07074097b83c70462c209bf07551c294cec520bbc9bd789b917d0729278fdcfae858381bde7dec03e549b22f5a3042d0a28c22d3e14a82b606e7d071d17e3d19c26c28613ca6dbc13d3cbaaaa4ca16fc768f9af81ed00e4c81109b9a3a6f5f4bfd439b20af54b576e79228c93e719581ee00f375e84b1f899490fbf6b91a1d21eb8b2abbba255637350ca06b65df029d9074b31e6e512bd67cc49f99b0bc7c031a4daf3f1b8089084cf1213289284168f5ffe8e3a22a46e781364b67edf9b99554e1ad952cb86ad28c90cfb970d7284a6cbae6552185582437553f899c96917228affc942b561fa229ec548b9dcc0f759be9b3c8675c2a3aa900a3a4f1ccd6f3274160b445f096560d843dc339738157e0ec7935e09c876237114bcbb8adefea636dac5652eef56b11af25966f4465a1454c30abfa3b37ec60797d68422f4e6b188ec4ec62c0cd96196da0f81c62abe1853b74d676c7b9e6906e21cd82d67aac7ed1a75df652d3b0c0460f61d6c1a33ffa4b7c95c825a7e97e6551c5231c8852eec4de25a2e9815665a78a2831bf4db71cbbdf85114fec349f66983553a646bb331e8bcf7580297b44dff9cf9c99e63a0fc03239b8e17996238d7e204f132858f490127cd578b025c6b70fd7741070b8b52b95bfc31836acbd58488b219c0f72b48fe2e150b52342530be37062b7e2d9c207555c1f1404fa429fe855ff0253867485f57b6b9ec1952638fe5d2530339faa6a1bd9925c4e513b2281968b08ee0575387515bbc98dbcce0229c0ac4bc14adad92d3625dca38cb0a1fd50fa41e6eba0860b3b64d305d8aacf29b5fd55cd13bbbb7034b7e196e60e3b8226ba9cd9c118c540d148b91652eee154c412704516260afa5e835575d85fe0c9bb1067e56de41c9dd10a8067e0856459908426ff550c6d9f478164b289aece5936a1ceb4dfa282f8da309485fbf515aa24e1a543d02f7ee97f08dcd7775a357b87cbcb02c17024772091ea9b6f7da85ebf79b2f1d4ddb4bf1963314c5c13dea5255af485ef09b90b1d597dd553a27e3b3c6293ac12dcbcc0dbd2395b750c6b5019b470632bed2cb1e8023b258db369d652885c28fa799b910084443e92f991b1f9139c17471a0731f9248bad0d133417132c8c9bb96f4e68589f698ba85e6f9b9dce299dc083af4c187dbe3d47ca5f3ffa0398925a3d4b2a24adc4482a0b18239d6d96c355b179154b27790b3fb63fdf3e0ba98b1ce69b79eb69665c14327b3115c1802c19fe223b75e2df9f9c4ec0c8d714774438aa2eb46598356c9039256e03b6044d72dfdec94707368215cb035b0c9b8ab7331ac749b371ccadea8e11e776afd6364735ee68b57577e0dfe3aacf23c4ce09430047f6a5723d04e1f9d04a5e776eeaf75a2a148cca8ab435212119a5b87573de478452c0a34ff6cea1690ec311ca43e286c132389bd3940ebaabc3a877ccd5e7fff5974084b3c46146744055f48dbd8653212346a72ce376fce4314b1bfe6abf4648dfe34e66e75ae8c085ce90d223db587f92fa2ebe90d451982cb367d282f4a01afbd8c76f2816a328f094cd7fb354e7917e8432b07d1f1dc9af34ceea83366b72415abca8e928b120139fe923f68e35ec38d5cbfd939f3098848e286a73da9f89930da8d09c0c0f45b428dad5c011e9d932a2530787011e7ee27836ab23e931f158575bfcf290b314ac2a725eda01782b83de911133b61b8394e7685f138c0ac890115e615bc4bee021e15e4ca196f01e48892e36c3c9f409920146c0b946a43935a896be96f32f7784d3e8dce11c4d70019de8dcf24aa90e766f256cafdf0c7d18e207c63d6da60931fc37d6cdb62bba01c64159b888efaa508a97a5393047fe287d582623243e87ed76e4d9dc1da8dfbbf1bb3a3247abad1a83e7189d027c209043e1e088a588874a8dedafdc2ffa40bb11aa125808822e5563bbba4613f777287a80a61f9a6e2a39d193ecd8aaddebb7eec086787dde274d256040ae70d264e3aa8899d613434846378520ebbffa55c55d689ddea04446f0a3c50e529942f1cdb436c272ca7ce241f195dc06b0b53537e553358eff020aa3b2794e9804587c63b5d023689cb1eac06db44fdccdf000f88747142e8d9e9f7309d84b8588e3f7d62371cfc03f030eec9e3af375a59c586506bc2f5666d214729ce8f73989cd499e51c83422328abe145c4ba4b2b3b842ab6857fb9b199e996152ffa78f0f14eade78e65d95ec393c154e54413906caa5adc5c066b2dea5a4a036b68d6cf1762c11f678dcb318735d0210e4bd34d451644719aae9e8f6c62f3548ab305e6030d5cc71d4635b36e319bf672236cb553393e250f0975dcab7efada341735bea9d80f83ac3f4daa6269c0eb832c971f0a72a12cef78d0cd1a8060eece62c3d85898d3470c659b3e88060b7efe6fea5f20bd9d4fc4dccdb194078b207df16f2b40890ac575f306529b5b1ee5c1ce12e2bbaa8bb4f19f1795a48842a8cb3dc11c304c1e48c4423051c5737a395f11a301e1078b6b17636dcb727e6605c75fc277125bf536de5f9455f49666ac1e278261017f373bf61d4c71232808858c0e571cdeb264d981c24bc8e72f88fc3357e4345b5e69ff2cbfa70d5ee728b76a85cc713cab30c7c39536fd0e15b697df96c9266214743654ff8398c113959773b81692a6f9182fa0f7e398ca01cedcb887e2589898ec317a4c0c9867953e7f361338afb3ec14814c6a19c8a1454fff0490e50e2121206f58ca65e2f3d53ee6a992c08cba3853852b19bb6af85b91a8151200f61fead83d38a645e00b9e5bb669b443d670d8408a69813a87e533125eca79b9301b5a74c65c58f907851b74c2d1ceff42e30d1ed5aaaa3c73a7728fb8b6caeca17ac7ba6bfdf077ad3715aaa4b8a8bc9e201080b7359040e62fa36df5531de537bd34e8b224a3eaf853cccbc684eaf803a033f10940c0e4d370b3b8eb7cff91a426eafa4f6c874aae100e6f6ee08af82c4ae5472cc51f93331bec018ba98552a930d68bd4d98ffffbbc2618d0d2e5c9b1d465304b6ccb58b60825755cfe67f3fe9ac8d93612e22054ef6bf4dde05940ed3e4d9babb23b22a46034d7f46b9014b53e0068543e355c89f54a96d4f463ffe857bc18a7d927d9c9385757f74ee69594329de84cc146ce588ec7146c67d7be935937a6054823fd20e60f1f18b7ed45af8d17855ab4aaea3ed0e0a81d3773dafe9f663757d7a32adcc2ec39851c21fdab51db677babfbe8fb64b3973b628118ad2eba0af0be00548216c45213007d931aa370d11acdfc3cef1f7a634ea45a5225b6ffbf2cfda572ca656a54c77c629522f4855b6beb03a42908456c4722c05faf9ba06b8957056e29a28be0da0f40f5cb79722db877b51249f0b4906d7dc735d9f6d88b53151052e44c068c9622e5218b37236f1f9f193d134851fb18e7cd2d392680790976a1e930a70131cf504c08a0b3a3f8835fe4da5e5ea8ec82314a45550b6405c76e80e8f20db4abe49532d1da698843f4a9b3e51b3cb67eef54947655ce4c87b70e0d3fa5682d5c92aeea1e1cc79bc537fae983d57a1c9fc812c9c6a9a257a501b0ba4693eac7352bd5a6ebdded41ab0fe6929ffebcdddc0844064bff4c943ebf163b408181d3266919ab6c83d7abc00dfbdef398b70acb4dec7fc889ed4ab8c0c9bd1ecae97427fc84a42e10fdaa4c8a0c4b29735f480f60684a486f223659e7b4917f469caa95d082ae7b11e0189a93990129c5841c1e613f15f5fbdd9b36cd283a35caf92530a0f7b46bb46620a7b6820fbbaa1d48621e8e3e04708204f812dc5ae0abde03486913a6886efd349a60a5f0ee72f44d9cb0fd716137f56ddc1dcd6d9eca3943a7124ce251971c55a1f3685bc95d0d8de26b8d70a332f4f7d79ac0d25f0f7e3a3b53b9ef63f60a1c6d529cae0208038b6d422794e177e61b9617cd3bc8d8497d2189ad17f3ca48df56bda661f3c68d774850106c095c230c97bacc049a21c48520a91e4e23b3ca248cf023c15b93b8a709359711b216c784a01cca285684590f1f96524c3fd005772f1290de25eb0896229b5eeab8431275615c62d2d497a99dfefc5668f0a0898d295b1405e4bbd80155fb3bc4020a04a2567f805cfbca66b21dc9b17202b598b78cf18145e234a52a934a109f23fb80c872f5f48c790c11df336b8d792094a4e29b9c2a4778b8bbbb1969571825ca22e28fd53b866f20ce1a21c3062180ff384851d409eb66a11a5270592e2c4ecca4c89769b96e9b0f1749dffa48e841c06c045907bf1d403c4a6ad9b70229a694a4d02501c52c01ccbf9a2270da87acaade39ceeb6f0774779911f55b105775523d316bb73086af95e3ad26516b7204055087e382bdd092a290da50f7c544adf4f7dc2d8cb287ddfe3e91ac8dbde96d1645715fe8c41d9aa6f0d7de65dc17fb2addb6d967156f9598cf81164a65833d709ffdeb42493475364c4b3ddb6c6d0d94ee26bb8a8ebac986e5949a5e4c90a52fc0492d7296cb868c5032ac2fcb40e5d63955f7dbad47fa75a40070291b111f67f4ff6b863055b33faac38e1cca1c97edfc47192890b7b2ab41673fcecf11d14d25ce39773889032b3c4aa5cf2e5e9e3bddd95ca68ec079c3fe6522fe8f310da8c272842f42a51a11514c2097b037998dfbd7abed03b5045034ea07afb4b4724a96fabfcd848abed3179ec1968c1d5cee27f0ca878d1f6f9509d4f8fe8fe974794cfd530de1b3593c4c5893d9bea32668a0d148a129374d3ed44347da4cd9be6f61bb35dbe3164be84eb9f688e5b78a6eebd3e5b6df95add510dcc70eac4e9ffafafaf0a423ee9c60329ab6140728c579907d2def3b5027251de76284d3c1c4fd6d87506fe49b706b7e4526a60cd95f8efdc32ba43b686698756f5996ec92bfe42e1918ddff387005ab02c2d3b18b6deb5e7c2bae82a93c60731470327ae270b1ab340e62f23609550a57f20b647e2ee5ef3894a4c2d99bcda30355f1d5f2008aed5fd45e2fa473916d6c76eaf16b6287ac7ad1dbbaf1b2314ad598e040ac6b13b3a213060c4bb4ae02a44b73839fa57236394e6f796daa94051b74d7da19232a63a221a3e330878f1117767a94bc26b6442bef94165801738d4fcd37db6ad512de769d55093c6e848ca133fb9f83fb03a48ca737214680a13eb6a67ae88105c3787fdd6ae8d10ca962461d69a25762996bc3b90cef41a4986a87263e41bb66fba5562831b608fc9ce9706a91025ea40a52627404dd8b9e6556b15c2252bbb620c2c5d58e47fad4cbbef2e07f77b3ca0af8834c4d9bbe3d791343802476d3163dc13a7e2a24ce1b8911abcd374bc98476aef6fafef1a199ea7563837f58f95b7e2b7d3dc12d73a235eaf64eccec925b781d6d47ed4d1ed5e9c764deb6149d350841abb004baf2d891bb411742d1eb8499ae8b29e2de4dd67bcd8656e26ce7b4cc4e2358b0701504ad2fdc7bf26da987a67b5ce3663f8569212e92b86e3ec0156ffea2ff7d0f44e5b3a9c21f45f030d1f78493b09f099c6bba448e505e8ef69413415f55c89598fa06ea9ca81eedca4d8523ef138fab3c6f9773fa6713f4d356f60b972afa195ec0752522244bb5af4e41d4ab0d1b80fe40d18f03929c82ea14b03e9c2e6a38975661ecbc0a6d25bd4e4806bc1e90ef8a26e714b2cf703ad4d8ac4a4c75982696c9f07a983fd9d0a6ddea42a834f71318aefd6d88b008b72030cc4155d7b3e0ea2974a76525c898e71ec8549b6e58434d624e8903268b4bab7436301115764efdb20fda5f6eac8242687702a481c779cfc90b11cce6b917211577b0ab333b1b684dfd24b468dfe7850dceb75307ea74612e5f653d80449f2854df74c19a68c07faf96b31489a83160eaf0a2925e58282bb8878bb47ff357ed1940df92e3bfd5f0bc42e512b8ed6ba85a1e5c89972ec353e7cbdccc0331555b757d7293dfc096e8be3aa00fafd4ba824d56e4a59e071eb4848de62256d5333935c74ca5e2815a7395ab269b608133077b69aee68bf0015758dc47170a715c9b56c0864b8a6cdba2c28a709176326875df18a88353cad68428ce48d740fd14fa3a972e8729ba3cdeefeac2d8a38793a1b9b78b0db2eec337daa53f5bf8d3d1f2270648524580022a6e834268aa7e900288aba7fa13329eab4cbeedd06b042ff49ceabcb3c08d02e5463d0a453a976d6d2d9e58cb37c0020181dfc709a4b53c65b73a164bed8625c579b7864b8c0af2452f70ab5a5bdfe441e75a4d57d2554e7f9fe188d5d7df448a9661497a7f05dae4aacb4fef0c878fae92b9c5b16d78f7ce307fec18073adeb138ddf6fb5a0c529082412033f7196654e02f332346d5970c83a127508ba579850a0579903d90d4ceb971be221656d1d20fadf9c54326d2bbc5b811071cefd4b61d886454e6bbc2a6bdd400d8f8dcf9e40e1a93e4f77b66dd22ae21e77d7e4b5733f686c9c3de4ae0de9c3fd9fb02c35dc63b0cde3a09cb3d1b89c14253b0798374abbb0769b05000fbccdc55a4ce6fa7cab6923ad0e397d9c64fa57bb1287fd342f2bd62968d8141aadc6c03ad004a3be617e92ed783ceb4fa53f2eabada0cc04a333e58f73da61ec97797d1d06242b6becf89654d53d830d9d657c19fec3005e898c551e98624ddfb23855b583aa7088f624a5809fda35d004979bfc656db20e9058ad9a40a83306cf3c4d15b9690e37e6997d47f63992428059c8cee86fdc8377a329eafc64bbb4ccc8ac499caf9cd5adfed102209a78b41aa96887321246fc9ff12862a1a64c66d786a429ddcffd3c1319ddfb6b61f87f7dba7e8ccab75141b51b609f5a68358c3eb7ae5d11609e051b673ef1406ecf2cbfebb4a8c236da25d54aff1459fbb601b12a9c4b604caeae43d21bbc2de9afa6bc9820a9c9fb6ab6121944babc39d55acd11bb7924e1e7dcabfba7c3afe728e81a375e2fc52d00356f7eb272d0ef5d2ab7aae70988ef73bd1afbdf89b83393779cc197d901d89e2f6ee4a966eb67c8280ee36558d08282a0a1398d742fbabf22cd1ba9b3cac0aa1435d2527afc52008450da923c42d2d6270e84545b66038a56f744c50c6c281bccd067fdba94f288fce525e667d7d642565eb9330f4fe5a86125a51738c84d849ca141d48c01e2784d9f3404a819e586444a9352efec915f209526bb906ac304e7ea02558b6ee2fab25202692c2da24d5028fa70845feff2175493bb493bff4e262a860316c9423bdcc2cd588a56c59a8f783887a61474064891552387ca37599a1e64d78cb73260c2262952e7893b06c27312be60257303730903d4785dac9cb616eb962f2e6d5dd4a98e5ea259f2f5611f05c80e7db814e2836cae0dd0c243d29f8a1f957c6a662b071c9e4f70913ce30d27b818451596d94b2dc37f0c386d91e43662ea91ae8bad1485c8fed63f7c33090468f5175dcaeecb49939548bf362b47b5042eccbda089aa21fe30f83ca5d65a46d0f1cc6d6513d68345f7b710761a09a9c3c92cb40998cd32929a25e40af59288b391d2190b317668db3c11f77f57799f87746a649bda328d7cafcb6e1e3e7e0d2e8c46140d1e902ee2ec2a7d4ac12a46e2177bcc9c03f817fdf1dd2cf7e81b2eee24aeee17060d1d215bf796d5bbcd2673f5107c097cde23662007e8867b11248e560511d21a426111296951f48aadade680f13efab74b76e77363c6c5156ec5a933cbf9a6737878e4cec882198c9d479487f24ef9c2f8d83fb859797ed36520fb927261ec40e4c07a494900621155c0785b6840775e6266da0e83c5133d8e85113fca43ec1a4274f011eaa88a1dbf0444442861228b1e0732053aa79a8cc28406cdbaec3a3c7cd6f5d08a9a6a56442234db202301588b2b312315d013e0aac70c6c56b5eef8a4379facc6d4d789ce9fa2ba36453b7b14b4b5cf31742220b1501ffcebfc778882397a475f3b9838b91617c6596d6ba9afeea601dc4324e6a35393f606c599f77d87bebcd6341e570b100834322d9023c8838cc309b834d27f2b28c5d2ca84d2176c6068794afb4f285d7d4ca3efb2633c82227b3b71f33aedaa25ef8061ef1db263a83bc9e444c15aa5f3b3a9e6bab5564c4ec5b467c15cc0d612138f32bbd9f43cb82ba99cbdd816800bf5e58b6298155d9e653606dafafdfe6c2b3504e99d25fd5b77ec09b52a106a1aa4509ff800839f8663e697d915e96cee2f2b0a46ff2bb66f2729d52020cbb8a44757e23c8fefd0d757976ac379956d9467d1b40b5e564c87490ee3057cf61f4a32863e19b9f4ec0254ade2db357f0c59d1d1c975f0dba6d00e6734ba1527564b0efaa79163b179f8219f48d286803f8131a2ec7e54f54ee9cd97a996f9e2de1676b7af0b90bf0e6b9a55eedb5282a1e6e5df569021f4c74487a97e9c33ca6659113c10f8de291dc0a2c59431907dd92286b0a63850063dcf59c5f6dcb3c828e8929b2c740b5f6dc9ccda7c2df9f097d8819bd25973925f9c6db9f375addc4e9b76062ecf5c5f8b1d57438ba374ece17be0ba6ba1a81d331736ad3221322ff337dce0b4aa68a9fd4b4cde34a5136eb2ce3daaf0617701a66e6aac29613f0c6d219329433c97e23d60027e76084c6ff4cacec91991d1554d44fa815c966796356a20647d463bbfa0427fddc112273d850cb71c922f2eca8067ebe9287a76a0e6957cfb7ce0ebf7552d97dc4a7d045429c5190e7a5234cf569405ad0dda3a3101724b43bb61329c3c476022943ebcf032a9283fe1d9f13da1e456adfcc382298dfa1efe052589cb34c069b7864cfecf08b1fed4cfeafb679bc445ce1f234a50228037ff00faf1027bff77c14f3ee16f6ab0d7b90ba3571d080f354c917c0090a577013a8928604dfbce5db9b73454666c8edfd1f92af742827c44637c2c093f11e686ef5de8cd8305f48d9b4842e57906d7457e16e88f26a65d6d4970fe5331ef30c9e1afc705b397a018a7f5effbf82d16726eb9d7835fb2fa71566c68b1bae6f865b8e65ada26ee55c5a17562ab772435c3fd8d79afcf7820e682eafc0f1227d28451697a15c3c093029747deca689ff2aab464adb0cbdb5ca2b388c10157586a3e5366c3131bd3b0e05d791599bdb6aac989f2365414672a567d50c27fe6aaa918624d2e609c88580bc46d247b86856a70751e4c0c5bde4906165e8d918af3b53dc276b0a8df50b51bef17bb95ac8902b586466dd6537cd68c3027413d29833375375c4f055c08c73e71e8da35ec1257c315255001d13ecd6118f1d2a994f78767996a9533572176f4284e0ee5f70bfa180bb39d7a21cbd3aa6f05e27fe468961e8b367a5ef60734c63417789e022c4f57e3faf5f75d9c39ea9299c83ab6c7422067d83418cb612a7fce077ce575c8c80fccd86f31733bdab221fbf84c3e73b95c3dcf6a3a99ee85cce045f509f8e0043d12fe3fd9a75a824d141527025e90f75caca2fb37fe6790dfa3eafa67ea3ba7ee50257e755a28a9f104d92891247ded01892fab589fc04995031d9a5ea87b75e97479df25dbec910bde971427f5fecca951c7208184afcecd11820d0c0dbfccec2d15d7ae4dc5381cf614afb24992dce90f428459c3ceac80d5afda85371dd4e10c4d1f2c5a526e4309249eab602c65e4589a831433aabaeffde7c432639920834719ec1a4a2d9143729bbcc2a49743fb0aa307e7973bb5e74ac130595719614fa29c1647f89e78adc183a78de5d2d5e88bf255b8b30b72e98ef63666e5220e27b317d77e3939d92070b5ddddb54d4eecc46eeb4f8375c9f9357048336a133b6e480f560a33a59c1927c5765430749ed70f168a97f15005c2d0325776906bf36672332b665e7fb1bf9a5e01690a8a4fd3f8ea2c35f6056cf55abd5535197c6fc975bd0d265450404c6a13990e75d7ea707806059a592363782d3a50947c078da25e5ac1a72a06d84ad53e6b78cb4440f252db51b94e9848525b42039681af99223fc850e39f2889b860eb9c04b1abd5534a3b55779f3a33039fb7a7cc93321ad700725060c620ea4ade20cb61a9c4f1bff985b99af8c782c6108f1cd93742240f568d4a7c22d87fd12c49421689d93fe2cce4b51597d7d00e549d6554a49edafc5e84f0bd624812c02549bcfe9765741ec0f183b5f8da7a9c1fa33588f8cd595bb859351939a7ffae3af4fba8d02bf5850a6ffdb7b4db2b82ab9c1a7e1bfe2341b425663bd98fc7299bbd8eb9652fbccddcebcbbb2a3f73a5630c459b355494698fa6e10f7085ab438f82a35cb304483401f1483cb981c86bcab04bd1cdfa6cdb93d6403a8175a8ca956b719cc7c999ad704038bb215bb05ae13d68bd42b360d7d71a0b24098076ce511b929e891b9e105096aa5c8fcf3210590730643e535fd4444c228f1c75811328e079a9e65ba4df85d5cb0ad33507c7d9785b65a568d85d71c7c32f24e3b39251620a7b675201df19dc6477091090facfed85386a2b8af0bdccf5729758501ff63bd8a20bd29eb1a691f8b16ac204ed5da88bff6cfa3bd2a118e162d915dc1d8b385603120a5996fda6e20d25e8c10d91ef05cbfde302db81c15c67c6cef8be713c7b01da8c895c490c72f1d319f576cfdddd23814a43b5dd087caa3b687358b872459cea1ea0facbe65b80d116e697def33a1c46d415efdf574381e2e05e8cd9440fa84970577f3bc3e93a6039be9b605bc0e379b133fb5a3cc86ef00c259e77d3c881498844cfc491461c8fe3a4c3dcfb29fb879f3ea9b68c9b47ebe38094d0e062947f6d1a130d9e89b3ed772a7b050e283c1538f6033cde89e1e71d3877112ecf648d7ca887b3ee468d41bebdd8cc7283f78e1b35f67baf1d8997ddf3add1f8453124e816c4eccc497d30cb0be7a4d18dbc16aee995ac35d82a20a631f7458b19d208c2ba8c67beb3876ca38c72bf5a03ad9f08d0f4834d690a0e47c5741a34750e2e28af94d4d74bf7ea49becab8b3fd96af035c069cdcf2d177db9ff8827a0304dc401d1318d28c5ffed7abd919ff2dae7072a03f811feb378a41d90bee25a8317a069f84683a8b9910428f15d16d2a671a4ae94a24e8ec53a6ed688770fc7e02a96d6ce06dd5d4407126d87f44c659f214f8dfbc0b08170c37affc6f28e05258ec590be8a7ad90741e3c1d4640620ecbbb0cb221ba02fb088868222283637f49b7c1a83dc492320cbed604caa371ceb086c603e44045050b6133386f0254685462a572136f621983337e53d31509e24db76ed8cf23e7cc4903fb401d3654bd12c6c553c460c9528b70dac5034b21b33a7b048ed80c988603f5ebd20a12fca10233367d8263825f2b79eecc2810661d93637f4f4ee4802da5157b063c14bcdd8e256dee85498cb4637c9a1ff8436631277032a5f8da0dc63dc79d972b74ed7041296f35e699a2c35fb16a71feee27fe941f51f9f5c9e23ac61628c7d2b3057d1385ac42b35081152ac004eed6bb567c9fea3ac75d1a7a56744a7ec33cae09a04d953600a909ff8b20af8f49c4600e39f8e82781818511b6a1b4e8ebcf05df2f951667b9f6686d018b594ad87516d16a59595bb5a5baf2b7e8657fecddc3da4bafca0163e32d3eba89242698e42942fd11f6587e01ef7a454e0add3e458a006b0f203c154f2395f75bf376dc5fa991c84c9e2d16298048bf96aafafbebe999c60775036c82ea0c250513bc0d89fc2c39f59549bf68dbd190035ae38137aa3c44c5986a38e05ed596e2a88e9eb3a78d92a5cb4b80117f95457407eeb7d26b6d6b16e249740950c5577be09df3424d0d4a00547adfcdeea415d9002d8132f274d46d4bd5fcfd398d61d76cac00f765525f5ad938fb5c06ebb7ce6a9833fdb598c4b81f7da234bed0c519b11a1589ab2841477a853105b38ef70ee3643bc53f3b30f6791b3ab6b984458cea36950e6671e0cee8ced2bb257c29e3a57cf58995e268dcc66fa9e67e66d2a37bfcd846d773f5da51b3799aec4ca0a120846c3617270d8d5b532aa075a4eb5d0ca83f2a82a8c1ebdd05dd5801f2a32291a381839300fdf9e7bb18fcb34c73839585e5f232d506c790f34bc38b6af1454a141a0179596abc9eb80b6aad437e6063113996fc65dc124970cdc0684f12f7cf8d78d9ae8f349c2944440b9f264cc5141c806d57f15777284516b52f73b33bc5fd39a083bc0547a3f97a66a8130c0a422713cd1e986448e6b1742e83b001210d4cf8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>Hololens</tag>
      </tags>
  </entry>
  <entry>
    <title>C#编程-线程01</title>
    <url>/2020/10/14/C-%E7%BA%BF%E7%A8%8B01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-编程-线程01"><a href="#C-编程-线程01" class="headerlink" title="C#编程-线程01"></a>C#编程-线程01</h1><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p>
<p>如果工厂的电力有限一次只能供给一个车间使用。也就是说一个车间开工的时候，其他车间就必须停工。背后的含义就是。单个CPU一次只能运行一个任务。（多核CPU可以运行多个任务）</p>
<p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<p>一个车间里，可以有很多工人，他们协同完成一个任务。</p>
<p>线程就好比车间里的工人。一个进程可以包括多个线程。</p>
<p>车间的控件是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享空间。</p>
<p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<p>一个防止他人进入的简单方法，就是门口加一把锁（厕所）。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫<strong>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</strong>。</p>
<p>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p>
<p>1这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<strong>“信号量”（Semaphore），用来保证多个线程不会互相冲突</strong>。</p>
<p>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p>
<p>操作系统的设计，因此可以归结为三点：</p>
<ul>
<li>以多进程形式，允许多个任务同时运行；</li>
<li>以多线程形式，允许单个任务分成不同的部分运行；</li>
<li>提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</li>
</ul>
<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line">namespace 线程委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> c,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">test2</span>(<span class="params"><span class="built_in">float</span> c,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">            <span class="comment">//线程休眠100ms</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">test3</span>(<span class="params"><span class="built_in">float</span> c, <span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3&quot;</span>);</span><br><span class="line">            <span class="comment">//线程休眠100ms</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onCallBack</span>(<span class="params">IAsyncResult acr</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3已经结束，我是回调函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//acr.AsyncState 是 c.BeginInvoke 的倒数第一个参数，c</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; c = acr.AsyncState <span class="keyword">as</span> Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> d = c.EndInvoke(acr);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3结束后的输出结果为：&quot;</span>+d);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 一般为比较耗时的任务，开启线程</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;args&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//主线程</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 定义线程方式01</span></span><br><span class="line">            <span class="comment">//1. 使用委托定义线程</span></span><br><span class="line">            <span class="comment">//无返回值，有形参</span></span><br><span class="line">            Action&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; a = test;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启线程1</span></span><br><span class="line">            a.BeginInvoke(<span class="number">120</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 定义线程方式02</span></span><br><span class="line">            <span class="comment">//1. 使用委托定义线程</span></span><br><span class="line">            <span class="comment">//有返回值，有形参</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b = test2;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启线程2</span></span><br><span class="line">            <span class="comment">//取得当前线程的状态,ar</span></span><br><span class="line">            IAsyncResult ar = b.BeginInvoke(<span class="number">1.0f</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//检测线程是否运行完毕</span></span><br><span class="line">            <span class="comment">//method01(b,ar);</span></span><br><span class="line">            <span class="comment">//method02(b, ar);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//异步回调</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; c = test3;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//倒数第二个参数，委托类型，表示回调函数，线程结束后，调用此方法</span></span><br><span class="line">            <span class="comment">//倒数第一个参数，用来给回调函数传递数据，可以是任意类型，现在把c传出去</span></span><br><span class="line">            IAsyncResult acr = c.BeginInvoke(<span class="number">1.0f</span>, <span class="string">&quot;&quot;</span>,onCallBack, c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span>(<span class="params">Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b, IAsyncResult ar</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">bool</span> isEnd = ar.AsyncWaitHandle.WaitOne(<span class="number">1000</span>);<span class="comment">//等待&lt;=1000ms，若线程结束，返回true，若线程未结束，返回false</span></span><br><span class="line">            <span class="keyword">if</span> (isEnd)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2已经完成&quot;</span>);</span><br><span class="line">                <span class="built_in">int</span> res2 = b.EndInvoke(ar);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2完成结果：&quot;</span> + res2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2未在规定时间内完成&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span>(<span class="params">Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b, IAsyncResult ar</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//判断线程是否执行完成</span></span><br><span class="line">            <span class="keyword">while</span> (!ar.IsCompleted)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="comment">//主线程休眠10ms，控制检测频率</span></span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2已经完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取得线程执行完毕后的返回值</span></span><br><span class="line">            <span class="built_in">int</span> res = b.EndInvoke(ar);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2完成结果为：&quot;</span> + res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//检测线程结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-Socket通信_3</title>
    <url>/2020/10/12/Unity-Socket%E9%80%9A%E4%BF%A1-3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c49b70192563001935fef6363bad572651f68997b2ba12580ee0b837586f2959"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
  </entry>
  <entry>
    <title>Idea</title>
    <url>/2020/10/12/Idea/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a6ae19096d92740120998060ec27748d6c4238840c00cc08f88060f8f91b6208">2d058b368786be6af85840de2b870e3a8e0d65d8d41b6c86d759371d32e3a62070c385ccac7a240fd061091b8fe71e980e811cb1e708fdb93e3ccce966db820994fac143d30ef08f0bb32aefbcf9ce377fd35803db98d1f84d47abafbb37a946bcbd9e073adf671a49f558c26597568fb402655cfd17597fd2d21ce0a8ff2bf376281a38f8c37cedd4ee2a7052d77cbdd516edc319531206f9f47a4c8e8c538930acb62dc24948a116f879d96b4426b3742a607a4debc70e6347a4eccd1c6c5dba08707dacf3ccdc5b80d96d71e334b965f992381544dd629fa5e288574c7dab69d7a2ba1c814e9bd753834ebed0de1ca46358a3460f1972d5cea8f199fd1451490cf3cddc8596212df407fda1b3c977421f29a9ab6112dba62c6d9d56acf590f3bb4e74ecf9430eca8e924f5e683c352b438d86679240ede3452122e0dcb23c2d0c9fbb4db116ef46747eb1a96c069c3ce8fbd29a7c0da3b16ceccbef8987e6f17cc949fbe5d0cc47c92f65b1b861187c17b51515e5f20e4ce9d981a94840115de0fe533bc28a16d4eec7a47fdfe346ef5bfa97130803ba820897661cb8e9abfaf03970be45d19bf6f101e7ffb2e5463ba9743e5d7d62133f651bedb34e2e8e03c4dc425e0f3d30b9f6b2105f3c081e0addb4e45617800fc5fc8e9b346a638266cce7b0a2eb394c7841624d0a05e30d985e76a9c5248010b8ee0ea763abeb7d0ba1e0c709327ae32c7e3e656343d34f6fe9070a8e2ed4e1fbfd0ab0c8fba2285e186cd98b89e745c92ace9dfb31e5ec88ddb5f69a45968f76a18bc1079908742a8137e0c85072301e47ab0f702d408b1e2afedbbfd2915a0b600b2f728365933006252dc2b2611e2422ea0ccfb1ed8bfda89e6d1be4c231982c981f6bad5a77aa30b99dc6091024565e956c393d558c394d11a84f8d180ae010152308bf48a0cdc8cc41f01b155f5e3b3560a96c4cf4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>C++核心编程</title>
    <url>/2020/10/09/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p>
<h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>
<ul>
<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>
<li>全局区：存放全局变量和静态变量以及常量</li>
<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>
<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>
</ul>
<p><strong>内存四区意义：</strong></p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>
<p>​    <strong>代码区：</strong></p>
<p>​        存放 CPU 执行的机器指令</p>
<p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p>​    <strong>全局区：</strong></p>
<p>​        全局变量和静态变量存放在此.</p>
<p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p>​        ==该区域的数据在程序结束后由操作系统释放==.</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204015.png" alt=""></p>
<p>总结：</p>
<ul>
<li>C++中在程序运行前分为全局区和代码区</li>
<li>代码区特点是共享和只读</li>
<li>全局区中存放全局变量、静态变量、常量</li>
<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>
</ul>
<h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​    <strong>栈区：</strong></p>
<p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    <strong>堆区：</strong></p>
<p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>​        在C++中主要利用new在堆区开辟内存</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用new关键字进行开辟内存</p>
<h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p>
<p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>
<p>​    语法：<code>new 数据类型</code></p>
<p>​    利用new创建的数据，会返回该数据对应的类型的指针</p>
<p><strong>示例1： 基本语法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用delete释放堆区数据</span></span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：开辟数组</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆区开辟数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[i] = i + <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放数组 delete 后加 []</span></span><br><span class="line">	<span class="keyword">delete</span>[] arr;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p><strong>作用： </strong>给变量起别名</p>
<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul>
<li>引用必须初始化</li>
<li>引用在初始化后，不可以改变</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="comment">//int &amp;c; //错误，引用必须初始化</span></span><br><span class="line">	<span class="keyword">int</span> &amp;c = a; <span class="comment">//一旦初始化后，就不可以更改</span></span><br><span class="line">	c = b; <span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>
<p><strong>优点：</strong>可以简化指针修改实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap02</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap03</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	mySwap01(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	mySwap02(&amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	mySwap03(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
</blockquote>
<h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：<strong>不要返回局部变量引用</strong></p>
<p>用法：函数调用作为左值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回局部变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回静态变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不能返回局部变量的引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = test01();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果函数做左值，那么必须返回引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref2 = test02();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	test02() = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    </p>
<h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>
<p>讲解示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ref)</span></span>&#123;</span><br><span class="line">	ref = <span class="number">100</span>; <span class="comment">// ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = a; </span><br><span class="line">	ref = <span class="number">20</span>; <span class="comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class="line">    </span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	func(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用使用的场景，通常用来修饰形参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//v += 10;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line">	<span class="comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//函数中利用常量引用防止误操作修改实参</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	showValue(a);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：<code>返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>, <span class="keyword">int</span> c = <span class="number">10</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class="line"><span class="comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">20</span>, <span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	func(<span class="number">10</span>,<span class="number">10</span>); <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p>
<p><strong>函数重载满足条件：</strong></p>
<ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>
</ul>
<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值不可以作为函数重载条件</span></span><br><span class="line"><span class="comment">//int func(double a, int b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	func();</span><br><span class="line">	func(<span class="number">10</span>);</span><br><span class="line">	func(<span class="number">3.14</span>);</span><br><span class="line">	func(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line">	func(<span class="number">3.14</span> , <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul>
<li>引用作为重载条件</li>
<li>函数重载碰到函数默认参数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载注意事项</span></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	func(a); <span class="comment">//调用无const</span></span><br><span class="line">	func(<span class="number">10</span>);<span class="comment">//调用有const</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p>
<p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p>
<p><strong>例如：</strong></p>
<p>​    人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>
<p>​    车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>
<p>​    具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p>
<h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<ul>
<li>将属性和行为作为一个整体，表现生活中的事物</li>
<li>将属性和行为加以权限控制</li>
</ul>
<p><strong>封装意义一：</strong></p>
<p>​    在设计类的时候，属性和行为写在一起，表现事物</p>
<p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>
<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、封装的意义</span></span><br><span class="line"><span class="comment">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个圆类，求圆的周长</span></span><br><span class="line"><span class="comment">//class代表设计一个类，后面跟着的是类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//访问权限  公共的权限</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//行为</span></span><br><span class="line">	<span class="comment">//获取到圆的周长</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//2 * pi  * r</span></span><br><span class="line">		<span class="comment">//获取圆的周长</span></span><br><span class="line">		<span class="keyword">return</span>  <span class="number">2</span> * PI * m_r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过圆类，创建圆的对象</span></span><br><span class="line">	<span class="comment">// c1就是一个具体的圆</span></span><br><span class="line">	Circle c1;</span><br><span class="line">	c1.m_r = <span class="number">10</span>; <span class="comment">//给圆对象的半径 进行赋值操作</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2 * pi * 10 = = 62.8</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p><strong>示例2代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">		m_name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		m_id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_name;</span><br><span class="line">	<span class="keyword">int</span> m_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Student stu;</span><br><span class="line">	stu.setName(<span class="string">&quot;德玛西亚&quot;</span>);</span><br><span class="line">	stu.setID(<span class="number">250</span>);</span><br><span class="line">	stu.showStudent();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>封装意义二：</strong></p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<ol>
<li>public        公共权限  </li>
<li>protected 保护权限</li>
<li>private      私有权限</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三种权限</span></span><br><span class="line"><span class="comment">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="comment">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//姓名  公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//汽车  保护权限</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Car;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//银行卡密码  私有权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">		m_Car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">		m_Password = <span class="number">123456</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	p.m_Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">	<span class="comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class="line">	<span class="comment">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>
<p>区别：</p>
<ul>
<li>struct 默认权限为公共</li>
<li>class   默认权限为私有</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span>  m_A; <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> m_A;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	C1 c1;</span><br><span class="line">	c1.m_A = <span class="number">10</span>; <span class="comment">//错误，访问权限是私有</span></span><br><span class="line"></span><br><span class="line">	C2 c2;</span><br><span class="line">	c2.m_A = <span class="number">10</span>; <span class="comment">//正确，访问权限是公共</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>
<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//姓名设置可读可写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">		m_Name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取年龄 </span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置年龄</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你个老妖精!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置为只写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLover</span><span class="params">(<span class="built_in">string</span> lover)</span> </span>&#123;</span><br><span class="line">		m_Lover = lover;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Name; <span class="comment">//可读可写  姓名</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> m_Age; <span class="comment">//只读  年龄</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Lover; <span class="comment">//只写  情人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	<span class="comment">//姓名设置</span></span><br><span class="line">	p.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄设置</span></span><br><span class="line">	p.setAge(<span class="number">50</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄： &quot;</span> &lt;&lt; p.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置</span></span><br><span class="line">	p.setLover(<span class="string">&quot;苍井&quot;</span>);</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例1：设计立方体类</strong></p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204054.png" alt=""></p>
<p><strong>练习案例2：点和圆的关系</strong></p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204105.png" alt=""></p>
<h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul>
<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>
<li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>
</ul>
<h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>
<p>​    一个对象或者变量没有初始状态，对其使用后果是未知</p>
<p>​    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>
<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>
<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>
<ul>
<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>
<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>
</ul>
<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>
<ol>
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>
</ol>
<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>
<ol>
<li>析构函数，没有返回值也不写void</li>
<li>函数名称与类名相同,在名称前加上符号  ~</li>
<li>析构函数不可以有参数，因此不可以发生重载</li>
<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p>
<p>​    按参数分为： 有参构造和无参构造</p>
<p>​    按类型分为： 普通构造和拷贝构造</p>
<p>三种调用方式：</p>
<p>​    括号法</p>
<p>​    显示法</p>
<p>​    隐式转换法</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、构造函数分类</span></span><br><span class="line"><span class="comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class="line"><span class="comment">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.1  括号法，常用</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line">	<span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.2 显式法</span></span><br><span class="line">	Person p2 = Person(<span class="number">10</span>); </span><br><span class="line">	Person p3 = Person(p2);</span><br><span class="line">	<span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.3 隐式转换法</span></span><br><span class="line">	Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10); </span></span><br><span class="line">	Person p5 = p4; <span class="comment">// Person p5 = Person(p4); </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line">	<span class="comment">//Person p5(p4);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p>
<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
<li>值传递的方式给函数参数传值</li>
<li>以值方式返回局部对象</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Person(<span class="keyword">int</span> age) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = age;</span><br><span class="line">	&#125;</span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = p.mAge;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数在释放内存之前调用</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">man</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">//p对象已经创建完毕</span></span><br><span class="line">	<span class="function">Person <span class="title">newman</span><span class="params">(man)</span></span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">	Person newman2 = man; <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person newman3;</span></span><br><span class="line">	<span class="comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//相当于Person p1 = p;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(Person p1)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//无参构造函数</span></span><br><span class="line">	doWork(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p1;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)&amp;p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p = doWork2();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)&amp;p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line">	test03();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<ul>
<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li>
</ul>
<ul>
<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class="line">	Person p1; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//用户提供的有参</span></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">	Person p4; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//此时如果用户自己没有提供有参，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p6</span><span class="params">(p5)</span></span>; <span class="comment">//用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> age ,<span class="keyword">int</span> height) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		m_age = age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="keyword">int</span>(height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数  </span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class="line">		m_age = p.m_age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (m_height != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_height;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_age;</span><br><span class="line">	<span class="keyword">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
</blockquote>
<h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">////传统方式初始化</span></span><br><span class="line">	<span class="comment">//Person(int a, int b, int c) &#123;</span></span><br><span class="line">	<span class="comment">//	m_A = a;</span></span><br><span class="line">	<span class="comment">//	m_B = b;</span></span><br><span class="line">	<span class="comment">//	m_C = c;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表方式初始化</span></span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) :m_A(a), m_B(b), m_C(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">	p.PrintPerson();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>B类中有对象A作为成员，A为对象成员</p>
<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Phone(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		m_PhoneName = name;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~Phone()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_PhoneName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class="line">	Person(<span class="built_in">string</span> name, <span class="built_in">string</span> pName) :m_Name(name), m_Phone(pName)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="string">&quot; 牌手机! &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line">	Phone m_Phone;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class="line">	<span class="comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line">	<span class="comment">//析构顺序与构造相反</span></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span> , <span class="string">&quot;苹果X&quot;</span>)</span></span>;</span><br><span class="line">	p.playGame();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>
<p>静态成员分为：</p>
<ul>
<li>静态成员变量<ul>
<li>所有对象共享同一份数据</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化</li>
</ul>
</li>
<li>静态成员函数<ul>
<li>所有对象共享同一个函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul>
</li>
</ul>
<p><strong>示例1 ：</strong>静态成员变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员变量特点：</span></span><br><span class="line">	<span class="comment">//1 在编译阶段分配内存</span></span><br><span class="line">	<span class="comment">//2 类内声明，类外初始化</span></span><br><span class="line">	<span class="comment">//3 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_B; <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.m_A = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	Person p2;</span><br><span class="line">	p2.m_A = <span class="number">200</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//共享同一份数据</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong>静态成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数特点：</span></span><br><span class="line">	<span class="comment">//1 程序共享一个函数</span></span><br><span class="line">	<span class="comment">//2 静态成员函数只能访问静态成员变量</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">		<span class="comment">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line">	<span class="keyword">int</span> m_B; <span class="comment">// </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.func();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	Person::func();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person::func2(); //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		mA = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//非静态成员变量占对象空间</span></span><br><span class="line">	<span class="keyword">int</span> mA;</span><br><span class="line">	<span class="comment">//静态成员变量不占对象空间</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> mB; </span><br><span class="line">	<span class="comment">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//静态成员函数也不占对象空间</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Person) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>
<p>this指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this指针不需要定义，直接使用即可</p>
<p>this指针的用途：</p>
<ul>
<li>当形参和成员变量同名时，可用this指针来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">		<span class="comment">//返回对象本身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>
<p>如果用到this指针，需要加以判断保证代码的健壮性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空指针访问成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我是Person类!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; mAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person * p = <span class="literal">NULL</span>;</span><br><span class="line">	p-&gt;ShowClassName(); <span class="comment">//空指针，可以调用成员函数</span></span><br><span class="line">	p-&gt;ShowPerson();  <span class="comment">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p>
<ul>
<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>
<li>常函数内不可以修改成员属性</li>
<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>
</ul>
<p><strong>常对象：</strong></p>
<ul>
<li>声明对象前加const称该对象为常对象</li>
<li>常对象只能调用常函数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		m_A = <span class="number">0</span>;</span><br><span class="line">		m_B = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class="line">	<span class="comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//const Type* const pointer;</span></span><br><span class="line">		<span class="comment">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class="line">		<span class="comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MyFunc</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//mA = 10000;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="keyword">int</span> m_B; <span class="comment">//可修改 可变的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰对象  常对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> Person person; <span class="comment">//常量对象  </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; person.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class="line">	person.m_B = <span class="number">100</span>; <span class="comment">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//常对象访问成员函数</span></span><br><span class="line">	person.MyFunc(); <span class="comment">//常对象不能调用const的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为  ==friend==</p>
<p>友元的三种实现</p>
<ul>
<li>全局函数做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Building()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom; <span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Building b;</span><br><span class="line">	goodGay(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	goodGay();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">goodGay</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay gg;</span><br><span class="line">	gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	goodGay();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>; <span class="comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit2</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay  gg;</span><br><span class="line">	gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;&#125;;</span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//成员函数实现 + 号运算符重载</span></span><br><span class="line">	Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		Person temp;</span><br><span class="line">		temp.m_A = <span class="keyword">this</span>-&gt;m_A + p.m_A;</span><br><span class="line">		temp.m_B = <span class="keyword">this</span>-&gt;m_B + p.m_B;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现 + 号运算符重载</span></span><br><span class="line"><span class="comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span></span><br><span class="line"><span class="comment">//	Person temp(0, 0);</span></span><br><span class="line"><span class="comment">//	temp.m_A = p1.m_A + p2.m_A;</span></span><br><span class="line"><span class="comment">//	temp.m_B = p1.m_B + p2.m_B;</span></span><br><span class="line"><span class="comment">//	return temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符重载 可以发生函数重载 </span></span><br><span class="line">Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p2, <span class="keyword">int</span> val)  </span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p2.m_A + val;</span><br><span class="line">	temp.m_B = p2.m_B + val;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数方式</span></span><br><span class="line">	Person p3 = p2 + p1;  <span class="comment">//相当于 p2.operaor+(p1)</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Person p4 = p3 + <span class="number">10</span>; <span class="comment">//相当于 operator+(p3,10)</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
<p>总结2：不要滥用运算符重载</p>
</blockquote>
<h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line">	<span class="comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//链式编程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
</blockquote>
<h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MyInteger() &#123;</span><br><span class="line">		m_Num = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前置++</span></span><br><span class="line">	MyInteger&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">		<span class="comment">//先++</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="comment">//再返回</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置++</span></span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">		<span class="comment">//先返回</span></span><br><span class="line">		MyInteger temp = *<span class="keyword">this</span>; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ++myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++ 先返回 再++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 前置递增返回引用，后置递增返回值</p>
</blockquote>
<h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p>
<ol>
<li>默认构造函数(无参，函数体为空)</li>
<li>默认析构函数(无参，函数体为空)</li>
<li>默认拷贝构造函数，对属性进行值拷贝</li>
<li>赋值运算符 operator=, 对属性进行值拷贝</li>
</ol>
<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//将年龄数据开辟到堆区</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载赋值运算符 </span></span><br><span class="line">	Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line">		<span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_Age);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回自身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄的指针</span></span><br><span class="line">	<span class="keyword">int</span> *m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int a = 10;</span></span><br><span class="line">	<span class="comment">//int b = 20;</span></span><br><span class="line">	<span class="comment">//int c = 30;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//c = b = a;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//int a = 0;</span></span><br><span class="line">	<span class="comment">//int b = 0;</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">a</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">b</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a == b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a != b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul>
<li>函数调用运算符 ()  也可以重载</li>
<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>
<li>仿函数没有固定写法，非常灵活</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> text)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; text &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line">	MyPrint myFunc;</span><br><span class="line">	myFunc(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 + v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyAdd add;</span><br><span class="line">	<span class="keyword">int</span> ret = add(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//匿名对象调用  </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; MyAdd()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204150.png" alt=""></p>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p><strong>普通实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.header();</span><br><span class="line">	ja.footer();</span><br><span class="line">	ja.left();</span><br><span class="line">	ja.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Python py;</span><br><span class="line">	py.header();</span><br><span class="line">	py.footer();</span><br><span class="line">	py.left();</span><br><span class="line">	py.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.header();</span><br><span class="line">	cp.footer();</span><br><span class="line">	cp.left();</span><br><span class="line">	cp.content();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>继承实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.header();</span><br><span class="line">	ja.footer();</span><br><span class="line">	ja.left();</span><br><span class="line">	ja.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Python py;</span><br><span class="line">	py.header();</span><br><span class="line">	py.footer();</span><br><span class="line">	py.left();</span><br><span class="line">	py.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.header();</span><br><span class="line">	cp.footer();</span><br><span class="line">	cp.left();</span><br><span class="line">	cp.content();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>继承的好处：==可以减少重复的代码==</p>
<p>class A : public B; </p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p><strong>派生类中的成员，包含两大部分</strong>：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>
<p><strong>继承方式一共有三种：</strong></p>
<ul>
<li>公共继承</li>
<li>保护继承</li>
<li>私有继承</li>
</ul>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204211.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> :</span><span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 public权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son1 s1;</span><br><span class="line">	s1.m_A; <span class="comment">//其他类只能访问到公共权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span><span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son2 s;</span><br><span class="line">	<span class="comment">//s.m_A; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span><span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 private权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 private权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandSon3</span> :</span><span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class="line">		<span class="comment">//m_A;</span></span><br><span class="line">		<span class="comment">//m_B;</span></span><br><span class="line">		<span class="comment">//m_C;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用工具查看：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204222.png" alt=""></p>
<p>打开工具窗口后，定位到当前CPP文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p>
<p>效果如下图：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204234.png" alt=""></p>
<blockquote>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
</blockquote>
<h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Base()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Son()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">	Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
</blockquote>
<h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class="line">	<span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	s.func();</span><br><span class="line">	s.Base::func();</span><br><span class="line">	s.Base::func(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>子类对象可以直接访问到子类中同名成员</li>
<li>子类对象加作用域可以访问到父类同名成员</li>
<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>
</ol>
<h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过类名访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son s;</span><br><span class="line">	s.func();</span><br><span class="line">	s.Base::func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son::func();</span><br><span class="line">	Son::Base::func();</span><br><span class="line">	<span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">	Son::Base::func(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
</blockquote>
<h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p>
<p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p><strong>C++实际开发中不建议用多继承</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base1()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base2()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;  <span class="comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		m_C = <span class="number">300</span>;</span><br><span class="line">		m_D = <span class="number">400</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; s.Base1::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; s.Base2::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
</blockquote>
<h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p>
<p>​    两个派生类继承同一个基类</p>
<p>​    又有某个类同时继承者两个派生类</p>
<p>​    这种继承被称为菱形继承，或者钻石继承</p>
<p><strong>典型的菱形继承案例：</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204252.jpg" alt=""></p>
<p><strong>菱形继承问题：</strong></p>
<ol>
<li><p>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</p>
</li>
<li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>   :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span> <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">	st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>
<li>利用虚继承可以解决菱形继承问题</li>
</ul>
<h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p>
<p>多态分为两类</p>
<ul>
<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>
<li>动态多态: 派生类和虚函数实现运行时多态</li>
</ul>
<p>静态多态和动态多态区别：</p>
<ul>
<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>
</ul>
<p>下面通过案例进行讲解多态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//Speak函数就是虚函数</span></span><br><span class="line">	<span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSpeak</span><span class="params">(Animal &amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cat cat;</span><br><span class="line">	DoSpeak(cat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Dog dog;</span><br><span class="line">	DoSpeak(dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>多态满足条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
<p>多态使用条件</p>
<ul>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>
<h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<ul>
<li>代码组织结构清晰</li>
<li>可读性强</li>
<li>利于前期和后期的扩展以及维护</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="built_in">string</span> oper)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果要提供新的运算，需要修改源码</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//普通实现测试</span></span><br><span class="line">	Calculator c;</span><br><span class="line">	c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">	c.m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;+&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;-&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;*&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态实现</span></span><br><span class="line"><span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//创建加法计算器</span></span><br><span class="line">	AbstractCalculator *abc = <span class="keyword">new</span> AddCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;  <span class="comment">//用完了记得销毁</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建减法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;  </span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建乘法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> MulCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
</blockquote>
<h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>
<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>
<p>当类中有了纯虚函数，这个类也称为==抽象类==</p>
<p><strong>抽象类特点</strong>：</p>
<ul>
<li>无法实例化对象</li>
<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//纯虚函数</span></span><br><span class="line">	<span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line">	<span class="comment">//抽象类无法实例化对象</span></span><br><span class="line">	<span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Base * base = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">	base = <span class="keyword">new</span> Son;</span><br><span class="line">	base-&gt;func();</span><br><span class="line">	<span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p>
<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204307.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象制作饮品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//规定流程</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MakeDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Boil();</span><br><span class="line">		Brew();</span><br><span class="line">		PourInCup();</span><br><span class="line">		PutSomething();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入牛奶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮自来水!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入枸杞!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(AbstractDrinking* drink)</span> </span>&#123;</span><br><span class="line">	drink-&gt;MakeDrink();</span><br><span class="line">	<span class="keyword">delete</span> drink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	DoWork(<span class="keyword">new</span> Coffee);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	DoWork(<span class="keyword">new</span> Tea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>
<p>虚析构和纯虚析构共性：</p>
<ul>
<li>可以解决父类指针释放子类对象</li>
<li>都需要有具体的函数实现</li>
</ul>
<p>虚析构和纯虚析构区别：</p>
<ul>
<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>
</ul>
<p>虚析构语法：</p>
<p><code>virtual ~类名()&#123;&#125;</code></p>
<p>纯虚析构语法：</p>
<p><code>virtual ~类名() = 0;</code></p>
<p><code>类名::~类名()&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Animal()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class="line">	<span class="comment">//virtual ~Animal()</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">virtual</span> ~Animal() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~Animal()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Cat(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt;  <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Cat()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Name;</span><br><span class="line">			m_Name = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> *m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Animal *animal = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	animal-&gt;Speak();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line">	<span class="comment">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class="line">	<span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line">	<span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>​    1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
<p>​    2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
<p>​    3. 拥有纯虚析构函数的类也属于抽象类</p>
<h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的计算函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的显示函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的存储函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Computer(CPU * cpu, VideoCard * vc, Memory * mem)</span><br><span class="line">	&#123;</span><br><span class="line">		m_cpu = cpu;</span><br><span class="line">		m_vc = vc;</span><br><span class="line">		m_mem = mem;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供工作的函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//让零件工作起来，调用接口</span></span><br><span class="line">		m_cpu-&gt;calculate();</span><br><span class="line"></span><br><span class="line">		m_vc-&gt;display();</span><br><span class="line"></span><br><span class="line">		m_mem-&gt;storage();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供析构函数 释放3个电脑零件</span></span><br><span class="line">	~Computer()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放CPU零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_cpu;</span><br><span class="line">			m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放显卡零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_vc;</span><br><span class="line">			m_vc = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放内存条零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_mem;</span><br><span class="line">			m_mem = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	CPU * m_cpu; <span class="comment">//CPU的零件指针</span></span><br><span class="line">	VideoCard * m_vc; <span class="comment">//显卡零件指针</span></span><br><span class="line">	Memory * m_mem; <span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体厂商</span></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//第一台电脑零件</span></span><br><span class="line">	CPU * intelCpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">	VideoCard * intelCard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">	Memory * intelMem = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//创建第一台电脑</span></span><br><span class="line">	Computer * computer1 = <span class="keyword">new</span> Computer(intelCpu, intelCard, intelMem);</span><br><span class="line">	computer1-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer1;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//第二台电脑组装</span></span><br><span class="line">	Computer * computer2 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer2-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer2;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//第三台电脑组装</span></span><br><span class="line">	Computer * computer3 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> IntelVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer3-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过<strong>文件可以将数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>
<p>文件类型分为两种：</p>
<ol>
<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>
<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>
</ol>
<p>操作文件的三大类:</p>
<ol>
<li>ofstream：写操作</li>
<li>ifstream： 读操作</li>
<li>fstream ： 读写操作</li>
</ol>
<h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p> #include <fstream\></p>
</li>
<li><p>创建流对象  </p>
<p> ofstream ofs;</p>
</li>
<li><p>打开文件</p>
<p> ofs.open(“文件路径”,打开方式);</p>
</li>
<li><p>写数据</p>
<p> ofs &lt;&lt; “写入的数据”;</p>
</li>
<li><p>关闭文件</p>
<p> ofs.close();</p>
</li>
</ol>
<p>文件打开方式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr>
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr>
<td>ios::ate</td>
<td>初始位置：文件尾</td>
</tr>
<tr>
<td>ios::app</td>
<td>追加方式写文件</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果文件存在先删除，再创建</td>
</tr>
<tr>
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>
<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件操作必须包含头文件 fstream</li>
<li>读文件可以利用 ofstream  ，或者fstream类</li>
<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>
<li>利用&lt;&lt;可以向文件中写数据</li>
<li>操作完毕，要关闭文件</li>
</ul>
<h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p> #include <fstream\></p>
</li>
<li><p>创建流对象  </p>
<p> ifstream ifs;</p>
</li>
<li><p>打开文件并判断文件是否打开成功</p>
<p> ifs.open(“文件路径”,打开方式);</p>
</li>
<li><p>读数据</p>
<p> 四种方式读取</p>
</li>
<li><p>关闭文件</p>
<p> ifs.close();</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.open(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一种方式</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs &gt;&gt; buf)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第三种</span></span><br><span class="line">	<span class="comment">//string buf;</span></span><br><span class="line">	<span class="comment">//while (getline(ifs, buf))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">while</span> ((c = ifs.get()) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>读文件可以利用 ifstream  ，或者fstream类</li>
<li>利用is_open函数可以判断文件是否打开成功</li>
<li>close 关闭文件 </li>
</ul>
<h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 ==ios::binary==</p>
<h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件  写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1、包含头文件</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、创建输出流对象</span></span><br><span class="line">	<span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3、打开文件</span></span><br><span class="line">	<span class="comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span></span><br><span class="line"></span><br><span class="line">	Person p = &#123;<span class="string">&quot;张三&quot;</span>  , <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4、写文件</span></span><br><span class="line">	ofs.write((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5、关闭文件</span></span><br><span class="line">	ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>
</ul>
<h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	ifs.read((<span class="keyword">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>
</ul>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL-简单点云可视化</title>
    <url>/2020/10/09/PCL-%E7%AE%80%E5%8D%95%E7%82%B9%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PCL-简单点云可视化"><a href="#PCL-简单点云可视化" class="headerlink" title="PCL-简单点云可视化"></a>PCL-简单点云可视化</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"><span class="comment">//简单点云可视化</span></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> user_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 回调函数，只能调用一次的回调函数</span></span><br><span class="line"><span class="comment">/// 对可视化对象背景的颜色设置，添加一个圆球几何体</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;viewer&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerOneOff</span><span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//背景</span></span><br><span class="line">    viewer.setBackgroundColor(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="comment">//存储球心位置</span></span><br><span class="line">    pcl::PointXYZ o;</span><br><span class="line">    o.x = <span class="number">1.0</span>;</span><br><span class="line">    o.y = <span class="number">0</span>;</span><br><span class="line">    o.z = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//添加圆球几何对象</span></span><br><span class="line">    viewer.addSphere(o, <span class="number">0.25</span>, <span class="string">&quot;sphere&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;i only run once&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 渲染输出时每次都调用的回调函数</span></span><br><span class="line"><span class="comment">/// 每帧都执行一次</span></span><br><span class="line"><span class="comment">/// 在可视化对象中添加一个刷新显示字符串</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;viewer&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerPsycho</span><span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;Once per viewer loop: &quot;</span> &lt;&lt; count++;</span><br><span class="line">    viewer.removeShape(<span class="string">&quot;text&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    viewer.addText(ss.str(), <span class="number">200</span>, <span class="number">300</span>, <span class="string">&quot;text&quot;</span>, <span class="number">0</span>); </span><br><span class="line">    <span class="comment">//<span class="doctag">FIXME:</span> possible race condition here:</span></span><br><span class="line">    user_data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;)</span></span>;</span><br><span class="line">    pcl::io::loadPCDFile(<span class="string">&quot;my_point_cloud.pcd&quot;</span>, *cloud);</span><br><span class="line"></span><br><span class="line">    pcl::<span class="function">visualization::CloudViewer <span class="title">viewer</span><span class="params">(<span class="string">&quot;Cloud Viewer&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//showCloud函数是同步的，在此处等待直到渲染显示为止</span></span><br><span class="line">    viewer.showCloud(cloud);</span><br><span class="line">    <span class="comment">//该注册函数在可视化时只调用一次</span></span><br><span class="line">    viewer.runOnVisualizationThreadOnce(viewerOneOff);</span><br><span class="line">    <span class="comment">//该注册函数在渲染输出时每次都调用</span></span><br><span class="line">    viewer.runOnVisualizationThread(viewerPsycho);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!viewer.wasStopped())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在此处可以添加其他处理</span></span><br><span class="line">        user_data++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL-kdtree实现快速邻域搜索</title>
    <url>/2020/10/09/PCL-kdtree%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E9%82%BB%E5%9F%9F%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PCL-kdtree实现快速邻域搜索"><a href="#PCL-kdtree实现快速邻域搜索" class="headerlink" title="PCL-kdtree实现快速邻域搜索"></a>PCL-kdtree实现快速邻域搜索</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/kdtree/kdtree_flann.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"><span class="comment">//PCL中实现快速邻域搜索</span></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//用系统时间初始化随机种子</span></span><br><span class="line">	srand(time(<span class="literal">NULL</span>));</span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">	<span class="comment">//随机点云生成</span></span><br><span class="line">	cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">	cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建KdTreeFLANN类型对象，kdtree</span></span><br><span class="line">	pcl::KdTreeFLANN&lt;pcl::PointXYZ&gt;kdtree;</span><br><span class="line">	<span class="comment">//设置搜索空间</span></span><br><span class="line">	kdtree.setInputCloud(cloud);</span><br><span class="line">	<span class="comment">//定义查询点并赋随机值</span></span><br><span class="line">	pcl::PointXYZ searchPoint;</span><br><span class="line">	searchPoint.x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="comment">// k近邻搜索</span></span><br><span class="line">	<span class="keyword">int</span> K = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//定义向量pointIdxNKNSearch，存储查询点邻近索引</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pointIdxNKNSearch(K);</span><br><span class="line">	<span class="comment">//定义向量pointNKNSquaredDistance，存储近邻点对应平方距离</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;pointNKNSquaredDistance(K);</span><br><span class="line">	<span class="comment">//打印相关信息</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;K nearest neighbor search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with K=&quot;</span> &lt;&lt; K &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (kdtree.nearestKSearch(searchPoint, K, pointIdxNKNSearch, pointNKNSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="comment">//执行K邻近搜索，返回值是近邻的个数</span></span><br><span class="line">		<span class="comment">//searchPoint，查询点</span></span><br><span class="line">		<span class="comment">//K，10</span></span><br><span class="line">		<span class="comment">//pointIdxNKNSearch，存储查询点近邻索引的向量</span></span><br><span class="line">		<span class="comment">//pointNKNSquaredDistance，存储近邻点对应的平方距离</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//打印输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxNKNSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointNKNSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 在半径r内搜索近邻</span></span><br><span class="line">	<span class="comment">//重新定义两个向量，存储近邻索引与对应平方距离</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pointIdxRadiusSearch;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; pointRadiusSquaredDistance;</span><br><span class="line">	<span class="comment">//定义随机数r</span></span><br><span class="line">	<span class="keyword">float</span> radius = <span class="number">256.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="comment">//打印相关信息</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (kdtree.radiusSearch(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="comment">//执行r内邻近搜索，返回值是近邻的个数</span></span><br><span class="line">		<span class="comment">//searchPoint，查询点</span></span><br><span class="line">		<span class="comment">//radius，半径</span></span><br><span class="line">		<span class="comment">//pointIdxRadiusSearch，存储查询点近邻索引的向量</span></span><br><span class="line">		<span class="comment">//pointRadiusSquaredDistance，存储近邻点对应的平方距离</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//打印输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础入门</title>
    <url>/2020/10/08/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155005.png" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155020.png" alt=""></p>
<h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155041.png" alt=""></p>
<p>给C++文件起个名称，然后点击添加即可。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155125.png" alt=""></p>
<h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155146.png" alt=""></p>
<h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol>
<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>
</ul>
</li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>
<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>
</ul>
</li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//变量的定义</span></span><br><span class="line">	<span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol>
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>
<li>==通常在文件上方定义==，表示一个常量</li>
</ul>
</li>
</ol>
<ol>
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>
<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot; 天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、const修饰变量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">12</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; 个月份&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
</tr>
</tbody>
</table>
</div>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>
</blockquote>
<h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>
<p>浮点型变量分为两种：</p>
<ol>
<li>单精度float </li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; f1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(f1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(d1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学计数法</span></span><br><span class="line">	<span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用==1个字节==。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class="line">	<span class="comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">	ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ASCII码表格：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>\</td>
<td></td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
</div>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>
<p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td><strong>\\</strong></td>
<td><strong>代表一个反斜线字符”\”</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>\’</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>\”</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>\?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0~9，a~f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody>
</table>
</div>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\tHello&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol>
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>
<p> 示例：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
</li>
<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>
<p> 示例：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include\<string>==</p>
</blockquote>
<h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>
<p>bool类型只有两个值：</p>
<ul>
<li>true  —- 真（本质是1）</li>
<li>false —- 假（本质是0）</li>
</ul>
<p><strong>bool类型占==1个字节==大小</strong></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//整型输入</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//浮点型输入</span></span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符型输入</span></span><br><span class="line">	<span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串型输入</span></span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//布尔类型输入</span></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; flag;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>
<p>算术运算符包括以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>—</td>
<td>前置递减</td>
<td>a=2; b=—a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>—</td>
<td>后置递减</td>
<td>a=2; b=a—;</td>
<td>a=1; b=2;</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 + b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 - b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 * b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 / b1 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 / b2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数可以相除</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1 / d2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 % b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数不可以取模</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//前置递增</span></span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	++b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//区别</span></span><br><span class="line">	<span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// =</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// +=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// -=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// *=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// /=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// %=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>></td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>>=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a == b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a != b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>
</blockquote>
<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>\</td>
<td>\</td>
<td></td>
<td>或</td>
<td>a \</td>
<td>\</td>
<td>b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例1：</strong>逻辑非</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !!a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>
</blockquote>
<h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p>
</li>
<li><p>多行格式if语句</p>
</li>
<li><p>多条件的if语句</p>
</li>
</ul>
<ol>
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<p> <img src="https://gitee.com/JunLuJun/up/raw/master/20201008155230.png" alt=""></p>
</li>
</ol>
<pre><code>示例：

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//选择结构-单行if语句</span></span><br><span class="line">    	<span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line">    </span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//if语句</span></span><br><span class="line">    	<span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line">    	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol>
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155302.png" alt=""></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155326.png" alt=""></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了北大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了清华&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了人大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155344.jpg" alt=""></p>
<h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	c = a &gt; b ? a : b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">	(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//请给电影评分 </span></span><br><span class="line">	<span class="comment">//10 ~ 9   经典   </span></span><br><span class="line">	<span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line">	<span class="comment">// 6 ~ 5   一般</span></span><br><span class="line">	<span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请给电影打分&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (score)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;非常好&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155407.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>==猜数字==</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155419.jpg" alt=""></p>
<h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155435.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>详解：</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155455.png" alt=""></p>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<p><img src="\iframe\timg.gif" alt=""></p>
<h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155627.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155637.jpg" alt=""></p>
<h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1、普通&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2、中等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3、困难&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (num)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2、在循环语句中用break</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	FLAG:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>
<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155650.png" alt=""></p>
<h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式1</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line">	<span class="keyword">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标赋值</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标输出</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种定义方式</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line">	<span class="keyword">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//逐个输出</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="keyword">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组名用途</span></span><br><span class="line">	<span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155703.png" alt=""></p>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155713.png" alt=""></p>
<h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>
<ol>
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code>数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>
</blockquote>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式1  </span></span><br><span class="line">	<span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式4 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//二维数组数组名</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody>
</table>
</div>
<p><strong>参考答案：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += scores[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型 </p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句 </p>
<p>5、return 表达式</p>
<p><strong>语法：</strong> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code>函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//调用add函数</span></span><br><span class="line">	<span class="keyword">int</span> sum = add(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	sum = add(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，==如果形参发生，并不会影响实参==</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2 = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = a + b;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; max(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件  </li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p>
</li>
<li><p>可以利用指针变量保存地址</p>
</li>
</ul>
<h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、指针的定义</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量赋值</span></span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印数据a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、指针的使用</span></span><br><span class="line">	<span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
<p>总结2：利用指针可以记录地址</p>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//* 解引用</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问空指针报错 </span></span><br><span class="line">	<span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问野指针报错 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>
<ol>
<li>const修饰指针   —- 常量指针</li>
<li>const修饰常量   —- 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * p1 = &amp;a; </span><br><span class="line">	p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line">	<span class="comment">//*p1 = 100;  报错</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line">	<span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">	<span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">	*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line">	<span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line">	<span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//利用指针遍历数组</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b; </span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	swap1(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">	swap2(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len);</span><br><span class="line"></span><br><span class="line">	printArray(arr, len);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>
<h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式1</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span> <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">	stu1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	stu1.age = <span class="number">18</span>;</span><br><span class="line">	stu1.score = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式2</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	stu3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">	stu3.age = <span class="number">18</span>;</span><br><span class="line">	stu3.score = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>
</blockquote>
<h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//结构体数组</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> =</span> &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span> =</span> &amp;stu;</span><br><span class="line">	</span><br><span class="line">	p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">	<span class="keyword">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//教师姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span> <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">	t1.id = <span class="number">10000</span>;</span><br><span class="line">	t1.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">	t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">	t1.stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	t1.stu.age = <span class="number">18</span>;</span><br><span class="line">	t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu.age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line">	<span class="comment">//值传递</span></span><br><span class="line">	printStudent(stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址传递</span></span><br><span class="line">	printStudent2(&amp;stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(<span class="keyword">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">	printStudent(&amp;stu);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> tName = <span class="string">&quot;教师&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tArray[i].name = tName + nameSeed[i];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">			tArray[i].sArray[j].score = rand() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">	Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArray) / <span class="keyword">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line">	allocateSpace(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">	printTeachers(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="built_in">string</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">			&#123;</span><br><span class="line">				hero temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hero</span> <span class="title">arr</span>[5] =</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">	printHeros(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>AzureKinectDK与PCL点云生成</title>
    <url>/2020/10/08/AzureKinectDC%E4%B8%8EPCL%E7%82%B9%E4%BA%91%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AzureKinectDK与PCL点云生成"><a href="#AzureKinectDK与PCL点云生成" class="headerlink" title="AzureKinectDK与PCL点云生成"></a>AzureKinectDK与PCL点云生成</h1><blockquote>
<p>参考博文：</p>
<p><a href="https://blog.csdn.net/weixin_39746114/article/details/107835727">https://blog.csdn.net/weixin_39746114/article/details/107835727</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008095211.jpg" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008095233.jpg" alt=""></p>
<h2 id="AzureKinectDK"><a href="#AzureKinectDK" class="headerlink" title="AzureKinectDK"></a>AzureKinectDK</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008094515.png" style="zoom:50%;" /></p>
<p>Azure Kinect DK 是一款开发人员套件和 PC 外部设备，它搭载 100 万像素高级深度摄像头、360˚ 麦克风阵列，1200万像素全高清摄像头和方向传感器，适用于先进的计算机视觉和语音模型开发。它的长度不到13厘米，厚度仅为4厘米。</p>
<p>系统要求：采用第7代 Intel® CoreTM i3 处理器（双核 2.4GHz 包含 HD620 GPU 或更快）的 Windows 10® 计算机、USB 3.0 端口、4GB 内存。不支持 Windows 10 S 模式。人体跟踪等其他功能可能需要更高级的 PC 硬件。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008094609.jpg" alt=""></p>
<ol>
<li>100 万像素深度传感器，具有宽、窄视场角 (FOV) 选项，可针对应用程序进行优化</li>
<li>7 麦克风阵列，可用于远场语音和声音捕获</li>
<li>1200 万像素 RGB 摄像头，提供和深度数据匹配的彩色图像数据流</li>
<li>加速计和陀螺仪 (IMU)，可用于传感器方向和空间跟踪</li>
<li>外部同步引脚，可轻松同步多个 Kinect 设备的传感器数据流</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol>
<li><p>main.cpp</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/make_shared.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;k4a_grabber.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/filters/passthrough.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> pcl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZRGBA PointType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerOneOff</span><span class="params">(visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	viewer.setBackgroundColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//设置背景颜色为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">uint32_t</span> deviceCount = k4a::device::get_installed_count();</span><br><span class="line">	<span class="keyword">if</span> (deviceCount == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no azure kinect devices detected!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// PCL Visualizer</span></span><br><span class="line">	<span class="function">boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; <span class="title">viewer</span><span class="params">(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">&quot;Point Cloud Viewer&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义初始点云</span></span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 回调函数</span></span><br><span class="line">	boost::mutex mutex;</span><br><span class="line">	boost::function&lt;<span class="keyword">void</span>(<span class="keyword">const</span> pcl::PointCloud&lt;PointType&gt;::ConstPtr&amp;)&gt; function =</span><br><span class="line">		[&amp;cloud, &amp;mutex](<span class="keyword">const</span> pcl::PointCloud&lt;PointType&gt;::ConstPtr&amp; ptr)</span><br><span class="line">	&#123;</span><br><span class="line">		boost::mutex::scoped_lock lock(mutex);</span><br><span class="line">		<span class="comment">//-----------------------------------------</span></span><br><span class="line">		<span class="comment">/* Point Cloud Processing */</span></span><br><span class="line">		<span class="comment">//-----------------------------------------</span></span><br><span class="line">		cloud = ptr-&gt;makeShared();</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义grabber</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::Grabber&gt; grabber =</span><br><span class="line">		boost::make_shared&lt;pcl::KinectAzureDKGrabber&gt;(<span class="number">0</span>, K4A_DEPTH_MODE_WFOV_2X2BINNED, K4A_IMAGE_FORMAT_COLOR_BGRA32, K4A_COLOR_RESOLUTION_720P);</span><br><span class="line">	<span class="comment">//强制类型转换</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::KinectAzureDKGrabber&gt; grabber_ = boost::dynamic_pointer_cast&lt;pcl::KinectAzureDKGrabber&gt;(grabber);</span><br><span class="line">	<span class="comment">//注册回调函数</span></span><br><span class="line">	boost::signals2::connection connection = grabber-&gt;registerCallback(function);</span><br><span class="line">	<span class="comment">//开始</span></span><br><span class="line">	grabber-&gt;start();</span><br><span class="line"></span><br><span class="line">	k4a::calibration calibration = grabber_-&gt;getCalibration();</span><br><span class="line">	<span class="keyword">k4a_calibration_intrinsic_parameters_t</span>* intrinsics = &amp;calibration.color_camera_calibration.intrinsics.parameters;</span><br><span class="line">	Eigen::Matrix3f intrinsics_eigen;</span><br><span class="line">	intrinsics_eigen &lt;&lt;</span><br><span class="line">		intrinsics-&gt;param.fx, <span class="number">0.0f</span>, intrinsics-&gt;param.cx,</span><br><span class="line">		<span class="number">0.0f</span>, intrinsics-&gt;param.fy, intrinsics-&gt;param.cy,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>;</span><br><span class="line">	<span class="comment">/*Eigen::Matrix4f extrinsics_eigen = Eigen::Matrix4f::Identity();*/</span></span><br><span class="line">	Eigen::Matrix4f extrinsics_eigen;</span><br><span class="line">	extrinsics_eigen &lt;&lt; <span class="number">-1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>; <span class="comment">//看起来方向是正确的 </span></span><br><span class="line">	viewer-&gt;setCameraParameters(intrinsics_eigen, extrinsics_eigen);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示采集到的点云数据</span></span><br><span class="line">	<span class="keyword">while</span> (!viewer-&gt;wasStopped())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Update Viewer</span></span><br><span class="line">		viewer-&gt;spinOnce();</span><br><span class="line">		boost::<span class="function">mutex::scoped_try_lock <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (lock.owns_lock() &amp;&amp; cloud)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//pcl::PassThrough&lt;pcl::PointXYZRGBA&gt; pass;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">//pass.setInputCloud(cloud);            //设置输入点云</span></span><br><span class="line">			<span class="comment">//pass.setFilterFieldName(&quot;z&quot;);         //设置过滤时所需要点云类型的Z字段</span></span><br><span class="line">			<span class="comment">//pass.setFilterLimits(0.5, 1.08);        //设置在过滤字段的范围</span></span><br><span class="line">			<span class="comment">//pass.setFilterLimitsNegative(true);   //设置保留范围内还是过滤掉范围内</span></span><br><span class="line">			<span class="comment">//pass.filter(*cloud);            //执行滤波，保存过滤结果在cloud_filtered</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// Update Point Cloud</span></span><br><span class="line">			<span class="keyword">if</span> (!viewer-&gt;updatePointCloud(cloud, <span class="string">&quot;cloud&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				viewer-&gt;addPointCloud(cloud, <span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (_kbhit())</span><br><span class="line">		&#123;</span><br><span class="line">			grabber-&gt;stop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Stop Grabber</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	pcl::<span class="function">visualization::CloudViewer <span class="title">pviewer</span><span class="params">(<span class="string">&quot;Cloud Viewer&quot;</span>)</span></span>;     <span class="comment">//创建viewer对象</span></span><br><span class="line">	pviewer.showCloud(cloud);</span><br><span class="line">	pviewer.runOnVisualizationThreadOnce(viewerOneOff);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Disconnect Callback Function</span></span><br><span class="line">	<span class="keyword">if</span> (connection.connected())</span><br><span class="line">	&#123;</span><br><span class="line">		connection.disconnect();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>k4a_grabber.h</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/boost.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/grabber.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pcl</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZ;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZI;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZRGB;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZRGBA;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">pcl</span>:</span>:PointCloud;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">KinectAzureDKGrabber</span> :</span> <span class="keyword">public</span> pcl::Grabber</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		KinectAzureDKGrabber(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_);</span><br><span class="line">		<span class="keyword">virtual</span> ~KinectAzureDKGrabber() <span class="keyword">throw</span> ();</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">isRunning</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">getFramesPerSecond</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZ)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZI)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZI&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZRGB)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZRGB&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZRGBA)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;&gt;&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setupDevice</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_)</span></span>;</span><br><span class="line"></span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZ&gt;* signal_PointXYZ;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZI&gt;* signal_PointXYZI;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZRGB&gt;* signal_PointXYZRGB;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZRGBA&gt;* signal_PointXYZRGBA;</span><br><span class="line"></span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">convertDepthToPointXYZ</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZI&gt;::<span class="function">Ptr <span class="title">convertInfraredDepthToPointXYZI</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZRGB&gt;::<span class="function">Ptr <span class="title">convertRGBDepthToPointXYZRGB</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">convertRGBADepthToPointXYZRGBA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::thread thread;</span><br><span class="line">		<span class="keyword">mutable</span> <span class="built_in">std</span>::mutex mutex;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">threadFunction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> quit;</span><br><span class="line">		<span class="keyword">bool</span> running;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">k4a_device_configuration_t</span> config;</span><br><span class="line">		k4a::device dev;</span><br><span class="line">		<span class="keyword">int</span> device_id;</span><br><span class="line"></span><br><span class="line">		k4a::calibration calibration;</span><br><span class="line">		k4a::transformation transformation;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> colorWidth;</span><br><span class="line">		<span class="keyword">int</span> colorHeight;</span><br><span class="line">		k4a::image colorImage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> depthWidth;</span><br><span class="line">		<span class="keyword">int</span> depthHeight;</span><br><span class="line">		k4a::image depthImage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> infraredWidth;</span><br><span class="line">		<span class="keyword">int</span> infraredHeight;</span><br><span class="line">		k4a::image infraredImage;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">		<span class="function">k4a::calibration <span class="title">getCalibration</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>k4a_grabber.cpp</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;k4a_grabber.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">pcl::KinectAzureDKGrabber::KinectAzureDKGrabber(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_) :</span><br><span class="line">	config(K4A_DEVICE_CONFIG_INIT_DISABLE_ALL),</span><br><span class="line">	dev(<span class="literal">nullptr</span>),</span><br><span class="line">	colorImage(<span class="literal">nullptr</span>),</span><br><span class="line">	depthImage(<span class="literal">nullptr</span>),</span><br><span class="line">	infraredImage(<span class="literal">nullptr</span>),</span><br><span class="line">	running(<span class="literal">false</span>),</span><br><span class="line">	quit(<span class="literal">false</span>),</span><br><span class="line">	signal_PointXYZ(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZI(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZRGB(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZRGBA(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">	setupDevice(device_id_, depth_mode_, color_format_, color_resolution_);</span><br><span class="line"></span><br><span class="line">	signal_PointXYZ = createSignal&lt;signal_KinectAzureDK_PointXYZ&gt;();</span><br><span class="line">	signal_PointXYZI = createSignal&lt;signal_KinectAzureDK_PointXYZI&gt;();</span><br><span class="line">	signal_PointXYZRGB = createSignal&lt;signal_KinectAzureDK_PointXYZRGB&gt;();</span><br><span class="line">	signal_PointXYZRGBA = createSignal&lt;signal_KinectAzureDK_PointXYZRGBA&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::KinectAzureDKGrabber::~KinectAzureDKGrabber() <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">	stop();</span><br><span class="line"></span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZ&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZI&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZRGB&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZRGBA&gt;();</span><br><span class="line"></span><br><span class="line">	thread.join();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dev)</span><br><span class="line">	&#123;</span><br><span class="line">		transformation.destroy();</span><br><span class="line">		dev.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::start()</span><br><span class="line">&#123;</span><br><span class="line">	dev = k4a::device::open(device_id);</span><br><span class="line">	dev.start_cameras(&amp;config);</span><br><span class="line">	calibration = dev.get_calibration(config.depth_mode, config.color_resolution);</span><br><span class="line">	transformation = k4a::transformation(calibration);</span><br><span class="line"></span><br><span class="line">	running = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	thread = <span class="built_in">std</span>::thread(&amp;KinectAzureDKGrabber::threadFunction, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">k4a::calibration pcl::KinectAzureDKGrabber::getCalibration()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> calibration;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::stop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">	quit = <span class="literal">true</span>;</span><br><span class="line">	running = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> pcl::KinectAzureDKGrabber::isRunning() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> running;</span><br><span class="line"></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pcl::KinectAzureDKGrabber::getName() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;KinectAzureDKGrabber: &quot;</span> + <span class="built_in">std</span>::to_string(device_id));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> pcl::KinectAzureDKGrabber::getFramesPerSecond() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> config.camera_fps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::setupDevice(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_)</span><br><span class="line">&#123;</span><br><span class="line">	device_id = device_id_;</span><br><span class="line"></span><br><span class="line">	config.camera_fps = K4A_FRAMES_PER_SECOND_30;</span><br><span class="line">	config.depth_mode = <span class="keyword">k4a_depth_mode_t</span>(depth_mode_);</span><br><span class="line">	config.color_format = <span class="keyword">k4a_image_format_t</span>(color_format_);</span><br><span class="line">	config.color_resolution = <span class="keyword">k4a_color_resolution_t</span>(color_resolution_);</span><br><span class="line">	config.synchronized_images_only = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::threadFunction()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (!quit)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">		k4a::capture capture;</span><br><span class="line">		<span class="keyword">if</span> (!dev.get_capture(&amp;capture, <span class="built_in">std</span>::chrono::milliseconds(<span class="number">0</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		depthImage = capture.get_depth_image();</span><br><span class="line">		<span class="keyword">if</span> (depthImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get depth image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		colorImage = capture.get_color_image();</span><br><span class="line">		<span class="keyword">if</span> (colorImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get color image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		infraredImage = capture.get_ir_image();</span><br><span class="line">		<span class="keyword">if</span> (infraredImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get IR image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		lock.unlock();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZ-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZ-&gt;<span class="keyword">operator</span>()(convertDepthToPointXYZ());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZI-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZI-&gt;<span class="keyword">operator</span>()(convertInfraredDepthToPointXYZI());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZRGB-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZRGB-&gt;<span class="keyword">operator</span>()(convertRGBDepthToPointXYZRGB());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZRGBA-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZRGBA-&gt;<span class="keyword">operator</span>()(convertRGBADepthToPointXYZRGBA());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr pcl::KinectAzureDKGrabber::convertDepthToPointXYZ()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZ&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZ point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZI&gt;::Ptr pcl::KinectAzureDKGrabber::convertInfraredDepthToPointXYZI()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZI&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZI&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_infrared_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_infrared_image = k4a::image::create(K4A_IMAGE_FORMAT_IR16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_color_camera(infraredImage, &amp;transformed_infrared_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">int16_t</span>* transformed_infrared_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)transformed_infrared_image.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZI point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		point.intensity = transformed_infrared_image_data[i];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZRGB&gt;::Ptr pcl::KinectAzureDKGrabber::convertRGBDepthToPointXYZRGB()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZRGB&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZRGB&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">uint8_t</span>* color_image_data = colorImage.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZRGB point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		point.b = color_image_data[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">		point.g = color_image_data[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">		point.r = color_image_data[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">		<span class="keyword">uint8_t</span> alpha = color_image_data[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">		<span class="keyword">if</span> (point.b == <span class="number">0</span> &amp;&amp; point.g == <span class="number">0</span> &amp;&amp; point.r == <span class="number">0</span> &amp;&amp; alpha == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::Ptr pcl::KinectAzureDKGrabber::convertRGBADepthToPointXYZRGBA(<span class="comment">/*RGBQUAD* colorBuffer, UINT16* depthBuffer*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZRGBA&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">uint8_t</span>* color_image_data = colorImage.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZRGBA point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		point.b = color_image_data[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">		point.g = color_image_data[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">		point.r = color_image_data[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">		point.a = color_image_data[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.b == <span class="number">0</span> &amp;&amp; point.g == <span class="number">0</span> &amp;&amp; point.r == <span class="number">0</span> &amp;&amp; point.a == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkerLess AR Cube Demo 总结</title>
    <url>/2020/10/07/MarkerLess-AR-Cube-Demo-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MarkerLess-AR-Cube-Demo-总结"><a href="#MarkerLess-AR-Cube-Demo-总结" class="headerlink" title="MarkerLess AR Cube Demo 总结"></a>MarkerLess AR Cube Demo 总结</h1><blockquote>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/98848510">https://blog.csdn.net/qq_33446100/article/details/98848510</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/iframe/aruco06.gif" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>根据<a href="https://junlu.club/2020/09/21/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86-2/">ARUCO实现AR梳理-2</a>中的叙述，可以知道，以OpenGL为最后显示平台的AR实现方案，最终要考虑的问题是，<strong>如何获得相机的外部参数？</strong></p>
<p>如果知道了相机的外部参数，即可将其带入<strong>View Matrix</strong>；加上<strong>Model Matrix</strong>可以人为指定，<strong>Projection Matrix</strong>是由相机内参定义的，一切将水到渠成。</p>
<h2 id="Markerless"><a href="#Markerless" class="headerlink" title="Markerless"></a>Markerless</h2><p>AR可以分为基于标志物的AR，与基于无标志物的AR，基于无标志物的AR又可以分为很多种，本文实现的是利用RGB单目摄像头，利用自然特征实现AR。</p>
<h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><ol>
<li>使用<strong>SURF</strong>（SpeedUp Robust Features 加速版的具有鲁棒性的特征）特征点检测算法检测事先准备的图像的特征点</li>
<li>使用<strong>SURF</strong>特征点检测算法，检测相机拍到的实时图像</li>
<li>使用<strong>FLANN</strong>（Fast Library for Approximate Nearest Neighbors 快速最近邻逼近搜索函数库）特征点匹配算法，将事先准备好的图像的特征点，与相机实时捕获的图像特征点作匹配</li>
<li>根据<strong>FLANN</strong>，使用<strong>findHomography</strong>函数，得出单应性矩阵，将事先准备好的图像的四个角点，映射到相机捕获的图像上</li>
<li>使用<strong>SolvePnP</strong>函数估计相机位姿，即相机外参</li>
<li>代入<strong>View Matrix</strong></li>
</ol>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
  </entry>
  <entry>
    <title>Windows+pcl1.11.1+vs2019环境配置</title>
    <url>/2020/10/05/Windows-pcl1-11-1-vs2019%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Windows-pcl1-11-1-vs2019环境配置"><a href="#Windows-pcl1-11-1-vs2019环境配置" class="headerlink" title="Windows+pcl1.11.1+vs2019环境配置"></a>Windows+pcl1.11.1+vs2019环境配置</h1><blockquote>
<p>参考博文【若有侵权，立即删除】</p>
<p><a href="https://blog.csdn.net/qq_36686437/article/details/106347482">https://blog.csdn.net/qq_36686437/article/details/106347482</a></p>
<p><a href="https://blog.csdn.net/qq_36686437/article/details/108803098">https://blog.csdn.net/qq_36686437/article/details/108803098</a></p>
<p><a href="https://blog.csdn.net/zhangxz259/article/details/85683201">https://blog.csdn.net/zhangxz259/article/details/85683201</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>想学点云处理方面的知识了，就配一个pcl</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="下载PCL1-11-0"><a href="#下载PCL1-11-0" class="headerlink" title="下载PCL1.11.0"></a>下载PCL1.11.0</h3><p>Github下载地址：<a href="https://github.com/PointCloudLibrary/pcl/releases">https://github.com/PointCloudLibrary/pcl/releases</a><br>下载红框内的两个文件<br><img src="https://img-blog.csdnimg.cn/20200526085007336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="安装PCL1-11-0"><a href="#安装PCL1-11-0" class="headerlink" title="安装PCL1.11.0"></a>安装PCL1.11.0</h3><p><strong>安装“PCL-1.11.0-AllInOne-msvc2019-win64.exe”。</strong></p>
<ul>
<li>选择第二个，自动添加系统变量<br>  <img src="https://img-blog.csdnimg.cn/20200526085600527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面00"></li>
<li>安装路径选择D盘，系统会自动新建PCL 1.11.0文件夹。<br>  <img src="https://img-blog.csdnimg.cn/20200526085833607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面01"></li>
<li><strong>安装完成之后打开文件夹 D:\PCL 1.11.0\3rdParty\OpenNI2<br>  双击OpenNI-Windows-x64-2.2 选择路径（D:\PCL 1.11.0\3rdParty\OpenNI2）安装即可。</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090128836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面02"></li>
<li><strong>全部安装完成后，将pcl-1.11.0-pdb-msvc2019-win64.zip解压后的.pdb文件拷贝到（D:\PCL 1.11.0\bin）中。</strong></li>
<li><strong>设置环境变量：右击计算机—属性—高级系统设置—高级—环境变量—用户变量—Path—编辑!</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090605288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面03"></li>
<li>如下图所示。<br>  <img src="https://img-blog.csdnimg.cn/20200526090646241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面04"><br>  在这里直接给出，防止出现错误（依次添加）：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%PCL_ROOT%\<span class="number">3</span>rdParty\FLANN\bin</span><br><span class="line">%PCL_ROOT%\<span class="number">3</span>rdParty\VTK\bin</span><br><span class="line">%OPENNI2_REDIST64%</span><br><span class="line">%OPENNI2_LIB64%</span><br><span class="line">%OPENNI2_INCLUDE64%</span><br></pre></td></tr></table></figure>
<p>到此，环境变量的配置完成。</p>
<h3 id="VS2019相关设置"><a href="#VS2019相关设置" class="headerlink" title="VS2019相关设置"></a>VS2019相关设置</h3><ul>
<li><strong>新建空项目</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090823909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面00"></li>
<li>解决方案配置选择Debug，解决方案平台选择x64。<br>  <img src="https://img-blog.csdnimg.cn/20200526103129751.png" alt="VS配置界面01"></li>
<li><strong>新建一个C++源文件</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526103415256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面02"></li>
<li><strong>右击新建的项目—属性：打开属性表</strong></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200526103657409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面03"></p>
<ul>
<li><strong>配置属性—调试—环境—添加：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PATH=D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\FLANN\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\VTK\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\OpenNI2\Tools</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526104101644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面04"></p>
<ul>
<li><strong>C/C++—语言—符合模式：否</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526104535843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面05"></li>
<li><strong>C/C++—常规—SDL检查：否</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526104722251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面06"></li>
</ul>
<h3 id="配置PCL1-11-0"><a href="#配置PCL1-11-0" class="headerlink" title="配置PCL1.11.0"></a>配置PCL1.11.0</h3><p><strong>为了使用方便，这里使用添加属性表的形式。注意：添加属性表的方式，需要再次将属性表内的SDL检测设置为：否。否则将报如下错误：</strong><br><img src="https://img-blog.csdnimg.cn/20200925194241929.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li><p><strong>视图—其他窗口—属性管理器</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526091549978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p><strong>打开属性管理器之后，选择Debug|X64—单击Debug|X64左侧倒三角—右击选择 添加型项目属性表</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526092104635.png" alt="在这里插入图片描述"></p>
</li>
<li><strong>项目属性表命名</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526092333946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><strong>双击新添加的属性表—VC++目录—包含目录，添加7个include路径</strong><br>  <img src="https://img-blog.csdnimg.cn/2020052609260194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<p>具体添加的include路径如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\include\pcl<span class="number">-1.11</span></span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Boost\include\boost<span class="number">-1</span>_73</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Eigen\eigen3</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\FLANN\include</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Qhull\include</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\include\vtk<span class="number">-8.2</span></span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\OpenNI2\Include</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>VC++目录—库目录，添加6个lib路径</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526093426340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  具体添加的lib路径如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Boost\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\FLANN\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Qhull\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\OpenNI2\Lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\lib</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526093806871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>C/C++—预处理器—预处理器定义—添加：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOST_USE_WINDOWS_H</span><br><span class="line">NOMINMAX</span><br><span class="line">_CRT_SECURE_NO_DEPRECATE</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526094047662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>链接器—输入—附加依赖项——添加PCL和VTK的相关lib文件。我用的Debug版本。</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526094504741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  附加依赖项具体添加内容如下：（文章末尾 <strong>附录</strong>中 给出批量获取附加依赖项的方法）<br>  输入到属性表里边的时候必须一行对应一个lib才能成功。<br>  Debug版本</li>
<li><strong>保存属性表</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526102730254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  下一次需要创建新项目的时候，只需进行第三步 <strong>VS2019相关设置</strong> 的操作，然后打开属性管理器，添加现有属性表，找到之前保存的属性表添加进去即可。<br>  <img src="https://img-blog.csdnimg.cn/20200526105924435.png" alt="在这里插入图片描述"><br>  ![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20200526110148988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20200526110148988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70</a></li>
</ul>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/octree/octree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span><br><span class="line">&#123;</span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">	<span class="comment">// 创建点云数据</span></span><br><span class="line">	cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">	cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pcl::<span class="function">octree::OctreePointCloudSearch&lt;pcl::PointXYZ&gt; <span class="title">octree</span><span class="params">(<span class="number">0.1</span>)</span></span>;</span><br><span class="line">	octree.setInputCloud(cloud);</span><br><span class="line">	octree.addPointsFromInputCloud();</span><br><span class="line">	pcl::PointXYZ searchPoint;</span><br><span class="line">	searchPoint.x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//半径内近邻搜索</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pointIdxRadiusSearch;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;pointRadiusSquaredDistance;</span><br><span class="line">	<span class="keyword">float</span> radius = <span class="number">256.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (octree.radiusSearch(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 初始化点云可视化对象</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt;viewer(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">&quot;显示点云&quot;</span>));</span><br><span class="line">	viewer-&gt;setBackgroundColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  <span class="comment">//设置背景颜色为黑色</span></span><br><span class="line">	<span class="comment">// 对点云着色可视化 (red).</span></span><br><span class="line">	pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt;target_color(cloud, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	viewer-&gt;addPointCloud&lt;pcl::PointXYZ&gt;(cloud, target_color, <span class="string">&quot;target cloud&quot;</span>);</span><br><span class="line">	viewer-&gt;setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">1</span>, <span class="string">&quot;target cloud&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 等待直到可视化窗口关闭</span></span><br><span class="line">	<span class="keyword">while</span> (!viewer-&gt;wasStopped())</span><br><span class="line">	&#123;</span><br><span class="line">		viewer-&gt;spinOnce(<span class="number">100</span>);</span><br><span class="line">		boost::this_thread::sleep(boost::posix_time::microseconds(<span class="number">1000</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出下图（数字可能不同），则表示安装成功！</strong><br><img src="https://img-blog.csdnimg.cn/20200526110936338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">win+r调出“运行”窗口并输出cmd</span><br><span class="line">输入：cd /d D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\lib 回车 （填自己的路径）</span><br><span class="line">输入：dir /b *.lib *&gt;<span class="number">0.</span>txt 回车 </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526112537554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时打开你对应路劲的目录，多了一个0.txt文件，里面存了你这个文件夹里所有链接库名字。<br>由于每一个Debug版本和Release版本的链接库是挨在一起的。写一个读取文档并对其分别保存就行了。<br>具体代码如下：（主要功能是读取一个txt文件，将其中奇数行和偶数行单独输出到新的txt文档。）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ifstream txtfile;<span class="comment">//打开读取的文件</span></span><br><span class="line">	ofstream txt01;<span class="comment">//保存的文件</span></span><br><span class="line">	ofstream txt02;<span class="comment">//保存的文件</span></span><br><span class="line">	<span class="built_in">string</span> temp;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于判断奇偶</span></span><br><span class="line"></span><br><span class="line">	txtfile.open(<span class="string">&quot;0.txt&quot;</span>, ios::in);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span> (!txtfile.eof())            <span class="comment">// 若未到文件结束一直循环</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		getline(txtfile, temp);<span class="comment">//一行一行读取</span></span><br><span class="line">		<span class="keyword">if</span> (index%<span class="number">2</span>==<span class="number">0</span>)<span class="comment">//判断除以2的余数，即为奇偶的判断</span></span><br><span class="line">		&#123;</span><br><span class="line">			txt01.open(<span class="string">&quot;1.txt&quot;</span>, ios::app);</span><br><span class="line">			txt01 &lt;&lt; temp;</span><br><span class="line">			txt01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			txt01.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			txt02.open(<span class="string">&quot;2.txt&quot;</span>, ios::app);</span><br><span class="line">			txt02 &lt;&lt; temp;</span><br><span class="line">			txt02 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			txt02.close();</span><br><span class="line">		&#125;</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">	txtfile.close();   <span class="comment">//关闭文件</span></span><br><span class="line">	txtfile.close();</span><br><span class="line">	txt01.close();</span><br><span class="line">	txt02.close();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-2021计划表</title>
    <url>/2020/09/27/2020-2021%E8%AE%A1%E5%88%92%E8%A1%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="853a7fac0c85009378beab41b09e7e37519469b46433feb9c1640c0d6ba20fa9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>摄像机模型详解</title>
    <url>/2020/09/26/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="摄像机几何模型详解"><a href="#摄像机几何模型详解" class="headerlink" title="摄像机几何模型详解"></a>摄像机几何模型详解</h1><h2 id="针孔模型-amp-透镜"><a href="#针孔模型-amp-透镜" class="headerlink" title="针孔模型&amp;透镜"></a>针孔模型&amp;透镜</h2><h3 id="问题引出-我们如何记录世界？"><a href="#问题引出-我们如何记录世界？" class="headerlink" title="问题引出 - 我们如何记录世界？"></a>问题引出 - 我们如何记录世界？</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926200942.png" alt="图0 如何记录世界？"></p>
<p>如果按照上面图片的设计，物体的每一个点，都会在胶片的同一个地方，留下自己的信息；由此胶片上的每一个地方都是物体每一点的信息集合，根本无法记录现实物体。</p>
<h3 id="改进方案-针孔摄像机"><a href="#改进方案-针孔摄像机" class="headerlink" title="改进方案 - 针孔摄像机"></a>改进方案 - 针孔摄像机</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201249.png" alt="图1 针孔摄像机"></p>
<p>与原有的设计相比，此改进方案增加了一个隔板，只留下了一个孔；正如图上所标注的，光线穿过针孔，物体的每一个点，都在胶片的不同位置留下了自己的信息，不会像之前设计的胶片信息杂乱混合。</p>
<p>胶片就这样记录下了物体的信息。</p>
<h3 id="针孔摄像机模型"><a href="#针孔摄像机模型" class="headerlink" title="针孔摄像机模型"></a>针孔摄像机模型</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201625.png" alt="图2 针孔摄像机模型"></p>
<p>图中的各个参数的含义如下：</p>
<blockquote>
<p><strong>f</strong> ：摄像机模型的<strong>焦距</strong> </p>
<p><strong>O</strong> ：针孔，亦称<strong>光圈</strong>/<strong>摄像机中心</strong> </p>
</blockquote>
<p>像平面与虚拟像平面相对于摄像机中心对称，唯一的不同是，虚拟像平面成像是正的，我们一般都是讨论虚拟像平面；像平面成像是倒着的。</p>
<h3 id="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）"><a href="#相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）" class="headerlink" title="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）"></a><strong>相机坐标系下的空间点</strong>与<strong>像平面坐标系上的平面点</strong>之间的映射（1）</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926202434.png" alt="图3 摄像机坐标系与像平面坐标系之间，点的映射关系"></p>
<p>上图各个符号的含义如下：</p>
<blockquote>
<p><strong>P</strong>：真实物理空间中的某一点，在摄像机坐标系下，其坐标为（x，y，z）</p>
<p><strong>O</strong>：摄像机坐标系的原点</p>
<p><strong>i，j，k</strong>：摄像机坐标系的单位向量，构成坐标轴</p>
<p><strong>f</strong>：摄像机模型的焦距</p>
<p><strong>C’</strong>：像平面坐标系的原点</p>
<p><strong>P’</strong>：真实空间点P在成像平面上成像的点，在像平面坐标系下，其坐标为（x’，y’）</p>
</blockquote>
<p>以-i方向观察上图，可以简化为：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926203254.png" alt="图4 以-i方向观察图4"></p>
<p>采用相似三角形法则，可以得出：</p>
<script type="math/tex; mode=display">
\frac{y'}{f}=\frac{y}{z}\Rightarrow y'=f\frac{y}{z}</script><p>又因为$ P=\left[\begin{array}{l}<br>x \<br>y \<br>z<br>\end{array}\right] $，$P^{\prime}=\left[\begin{array}{l}<br>x^{\prime} \<br>y^{\prime}<br>\end{array}\right]$；</p>
<p>所以：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{1}
x^{\prime}=f \frac{x}{z} \\
y^{\prime}=f \frac{y}{z}
\end{array}\right.
\tag {公式1}</script><h3 id="透镜"><a href="#透镜" class="headerlink" title="透镜"></a>透镜</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201249.png" alt="图5 针孔摄像机"></p>
<p>光圈，亦称针孔；</p>
<p>光圈的尺寸大小与成像的关系：</p>
<blockquote>
<p>光圈越大，成像越模糊，但是也越亮</p>
<p>光圈越小，成像越清晰，但是也越暗</p>
</blockquote>
<p>光圈越大，穿过光圈的光线越多，因此也更亮，但是随着光圈的增大，物体上不同的，但是相近的位置点，都会发射光线到达胶片上的同一点，因此成像也越模糊。</p>
<p>光圈越小，穿过光圈的光线越少，因此也更暗，但是随着光圈的减小，物体上不同的，发射光线到达胶片上的同一点的概率也越小，因此成像也越模糊。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926211838.png" alt="图6 光圈尺寸与成像的关系"></p>
<p>毫无疑问，我们最终想要的是既明亮又清晰的图像，如何能在光圈小的情况下，增大亮度，即让物体同一点的光线到胶片上同一点的光线数量越多？</p>
<p>答案是<strong>增加透镜</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212145.png" alt="图7 增加透镜"></p>
<p>透镜将物体上同一点的多条光线聚集到胶片上的同一点，增大了亮度</p>
<p><strong>透镜焦距</strong>的定义：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212659.png" alt="图8 透镜焦距的定义"></p>
<blockquote>
<p>f：透镜的焦距</p>
</blockquote>
<h3 id="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）"><a href="#相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）" class="headerlink" title="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）"></a><strong>相机坐标系下的空间点</strong>与<strong>像平面坐标系上的平面点</strong>之间的映射（2）</h3><p>将上述讨论的透镜，加入模型中：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212904.png" alt="图9 透镜加入模型"></p>
<p>参数说明：</p>
<blockquote>
<p><strong>f</strong>：透镜的焦距</p>
<p><strong>$z_0$</strong>：透镜的焦点到胶片的距离</p>
<p><strong>Z’</strong>：摄像机模型的焦距</p>
</blockquote>
<p>上述参数满足：$Z’=f+Z_0$</p>
<p>以后，以字母f代表摄像机模型的焦距Z‘</p>
<h3 id="像平面坐标系下的平面点-在像平面坐标系与像素平面坐标系的转换"><a href="#像平面坐标系下的平面点-在像平面坐标系与像素平面坐标系的转换" class="headerlink" title="像平面坐标系下的平面点 在像平面坐标系与像素平面坐标系的转换"></a>像平面坐标系下的平面点 在像平面坐标系与像素平面坐标系的转换</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926215929.png" alt="图10 像坐标系与像素坐标系" style="zoom:70%;" /></p>
<blockquote>
<p><strong>像素坐标系</strong>：</p>
<ul>
<li>以胶片的左下角为坐标原点的二维坐标系</li>
<li>单位是像素</li>
</ul>
<p><strong>像坐标系</strong>：</p>
<ul>
<li>同样成为像平面坐标系，以胶片中心为C’为坐标原点</li>
<li>单位是米</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926220338.png" alt="图11 示意图"></p>
<h3 id="理想情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换"><a href="#理想情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换" class="headerlink" title="理想情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换"></a>理想情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换</h3><p>此转换亦为3D与2D之间的转换；</p>
<p>坐标转换为：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(f k \frac{x}{z}+c_{x}, f l \frac{y}{z}+c_{y}\right)


\tag{公式3}</script><script type="math/tex; mode=display">
\alpha = fk</script><script type="math/tex; mode=display">
\beta = fl</script><blockquote>
<p><strong>k,l</strong> 单位为pixel/m</p>
<p><strong>f</strong> 单位为m</p>
<p><strong>$\alpha，\beta，c_x$ </strong>单位：pixel</p>
</blockquote>
<p>由于上述变换是非线性变换，后续处理采用齐次坐标的概念</p>
<hr>
<p><strong>齐次坐标</strong></p>
<p>欧几里得空间 -&gt; 齐次坐标空间：</p>
<ul>
<li>图像点的齐次坐标：</li>
</ul>
<script type="math/tex; mode=display">
(x, y) \Rightarrow\left[\begin{array}{l}
x \\
y \\
1
\end{array}\right]</script><ul>
<li>空间点的齐次坐标：</li>
</ul>
<script type="math/tex; mode=display">
(x, y, z) \Rightarrow\left[\begin{array}{l}
x \\
y \\
z \\
1
\end{array}\right]</script><p>齐次坐标空间 -&gt; 欧几里得空间：</p>
<ul>
<li>图像点：</li>
</ul>
<script type="math/tex; mode=display">
\left[\begin{array}{l}
x \\
y \\
w
\end{array}\right] \Rightarrow(x / w, y / w)</script><ul>
<li>空间点：</li>
</ul>
<script type="math/tex; mode=display">
\left[\begin{array}{l}
x \\
y \\
z \\
w
\end{array}\right] \Rightarrow(x / w, y / w, z / w)</script><hr>
<p>因为：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(f k \frac{x}{z}+c_{x}, f l \frac{y}{z}+c_{y}\right)


\tag{公式3}</script><script type="math/tex; mode=display">
\alpha = fk</script><script type="math/tex; mode=display">
\beta = fl</script><p>所以：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(\alpha \frac{x}{z}+c_{x}, \beta \frac{y}{z}+c_{y}\right)


\tag{公式4}</script><script type="math/tex; mode=display">
u =\alpha \frac{x}{z}+c_{x}</script><script type="math/tex; mode=display">
v=\beta \frac{y}{z}+c_{y}</script><blockquote>
<p>u，v 分别是像素坐标系下空间点P在成像平面上的坐标表示</p>
<p>x，y，z 分别是相机坐标系下空间点P的坐标表示</p>
</blockquote>
<p>使用齐次坐标表示 $\left.(x, y, z) \rightarrow(\alpha \frac{x}{z}+c<em>{x}, \beta \frac{y}{z}+c</em>{y}\right)$ ：</p>
<script type="math/tex; mode=display">
(\alpha \frac{x}{z}+c_X,\beta \frac{y}{z}+c_y) \rightarrow{转为齐次坐标}\rightarrow\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}</script><script type="math/tex; mode=display">
\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\tag{公式5}</script><p>记像平面上的坐标点为<strong>P’</strong></p>
<p>则<strong>公式5</strong>可以写为：</p>
<script type="math/tex; mode=display">
P'=
\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><script type="math/tex; mode=display">
M =
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}</script><blockquote>
<p>$\alpha，\beta，c_x，c_y$全部属于相机内部参数</p>
<p>M是相机坐标系下空间点P到像素坐标系下点P’之间的投影矩阵，3x4</p>
</blockquote>
<h3 id="实际情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换"><a href="#实际情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换" class="headerlink" title="实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换"></a>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换</h3><p>由于现实生活中，相机会有畸变问题，实际的像素坐标系如下所示：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001102638.png" alt="图12 实际畸变"></p>
<p>修正理想情况下的转换关系：</p>
<script type="math/tex; mode=display">
P'=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><script type="math/tex; mode=display">
M =
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\tag{公式6}</script><blockquote>
<p>$\alpha，\beta，c_x，c_y ，\theta$全部属于相机内部参数</p>
<p>M 共有5个自由度，即5个未知量</p>
<p>M是相机坐标系下空间点P到像素坐标系下点P’之间的投影矩阵，3x4</p>
</blockquote>
<p>从M中取出前3列，作为一个3x3的新矩阵，称为<strong>相机内参矩阵K</strong></p>
<script type="math/tex; mode=display">
K=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x  \\
0 & \frac{\beta}{sin\theta} & c_y  \\
0 & 0 & 1  \\
\end{bmatrix}</script><p>因此，<strong>公式6</strong>可以表示为如下形式：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP
\tag{公式7}</script><blockquote>
<p>E 为单位矩阵</p>
<p>K 为内参矩阵</p>
<p>M 为相机坐标系下空间点到像素坐标系下平面点的投影矩阵</p>
</blockquote>
<h3 id="世界坐标系下的空间物体-向-相机坐标系下的空间物体-的转换"><a href="#世界坐标系下的空间物体-向-相机坐标系下的空间物体-的转换" class="headerlink" title="世界坐标系下的空间物体 向 相机坐标系下的空间物体 的转换"></a>世界坐标系下的空间物体 向 相机坐标系下的空间物体 的转换</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001105119.png" alt="图13 示意图"></p>
<script type="math/tex; mode=display">
P=
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1  \\
\end{bmatrix}
=
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
P_w
\tag{公式8}</script><blockquote>
<p>R，T：相机外参数，表征相机在世界坐标系中的位姿</p>
</blockquote>
<h3 id="综合前面所有，从-世界坐标系空间点P-到-像素坐标系成像点P’-的转换关系"><a href="#综合前面所有，从-世界坐标系空间点P-到-像素坐标系成像点P’-的转换关系" class="headerlink" title="综合前面所有，从 世界坐标系空间点P 到 像素坐标系成像点P’ 的转换关系"></a>综合前面所有，从 世界坐标系空间点P 到 像素坐标系成像点P’ 的转换关系</h3><p>综合<strong>公式7</strong>与<strong>公式8</strong>：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
P_w
=
K
\begin{bmatrix}
\ R & T \\
\end{bmatrix}
P_w
\\\\
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1 \\
\end{bmatrix}
\\\\
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1 \\
\end{bmatrix}
\tag{公式9}</script><blockquote>
<p>[ R  T ] 称为相机外参矩阵，3x4，6个自由度</p>
<p>K：称为相机内参矩阵，3x3，5个自由度</p>
<p>总体有11个自由度（未知量）</p>
</blockquote>
<p>设</p>
<script type="math/tex; mode=display">
M  
= K
\begin{bmatrix}
\ R & T \\
\end{bmatrix}</script><blockquote>
<p>M 为世界坐标系与像素坐标系之间的透视投影矩阵</p>
</blockquote>
<p>所以结合<strong>公式9</strong>：</p>
<script type="math/tex; mode=display">
p'=K
\begin{bmatrix}
\ R & T \\ 
\end{bmatrix}
P_w
=
M P_w
=
\begin{bmatrix}
\ m1 \\
\ m2 \\
\ m3 \\
\end{bmatrix}
P_w</script><p>转换为欧几里得空间：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
\ u \\
\ v \\
\end{bmatrix}
=
\begin{bmatrix}
\ \frac{m_1 P_w}{m_3 P_w} \\
\ \frac{m_2 P_w}{m_3 P_w} \\
\end{bmatrix}
\tag{公式10}</script><h2 id="相机标定"><a href="#相机标定" class="headerlink" title="相机标定"></a>相机标定</h2><h3 id="相机标定的目的"><a href="#相机标定的目的" class="headerlink" title="相机标定的目的"></a>相机标定的目的</h3><p>求解相机的内外参数</p>
<h3 id="为什么相机标定很重要？"><a href="#为什么相机标定很重要？" class="headerlink" title="为什么相机标定很重要？"></a>为什么相机标定很重要？</h3><p>相机的内外参数描述了三维世界到二维像素的映射关系</p>
<h3 id="标定原理"><a href="#标定原理" class="headerlink" title="标定原理"></a>标定原理</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001152618.png" alt="图14 标定装置"></p>
<blockquote>
<p>已知条件：</p>
<ul>
<li>世界坐标系中$P_1，P_2…P_n$的位置</li>
<li>像素坐标系中$p_1，p_2…p_n$的位置</li>
</ul>
<p>求解目标：</p>
<ul>
<li>摄像机内外参数</li>
</ul>
</blockquote>
<p>结合<strong>公式10</strong>，各个点的坐标表示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
\ u_i \\
\ v_i \\
\end{bmatrix}
=
\begin{bmatrix}
\ \frac{m_1 P_i}{m_3 P_i} \\
\ \frac{m_2 P_i}{m_3 P_i} \\
\end{bmatrix}</script><script type="math/tex; mode=display">
\begin{array}{l}
u_{i}=\frac{m_{1} P_{i}}{m_{3} P_{i}} \rightarrow u_{i}\left(m_{3} P_{i}\right)=m_{1} P_{i} \rightarrow u_{i}\left(m_{3} P_{i}\right)-m_{1} P_{i}=0 \\\\
v_{i}=\frac{m_{2} P_{i}}{m_{3} P_{i}} \rightarrow v_{i}\left(m_{3} P_{i}\right)=m_{2} P_{i} \rightarrow v_{i}\left(m_{3} P_{i}\right)-m_{2} P_{i}=0
\end{array}</script><blockquote>
<p>一对点（世界坐标系中的点和对应的像素坐标系中的点）可以写出2个方程</p>
<p>共有11个未知量</p>
<p>所以要使用至少6对点</p>
</blockquote>
<p>在实际操作中，使用多于6对点获得更加鲁棒的结果。</p>
<p>方程组：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{c}
u_{1}\left(m_{3} P_{1}\right)-m_{1} P_{1}=0 \\
v_{1}\left(m_{3} P_{1}\right)-m_{2} P_{1}=0 \\
\vdots \\\\
u_{i}\left(m_{3} P_{i}\right)-m_{1} P_{i}=0 \\
v_{i}\left(m_{3} P_{i}\right)-m_{2} P_{i}=0 \\
\vdots \\\\
u_{n}\left(m_{3} P_{n}\right)-m_{1} P_{n}=0 \\
v_{n}\left(m_{3} P_{n}\right)-m_{2} P_{n}=0
\end{array}\right.</script><p>化为齐次线性方程组，如下：</p>
<script type="math/tex; mode=display">
Pm=0</script><script type="math/tex; mode=display">
P \stackrel{\text { def }}{=}\left(\begin{array}{ccc}
P_{1}^{T} & 0^{T} & -u_{1}P_{1}^{T} \\
0^{T} & P_{1}^{T} & -v_{1} P_{1}^{T} \\
& \vdots & \\
P_{n}^{T} & 0^{T} & -u_{n} P_{n}^{T} \\
0^{T} & P_{n}^{T} & -v_{n} P_{n}^{T}
\end{array}\right)_{2 n \times 12}</script><script type="math/tex; mode=display">
m \stackrel{\text { def }}{=}\left(\begin{array}{l}
\mathrm{m}_{1} ^{T} \\
\mathrm{m}_{2}^{T} \\
\mathrm{m}_{3}^{T}
\end{array}\right)</script><p>方程组个数：2n</p>
<p>未知参数：11</p>
<p>求解超定方程组</p>
<ul>
<li>0总是一个解，不存在非0解</li>
</ul>
<p>求解目标：（最小二乘法）</p>
<script type="math/tex; mode=display">
\begin{array}{c}
\min _{\boldsymbol{m}}\|\boldsymbol{P} \boldsymbol{m}\| \\
\text { s.t. }\|\boldsymbol{m}\|=1
\end{array}</script>]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>相机模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Aruco实现AR梳理_2</title>
    <url>/2020/09/21/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Aruco-实现AR过程梳理2"><a href="#Aruco-实现AR过程梳理2" class="headerlink" title="Aruco 实现AR过程梳理2"></a>Aruco 实现AR过程梳理<em>2</em></h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://junlu.club/2020/09/14/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86/">上一篇</a>说的比较不系统，而且有一些问题没有说清楚，这一篇将系统的整理一下OpenCV，OpenGL，Aruco的具体分工，以及一些疑问。</p>
<h2 id="目标效果"><a href="#目标效果" class="headerlink" title="目标效果"></a>目标效果</h2><p><img src="/iframe/aruco04.gif" alt=""></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和之前的一篇一样</p>
<blockquote>
<p><strong>OpenGL的世界中有虚拟相机，现实世界中有真实相机，只要将两个世界的世界坐标重合，相机位置重合，分别渲染虚拟模型与真实场景，即可达到AR效果</strong></p>
</blockquote>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="OpenCV与Aruco"><a href="#OpenCV与Aruco" class="headerlink" title="OpenCV与Aruco"></a>OpenCV与Aruco</h3><ul>
<li>将真实相机捕获的画面，传递给OpenGL，用作背景</li>
<li>相机标定，将真实相机的内参标定出来</li>
</ul>
<h3 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h3><ul>
<li>将真实画面，正交投影至矩形中，充当背景</li>
<li>定义虚拟的Cube顶点</li>
<li>生成OpenGL窗口</li>
<li>Cube经历的变换为 <em>MVP（model transform, view transform, projection transform）</em>变换</li>
</ul>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul>
<li><p>如何将真实的世界坐标系与OpenGL的世界坐标系重合呢？如何将相机位置重合呢？</p>
<p>OpenGL中，相机的位置是固定不变的，我们看到的永远是相机看到的，所以，只要清楚相机与世界坐标系的转换矩阵，即View Matrix，就可以将世界坐标系重合了。</p>
</li>
<li><p>Aruco的作用是什么呢？</p>
<p>获取真实相机相对于Marker的位姿（相机外参），传给OpenGL</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>关于AR键盘</title>
    <url>/2020/09/19/%E5%85%B3%E4%BA%8EAR%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AR-Keyboard"><a href="#AR-Keyboard" class="headerlink" title="AR Keyboard"></a>AR Keyboard</h1><blockquote>
<p>参考链接：</p>
<p><a href="https://www.cnblogs.com/mantgh/p/5680580.html#other">https://www.cnblogs.com/mantgh/p/5680580.html#other</a></p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>任何一套成熟的开发系统，都需要一整套开发套件，其中UI套件必不可少，其实用性，美观性关系着开发者的体验以及用户的体验。</p>
<p>目前，截至现在，Hololens2的开发工作，在Unity上的UI套件主要包括以下几种：</p>
<p>我有一个虚拟键盘的需求，类似于Hololens2的系统键盘那样，但是根据官方手册的指导，进展的并不顺利。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在混合现实主页的模式（即全息三维模式）下，使用虚拟键盘输入文本，类似于Unity 2D模式下的InputFiled。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Unity</li>
<li>MRTK</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li><p>首先我想到的是查看官方手册，该如何调用系统键盘，能不能实现在应用内部调用系统键盘，从而实现上述需求</p>
<p><a href="https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/README_SystemKeyboard.html">官方主页链接</a></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200919213126.png" alt=""></p>
<p>官方链接里面内容说的很清楚，这里不再赘述，将代码列在下方。</p>
<ul>
<li><p>how to invoke the system keyboard</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TouchScreenKeyboard keyboard;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenSystemKeyboard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    keyboard = TouchScreenKeyboard.Open(<span class="string">&quot;&quot;</span>, TouchScreenKeyboardType.Default, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>how to read the input</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TouchScreenKeyboard keyboard;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyboard != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        keyboardText = keyboard.text;</span><br><span class="line">        <span class="comment">// Do stuff with keyboardText</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Build的时候，尽量选择到处类型为XAML</li>
</ul>
</li>
<li><p>按照官方给的方法，实现的效果不好</p>
<p>当让其显示虚拟键盘的时候，Hololens会直接退出混合现实主页视图，直接变成了进入应用之前的场景，然后出现虚拟键盘，与我的需求并不契合；输入完成后，按Enter键，Unity又会重新进入混合现实主页视图，此时，输入框中会有刚刚输入的文字</p>
</li>
</ol>
<h2 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h2><ul>
<li>自定义一个自己的呗</li>
<li>听写识别输入</li>
</ul>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
  </entry>
  <entry>
    <title>git clone 速度满，加快速度方法</title>
    <url>/2020/09/19/git-clone-%E9%80%9F%E5%BA%A6%E6%BB%A1%EF%BC%8C%E5%8A%A0%E5%BF%AB%E9%80%9F%E5%BA%A6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git-clone-速度满，加快速度方法"><a href="#git-clone-速度满，加快速度方法" class="headerlink" title="git clone 速度满，加快速度方法"></a>git clone 速度满，加快速度方法</h1><blockquote>
<p>转载于</p>
<p><a href="https://www.cnblogs.com/PieDaoChuan/p/9773039.html">https://www.cnblogs.com/PieDaoChuan/p/9773039.html</a></p>
</blockquote>
<h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure>
<p><strong>注意：端口号1080为VPN设置的代理端口，可自行修改为自己的VPN代理端口</strong></p>
<p>有人使用第一种无加速效果，第二种代理方式速度得到明显提升，峰值可达1M/s。</p>
<h3 id="取消git代理设置"><a href="#取消git代理设置" class="headerlink" title="取消git代理设置"></a>取消git代理设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
  </entry>
  <entry>
    <title>C#语言实现Socket通信_2</title>
    <url>/2020/09/18/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Socket%E9%80%9A%E4%BF%A1-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ae68d24c058ff72e41e0e713a835ccbe39b1d401dd1fb128a09f468329ff4941"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title> C#语言实现Socket通信-1</title>
    <url>/2020/09/18/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Socket%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f18518d24329a13c32a14e96d39c080ee10ba7d5b6330ce166f06cf3f8dda1bb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Augument Reality : Review 1</title>
    <url>/2020/09/17/Augument-Reality-Review-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Augument-Reality-Review-1"><a href="#Augument-Reality-Review-1" class="headerlink" title="Augument Reality : Review 1"></a>Augument Reality : Review 1</h1><h2 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h2><blockquote>
<p>Azuma [3] provides a commonly accepted definition of AR as a technology which (1) combines real and virtual imagery, (2)  is interactive in real time, and (3) registers the virtual imagery with the real world.</p>
<p>—-<Trends in Augmented Reality Tracking, Interaction and Display : A Review of Ten Years of ISMAR></p>
<ol>
<li><p>Combines real and virtual</p>
</li>
<li><p>Is interactive in real time</p>
</li>
<li>Is registered in three dimensions</li>
</ol>
<p>—-<A Survey of Augmented Reality></p>
</blockquote>
<hr>
<h2 id="AR-Research-Topics"><a href="#AR-Research-Topics" class="headerlink" title="AR Research Topics"></a>AR Research Topics</h2><ol>
<li><p>Graphics rendering hardware and software</p>
<p>Graphics rendering hardware and software that can create the virtual content for overlaying the real world.</p>
</li>
<li><p><strong>Tracking techniques</strong></p>
<p>Tracking techniques so that <strong>the changes in the viewer’s position can be properly reflected in the rendered graphics</strong></p>
</li>
<li><p><strong>Tracker calibration and registration tools</strong></p>
<p>Tracker calibration and registration tools for <strong>precisely aligning the real and virtual views when the user view is fixed</strong></p>
</li>
<li><p>Display hardware</p>
<p>Display hardware for merging virtual images with views of the real world</p>
</li>
<li><p>Computer processing hardware for running AR simulation code and supporting input and output devices</p>
</li>
<li><p>Interaction techniques</p>
<p>Interaction techniques specifying how the user can manipulate the AR virtual content.</p>
</li>
</ol>
<hr>
<h2 id="Tracking-Techniques"><a href="#Tracking-Techniques" class="headerlink" title="Tracking Techniques"></a>Tracking Techniques</h2><h3 id="Sensor-Based-Tracking-Techniques"><a href="#Sensor-Based-Tracking-Techniques" class="headerlink" title="Sensor-Based Tracking Techniques"></a>Sensor-Based Tracking Techniques</h3><hr>
<hr>
<h3 id="Vision-Based-Tracking-Techniques"><a href="#Vision-Based-Tracking-Techniques" class="headerlink" title="Vision-Based Tracking Techniques"></a>Vision-Based Tracking Techniques</h3><p>Vision-based tracking techniques can use image processing methods to <strong>calculate the camera pose relative to real world objects.</strong></p>
<h4 id="feature-based"><a href="#feature-based" class="headerlink" title="feature-based"></a>feature-based</h4><p>The rationale underlying feature-based methods is to find a correspondence between 2D image features and their 3D world frame coordinates.</p>
<hr>
<hr>
<hr>
<h5 id="Markers"><a href="#Markers" class="headerlink" title="Markers"></a>Markers</h5><h6 id="Artificial-markers"><a href="#Artificial-markers" class="headerlink" title="Artificial markers"></a>Artificial markers</h6><p>Early computer vision papers at IWAR described marker tracking methods that could be used to calculate camera pose in real time from artificial markers.</p>
<h6 id="Natural-Features-such-as-points-lines-edges-or-textures"><a href="#Natural-Features-such-as-points-lines-edges-or-textures" class="headerlink" title="Natural Features,such as points, lines, edges or textures"></a>Natural Features,such as points, lines, edges or textures</h6><hr>
<hr>
<hr>
<h4 id="model-based"><a href="#model-based" class="headerlink" title="model-based"></a>model-based</h4><p>Model-based trackers usually construct their models based on lines or edges in the model.</p>
<p>Texture is another useful feature for constructing models. </p>
<hr>
<hr>
<h3 id="hybrid-tracking-techniques"><a href="#hybrid-tracking-techniques" class="headerlink" title="hybrid tracking techniques"></a>hybrid tracking techniques</h3><hr>
]]></content>
      <categories>
        <category>论文总结</category>
      </categories>
      <tags>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV中的Aruco识别</title>
    <url>/2020/09/17/OpenCV%E4%B8%AD%E7%9A%84Aruco%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OpenCV中的Aruco识别"><a href="#OpenCV中的Aruco识别" class="headerlink" title="OpenCV中的Aruco识别"></a>OpenCV中的Aruco识别</h1><blockquote>
<p>转载博客：</p>
<p><a href="https://blog.csdn.net/u010260681/article/details/77089657">https://blog.csdn.net/u010260681/article/details/77089657</a></p>
<p>如有侵权，立即删除</p>
</blockquote>
<p>姿态估计（Pose estimation）在<a href="http://lib.csdn.net/base/computervison">计算机视觉</a>领域扮演着十分重要的角色：<a href="http://lib.csdn.net/base/robot">机器人</a>导航、增强现实以及其它。这一过程的基础是找到现实世界和图像投影之间的对应点。这通常是很困难的一步，因此我们常常用自己制作的或基本的Marker来让这一切变得更容易。</p>
<p>最为流行的一个途径是基于二进制平方的标记。这种Marker的主要便利之处在于，一个Marker提供了足够多的对应（四个角）来获取相机的信息。同样的，内部的二进制编码使得<a href="http://lib.csdn.net/base/datastructure">算法</a>非常健壮，允许应用错误检测和校正技术的可能性。</p>
<p>aruco模块基于ArUco库，这是一个检测二进制marker的非常流行的库，是由Rafael Muñoz和Sergio Garrido完成的。</p>
<p>aruco的函数包含在c++：<a href="http://docs.opencv.org/3.1.0/d9/d53/aruco_8hpp.html">链接地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2&#x2F;aruco.hpp&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Marker和字典"><a href="#Marker和字典" class="headerlink" title="Marker和字典"></a>Marker和字典</h2><p>一个ArUco marker是一个二进制平方标记，它由一个宽的黑边和一个内部的二进制矩阵组成，内部的矩阵决定了它们的id。黑色的边界有利于快速检测到图像，二进制编码可以验证id，并且允许错误检测和矫正技术的应用。marker的大小决定了内部矩阵的大小。例如，一个4x4的marker由16bits组成。</p>
<p>一些ArUco markers的例子：</p>
<p><img src="http://docs.opencv.org/3.1.0/markers.jpg" alt="markers.jpg"></p>
<p>应当注意到，我们需要检测到一个Marker在空间中发生了旋转，但是，检测的过程需要确定它的初始角度，所以每个角落需要是明确的，不能有歧义，保证上述这点也是靠二进制编码完成的。</p>
<p>markers的字典是在一个特殊应用中使用到的marker的集合。这仅仅是每个marker的二进制编码的链表。</p>
<p>字典的主要性质是字典的大小和marker的大小：</p>
<ul>
<li>字典的大小是组成字典的marker的数量</li>
<li><p>marker的大小是这些marker的尺寸（位的个数）</p>
<p>aruco模块包含了一些预定义的字典，这些字典涵盖了一系列的字典大小和Marker尺寸。</p>
</li>
</ul>
<p>有些人可能会认为Marker的id是从十进制转成二进制的。但是，考虑到较大的marker会有较多的位数，管理如此多的数据不那么现实，这并不可能。反之，一个marker的id仅需是marker在它所在的字典的下标。例如，一个字典里的五个marker的id是：0,1,2,3和4。</p>
<p>更多有关字典的信息在“选择字典”部分提及。</p>
<h2 id="创建Marker"><a href="#创建Marker" class="headerlink" title="创建Marker"></a>创建Marker</h2><p>​    在检测之前，我们需要打印marker，以把它们放到环境中。marker的图像可以使用<a href="http://docs.opencv.org/3.1.0/d6/d6e/group__imgproc__draw.html#ga482fa7b0f578fcdd8a174904592a6250">drawMarker()</a>函数生成。</p>
<p>​    例如，让我们分析一下如下的调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat markerImage;</span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</span><br><span class="line"></span><br><span class="line">  cv::aruco::drawMarker(dictionary, <span class="number">23</span>, <span class="number">200</span>, markerImage, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>首先，我们通过选择aruco模块中一个预定义的字典来创建一个字典对象，具体而言，这个字典是由250个marker组成的，每个marker的大小为6x6bits(DICT_6X6_250)</p>
<p>​     <code>drawMarker</code>的参数如下：</p>
<ul>
<li>第一个参数是之前创建的字典对象。</li>
<li>第二个参数是marker的id，在这个例子中选择的是字典DICT_6X6_250第23个marker。注意到每个字典是由不同数目的Marker组成的，在这个例子中，有效的Id数字范围是0到249。不在有效区间的特定id将会产生异常。</li>
<li>第三个参数，200，是输出Marker图像的大小。在这个例子中，输出的图像将是200x200像素大小。注意到这一参数需要满足能够存储特定字典 的所有位。所以，举例而言，你不能为6x6大小的marker生成一个5x5图像（这还没有考虑到Marker的边界）。除此之外，为了避免变形，这一参数最好和位数+边界的大小成正比，至少要比marker的大小大得多（如这个例子中的200)，这样变形就不显著了。</li>
<li>第四个参数是输出的图像。</li>
<li>最终，最后一个参数是一个可选的参数，它指定了Marer黑色边界的大小。这一大小与位数数目成正比。例如，值为2意味着边界的宽度将会是2的倍数。默认的值为1。</li>
<li>生成的图像如下：</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/marker23.jpg" alt="marker23.jpg"></p>
<p>​    详细的例子在模块演示文件夹中的 <code>create_marker.cpp</code> </p>
<h2 id="检测Marker"><a href="#检测Marker" class="headerlink" title="检测Marker"></a>检测Marker</h2><p>给定一个可以看见ArUco marker的图像，检测程序应当返回检测到的marker的列表。每个检测到的marker包括：</p>
<ul>
<li>图像四个角的位置（按照原始的顺序）</li>
<li>marker的Id</li>
</ul>
<p>marker检测过程由以下两个主要步骤构成：</p>
<ol>
<li>检测有哪些marker。在这一阶段我们分析图像，以找到哪些形状可以被识别为Markers。首先要做的是利用自适应性阈值来分割marker，然后从阈值化的图像中提取外形轮廓，并且舍弃那些非凸多边形的，以及那些不是方形的。我们还使用了一些额外的滤波（来剔除那些过小或者过大的轮廓，过于相近的凸多边形，等）</li>
<li>检测完marker之后，我们有必要分析它的内部编码来确定它们是否确实是marker。此步骤首先提取每个标记的标记位。为了达到这个目的，首先，我们需要对图像进行透视变换，来得到它规范的形态（正视图）。然后，对规范的图像用Ossu阈值化以分离白色和黑色位。这一图像根据marker大小和边界大小被分为不同格子，我们统计落在每个格子中的黑白像素数目来决定这是黑色还是白色的位。最终，我们分析这些位数来决定这个marker是属于哪个特定字典的，如果有必要的话，需要对错误进行检测。</li>
</ol>
<p>考虑如下图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersoriginal.png" alt="singlemarkersoriginal.png"></p>
<p>这些是检测出来的marker（用绿色标记）</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersdetection.png" alt="singlemarkersdetection.png"></p>
<p>以下是识别阶段被剔除的Marker候选（用粉红色标记）：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersrejected.png" alt="singlemarkersrejected.png"></p>
<p>在aruco模块，检测是由<code>detectMarkers()</code> 函数完成的，这一函数是这个模块中最重要的函数，因为剩下的所有函数操作都基于detectMarkers()返回的检测出的markers。</p>
<p>一个marker检测的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat inputImage;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; markerIds; </span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;Point2f&gt; &gt; markerCorners, rejectedCandidates; </span><br><span class="line">cv::aruco::DetectorParameters parameters; </span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br><span class="line">cv::aruco::detectMarkers(inputImage, dictionary, markerCorners, markerIds, parameters, rejectedCandidates); </span><br></pre></td></tr></table></figure>
<p><code>detectMarkers</code> 的参数为：</p>
<ul>
<li>第一个参数是待检测marker的图像。</li>
<li>第二个参数是字典对象，在这一例子中是之前定义的字典 (<code>DICT_6X6_250</code>).</li>
<li>检测出的markers存储在<code>markerCorners</code> 和 <code>markerIds</code>结构中：<ul>
<li><code>markerCorners</code> 是检测出的图像的角的列表。对于每个marker，将返回按照原始顺序排列的四个角（从左上角顺时针开始）。因此，第一个点是左上角的角，紧接着右上角、右下角和左下角。</li>
<li><code>markerIds</code> 是在markerCorners检测出的所有maker的id列表.注意返回的markerCorners和<code>markerIds</code> 向量具有相同的大小。 </li>
</ul>
</li>
<li>第四个参数是类型的对象 <code>DetectionParameters</code>. 这一对象包含了检测阶段的所有参数。这一参数将在 下一章节详细介绍。</li>
<li><p>最后的参数, <code>rejectedCandidates</code>, 返回了所有的marker候选, 例如， 那些被检测出来的不是有效编码的方形。每个候选同样由四个角定义， 它的 形式和markerCorners的参数一样。这一参数可以省略，它仅仅用于debug阶段，或是用于“再次寻找”策略（见<a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga90374a799f1da566e5de16f277b12463">refineDetectedMarkers()</a>）</p>
<p><code>detectMarkers()</code>之后，接下来你想要做的事情可能是检查你的marker是否被正确地检测出来了。幸运的是，aruco模块提供了一个函数，它能在输入图像中来绘制检测出来的markers，这个函数就是<a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga2ad34b0f277edebb6a132d3069ed2909">drawDetectedMarkers()</a> ,例子如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat outputImage;</span><br><span class="line">cv::aruco::drawDetectedMarkers(image, markerCorners, markerIds);</span><br></pre></td></tr></table></figure></li>
<li><code>image</code> 是输入/输出图像，程序将在这张图上绘制marker。（它通常就是检测出marker的那张图像）</li>
<li><code>markerCorners</code> 和 <code>markerIds</code> 是检测出marker的结构，它们的格式和 <code>detectMarkers()</code>函数提供的一样。</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersdetection.png" alt="singlemarkersdetection.png"></p>
<p> 注意到这个函数仅仅用于可视化，而没有别的什么用途。</p>
<p>使用这两个函数我们完成了基本的marker识别步骤，我们可以从相机中检测出Marker了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture inputVideo; </span><br><span class="line"></span><br><span class="line">inputVideo.open(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (inputVideo.grab()) </span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    cv::Mat image, imageCopy;</span><br><span class="line">    inputVideo.retrieve(image); </span><br><span class="line">    image.copyTo(imageCopy);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners; </span><br><span class="line">    cv::aruco::detectMarkers(image, dictionary, corners, ids);</span><br><span class="line">    <span class="comment">// if at least one marker detected </span></span><br><span class="line">    <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) </span><br><span class="line">        cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">    cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy); </span><br><span class="line">    <span class="keyword">char</span> key = (<span class="keyword">char</span>) cv::waitKey(waitTime); </span><br><span class="line">    <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    注意到这里忽略了有些可选的参数，比如检测参数对象、以及输出的被剔除的候选对象向量。</p>
<p>​    完整的工程代码包含在模块样例文件夹中的<code>detect_markers.cpp</code> </p>
<h2 id="Pose检测"><a href="#Pose检测" class="headerlink" title="Pose检测"></a>Pose检测</h2><p>接下来你想要做的应当是通过Marker检测来获取相机pose。</p>
<p>为了展现相机的Pose检测，你需要知道你的相机的校准（Calibration）参数。这是一个相机矩阵和畸变系数。如果你不知道如何校准你的相机，你可以看一看<code>calibrateCamera()</code> 函数，以及<a href="http://lib.csdn.net/base/opencv">OpenCV</a>的校准教程。你同样可以使用aruco模块来校准你的相机，这在使用aruco进行校准的教程中将会介绍。注意这个过程只需要做一次，除非你的相机的光学性质发生了改变（例如调焦）</p>
<p>最后，在校准之后我们得到的是相机矩阵：这是一个3x3的矩阵，包含了焦距和相机中心坐标（相机的内参），以及畸变系数：一个包含五个以上元素的向量，它描述的是相机产生的畸变。</p>
<p>当你用ArUco marker来检测相机Pose时，你可以单独地检测每个Marker的pose。如果你想要从一堆Marker里检测出一个pose，你需要的是aruco板。（参见ArUco板教程）</p>
<p>涉及到marker的相机pose是一个从marker坐标系统到相机坐标系统的三维变换。这是由一个旋转和一个平移向量确定的（参见 <code>solvePnP()</code> 函数）</p>
<p>aruco模块提供了一个函数，用来检测所有探测到的Marker的pose。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Mat cameraMatrix, distCoeffs; </span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs; </span><br><span class="line"></span><br><span class="line">cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, cameraMatrix, distCoeffs, rvecs, tvecs); </span><br></pre></td></tr></table></figure>
<ul>
<li><code>corners</code> 参数是marker的角向量，是由<code>detectMarkers()</code> 函数返回的。</li>
<li>第二个参数是marker的大小（单位是米或者其它）。注意Pose检测的平移矩阵单位都是相同的。</li>
<li><code>cameraMatrix</code> 和 <code>distCoeffs</code> 是需要求解的相机校准参数。</li>
<li><p><code>rvecs</code> 和 <code>tvecs</code> 分别是每个markers角的旋转和平移向量。</p>
<p>这一函数获取的marker坐标系统处在marker重心，Z坐标指向纸面外部，如下图所示。坐标的颜色为,X:红色，Y：绿色，Z：蓝色。</p>
</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersaxis.png" alt="singlemarkersaxis.png"></p>
<p>aruco模块提供了一个函数绘制上图中的坐标，所以我们可以检查pose检测的正确性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::drawAxis (image, cameraMatrix, distCoeffs, rvec, tvec, <span class="number">0.1</span>); </span><br></pre></td></tr></table></figure>
<ul>
<li><code>image</code> 是输入/输出图像，坐标将会在这张图像上绘制（通常就是检测marker的那张图像）。</li>
<li><code>cameraMatrix</code> 和 <code>distCoeffs</code> 是相机校准参数。</li>
<li><code>rvec</code> 和 <code>tvec</code> 是Pose参数，指明了坐标绘制的位置。</li>
<li>最后一个参数是坐标轴的长度，和tvec单位一样（通常是米）。</li>
</ul>
<p>针对一个marker的pose检测的基本的完整示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture inputVideo;</span><br><span class="line">inputVideo.open(<span class="number">0</span>);</span><br><span class="line">cv::Mat cameraMatrix, distCoeffs; <span class="comment">// camera parameters are read from somewhere </span></span><br><span class="line"></span><br><span class="line">readCameraParameters(cameraMatrix, distCoeffs);</span><br><span class="line"></span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (inputVideo.grab()) &#123; </span><br><span class="line">	cv::Mat image, imageCopy;</span><br><span class="line">	inputVideo.retrieve(image); </span><br><span class="line">	image.copyTo(imageCopy);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids; </span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners; </span><br><span class="line">	cv::aruco::detectMarkers(image, dictionary, corners, ids);<span class="comment">// if at least one marker detected </span></span><br><span class="line">	<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123; </span><br><span class="line">		cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">        <span class="built_in">vector</span>&lt; Mat &gt; rvecs, tvecs; </span><br><span class="line">        cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, cameraMatrix, distCoeffs, rvecs, tvecs); <span class="comment">// draw axis for each marker </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ids.size(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            cv::aruco::drawAxis(imageCopy, cameraMatrix, distCoeffs, rvecs[i], tvecs[i], <span class="number">0.1</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy); </span><br><span class="line">        <span class="keyword">char</span> key = (<span class="keyword">char</span>) cv::waitKey(waitTime); </span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    样例视频:</p>
<p>​    <a href="https://youtu.be/IsXWrcB_Hvs"><img src="http://img.youtube.com/vi/IsXWrcB_Hvs/0.jpg" alt="ArUco markers detection video"></a></p>
<p>​    完整的工程代码包含在模块样例文件夹中的 <code>detect_markers.cpp</code></p>
<h2 id="选择字典"><a href="#选择字典" class="headerlink" title="选择字典"></a>选择字典</h2><p>aruco模块提供了Dictionary类来描述marker的字典。</p>
<p>除了marker大小和字典中的marker数目，字典还有一个很重要的参数，就是内部marker的距离。内部marker的距离是marker之间的最小距离，它决定了字典错误检测和纠正能力。</p>
<p>一般而言，较小的字典大小和较大的marker大小将会产生更大的内部marker距离，反之亦然。但是，过大的Marker在检测中更加困难，因为我们需要从图像中提取出更多位的信息。</p>
<p> 例如，如果你的应用中仅仅需要10个marker，最好使用只包含10个marker的字典，而不是包含1000个marker的字典。原因在于，由10个marker组成的字典将会有更大的内部Marker距离，因此，它的容错性更强。</p>
<p>结果，aruco模块包含了很多选择marker字典的途径，所以你可以让你的系统变得更加健壮。</p>
<ul>
<li>预定义的字典：</li>
</ul>
<p>这是选择字典最简单的办法。aruco模块包含了一系列预定义的字典，涵盖了不同的marker大小和marker数量。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br></pre></td></tr></table></figure>
<p>DICT_6X6_250 是一个预定义的字典，它包含6x6位的marker，总共有250个marker。</p>
<p>在所有提供的字典中，我们推荐使用你选择尽可能小的marker。例如，如果你需要6x6位的200个marker，选择DICT_6X6_250要优于选择DICT_6X6_1000。字典越小，内部距离就越大。</p>
<ul>
<li>自动生成的字典:</li>
</ul>
<p>我们可以针对想要的marker数量和位来生成字典，以得到最优的内部Marker距离。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::generateCustomDictionary(<span class="number">36</span>, <span class="number">5</span>); </span><br></pre></td></tr></table></figure>
<p>这将会产生一个由36个5X5位字典组成的标准字典。这个过程需要几秒钟，具体时间取决于你的参数（更大的字典和更多的位数会耗费更多的时间）</p>
<ul>
<li>手动生成的字典:</li>
</ul>
<p>最终，我们可以手动设置字典，方便做任何修改。为了做到这一点，我们需要手动给 <code>Dictionary</code> 对象参数赋值。必须注意的是，除非你有一些特别的理由需要自己来生成字典，一般情况下我们推荐前面的任一种方案。</p>
<p>字典参数为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">    	Mat bytesList; </span><br><span class="line">    	<span class="keyword">int</span> markerSize; </span><br><span class="line">    	<span class="keyword">int</span> maxCorrectionBits; <span class="comment">// maximum number of bits that can be corrected</span></span><br><span class="line">    	...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>bytesList</code> 是一个数组，它包含了所有marker代码的信息。markerSize是每个marker的维度（例如，参数为5代表5x5位）。最终， <code>maxCorrectionBits</code>是marker检测中 可校正的最大比特数，如果这个值过大，会得到大量的错误位置。</p>
<p> <code>bytesList</code> 中的每一行代表字典中的一个marker。但是，这些marker的数据并不以二进制形式存储，而是以一种特殊的方式存储，这样可以简化检测的过程。</p>
<p>幸运的是，我们可以简单地调用静态方法<code>Dictionary::getByteListFromBits()</code>来转换到这种形式。</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Dictionary dictionary; </span><br><span class="line"><span class="comment">// markers of 6x6 bits </span></span><br><span class="line">dictionary.markerSize = <span class="number">6</span>; </span><br><span class="line"><span class="comment">// maximum number of bit corrections </span></span><br><span class="line">dictionary.maxCorrectionBits = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// lets create a dictionary of 100 markers </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">&#123;<span class="comment">// assume generateMarkerBits() generate a new marker in binary format, so that </span></span><br><span class="line"><span class="comment">// markerBits is a 6x6 matrix of CV_8UC1 type, only containing 0s and 1s </span></span><br><span class="line">	cv::Mat markerBits = generateMarkerBits(); </span><br><span class="line">	cv::Mat markerCompressed = getByteListFromBits(markerBits); <span class="comment">// add the marker as a new row</span></span><br><span class="line">	dictionary.bytesList.push_back(markerCompressed); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="检测参数"><a href="#检测参数" class="headerlink" title="检测参数"></a>检测参数</h2><p> <a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga306791ee1aab1513bc2c2b40d774f370">detectMarkers()</a>的一个参数是DetectorParameters对象。这一对象包含了marker检测过程中所有特定的选项。</p>
<p>在这一章节中，我们将介绍所有的参数。我们可以根据它们涉及的阶段来给这些参数分类。</p>
<h4 id="阈值化"><a href="#阈值化" class="headerlink" title="阈值化"></a>阈值化</h4><p>检测的第一步是输入图像的阈值化。</p>
<p>例如，上述样例中的图像阈值化的结果如下：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersthresh.png" alt="singlemarkersthresh.png"></p>
<p>这一阈值化过程由以下几个参数决定：</p>
<ul>
<li><code>int adaptiveThreshWinSizeMin</code>, <code>intadaptiveThreshWinSizeMax</code>, <code>int adaptiveThreshWinSizeStep</code></li>
</ul>
<p>​    <code>adaptiveThreshWinSizeMin</code> 和 <code>adaptiveThreshWinSizeMax</code> 参数代表选择的自适应阈值窗口大小（以像素为单位）间隔（具体参见<a href="http://lib.csdn.net/base/opencv">opencv</a>的 <code>threshold()</code>函数）。</p>
<p>参数adaptiveThreshWinSizeStep表明了窗口从adaptiveThreshWinSizeMin到adaptiveThreshWinSizeMax大小的增量。</p>
<p>例如，对于adaptiveThreshWinSizeMin=5，adaptiveThreshWinSizeMax=21以及adaptiveThreshWinSizeStep=4，那么将会产生5个阈值化步骤，窗口大小分别为5, 9, 13, 17 和 21。在每个阈值化图像中，都会选出一些marker候选。</p>
<p>如果marker大小太大的话，较小的窗口大小可能会切割marker的边界，所以它将不会被检测到，就像下图一样：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersbrokenthresh.png" alt="singlemarkersbrokenthresh.png"></p>
<p>Broken marker image</p>
<p>另一方面，如果marker太小的话，较大的窗口大小也会有类似的效果。此外这一过程将会趋向于全局阈值，而失去了自适应的特性。</p>
<p>最简单的例子是对adaptiveThreshWinSizeMin和 <code>adaptiveThreshWinSizeMax</code>使用相同的值，这样就只会执行一次阈值化步骤。但是，最好还是使用一个范围的值作为窗口大小，虽然较多的阈值化步骤会在一定程度上降低性能。</p>
<p>缺省参数：<code>adaptiveThreshWinSizeMin</code>: 3, <code>adaptiveThreshWinSizeMax</code>: 23, <code>adaptiveThreshWinSizeStep</code>: 10</p>
<ul>
<li><p><code>double adaptiveThreshConstant</code></p>
<p>这一参数表达了阈值状态下的常量（参见Opencv函数）。它的默认值是大多数例子下较好的情况。</p>
</li>
</ul>
<p>默认值: 7</p>
<h4 id="轮廓滤波"><a href="#轮廓滤波" class="headerlink" title="轮廓滤波"></a>轮廓滤波</h4><p>阈值化之后，我们需要检测轮廓。但是，我们并不会把所有的轮廓都当作是候选。在不同步骤中，我们通过滤波剔除一些不太可能是marker的轮廓。这一章节中的参数可以自定义这一过程。</p>
<p> 需要注意到，大多数例子中我们需要平衡检测的性能和效率。所有考虑到的轮廓都会在接下来的过程中做进一步处理，这通常产生了更高的计算消耗。所以，我们希望能够在这一阶段就丢弃错误的候选，而不是下一阶段继续处理。</p>
<p>另一方面，如果滤波的条件过于苛刻，事实上的marker轮廓可能会被错误地剔除，因此，没有检测到marker。</p>
<ul>
<li><p><code>double minMarkerPerimeterRate</code>, <code>doublemaxMarkerPerimeterRate</code></p>
<p>这些参数决定了marker的最小值和最大值，具体来说，是最大最小marker的周长。它们并不是以绝对像素值作为单位，而是相对于输入图片的最大尺寸指定的。</p>
</li>
</ul>
<p>例如，大小为640x480，最小相对marker周长为0.05的图像，将会产生一个最小周长640x0.05 = 32(像素)的marker，因为640是图像的最大尺寸。参数 <code>maxMarkerPerimeterRate</code> 也是类似的。</p>
<p> 如果 <code>minMarkerPerimeterRate</code>太小，检测阶段性能会降低，因为会有更多的轮廓进入到接下来的阶段。这一弊端对于 <code>maxMarkerPerimeterRate</code>参数而言不是那么显著，因为小的轮廓数目通常要多于大的轮廓。选取 <code>minMarkerPerimeterRate</code>值为0以及值为4，就相当于考虑了图像中的所有轮廓，但是出于性能考虑这是不推荐的。</p>
<p> 缺省值：</p>
<p>Default values:<code>minMarkerPerimeterRate</code> : 0.03, <code>maxMarkerPerimeterRate</code> : 4.0</p>
<ul>
<li><code>double polygonalApproxAccuracyRate</code></li>
</ul>
<p>我们对所有的候选进行多边形近似，只有近似结果为方形的形状才能通过<a href="http://lib.csdn.net/base/softwaretest">测试</a>。这一值决定了多边形近似产生的最大误差（参见<code>approxPolyDP()</code> 函数）。</p>
<p> 这一参数是相对于候选长度的（像素上）。所以如果候选的周长为100像素，polygonalApproxAccuracyRate的值为0.04，那么最大的误差应当为100x0.04=5.4像素。</p>
<p>在大多例子中，缺省参数的表现已经很好了，但对高失真的图像，我们需要更大的误差值。</p>
<p>​    缺省值：0.05</p>
<ul>
<li><code>double minCornerDistanceRate</code></li>
</ul>
<p>同一张marker中每一对角的最小距离。这是相对于marker周长的值。像素的最小距离为Perimeter * minCornerDistanceRate.</p>
<p>​    缺省值: 0.05</p>
<ul>
<li><p><code>double minMarkerDistanceRate</code></p>
<p>两张不同的marker之间的任一对角的最小距离。它表示相对于两个marker的最小标记周长。如果两个候选太接近，较小的一个被忽略。</p>
</li>
</ul>
<p>​    缺省值：0.05</p>
<ul>
<li><code>int minDistanceToBorder</code></li>
</ul>
<p>marker角到图像边缘最小距离。部分图像边缘被遮挡的marker也能被正确地检测出来，如果遮挡部分比较小的话。但是，如果其中一个角被挡住了，返回的角通常在图像边界的一个错误的位置。</p>
<p>如果marker角的位置很重要的话，例如你想要做pose检测，最好舍弃掉那些离图像边缘太接近的角。否则就没有必要。</p>
<p>​    缺省值：3</p>
<h4 id="比特位提取"><a href="#比特位提取" class="headerlink" title="比特位提取"></a>比特位提取</h4><p>检测到候选之后，我们需要分析每个候选的比特位，来确定它们是不是marker。</p>
<p>在分析二进制编码之前，我们需要提取出比特位。为了达到这个目的，将对透视变换后的图像使用Otsu进行阈值化，来分离黑色和白色像素。</p>
<p>以下是一个透视变换后的图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/removeperspective.png" alt="removeperspective.png"></p>
<p>接下来，图像被划分为网格，和marker位数相同。在每个单元格里，我们统计黑色和白色的个数，决定这个单元格的比特位。</p>
<p><img src="http://docs.opencv.org/3.1.0/bitsextraction1.png" alt="bitsextraction1.png"></p>
<p>以下参数可以自定义这一过程：</p>
<ul>
<li><code>int markerBorderBits</code></li>
</ul>
<p>这一参数指定了marker边界的宽度。这和每个比特位的大小相关。因此，值为2意味着边界的长度是两个内部比特位的长度。</p>
<p>这一参数需要和你使用的Marker边界大小一致，边界的大小可以在绘制函数如 <code>drawMarker()</code>中设置。</p>
<p>​    缺省值：1</p>
<ul>
<li><code>double minOtsuStdDev</code></li>
</ul>
<p>这个值决定了进行Otsu的最小标准差的像素值。如果偏差很低，这可能意味着所有方形都是黑色的(或白色的），Ostu将不起作用。如果是这样的话，所有的比特位都根据平均值大于还是小于128被设为0或者1.</p>
<p>​    缺省值：5.0</p>
<ul>
<li><code>int perpectiveRemovePixelPerCell</code></li>
</ul>
<p>这一参数决定了透视变换后图像的像素数目（每个单元格，包含边界）。这是上图中红色正方形的大小。</p>
<p>例如，让我们假设我们在处理5x5比特位、边界为1比特位的marker（参见markerBorderBit）。然后，每一维的单元格/比特位的个数为：5 + 2* 1 = 7（边界需要被统计2次）。单元格总体大小为：7x7。</p>
<p>如果perpectiveRemovePixelPerCell的值为10，那么获取到的图像大小为10*7 = 70 -&gt; 70x70 </p>
<p>这一参数选择更大的值可以提升比特位的提取过程（在某一程度上），但是它同样也降低了性能。</p>
<p>​    缺省值：4</p>
<ul>
<li><code>double perspectiveRemoveIgnoredMarginPerCell</code></li>
</ul>
<p>当提取每个单元格的比特位时，需要统计黑色和白色的像素个数。一般而言，我们不推荐考虑单元格的所有像素。反之，最好忽略单元格的一些像素。</p>
<p>原因在于，透视变换之后，单元格的颜色不会完全分离，白色的单元格可能会混入一些黑色的单元格（反之亦然）。因此，最好忽略这些像素，以避免错误的像素计数。</p>
<p>例如，以下图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/bitsextraction2.png" alt="bitsextraction2.png"></p>
<p>我们只考虑处在绿色正方形中的像素。我们可以在右边的图像中看到，最终的像素包含了邻域单元格更少的噪声。参数<code>perspectiveRemoveIgnoredMarginPerCell</code> 指明了红色和绿色正方形之间的距离。</p>
<p>这一参数是相对于单元格整体的大小的。例如，如果单元格的大小为40像素，这一参数的值为0.1，那么大小为40*0.1=4像素的边界将被剔除。这意味着每个单元格实际上要分析的像素大小为32x32，而不是40x40。</p>
<p>​     缺省值：0.13</p>
<h4 id="Marker-ID"><a href="#Marker-ID" class="headerlink" title="Marker ID"></a>Marker ID</h4><p>比特位提取之后，接下来的步骤是检查提取的编码是否属于这个marker字典，有必要的话，还需要做错误检测步骤。</p>
<ul>
<li><p><code>double maxErroneousBitsInBorderRate</code></p>
<p>marker边界的比特位应当是黑色的。这一参数指明了允许的边界出错比特位的个数。如，边界可以出现的白色比特位的最大值。它的大小相对于marker中的比特位总数。</p>
</li>
</ul>
<p>​    缺省值：0.35</p>
<ul>
<li><code>double errorCorrectionRate</code></li>
</ul>
<p>每个marker字典有一位可以纠正的理论最大值（Dictionary.maxCorrectionBits）。但是，这个值可以由<code>errorCorrectionRate</code> 参数来修改。</p>
<p> 例如，如果允许纠正的比特位（对于使用的字典）数目为6， <code>errorCorrectionRate</code>的值为0.5，那么实际上最大的可以纠正的比特位个数为6*0.5=3</p>
<p>这一值对减少错误容忍率以避免错误的位置识别很有帮助。</p>
<p>​    缺省值：0.6</p>
<h4 id="角落细化（Corner-Refinement）"><a href="#角落细化（Corner-Refinement）" class="headerlink" title="角落细化（Corner Refinement）"></a>角落细化（Corner Refinement）</h4><p>当我们检测完marker，并且验证了它们的id之后，最后要做的一步是在角落处的亚像素级的细化（参见OpenCV <code>cornerSubPix()</code>)</p>
<p>注意，这一步是可选的，仅在我们对marker角位置的准确性要求很高时才有意义。例如，pose的检测。这一步骤很耗费时间，所以默认下是不做的。</p>
<ul>
<li><code>bool doCornerRefinement</code></li>
</ul>
<p>这一参数决定了是否要进行角落亚像素级细化过程，如果对角点的准确性要求不高，可以不进行这一过程。</p>
<p>​    缺省值：false</p>
<ul>
<li><code>int cornerRefinementWinSize</code></li>
</ul>
<p>这一参数决定了亚像素级细化过程的窗口大小。</p>
<p>较大的值可以产生窗口区域内比较靠近的图像角，marker角会移动到一个不同的错误的地方。除此之外这还会影响到性能。</p>
<p>​    缺省值：5</p>
<ul>
<li><code>int cornerRefinementMaxIterations</code>, <code>doublecornerRefinementMinAccuracy</code></li>
</ul>
<p>这两个值决定了亚像素级细化过程的结束条件。cornerRefinementMaxIterations指明了迭代的最大次数，<code>cornerRefinementMinAccuracy</code> 是结束这一过程前的最小错误值。</p>
<p>如果迭代次数过高，这会影响到性能。此外，如果太小的话，亚像素级细化就基本没有发挥作用。</p>
<p>​    缺省值：</p>
<p><code>cornerRefinementMaxIterations</code>: 30, <code>cornerRefinementMinAccuracy</code>: 0.1</p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Windows10设置Windows terminal 当前目录打开</title>
    <url>/2020/09/15/%E5%85%B3%E4%BA%8EWindows10%E8%AE%BE%E7%BD%AEWindows-terminal-%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Win10-设置Windows-terminal-的特定目录打开设置"><a href="#关于Win10-设置Windows-terminal-的特定目录打开设置" class="headerlink" title="关于Win10 设置Windows terminal 的特定目录打开设置"></a>关于Win10 设置Windows terminal 的特定目录打开设置</h1><blockquote>
<p>参考博客:</p>
<p><a href="https://blog.csdn.net/andyL_05/article/details/105943820">https://blog.csdn.net/andyL_05/article/details/105943820</a></p>
<p>以下内容全部来自参考博客，如有侵权，请联系我删除，感谢</p>
</blockquote>
<h2 id="Windows-Terminal-简介"><a href="#Windows-Terminal-简介" class="headerlink" title="Windows Terminal 简介"></a>Windows Terminal 简介</h2><p>Windows Terminal 是微软推出的Windows端新的命令行工具，相比于之前一直被吐槽丑的command 和 powershell，Windows Terminal更加“现代”，界面好看，使用方便。</p>
<p>作为一款开源工具，repo位于<a href="https://github.com/Microsoft/Terminal">Windows Terminal</a>这里。当前（2020年5月初）版本为v0.11.1251.0，也是v1.0rc1，基本上就是预览版（preview）的最后一个版本了，在源码仓库里时间表上也可以看到<br><img src="https://img-blog.csdnimg.cn/20200506092739206.png" alt="在这里插入图片描述"><br>预计就是本月推出正式版的windows terminal了。<br>以往的预览版通常无法直接安装，需要从源码自行编译。目前已经可以直接从Microsoft Store里直接安装，不过要求系统版本<br><img src="https://img-blog.csdnimg.cn/20200506092952865.png" alt="在这里插入图片描述"><br>在1903或更新。</p>
<hr>
<h2 id="Windows-Terminal设置简要介绍"><a href="#Windows-Terminal设置简要介绍" class="headerlink" title="Windows Terminal设置简要介绍"></a>Windows Terminal设置简要介绍</h2><p>安装后直接打开的Windows Terminal是这个样子：<br><img src="https://img-blog.csdnimg.cn/20200506093128723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">注意到“Windows Terminal”这个名字实在是太长了，所以其实运行的可执行文件叫做 “wt”，按win键启动开始菜单输入 wt 就可以直接打开。<br>首先我们注意到字体就比cmd或者powershell好看了很多<br>点击右侧下拉菜单，可以选择新建其他的命令行，这里只是显示了默认的几个，实际上通过设置可以进行ssh连接到远程主机（不限于win系统）<br><img src="https://img-blog.csdnimg.cn/20200506093355250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置是通过setting.json实现的。<br>打开设置文件，可以看到一系列的设置选项：<br><img src="https://img-blog.csdnimg.cn/20200506093906551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>微软也有完善的文档支持这些设置，<a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md">使用者文档（user documentation）</a></p>
<p>以及 <a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md">setting.json文档</a></p>
<p>可以参考完成设置，我这里就不多说了。<br>简单说一下default里面的设置，就是默认打开的终端设置，这里不光可以设置背景颜色，字体等，还可以选择自定义的图片作为背景，比如我就设置了：<br><img src="https://img-blog.csdnimg.cn/2020050609424670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样的背景，感觉使用起来还是蛮有感觉的。</p>
<p>list内部就是自定义的profiles，可以配置打开不同的终端时的设置。guid就是全局唯一标识符，可以从工具自动生成。其他设置参考文档中的设置即可。</p>
<p>背景的独立设置，不仅美观，而且能够帮助我们直观的区分所处的环境，避免输入错误的命令导致严重后果。</p>
<hr>
<h2 id="Windows-Terminal-当前路径打开"><a href="#Windows-Terminal-当前路径打开" class="headerlink" title="Windows Terminal 当前路径打开"></a>Windows Terminal 当前路径打开</h2><p>熟悉cmd或powershell的朋友们应该知道，如果在文件夹地址栏直接输出 cmd 或 powershell 就可以在文件夹所处路径直接打开命令行终端，而不需要启动后再切换路径，对于Windows系统来说，由于磁盘分区、中文路径、反斜杠等因素，切换路径比起linux更让人烦一点。<br>除此之外，通过修改注册表也能够使用shift+右键选择此处启动powershell，这些都是快速在当前路径启动命令行的方式，那么Windows Terminal能不能这么做呢？</p>
<p>测试发现直接在文件夹地址栏输入wt（因为这个可执行文件就是wt.exe而不是完整名字）确实启动了Windows Terminal，但是初始路径位置并不是当前的文件夹。这里参考我们上面的设置，default里增加一行 “startingDirectory”: “.”，也就是打开目录为当前路径，就可以做到地址栏输入WT在特定目录启动Windows terminal了。</p>
<p>不过这里仍然有一些<strong>问题</strong>：<br>1· 首先如果不加这一行或者不对startingDirectory设置，那么默认启动路径是C:\Users\username这里，无论是双击wt.exe还是地址栏还是开始菜单启动都是这样，设置了之后默认位置就变成了C:\WINDOWS\system32这里，除了地址栏输入wt能够在特定目录启动外，其他运行Windows Terminal的方式一律在这里打开了。<br>2· 另外如果已经有Windows Terminal的窗口打开了，再次启动或者通过地址栏运行wt都会新建一个窗口而不是原来窗口的新标签页，并且标签页不能像浏览器一样拖进拖出；同时在某个路径下打开WT的窗口，点击右边“+”新建的标签页一定在同一个路径。一开始发现这个有点不爽，但是仔细想想可能这样做更实用一些，如果所有终端页面都是可拖动的标签页也难免混淆。<br>以上就是特定目录启动wt的一种方法，setting.json增加相应设置，然后地址栏输入wt按下回车即可。另外在文件夹中，快捷键 ctrl+L将焦点锁定地址栏，这样完全不需要鼠标，听起来有点geek了。</p>
<p>除此之外，通过自己建立注册表，也可以实现类似powershell的右键打开方式，具体方法参考<a href="https://github.com/microsoft/terminal/issues/1060">这个issue</a></p>
<p>由于我本人更喜欢地址栏打开方式，右键打开的配置就不赘述了，通过上述链接查看即可。</p>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>Windows terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub上传项目文件</title>
    <url>/2020/09/15/GitHub%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="在GitHub上，上传项目文件"><a href="#在GitHub上，上传项目文件" class="headerlink" title="在GitHub上，上传项目文件"></a>在GitHub上，上传项目文件</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>新建仓库</li>
<li>将仓库下载到本地</li>
<li>把要上传的项目文件夹，放进下载的仓库文件夹中</li>
<li>使用以下代码push到GitHub：</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .        </span><br><span class="line">git commit  -m  &quot;提交信息&quot;  </span><br><span class="line">git push -u origin master   </span><br></pre></td></tr></table></figure></h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>对于体积较大的项目文件，可能会遇到如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: the remote end hung up unexpectedly Everything up-to-date</span><br></pre></td></tr></table></figure>
<p><strong>错误原因</strong>：</p>
<p>文件太大</p>
<p><strong>解决办法</strong> :</p>
<blockquote>
<p>转载自<a href="https://blog.csdn.net/qq_21770005/article/details/78733008">https://blog.csdn.net/qq_21770005/article/details/78733008</a></p>
</blockquote>
<ul>
<li>windows:</li>
</ul>
<p>在 .git/config 文件中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">postBuffer &#x3D; 524288000</span><br></pre></td></tr></table></figure>
<ul>
<li>linux:</li>
</ul>
<p>在 .git/config 文件中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux:</span><br><span class="line">git config http.postBuffer 524288000</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Aruco实现AR梳理_1</title>
    <url>/2020/09/14/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Aruco-AR过程梳理-1"><a href="#Aruco-AR过程梳理-1" class="headerlink" title="Aruco AR过程梳理_1"></a>Aruco AR过程梳理_1</h1><hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>目的</strong>：在<em>VS2019</em>运行的<em>OpenGL</em>窗口上，<em>generated virtual computer generated 3D graphics on the realistic environment , i.e.</em> 在<em>OpenGL</em>的相机位置看到<em>AR</em>效果</p>
<p><strong>思路</strong>：</p>
<p><strong>OpenGL的世界中有虚拟相机，现实世界中有真实相机，只要将两个世界的世界坐标重合，相机位置重合，分别渲染虚拟模型与真实场景，即可达到AR效果</strong></p>
<ul>
<li>生成<em>OpenGL</em>窗口</li>
<li>将外部相机捕获的<em>frame</em>传递到<em>OpenGL</em>中，作为背景</li>
<li>定义虚拟的三维物体，将其渲染</li>
<li>相机捕获的背景，不需要透视变换，正交变换即可</li>
<li><p>虚拟物体，需要<em>MVP（model transform, view transform, projection transform）</em>变换</p>
</li>
<li><p>世界坐标系重合，使用OpenCV去做</p>
</li>
</ul>
<hr>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>两个世界的世界坐标系要完全重合，相机位置完全重合</p>
<blockquote>
<p>OpenGL中的世界坐标与虚拟物体局部坐标系的变换为Model Transform，世界坐标系与相机坐标系之间的变换为View Transform；</p>
<p>OpenCV中的aruco，将世界坐标系注册在marker上；<strong>Model Transform 保持不变（即虚拟物体的位置保持不变）</strong> </p>
</blockquote>
<p><em>OpenGL</em> 的摄像机需要实时改变自身位置与姿态，数据来自于<em>opencv</em> 相机标定<del>外参</del> </p>
<blockquote>
<p>相机标定完成后，得到的是相机内参与畸变参数，对于特定的相机来说，都是不变量，因此，相机标定只需要一次即可</p>
<p><strong>通过aruco的marker，获得相机的外参（重点），并实时传入OpenGL的View Transform矩阵</strong> </p>
<blockquote>
<p>用 aruco 的 marker 检测相机位姿时，是从marker坐标系（marker中心）到相机坐标系的一个三维变换矩阵</p>
</blockquote>
<p><strong>相机内参的作用：用来构造Projection Transform</strong> </p>
</blockquote>
<p><em>OpenGL</em> 中的背景图也需要实时改变</p>
<blockquote>
<p>将OpenCV捕获的图像，实时正交投影至背景</p>
</blockquote>
<hr>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ul>
<li><p>虚拟模型没有出现在规定的世界原点处；</p>
</li>
<li><p><del>如何将三维模型直接导入OpenGL，而不是一个一个的定义顶点坐标</del> </p>
<blockquote>
<p>解决方法：导入Assimp库，Assimp能够导入很多种不同的模型文件格式（并也能够导出部分的格式），它会将所有的模型数据加载至Assimp的通用数据结构中。当Assimp加载完模型之后，我们就能够从Assimp的数据结构中提取我们所需的所有数据了</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200913163957.png" alt=""></p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>ArucoDemo-2</title>
    <url>/2020/08/23/ArucoDemo-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/95796560">https://blog.csdn.net/qq_33446100/article/details/95796560</a></p>
</blockquote>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawCubeWireframe</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputOutputArray image, cv::InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputArray distCoeffs, cv::InputArray rvec, cv::InputArray tvec,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">float</span> l</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> wait_time = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">float</span> actual_marker_l = <span class="number">0.101</span>; <span class="comment">// this should be in meters</span></span><br><span class="line"></span><br><span class="line">	<span class="function">VideoWriter <span class="title">writer</span><span class="params">(<span class="string">&quot;VideoTest.avi&quot;</span>, VideoWriter::fourcc(<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), <span class="number">20.0</span>, Size(<span class="number">640</span>, <span class="number">480</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">	cv::Mat image, image_copy;</span><br><span class="line">	cv::Mat camera_matrix, dist_coeffs;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">ostringstream</span> vector_to_marker;</span><br><span class="line"></span><br><span class="line">	cv::VideoCapture in_video;</span><br><span class="line">	in_video.open(<span class="number">0</span>);</span><br><span class="line">	cv::Ptr&lt;cv::aruco::Dictionary&gt; dictionary =</span><br><span class="line">		cv::aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">	<span class="function">cv::FileStorage <span class="title">fs</span><span class="params">(<span class="string">&quot;camera.yml&quot;</span>, cv::FileStorage::READ)</span></span>;</span><br><span class="line"></span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; camera_matrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; dist_coeffs;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;camera_matrix\n&quot;</span></span><br><span class="line">		&lt;&lt; camera_matrix &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\ndist coeffs\n&quot;</span></span><br><span class="line">		&lt;&lt; dist_coeffs &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> frame_width = <span class="number">480</span>;</span><br><span class="line">	<span class="keyword">int</span> frame_height = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (in_video.grab())</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		in_video.retrieve(image);</span><br><span class="line">		image.copyTo(image_copy);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt;&gt; corners;</span><br><span class="line">		cv::aruco::detectMarkers(image, dictionary, corners, ids);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// if at least one marker detected</span></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::aruco::drawDetectedMarkers(image_copy, corners, ids);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Vec3d&gt; rvecs, tvecs;</span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(</span><br><span class="line">				corners, actual_marker_l, camera_matrix, dist_coeffs,</span><br><span class="line">				rvecs, tvecs</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// draw axis for each marker</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.size(); i++)</span><br><span class="line">			&#123;</span><br><span class="line">				drawCubeWireframe(</span><br><span class="line">					image_copy, camera_matrix, dist_coeffs, rvecs[i], tvecs[i],</span><br><span class="line">					actual_marker_l</span><br><span class="line">				);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;x: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">0</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">30</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;y: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">1</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">50</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;z: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">2</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">70</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;Pose estimation&quot;</span>, image_copy);</span><br><span class="line"></span><br><span class="line">		writer &lt;&lt; image_copy;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)cv::waitKey(wait_time);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawCubeWireframe</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputOutputArray image, cv::InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputArray distCoeffs, cv::InputArray rvec, cv::InputArray tvec,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">float</span> l</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	CV_Assert(</span><br><span class="line">		image.getMat().total() != <span class="number">0</span> &amp;&amp;</span><br><span class="line">		(image.getMat().channels() == <span class="number">1</span> || image.getMat().channels() == <span class="number">3</span>)</span><br><span class="line">	);</span><br><span class="line">	CV_Assert(l &gt; <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">float</span> half_l = l / <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// project cube points</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point3f&gt; axisPoints;</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, -half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, -half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, -half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, -half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, half_l, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; imagePoints;</span><br><span class="line">	projectPoints(</span><br><span class="line">		axisPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// draw cube edges lines</span></span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">1</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">3</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">4</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">1</span>], imagePoints[<span class="number">2</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">1</span>], imagePoints[<span class="number">5</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">2</span>], imagePoints[<span class="number">3</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">2</span>], imagePoints[<span class="number">6</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">3</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">4</span>], imagePoints[<span class="number">5</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">4</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">5</span>], imagePoints[<span class="number">6</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">6</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200823075820.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco Demo_1</title>
    <url>/2020/08/22/Aruco-Demo-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89209901">https://blog.csdn.net/qq_33446100/article/details/89209901</a></p>
</blockquote>
<a id="more"></a>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>Aruco Demo_1 是在<strong>board</strong>板上显示图片，在相机标定的基础上完成</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\videoio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::aruco;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_NAME <span class="meta-string">&quot;ARDemo&quot;</span></span></span><br><span class="line"></span><br><span class="line">Mat camMatrix, distCoeffs, srcImage;</span><br><span class="line"><span class="keyword">float</span> markerLength = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">readCameraParameters</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename, Mat&amp; camMatrix, Mat&amp; distCoeffs)</span> </span>&#123;</span><br><span class="line">	<span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::READ)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; camMatrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; distCoeffs;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_image</span><span class="params">(Mat image, Mat&amp; frame, Vec3d&amp; rvec, Vec3d&amp; tvec)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;Point3f&gt; points;</span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2f&gt; imagePoints;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> l = markerLength * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">	points.emplace_back(-l, l, <span class="number">0</span>);<span class="comment">//确定每个marker对应的坐标系中四个顶点的位置</span></span><br><span class="line">	points.emplace_back(l, l, <span class="number">0</span>);<span class="comment">//这个坐标是上一篇中绘制出来的坐标轴中对应的坐标</span></span><br><span class="line">	points.emplace_back(l, -l, <span class="number">0</span>);</span><br><span class="line">	points.emplace_back(-l, -l, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过相机内参、外参将3d坐标映射到图像坐标系</span></span><br><span class="line">	cv::projectPoints(points, rvec, tvec, camMatrix, distCoeffs, imagePoints);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> x = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)imagePoints[<span class="number">0</span>].x;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> y = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)imagePoints[<span class="number">0</span>].y;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2f&gt; corners;</span><br><span class="line">	corners.emplace_back(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	corners.emplace_back(image.cols, <span class="number">0</span>);</span><br><span class="line">	corners.emplace_back(image.cols, image.rows);</span><br><span class="line">	corners.emplace_back(<span class="number">0</span>, image.rows);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从四对对应点计算透视变换</span></span><br><span class="line">	cv::Mat T = getPerspectiveTransform(corners, imagePoints);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将透视变换应用于image</span></span><br><span class="line">	Mat warpedImg;</span><br><span class="line">	cv::warpPerspective(image, warpedImg, T, frame.size());</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2i&gt; pts;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : imagePoints) &#123;</span><br><span class="line">		pts.emplace_back((<span class="keyword">int</span>)i.x, (<span class="keyword">int</span>)i.y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用全0填充凸多边形</span></span><br><span class="line">	cv::fillConvexPoly(frame, pts, cv::Scalar::all(<span class="number">0</span>), cv::LINE_AA);</span><br><span class="line">	<span class="comment">//或运算</span></span><br><span class="line">	cv::bitwise_or(warpedImg, frame, frame);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*cout &lt;&lt; points &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; imagePoints &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; corners &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; pts &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	[-50, 50, 0;</span></span><br><span class="line"><span class="comment">	 50, 50, 0;</span></span><br><span class="line"><span class="comment">	 50, -50, 0;</span></span><br><span class="line"><span class="comment">	 -50, -50, 0]</span></span><br><span class="line"><span class="comment">	[98.558197, 147.89699;</span></span><br><span class="line"><span class="comment">	 131.39151, 168.23427;</span></span><br><span class="line"><span class="comment">	 108.73455, 203.80612;</span></span><br><span class="line"><span class="comment">	 75.317993, 184.06393]</span></span><br><span class="line"><span class="comment">	[0, 0;</span></span><br><span class="line"><span class="comment">	 100, 0;</span></span><br><span class="line"><span class="comment">	 100, 100;</span></span><br><span class="line"><span class="comment">	 0, 100]</span></span><br><span class="line"><span class="comment">	[98, 147;</span></span><br><span class="line"><span class="comment">	 131, 168;</span></span><br><span class="line"><span class="comment">	 108, 203;</span></span><br><span class="line"><span class="comment">	 75, 184]</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//waitKey();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">VideoCapture <span class="title">inputVideo</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="comment">//VideoWriter writer(&quot;VideoTest.avi&quot;, VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 25.0, Size(640, 480));</span></span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> readOk = readCameraParameters(<span class="string">&quot;camera.yml&quot;</span>, camMatrix, distCoeffs);</span><br><span class="line">	<span class="keyword">if</span> (!readOk) &#123;</span><br><span class="line">		<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Invalid camera file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; camMatrix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; distCoeffs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	srcImage = imread(<span class="string">&quot;image.png&quot;</span>);</span><br><span class="line">	resize(srcImage, srcImage, Size(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">	namedWindow(WINDOW_NAME);</span><br><span class="line"></span><br><span class="line">	Mat frame;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">		inputVideo &gt;&gt; frame;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point2f&gt;&gt; corners;</span><br><span class="line"></span><br><span class="line">		aruco::detectMarkers(frame, dictionary, corners, ids);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs;<span class="comment">//得到旋转矢量以及平移矢量</span></span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">100</span>, camMatrix, distCoeffs, rvecs, tvecs);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.size(); i++) &#123;</span><br><span class="line">				draw_image(srcImage, frame, rvecs[i], tvecs[i]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//writer &lt;&lt; frame;</span></span><br><span class="line">		&#125;</span><br><span class="line">		cv::imshow(WINDOW_NAME, frame);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	inputVideo.release();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822193805.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco 相机标定</title>
    <url>/2020/08/22/Aruco-%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89192005">https://blog.csdn.net/qq_33446100/article/details/89192005</a></p>
<p><a href="https://mp.weixin.qq.com/s/BT7V4de8p8tpJEcV7acwHA">https://mp.weixin.qq.com/s/BT7V4de8p8tpJEcV7acwHA</a></p>
</blockquote>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Azure Kinect 相机；</p>
<h2 id="步骤一：生成ChAruco-Aruco标定板"><a href="#步骤一：生成ChAruco-Aruco标定板" class="headerlink" title="步骤一：生成ChAruco(Aruco标定板)"></a>步骤一：生成ChAruco(Aruco标定板)</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">By downloading, copying, installing or using the software you agree to this</span></span><br><span class="line"><span class="comment">license. If you do not agree to this license, do not download, install,</span></span><br><span class="line"><span class="comment">copy or use the software.</span></span><br><span class="line"><span class="comment">                          License Agreement</span></span><br><span class="line"><span class="comment">               For Open Source Computer Vision Library</span></span><br><span class="line"><span class="comment">                       (3-clause BSD License)</span></span><br><span class="line"><span class="comment">Copyright (C) 2013, OpenCV Foundation, all rights reserved.</span></span><br><span class="line"><span class="comment">Third party copyrights are property of their respective owners.</span></span><br><span class="line"><span class="comment">Redistribution and use in source and binary forms, with or without modification,</span></span><br><span class="line"><span class="comment">are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">  * Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">  * Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">    and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">  * Neither the names of the copyright holders nor the names of the contributors</span></span><br><span class="line"><span class="comment">    may be used to endorse or promote products derived from this software</span></span><br><span class="line"><span class="comment">    without specific prior written permission.</span></span><br><span class="line"><span class="comment">This software is provided by the copyright holders and contributors &quot;as is&quot; and</span></span><br><span class="line"><span class="comment">any express or implied warranties, including, but not limited to, the implied</span></span><br><span class="line"><span class="comment">warranties of merchantability and fitness for a particular purpose are</span></span><br><span class="line"><span class="comment">disclaimed. In no event shall copyright holders or contributors be liable for</span></span><br><span class="line"><span class="comment">any direct, indirect, incidental, special, exemplary, or consequential damages</span></span><br><span class="line"><span class="comment">(including, but not limited to, procurement of substitute goods or services;</span></span><br><span class="line"><span class="comment">loss of use, data, or profits; or business interruption) however caused</span></span><br><span class="line"><span class="comment">and on any theory of liability, whether in contract, strict liability,</span></span><br><span class="line"><span class="comment">or tort (including negligence or otherwise) arising in any way out of</span></span><br><span class="line"><span class="comment">the use of this software, even if advised of the possibility of such damage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/aruco/charuco.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* about = <span class="string">&quot;Create a ChArUco board image&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys =</span><br><span class="line">        <span class="string">&quot;&#123;@outfile |&lt;none&gt; | Output image &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;w        |       | Number of squares in X direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;h        |       | Number of squares in Y direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sl       |       | Square side length (in pixels) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ml       |       | Marker side length (in pixels) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;d        |       | dictionary: DICT_4X4_50=0, DICT_4X4_100=1, DICT_4X4_250=2,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_4X4_1000=3, DICT_5X5_50=4, DICT_5X5_100=5, DICT_5X5_250=6, DICT_5X5_1000=7, &quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_6X6_50=8, DICT_6X6_100=9, DICT_6X6_250=10, DICT_6X6_1000=11, DICT_7X7_50=12,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_7X7_100=13, DICT_7X7_250=14, DICT_7X7_1000=15, DICT_ARUCO_ORIGINAL = 16&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;m        |       | Margins size (in pixels). Default is (squareLength-markerLength) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;bb       | 1     | Number of bits in marker borders &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;si       | false | show generated image &#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    parser.about(about);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">7</span>) &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> squaresX = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squaresY = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squareLength = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;sl&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> markerLength = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ml&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> dictionaryId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> margins = squareLength - markerLength;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;m&quot;</span>)) &#123;</span><br><span class="line">        margins = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> borderBits = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    <span class="keyword">bool</span> showImage = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;si&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String out = parser.get&lt;String&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parser.check()) &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">        aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">    Size imageSize;</span><br><span class="line">    imageSize.width = squaresX * squareLength + <span class="number">2</span> * margins;</span><br><span class="line">    imageSize.height = squaresY * squareLength + <span class="number">2</span> * margins;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::CharucoBoard&gt; board = aruco::CharucoBoard::create(squaresX, squaresY, (<span class="keyword">float</span>)squareLength,</span><br><span class="line">        (<span class="keyword">float</span>)markerLength, dictionary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show created board</span></span><br><span class="line">    Mat boardImage;</span><br><span class="line">    board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showImage) &#123;</span><br><span class="line">        imshow(<span class="string">&quot;board&quot;</span>, boardImage);</span><br><span class="line">        waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    imwrite(out, boardImage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>使用Visual Studio要在属性中添加以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;chboard.png&quot; -w&#x3D;5 -h&#x3D;7 -sl&#x3D;200 -ml&#x3D;120 -d&#x3D;10</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>在源代码目录生成<strong>chboard.png</strong>图片，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822174733.png" alt=""></p>
<h2 id="步骤二：相机标定"><a href="#步骤二：相机标定" class="headerlink" title="步骤二：相机标定"></a>步骤二：相机标定</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">By downloading, copying, installing or using the software you agree to this</span></span><br><span class="line"><span class="comment">license. If you do not agree to this license, do not download, install,</span></span><br><span class="line"><span class="comment">copy or use the software.</span></span><br><span class="line"><span class="comment">                          License Agreement</span></span><br><span class="line"><span class="comment">               For Open Source Computer Vision Library</span></span><br><span class="line"><span class="comment">                       (3-clause BSD License)</span></span><br><span class="line"><span class="comment">Copyright (C) 2013, OpenCV Foundation, all rights reserved.</span></span><br><span class="line"><span class="comment">Third party copyrights are property of their respective owners.</span></span><br><span class="line"><span class="comment">Redistribution and use in source and binary forms, with or without modification,</span></span><br><span class="line"><span class="comment">are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">  * Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">  * Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">    and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">  * Neither the names of the copyright holders nor the names of the contributors</span></span><br><span class="line"><span class="comment">    may be used to endorse or promote products derived from this software</span></span><br><span class="line"><span class="comment">    without specific prior written permission.</span></span><br><span class="line"><span class="comment">This software is provided by the copyright holders and contributors &quot;as is&quot; and</span></span><br><span class="line"><span class="comment">any express or implied warranties, including, but not limited to, the implied</span></span><br><span class="line"><span class="comment">warranties of merchantability and fitness for a particular purpose are</span></span><br><span class="line"><span class="comment">disclaimed. In no event shall copyright holders or contributors be liable for</span></span><br><span class="line"><span class="comment">any direct, indirect, incidental, special, exemplary, or consequential damages</span></span><br><span class="line"><span class="comment">(including, but not limited to, procurement of substitute goods or services;</span></span><br><span class="line"><span class="comment">loss of use, data, or profits; or business interruption) however caused</span></span><br><span class="line"><span class="comment">and on any theory of liability, whether in contract, strict liability,</span></span><br><span class="line"><span class="comment">or tort (including negligence or otherwise) arising in any way out of</span></span><br><span class="line"><span class="comment">the use of this software, even if advised of the possibility of such damage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/calib3d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/aruco/charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* about =</span><br><span class="line">        <span class="string">&quot;Calibration using a ChArUco board\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  To capture a frame for calibration, press &#x27;c&#x27;,\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  If input comes from video, press any key for next frame\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  To finish capturing, press &#x27;ESC&#x27; key and calibration starts.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys =</span><br><span class="line">        <span class="string">&quot;&#123;w        |       | Number of squares in X direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;h        |       | Number of squares in Y direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sl       |       | Square side length (in meters) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ml       |       | Marker side length (in meters) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;d        |       | dictionary: DICT_4X4_50=0, DICT_4X4_100=1, DICT_4X4_250=2,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_4X4_1000=3, DICT_5X5_50=4, DICT_5X5_100=5, DICT_5X5_250=6, DICT_5X5_1000=7, &quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_6X6_50=8, DICT_6X6_100=9, DICT_6X6_250=10, DICT_6X6_1000=11, DICT_7X7_50=12,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_7X7_100=13, DICT_7X7_250=14, DICT_7X7_1000=15, DICT_ARUCO_ORIGINAL = 16&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@outfile |&lt;none&gt; | Output file with calibrated camera parameters &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;v        |       | Input from video file, if ommited, input comes from camera &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ci       | 0     | Camera id if input doesnt come from video (-v) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;dp       |       | File of marker detector parameters &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;rs       | false | Apply refind strategy &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;zt       | false | Assume zero tangential distortion &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;a        |       | Fix aspect ratio (fx/fy) to this value &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;pc       | false | Fix the principal point at the center &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sc       | false | Show detected chessboard corners after calibration &#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">readDetectorParameters</span><span class="params">(<span class="built_in">string</span> filename, Ptr&lt;aruco::DetectorParameters&gt;&amp; params)</span> </span>&#123;</span><br><span class="line">    <span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::READ)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeMin&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeMin;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeMax&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeMax;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeStep&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeStep;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshConstant&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshConstant;</span><br><span class="line">    fs[<span class="string">&quot;minMarkerPerimeterRate&quot;</span>] &gt;&gt; params-&gt;minMarkerPerimeterRate;</span><br><span class="line">    fs[<span class="string">&quot;maxMarkerPerimeterRate&quot;</span>] &gt;&gt; params-&gt;maxMarkerPerimeterRate;</span><br><span class="line">    fs[<span class="string">&quot;polygonalApproxAccuracyRate&quot;</span>] &gt;&gt; params-&gt;polygonalApproxAccuracyRate;</span><br><span class="line">    fs[<span class="string">&quot;minCornerDistanceRate&quot;</span>] &gt;&gt; params-&gt;minCornerDistanceRate;</span><br><span class="line">    fs[<span class="string">&quot;minDistanceToBorder&quot;</span>] &gt;&gt; params-&gt;minDistanceToBorder;</span><br><span class="line">    fs[<span class="string">&quot;minMarkerDistanceRate&quot;</span>] &gt;&gt; params-&gt;minMarkerDistanceRate;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMethod&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMethod;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementWinSize&quot;</span>] &gt;&gt; params-&gt;cornerRefinementWinSize;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMaxIterations&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMaxIterations;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMinAccuracy&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMinAccuracy;</span><br><span class="line">    fs[<span class="string">&quot;markerBorderBits&quot;</span>] &gt;&gt; params-&gt;markerBorderBits;</span><br><span class="line">    fs[<span class="string">&quot;perspectiveRemovePixelPerCell&quot;</span>] &gt;&gt; params-&gt;perspectiveRemovePixelPerCell;</span><br><span class="line">    fs[<span class="string">&quot;perspectiveRemoveIgnoredMarginPerCell&quot;</span>] &gt;&gt; params-&gt;perspectiveRemoveIgnoredMarginPerCell;</span><br><span class="line">    fs[<span class="string">&quot;maxErroneousBitsInBorderRate&quot;</span>] &gt;&gt; params-&gt;maxErroneousBitsInBorderRate;</span><br><span class="line">    fs[<span class="string">&quot;minOtsuStdDev&quot;</span>] &gt;&gt; params-&gt;minOtsuStdDev;</span><br><span class="line">    fs[<span class="string">&quot;errorCorrectionRate&quot;</span>] &gt;&gt; params-&gt;errorCorrectionRate;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">saveCameraParams</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename, Size imageSize, <span class="keyword">float</span> aspectRatio, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Mat&amp; cameraMatrix, <span class="keyword">const</span> Mat&amp; distCoeffs, <span class="keyword">double</span> totalAvgErr)</span> </span>&#123;</span><br><span class="line">    <span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::WRITE)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> tt;</span><br><span class="line">    time(&amp;tt);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">t2</span> =</span> localtime(&amp;tt);</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    strftime(buf, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>, <span class="string">&quot;%c&quot;</span>, t2);</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;calibration_time&quot;</span> &lt;&lt; buf;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;image_width&quot;</span> &lt;&lt; imageSize.width;</span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;image_height&quot;</span> &lt;&lt; imageSize.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; CALIB_FIX_ASPECT_RATIO) fs &lt;&lt; <span class="string">&quot;aspectRatio&quot;</span> &lt;&lt; aspectRatio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">&quot;flags: %s%s%s%s&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_USE_INTRINSIC_GUESS ? <span class="string">&quot;+use_intrinsic_guess&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_FIX_ASPECT_RATIO ? <span class="string">&quot;+fix_aspectRatio&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_FIX_PRINCIPAL_POINT ? <span class="string">&quot;+fix_principal_point&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_ZERO_TANGENT_DIST ? <span class="string">&quot;+zero_tangent_dist&quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;flags&quot;</span> &lt;&lt; flags;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;camera_matrix&quot;</span> &lt;&lt; cameraMatrix;</span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;distortion_coefficients&quot;</span> &lt;&lt; distCoeffs;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;avg_reprojection_error&quot;</span> &lt;&lt; totalAvgErr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    parser.about(about);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">7</span>) &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> squaresX = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squaresY = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">    <span class="keyword">float</span> squareLength = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;sl&quot;</span>);</span><br><span class="line">    <span class="keyword">float</span> markerLength = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;ml&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> dictionaryId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> outputFile = parser.get&lt;<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> showChessboardCorners = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;sc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> calibrationFlags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> aspectRatio = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">        calibrationFlags |= CALIB_FIX_ASPECT_RATIO;</span><br><span class="line">        aspectRatio = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;zt&quot;</span>)) calibrationFlags |= CALIB_ZERO_TANGENT_DIST;</span><br><span class="line">    <span class="keyword">if</span> (parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;pc&quot;</span>)) calibrationFlags |= CALIB_FIX_PRINCIPAL_POINT;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::DetectorParameters&gt; detectorParams = aruco::DetectorParameters::create();</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;dp&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">bool</span> readOk = readDetectorParameters(parser.get&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;dp&quot;</span>), detectorParams);</span><br><span class="line">        <span class="keyword">if</span> (!readOk) &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Invalid detector parameters file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> refindStrategy = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;rs&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> camId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ci&quot;</span>);</span><br><span class="line">    String video;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;v&quot;</span>)) &#123;</span><br><span class="line">        video = parser.get&lt;String&gt;(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parser.check()) &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    VideoCapture inputVideo;</span><br><span class="line">    <span class="keyword">int</span> waitTime;</span><br><span class="line">    <span class="keyword">if</span> (!video.empty()) &#123;</span><br><span class="line">        inputVideo.open(video);</span><br><span class="line">        waitTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        inputVideo.open(camId);</span><br><span class="line">        waitTime = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">        aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create charuco board object</span></span><br><span class="line">    Ptr&lt;aruco::CharucoBoard&gt; charucoboard =</span><br><span class="line">        aruco::CharucoBoard::create(squaresX, squaresY, squareLength, markerLength, dictionary);</span><br><span class="line">    Ptr&lt;aruco::Board&gt; board = charucoboard.staticCast&lt;aruco::Board&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// collect data from each frame</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; &gt; allCorners;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; &gt; allIds;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allImgs;</span><br><span class="line">    Size imgSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">        Mat image, imageCopy;</span><br><span class="line">        inputVideo.retrieve(image);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; ids;</span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; corners, rejected;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// detect markers</span></span><br><span class="line">        aruco::detectMarkers(image, dictionary, corners, ids, detectorParams, rejected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// refind strategy to detect more markers</span></span><br><span class="line">        <span class="keyword">if</span> (refindStrategy) aruco::refineDetectedMarkers(image, board, corners, ids, rejected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// interpolate charuco corners</span></span><br><span class="line">        Mat currentCharucoCorners, currentCharucoIds;</span><br><span class="line">        <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">            aruco::interpolateCornersCharuco(corners, ids, image, charucoboard, currentCharucoCorners,</span><br><span class="line">                currentCharucoIds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw results</span></span><br><span class="line">        image.copyTo(imageCopy);</span><br><span class="line">        <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) aruco::drawDetectedMarkers(imageCopy, corners);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentCharucoCorners.total() &gt; <span class="number">0</span>)</span><br><span class="line">            aruco::drawDetectedCornersCharuco(imageCopy, currentCharucoCorners, currentCharucoIds);</span><br><span class="line"></span><br><span class="line">        putText(imageCopy, <span class="string">&quot;Press &#x27;c&#x27; to add current frame. &#x27;ESC&#x27; to finish and calibrate&quot;</span>,</span><br><span class="line">            Point(<span class="number">10</span>, <span class="number">20</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line">        <span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(waitTime);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&#x27;c&#x27;</span> &amp;&amp; ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Frame captured&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            allCorners.push_back(corners);</span><br><span class="line">            allIds.push_back(ids);</span><br><span class="line">            allImgs.push_back(image);</span><br><span class="line">            imgSize = image.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (allIds.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Not enough captures for calibration&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat cameraMatrix, distCoeffs;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; rvecs, tvecs;</span><br><span class="line">    <span class="keyword">double</span> repError;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (calibrationFlags &amp; CALIB_FIX_ASPECT_RATIO) &#123;</span><br><span class="line">        cameraMatrix = Mat::eye(<span class="number">3</span>, <span class="number">3</span>, CV_64F);</span><br><span class="line">        cameraMatrix.at&lt; <span class="keyword">double</span> &gt;(<span class="number">0</span>, <span class="number">0</span>) = aspectRatio;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare data for calibration</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; allCornersConcatenated;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; allIdsConcatenated;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; markerCounterPerFrame;</span><br><span class="line">    markerCounterPerFrame.reserve(allCorners.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allCorners.size(); i++) &#123;</span><br><span class="line">        markerCounterPerFrame.push_back((<span class="keyword">int</span>)allCorners[i].size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; allCorners[i].size(); j++) &#123;</span><br><span class="line">            allCornersConcatenated.push_back(allCorners[i][j]);</span><br><span class="line">            allIdsConcatenated.push_back(allIds[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// calibrate camera using aruco markers</span></span><br><span class="line">    <span class="keyword">double</span> arucoRepErr;</span><br><span class="line">    arucoRepErr = aruco::calibrateCameraAruco(allCornersConcatenated, allIdsConcatenated,</span><br><span class="line">        markerCounterPerFrame, board, imgSize, cameraMatrix,</span><br><span class="line">        distCoeffs, noArray(), noArray(), calibrationFlags);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare data for charuco calibration</span></span><br><span class="line">    <span class="keyword">int</span> nFrames = (<span class="keyword">int</span>)allCorners.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allCharucoCorners;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allCharucoIds;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; filteredImages;</span><br><span class="line">    allCharucoCorners.reserve(nFrames);</span><br><span class="line">    allCharucoIds.reserve(nFrames);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nFrames; i++) &#123;</span><br><span class="line">        <span class="comment">// interpolate using camera parameters</span></span><br><span class="line">        Mat currentCharucoCorners, currentCharucoIds;</span><br><span class="line">        aruco::interpolateCornersCharuco(allCorners[i], allIds[i], allImgs[i], charucoboard,</span><br><span class="line">            currentCharucoCorners, currentCharucoIds, cameraMatrix,</span><br><span class="line">            distCoeffs);</span><br><span class="line"></span><br><span class="line">        allCharucoCorners.push_back(currentCharucoCorners);</span><br><span class="line">        allCharucoIds.push_back(currentCharucoIds);</span><br><span class="line">        filteredImages.push_back(allImgs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (allCharucoCorners.size() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Not enough corners for calibration&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// calibrate camera using charuco</span></span><br><span class="line">    repError =</span><br><span class="line">        aruco::calibrateCameraCharuco(allCharucoCorners, allCharucoIds, charucoboard, imgSize,</span><br><span class="line">            cameraMatrix, distCoeffs, rvecs, tvecs, calibrationFlags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> saveOk = saveCameraParams(outputFile, imgSize, aspectRatio, calibrationFlags,</span><br><span class="line">        cameraMatrix, distCoeffs, repError);</span><br><span class="line">    <span class="keyword">if</span> (!saveOk) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Cannot save output file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rep Error: &quot;</span> &lt;&lt; repError &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rep Error Aruco: &quot;</span> &lt;&lt; arucoRepErr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Calibration saved to &quot;</span> &lt;&lt; outputFile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show interpolated charuco corners for debugging</span></span><br><span class="line">    <span class="keyword">if</span> (showChessboardCorners) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> frame = <span class="number">0</span>; frame &lt; filteredImages.size(); frame++) &#123;</span><br><span class="line">            Mat imageCopy = filteredImages[frame].clone();</span><br><span class="line">            <span class="keyword">if</span> (allIds[frame].size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (allCharucoCorners[frame].total() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    aruco::drawDetectedCornersCharuco(imageCopy, allCharucoCorners[frame],</span><br><span class="line">                        allCharucoIds[frame]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line">            <span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol>
<li>Visual Studio 需要在项目属性中（项目属性 -&gt; 调试），添加以下参数：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;camera.yml&quot; -dp&#x3D;&quot;detector_params.yml&quot; -w&#x3D;5 -h&#x3D;7 -sl&#x3D;0.04 -ml&#x3D;0.02 -d&#x3D;10</span><br></pre></td></tr></table></figure>
<ol>
<li>在源代码目录，新建文件，名称为“detector_params.yml”；内容如下所示：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%YAML:1.0</span><br><span class="line">nmarkers: 1024</span><br><span class="line">adaptiveThreshWinSizeMin: 3</span><br><span class="line">adaptiveThreshWinSizeMax: 23</span><br><span class="line">adaptiveThreshWinSizeStep: 10</span><br><span class="line">adaptiveThreshWinSize: 21</span><br><span class="line">adaptiveThreshConstant: 7</span><br><span class="line">minMarkerPerimeterRate: 0.03</span><br><span class="line">maxMarkerPerimeterRate: 4.0</span><br><span class="line">polygonalApproxAccuracyRate: 0.05</span><br><span class="line">minCornerDistance: 10.0</span><br><span class="line">minDistanceToBorder: 3</span><br><span class="line">minMarkerDistance: 10.0</span><br><span class="line">minMarkerDistanceRate: 0.05</span><br><span class="line">cornerRefinementMethod: 0</span><br><span class="line">cornerRefinementWinSize: 5</span><br><span class="line">cornerRefinementMaxIterations: 30</span><br><span class="line">cornerRefinementMinAccuracy: 0.1</span><br><span class="line">markerBorderBits: 1</span><br><span class="line">perspectiveRemovePixelPerCell: 8</span><br><span class="line">perspectiveRemoveIgnoredMarginPerCell: 0.13</span><br><span class="line">maxErroneousBitsInBorderRate: 0.04</span><br><span class="line">minOtsuStdDev: 5.0</span><br><span class="line">errorCorrectionRate: 0.6</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175225.png" alt=""></p>
<p>选中窗口，通过连续按键“C”，采集不同角度的图像；结束按“ESC”；</p>
<p>程序运行结束后，会在源代码目录生成文件<strong>camera.yml</strong>；里面保存着相机标定后的结果；</p>
<h2 id="步骤三：相机标定验证"><a href="#步骤三：相机标定验证" class="headerlink" title="步骤三：相机标定验证"></a>步骤三：相机标定验证</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\videoio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">cv::VideoCapture <span class="title">inputVideo</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="comment">//VideoWriter writer(&quot;VideoTest.avi&quot;, VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 25.0, Size(640, 480));</span></span><br><span class="line">	cv::Mat cameraMatrix, distCoeffs; <span class="comment">// 相机参数</span></span><br><span class="line"></span><br><span class="line">	<span class="function">FileStorage <span class="title">fs</span><span class="params">(<span class="string">&quot;camera.yml&quot;</span>, FileStorage::READ)</span></span>;<span class="comment">//读取相机参数</span></span><br><span class="line">	<span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Could not open the configuration file!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; cameraMatrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; distCoeffs;</span><br><span class="line">	fs.release();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; cameraMatrix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; distCoeffs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);<span class="comment">//创建字典</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		cv::Mat image, imageCopy;</span><br><span class="line"></span><br><span class="line">		inputVideo.retrieve(image);</span><br><span class="line">		image.copyTo(imageCopy);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners;</span><br><span class="line"></span><br><span class="line">		cv::aruco::detectMarkers(image, dictionary, corners, ids);<span class="comment">// 检测markers</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">			<span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs;<span class="comment">//得到旋转矢量以及平移矢量</span></span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">100</span>, cameraMatrix, distCoeffs, rvecs, tvecs);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ids.size(); i++)</span><br><span class="line">				cv::aruco::drawAxis(imageCopy, cameraMatrix, distCoeffs, rvecs[i], tvecs[i], <span class="number">50</span>);<span class="comment">// 画方向轴</span></span><br><span class="line">			<span class="comment">//writer &lt;&lt; imageCopy;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)cv::waitKey(<span class="number">20</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p>将相机对准标定板（如下图所示）</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175801.png" alt=""></p>
<p>运行后结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175913.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
  </entry>
  <entry>
    <title> Aruco创建Board</title>
    <url>/2020/08/22/Aruco%E5%88%9B%E5%BB%BABoard/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89186826">https://blog.csdn.net/qq_33446100/article/details/89186826</a></p>
</blockquote>
<a id="more"></a>
<h2 id="Board作用"><a href="#Board作用" class="headerlink" title="Board作用"></a>Board作用</h2><ul>
<li><p>board是一个aruco marker的棋盘，上面布置了许多marker。</p>
</li>
<li><p>board可用于校准（Calibrate）摄像机 </p>
</li>
</ul>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> markersX = <span class="number">5</span>;<span class="comment">//X轴上标记的数量</span></span><br><span class="line">	<span class="keyword">int</span> markersY = <span class="number">5</span>;<span class="comment">//Y轴上标记的数量   本例生成5x5的棋盘</span></span><br><span class="line">	<span class="keyword">int</span> markerLength = <span class="number">100</span>;<span class="comment">//标记的长度，单位是像素</span></span><br><span class="line">	<span class="keyword">int</span> markerSeparation = <span class="number">20</span>;<span class="comment">//每个标记之间的间隔，单位像素</span></span><br><span class="line">	<span class="keyword">int</span> dictionaryId = cv::aruco::DICT_4X4_50;<span class="comment">//生成标记的字典ID</span></span><br><span class="line">	<span class="keyword">int</span> margins = markerSeparation;<span class="comment">//标记与边界之间的间隔</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">int</span> borderBits = <span class="number">1</span>;<span class="comment">//标记的边界所占的bit位数</span></span><br><span class="line">	<span class="keyword">bool</span> showImage = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">	Size imageSize;</span><br><span class="line">	imageSize.width = markersX * (markerLength + markerSeparation) - markerSeparation + <span class="number">2</span> * margins;</span><br><span class="line">	imageSize.height =</span><br><span class="line">		markersY * (markerLength + markerSeparation) - markerSeparation + <span class="number">2</span> * margins;</span><br><span class="line"> </span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"> </span><br><span class="line">	Ptr&lt;aruco::GridBoard&gt; board = aruco::GridBoard::create(markersX, markersY, <span class="keyword">float</span>(markerLength),</span><br><span class="line">		<span class="keyword">float</span>(markerSeparation), dictionary);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// show created board</span></span><br><span class="line">	Mat boardImage;</span><br><span class="line">	board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> (showImage) &#123;</span><br><span class="line">		imshow(<span class="string">&quot;board&quot;</span>, boardImage);</span><br><span class="line">		waitKey(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822115151.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco检测Marker</title>
    <url>/2020/08/22/Aruco%E6%A3%80%E6%B5%8BMarker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89115983">https://blog.csdn.net/qq_33446100/article/details/89115983</a></p>
<p><a href="https://docs.opencv.org/4.0.1/d9/d6a/group__aruco.html">https://docs.opencv.org/4.0.1/d9/d6a/group__aruco.html</a></p>
</blockquote>
<a id="more"></a>
<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><ul>
<li><p>Azure Kinect</p>
<p>使用RGB相机，Kinect不接电源</p>
</li>
<li><p>VS2019</p>
</li>
</ul>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cv::Mat markerImage;</span><br><span class="line">	<span class="function">cv::VideoCapture <span class="title">mVideoCapture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建字典，这里注意使用Ptr&lt;&gt;，不然无法显示结果</span></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);</span><br><span class="line">	cv::aruco::drawMarker(dictionary, <span class="number">23</span>, <span class="number">240</span>, markerImage);<span class="comment">//这里取出一个marker用于检测</span></span><br><span class="line"></span><br><span class="line">	imshow(<span class="string">&quot;marker&quot;</span>, markerImage);<span class="comment">//显示待检测标记</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (mVideoCapture.grab())<span class="comment">//取得下一帧</span></span><br><span class="line">	&#123;</span><br><span class="line">		cv::Mat frame, frame_show;</span><br><span class="line">		mVideoCapture.retrieve(frame);<span class="comment">//放入Mat</span></span><br><span class="line"></span><br><span class="line">		frame.copyTo(frame_show);<span class="comment">//复制一份</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt;&gt; corners;</span><br><span class="line"></span><br><span class="line">		cv::aruco::detectMarkers(frame, dictionary, corners, ids);<span class="comment">//检测该帧是否有标记</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">			cv::aruco::drawDetectedMarkers(frame_show, corners, ids);<span class="comment">//如果有，则标记出来，放入另一个Mat</span></span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;video&quot;</span>, frame_show);<span class="comment">//显示结果</span></span><br><span class="line"></span><br><span class="line">		waitKey(<span class="number">30</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822112653.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822112801.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Windows本地配置Aruco</title>
    <url>/2020/08/20/Windows%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEAruco/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>环境：win10 + VS2019 + OpenCV4.30</p>
</blockquote>
<a id="more"></a>
<h2 id="下载Contrib库"><a href="#下载Contrib库" class="headerlink" title="下载Contrib库"></a>下载Contrib库</h2><p>传送门：<a href="https://github.com/opencv/opencv_contrib/releases">click it</a></p>
<p>(<strong>注意</strong>：选择与OpenCV对应的库)</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155046.png" alt=""></p>
<h2 id="CMake编译OpecCV"><a href="#CMake编译OpecCV" class="headerlink" title="CMake编译OpecCV"></a>CMake编译OpecCV</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155137.png" alt=""></p>
<p>点击<em>configure</em>，如果有红色，继续点<em>configure</em>，直至红色都消失</p>
<h2 id="CMake编译OpenCV-contrib"><a href="#CMake编译OpenCV-contrib" class="headerlink" title="CMake编译OpenCV-contrib"></a>CMake编译OpenCV-contrib</h2><ul>
<li>将<em>opencv_contrib-4.3.0</em>放置在<em>F:\DownLoad\opencv</em>目录下，在CMake中找到<em>OPENCV_EXTRA_MODULES_PATH</em>，填入<em>F:\DownLoad\opencv\opencv_contrib-4.3.0\modules</em>路径，并勾选上方<em>OPENCV_ENABLE_NONFREE</em>；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155702.png" alt=""></p>
<p>点击<em>configure</em>，如果有红色，继续点<em>configure</em>，直至红色都消失</p>
<p>最后点击<em>generate</em></p>
<h2 id="VS2019编译debug与release库"><a href="#VS2019编译debug与release库" class="headerlink" title="VS2019编译debug与release库"></a>VS2019编译debug与release库</h2><p>打开OpenCV.sln项目文件；</p>
<h3 id="编译debug库"><a href="#编译debug库" class="headerlink" title="编译debug库"></a>编译debug库</h3><p>解决方案 -&gt; 右键重新生成解决方案</p>
<p>完成后，找到CMakeTargets中的INSTALL，然后右键选择“仅限于项目”—&gt;“仅生成INSTALL”；</p>
<h3 id="编译release库"><a href="#编译release库" class="headerlink" title="编译release库"></a>编译release库</h3><p>和上面差不多</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>系统变量 -&gt; PATH ，添加 F:\DownLoad\MyBuild\install\x64\vc16\bin</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160215.png" alt=""></p>
<p>用户变量：</p>
<p>变量名：OPENCV</p>
<p>变量值：F:\DownLoad\MyBuild\install\include</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160401.png" alt=""></p>
<h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><p>与配置OpenCV相同，新建一个项目，新建一个属性表，为日后重复使用奠定基础</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160634.png" alt=""></p>
<p>属性 -&gt; VC++目录 -&gt; 包含目录，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\DownLoad\MyBuild\install\include</span><br><span class="line">F:\DownLoad\MyBuild\install\include\opencv2</span><br></pre></td></tr></table></figure>
<p>VC++目录 —&gt; 库目录，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\DownLoad\MyBuild\install\x64\vc16\lib</span><br></pre></td></tr></table></figure>
<p>链接器 -&gt; 输入 -&gt; 附加依赖项 ，添加以下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv_aruco430d.lib;</span><br><span class="line">opencv_bgsegm430d.lib;</span><br><span class="line">opencv_bioinspired430d.lib;</span><br><span class="line">opencv_calib3d430d.lib;</span><br><span class="line">opencv_ccalib430d.lib;</span><br><span class="line">opencv_core430d.lib;</span><br><span class="line">opencv_datasets430d.lib;</span><br><span class="line">opencv_dnn_objdetect430d.lib;</span><br><span class="line">opencv_dnn430d.lib;</span><br><span class="line">opencv_dpm430d.lib;</span><br><span class="line">opencv_face430d.lib;</span><br><span class="line">opencv_features2d430d.lib;</span><br><span class="line">opencv_flann430d.lib;</span><br><span class="line">opencv_fuzzy430d.lib;</span><br><span class="line">opencv_hdf430d.lib;</span><br><span class="line">opencv_hfs430d.lib;</span><br><span class="line">opencv_highgui430d.lib;</span><br><span class="line">opencv_img_hash430d.lib;</span><br><span class="line">opencv_imgcodecs430d.lib;</span><br><span class="line">opencv_imgproc430d.lib;</span><br><span class="line">opencv_line_descriptor430d.lib;</span><br><span class="line">opencv_ml430d.lib;</span><br><span class="line">opencv_objdetect430d.lib;</span><br><span class="line">opencv_optflow430d.lib;</span><br><span class="line">opencv_phase_unwrapping430d.lib;</span><br><span class="line">opencv_photo430d.lib;</span><br><span class="line">opencv_plot430d.lib;</span><br><span class="line">opencv_reg430d.lib;</span><br><span class="line">opencv_rgbd430d.lib;</span><br><span class="line">opencv_saliency430d.lib;</span><br><span class="line">opencv_shape430d.lib;</span><br><span class="line">opencv_stereo430d.lib;</span><br><span class="line">opencv_stitching430d.lib;</span><br><span class="line">opencv_structured_light430d.lib;</span><br><span class="line">opencv_superres430d.lib;</span><br><span class="line">opencv_surface_matching430d.lib;</span><br><span class="line">opencv_text430d.lib;</span><br><span class="line">opencv_tracking430d.lib;</span><br><span class="line">opencv_video430d.lib;</span><br><span class="line">opencv_videoio430d.lib;</span><br><span class="line">opencv_videostab430d.lib;</span><br><span class="line">opencv_xfeatures2d430d.lib;</span><br><span class="line">opencv_ximgproc430d.lib;</span><br><span class="line">opencv_xobjdetect430d.lib;</span><br><span class="line">opencv_xphoto430d.lib;</span><br></pre></td></tr></table></figure>
<h2 id="测试-生成Aruco-board"><a href="#测试-生成Aruco-board" class="headerlink" title="测试 - 生成Aruco_board"></a>测试 - 生成Aruco_board</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2\highgui.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco\dictionary.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco\charuco.hpp&gt;</span><br><span class="line">#include &lt;opencv2\core.hpp&gt;</span><br><span class="line">#include &lt;opencv2\imgproc\imgproc.hpp&gt;</span><br><span class="line">#include &lt;opencv2\opencv.hpp&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int markersX &#x3D; 5;&#x2F;&#x2F;X轴上标记的数量</span><br><span class="line">	int markersY &#x3D; 5;&#x2F;&#x2F;Y轴上标记的数量   本例生成5x5的棋盘</span><br><span class="line">	int markerLength &#x3D; 100;&#x2F;&#x2F;标记的长度，单位是像素</span><br><span class="line">	int markerSeparation &#x3D; 20;&#x2F;&#x2F;每个标记之间的间隔，单位像素</span><br><span class="line">	int dictionaryId &#x3D; cv::aruco::DICT_4X4_50;&#x2F;&#x2F;生成标记的字典ID</span><br><span class="line">	int margins &#x3D; markerSeparation;&#x2F;&#x2F;标记与边界之间的间隔</span><br><span class="line"></span><br><span class="line">	int borderBits &#x3D; 1;&#x2F;&#x2F;标记的边界所占的bit位数</span><br><span class="line">	bool showImage &#x3D; true;</span><br><span class="line"></span><br><span class="line">	Size imageSize;</span><br><span class="line"></span><br><span class="line">	imageSize.width &#x3D; markersX * (markerLength + markerSeparation) - markerSeparation + 2 * margins;</span><br><span class="line"></span><br><span class="line">	imageSize.height &#x3D; markersY * (markerLength + markerSeparation) - markerSeparation + 2 * margins;</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary &#x3D; aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::GridBoard&gt; board &#x3D; aruco::GridBoard::create(markersX, markersY, float(markerLength), float(markerSeparation), dictionary);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; show created board</span><br><span class="line">	Mat boardImage;</span><br><span class="line">	board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"></span><br><span class="line">	if (showImage) &#123;</span><br><span class="line">		imshow(&quot;board&quot;, boardImage);</span><br><span class="line">		waitKey(0);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820154403.png" alt=""></p>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VS2019 创建C++ dll用于Unity</title>
    <url>/2020/08/12/%E4%BD%BF%E7%94%A8VS2019-%E5%88%9B%E5%BB%BAC-dll%E7%94%A8%E4%BA%8EUnity/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考博客：</p>
<p><a href="https://www.cnblogs.com/aWxvdmVseXc0/p/12857974.html">https://www.cnblogs.com/aWxvdmVseXc0/p/12857974.html</a></p>
<p><a href="https://blog.csdn.net/zhunju0089/article/details/103458855">https://blog.csdn.net/zhunju0089/article/details/103458855</a></p>
</blockquote>
<a id="more"></a>
<h3 id="创建VS项目"><a href="#创建VS项目" class="headerlink" title="创建VS项目"></a>创建VS项目</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145559.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145630.png" alt=""></p>
<h3 id="创建项目成功后，打开pch-h文件，定义导出函数的定义"><a href="#创建项目成功后，打开pch-h文件，定义导出函数的定义" class="headerlink" title="创建项目成功后，打开pch.h文件，定义导出函数的定义"></a>创建项目成功后，打开<strong>pch.h</strong>文件，定义导出函数的定义</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145856.png" style="zoom:200%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">myadd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="打开pch-cpp文件，实现上述函数的具体功能"><a href="#打开pch-cpp文件，实现上述函数的具体功能" class="headerlink" title="打开pch.cpp文件，实现上述函数的具体功能"></a>打开<strong>pch.cpp</strong>文件，实现上述函数的具体功能</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150216.png" style="zoom:200%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="点击生成解决方案，即可生成dll文件"><a href="#点击生成解决方案，即可生成dll文件" class="headerlink" title="点击生成解决方案，即可生成dll文件"></a>点击<strong>生成解决方案</strong>，即可生成dll文件</h3><h3 id="在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中"><a href="#在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中" class="headerlink" title="在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中"></a>在Unity项目中，新建文件夹<strong>Plugins</strong>，将生成的dll文件复制进此文件夹中</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150544.png" alt=""></p>
<h3 id="脚本调用"><a href="#脚本调用" class="headerlink" title="脚本调用"></a>脚本调用</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150843.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150927.png" style="zoom:200%;" /></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>dll</tag>
      </tags>
  </entry>
  <entry>
    <title> OpenGL调用Azure Kinect 实现过程</title>
    <url>/2020/08/03/OpenGL%E8%B0%83%E7%94%A8Azure-Kinect-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>源代码来源：</p>
<p>源代码作者：无雨森；浙江科技大学在读博士</p>
</blockquote>
<a id="more"></a>
<h2 id="软件硬件"><a href="#软件硬件" class="headerlink" title="软件硬件"></a>软件硬件</h2><p>VS2019</p>
<p>Azure Kinect</p>
<h2 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h2><p>OpenGL_GLUT_ShowImage</p>
<h2 id="本地配置过程"><a href="#本地配置过程" class="headerlink" title="本地配置过程"></a>本地配置过程</h2><h3 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h3><p>略过</p>
<h3 id="配置模式与头文件路径"><a href="#配置模式与头文件路径" class="headerlink" title="配置模式与头文件路径"></a>配置模式与头文件路径</h3><ul>
<li>本地建立VS空项目，release X64模式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102606.png" alt=""></p>
<ul>
<li>新建cpp文档，作为源文件，将OpenGL_GLUT_ShowImage的源代码复制进新建的cpp文档</li>
<li>配置头文件路径，本文以此为例</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102928.png" alt=""></p>
<p>项目 -&gt; 属性 -&gt; C/C++ -&gt; 附加包含目录</p>
<p>填入上面图片所示路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103339.png" alt=""></p>
<h3 id="安装Kinect包"><a href="#安装Kinect包" class="headerlink" title="安装Kinect包"></a>安装Kinect包</h3><p>打开包管理器，下载如下图所示包</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731101741.png" alt=""></p>
<p>安装结束后，即可发现代码已经没有报错</p>
<h3 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h3><p>此时F5运行，会发现报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731105327.png" alt=""></p>
<p>解决方法：</p>
<p>在windows.h语句上方，加入以下语句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOMINMAX</span></span><br></pre></td></tr></table></figure>
<p>整体看起来是这样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731105536.png" alt=""></p>
<p>此时F5运行，会出现更多错误</p>
<p>一种是 C++ error:LNK2005 已经在*.obj中定义</p>
<p>另一种是和OpenCV的错误一样，无法解析外部命令；这里就略过了</p>
<p>解决方法：</p>
<p>在 属性-&gt;配置属性-&gt;链接器-&gt;命令行中添加 /FORCE:MULTIPLE 即可</p>
<p>此时F5运行，出现错误：</p>
<p>fatal error LNK1179: 无效或损坏的文件: 重复的XXX</p>
<p>解决方法：</p>
<p>属性-C/C++-优化-全程序优化 选择“否”</p>
<p>此时F5运行，成功！</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200803215839.png" alt=""></p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Azure Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title> OpenCV调用Azure Kinect 实现过程</title>
    <url>/2020/08/01/OpenCV%E8%B0%83%E7%94%A8Azure-Kinect-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>源代码来源：</p>
<p>源代码作者：无雨森</p>
<p>浙江科技大学在读博士</p>
</blockquote>
<a id="more"></a>
<h2 id="软件硬件a"><a href="#软件硬件a" class="headerlink" title="软件硬件a"></a>软件硬件a</h2><p>VS2019</p>
<p>Azure Kinect</p>
<h2 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h2><p>OpenCV_OneKinect</p>
<h2 id="本地配置过程"><a href="#本地配置过程" class="headerlink" title="本地配置过程"></a>本地配置过程</h2><h3 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h3><p>略过</p>
<h3 id="配置模式与头文件路径"><a href="#配置模式与头文件路径" class="headerlink" title="配置模式与头文件路径"></a>配置模式与头文件路径</h3><ul>
<li>本地建立VS空项目，release X64模式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102606.png" alt=""></p>
<ul>
<li>新建cpp文档，作为源文件，将OpenCV_OneKinect的源代码复制进新建的cpp文档</li>
<li>配置头文件路径，本文以此为例</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102928.png" alt=""></p>
<p>项目 -&gt; 属性 -&gt; C/C++ -&gt; 附加包含目录</p>
<p>填入上面图片所示路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103339.png" alt=""></p>
<h3 id="安装Kinect包"><a href="#安装Kinect包" class="headerlink" title="安装Kinect包"></a>安装Kinect包</h3><p>打开包管理器，下载如下图所示包</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103706.png" alt=""></p>
<p>安装结束后，即可发现代码已经没有报错</p>
<h3 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h3><p>此时F5运行，会发现报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731104137.png" alt=""><br>错误    LNK2001    无法解析的外部符号 “void <strong>cdecl sen::ColorizeDepthImage(class k4a::image const &amp;,struct sen::Pixel (</strong>cdecl<em>)(unsigned short const &amp;,unsigned short const &amp;,unsigned short const &amp;),struct std::pair<unsigned short,unsigned short>,class std::vector<struct sen::Pixel,class std::allocator<struct sen::Pixel> &gt; </em>)” (?ColorizeDepthImage@sen@@YAXAEBVimage@k4a@@P6A?AUPixel@1@AEBG11@ZU?$pair@GG@std@@PEAV?$vector@UPixel@sen@@V?$allocator@UPixel@sen@@@std@@@6@@Z)    Test    F:\VS_Area\Test\源.obj    1    </p>
<p>原因：</p>
<p>StaticImageProperties.h头文件中，缺少ColorizeDepthImage的函数体</p>
<p>解决方法：</p>
<p>在StaticImageProperties.h头文件中添加即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ColorizeDepthImage</span><span class="params">(<span class="keyword">const</span> k4a::image&amp; depthImage,</span></span></span><br><span class="line"><span class="function"><span class="params">		DepthPixelVisualizationFunction visualizationFn,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">uint16_t</span>, <span class="keyword">uint16_t</span>&gt; expectedValueRange,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Pixel&gt;* buffer)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">k4a_image_format_t</span> imageFormat = depthImage.get_format();</span><br><span class="line">		<span class="keyword">if</span> (imageFormat != K4A_IMAGE_FORMAT_DEPTH16 &amp;&amp; imageFormat != K4A_IMAGE_FORMAT_IR16)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::logic_error(<span class="string">&quot;Attempted to colorize a non-depth image!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">int</span> width = depthImage.get_width_pixels();</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">int</span> height = depthImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">		buffer-&gt;resize(<span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(width * height));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">uint16_t</span>* depthData = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint16_t</span>*&gt;(depthImage.get_buffer());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; height; ++h)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; width; ++w)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">const</span> <span class="keyword">size_t</span> currentPixel = <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(h * width + w);</span><br><span class="line">				(*buffer)[currentPixel] = visualizationFn(depthData[currentPixel], expectedValueRange.first, expectedValueRange.second);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>运行成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200801211404.png" alt=""></p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Azure Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>HOLOLENS2开发1</title>
    <url>/2020/05/20/HOLOLENS2%E5%BC%80%E5%8F%911/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hololens初步上手</p>
<a id="more"></a>
<h2 id="HOLOLENS2-开发-环境配置"><a href="#HOLOLENS2-开发-环境配置" class="headerlink" title="HOLOLENS2 开发 - 环境配置"></a>HOLOLENS2 开发 - 环境配置</h2><blockquote>
<p>现在毕设项目已经做完，现在复盘下走过的坑</p>
<p>可通过邮件2998963449@qq.com联系</p>
</blockquote>
<h3 id="第1步：单独安装Win10-SDK"><a href="#第1步：单独安装Win10-SDK" class="headerlink" title="第1步：单独安装Win10 SDK"></a>第1步：单独安装Win10 SDK</h3><p>SDK下载链接：<a href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-10-sdk/">I am here</a></p>
<ol>
<li>安装时必须使用短路径！（建议放在C盘），如<code>C:\SDK</code></li>
<li>请记住这个路径，因为后续在VS中部署时，解决错误时需要用到此路径</li>
</ol>
<h3 id="第2步：安装Unity，VS2019"><a href="#第2步：安装Unity，VS2019" class="headerlink" title="第2步：安装Unity，VS2019"></a>第2步：安装Unity，VS2019</h3><p>安装完Win10 SDK后</p>
<h3 id="1-安装Unity"><a href="#1-安装Unity" class="headerlink" title="1. 安装Unity"></a>1. 安装Unity</h3><p>链接：<a href="https://unity.cn/releases">传送门</a></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>推荐下载下图所示，因为其他的安装渠道，博主并没有看到有单独安装组件的界面；不过需要外网才能提高网速，博主在不开启外网情况下，网速在30-40k/s<br><img src="https://img-blog.csdnimg.cn/20200302144820699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<ol>
<li><p>安装组件界面：（不必勾选这么多）<br><img src="https://img-blog.csdnimg.cn/20200302145208244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>下载完成后，如需要 Vuforia 组件，请<a href="https://blog.csdn.net/qq_43656250/article/details/104475189">参考此链接</a></p>
</li>
</ol>
<h3 id="2-安装VS2019"><a href="#2-安装VS2019" class="headerlink" title="2. 安装VS2019"></a>2. 安装VS2019</h3><p>链接：<a href="https://visualstudio.microsoft.com/zh-hans/vs/">传送门</a></p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol>
<li>组件选择：<br><img src="https://img-blog.csdnimg.cn/20200302145823352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<ol>
<li><p>使用Unity的游戏开发：不要勾选编辑器！之前装过了</p>
</li>
<li><p>通用Windows平台开发中会包含Win10 SDK，没办法</p>
</li>
</ol>
<h3 id="3-后续问题"><a href="#3-后续问题" class="headerlink" title="3.后续问题"></a>3.后续问题</h3><p>到此基本就已经结束了，但是在Unity做完项目以后，使用VS2019打开项目时，并不能直接使用，会出现以下报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MSB3774找不到SDK“ WindowsMo​​bile，版本&#x3D; 10.0.17763.0”</span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<p><a href="https://developercommunity.visualstudio.com/content/problem/402362/msb3774-could-not-find-sdk-windowsmobile-version10.html">https://developercommunity.visualstudio.com/content/problem/402362/msb3774-could-not-find-sdk-windowsmobile-version10.html</a></p>
<p><img src="https://i.loli.net/2020/05/20/jcPnxkgND3opC8a.png" alt=""></p>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>VisonLib SDK 初接触</title>
    <url>/2020/05/18/VisonLib-SDK-%E5%88%9D%E6%8E%A5%E8%A7%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AR质检方案</p>
<a id="more"></a>
<h2 id="接触VisonLib-SDK"><a href="#接触VisonLib-SDK" class="headerlink" title="接触VisonLib SDK"></a>接触VisonLib SDK</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>由于毕设需求，在网上寻找能够解决质量检测或者测量方面的<em>AR SDK</em>，找到了这篇报道：<a href="https://www.toutiao.com/a6674774916132241931/">VisionLib推跨平台AR质检解决方案，可结合CAD对比检测</a></p>
<p>所以开始准备尝试下</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>进<a href="https://visionlib.com/#sect-6">官网</a></li>
<li>注册申请使用<em>SDK</em>（会有人员审核，我是隔一天以后收到的登录密码）</li>
<li>等待邮件通知审核通过，复制账号密码</li>
<li><p>登录官网</p>
</li>
<li><p>直接下载<em>vlUnitySDK v20.3.1 Gengral Release</em></p>
</li>
<li>网页页面拉到底，下载许可证文件</li>
</ol>
<p><img src="https://i.loli.net/2020/05/18/7Nf4r9JIo6HvBKi.png" alt=""></p>
<ol>
<li>新建Unity 项目</li>
<li>导入下载好的<em>package</em></li>
</ol>
<p><img src="C:\Users\VR5\AppData\Roaming\Typora\typora-user-images\image-20200518191431453.png" alt="image-20200518191431453"></p>
<h3 id="配置工作"><a href="#配置工作" class="headerlink" title="配置工作"></a>配置工作</h3><ol>
<li>进入<em>StreamingAssets-&gt;VisionLib</em>目录，将下载的许可证文件（<em>license.xml</em>）复制进此目录下</li>
<li>将电脑接上摄像头</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>官方demo使用的是折纸折起来的各种汽车，官方资源链接在此 <a href="https://visionlib.com/customer-area/resources/">Resources</a></p>
<p>使用的话可以查看<em>SDK</em>本身自带的<em>demo</em></p>
<p>由于后续写的文章，没有拍摄图片下来，希望各位自己做一下</p>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>感觉和<em>Vuforia</em>功能上差别不大，<em>model target</em>（识别实物）的功能，这个<em>SDK</em>支持多个识别，<em>Vuforia</em>试过不可以。</p>
<p>另外，识别过程中的官方水印也太强了，真的是。。。。</p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>VisonLib</tag>
      </tags>
  </entry>
  <entry>
    <title>word中美观地插入代码方法</title>
    <url>/2020/05/18/word%E4%B8%AD%E7%BE%8E%E8%A7%82%E5%9C%B0%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何在word中美观的写入code呢？</p>
<a id="more"></a>
<h2 id="优雅的在-Microsoft-word中插入代码，使文档更美观！！！"><a href="#优雅的在-Microsoft-word中插入代码，使文档更美观！！！" class="headerlink" title="优雅的在 Microsoft word中插入代码，使文档更美观！！！"></a>优雅的在 Microsoft word中插入代码，使文档更美观！！！</h2><blockquote>
<p>本文转载自 <a href="https://blog.csdn.net/u011303443/article/details/50992651?utm_source=copy">https://blog.csdn.net/u011303443/article/details/50992651?utm_source=copy</a></p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2020/05/18/a7OuKt9znPI5xHM.png" alt=""></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>浏览器打开网页<a href="http://www.planetb.ca/syntax-highlight-word">PlanetB</a></p>
<p><img src="https://i.loli.net/2020/05/18/d9HalcCbJYkyULP.png" alt=""></p>
</li>
<li><p>将要复制的代码粘贴进网页下方的<em>code</em>白框中</p>
<p><img src="https://i.loli.net/2020/05/18/mIeGjQL6f1FYbJ3.png" alt=""></p>
</li>
<li><p>选择语言类型</p>
</li>
<li><p>点击<em>Show HighLighted</em></p>
</li>
<li><p>在新打开的页面上<em>Ctrl+A</em>全选，复制，粘贴进<em>word</em>中。</p>
<p><img src="https://i.loli.net/2020/05/18/lEaDSFz5gIA3ctH.png" alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>word中插入代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity重新激活许可证</title>
    <url>/2020/05/06/Unity%E9%87%8D%E6%96%B0%E6%BF%80%E6%B4%BB%E8%AE%B8%E5%8F%AF%E8%AF%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于出现 <em>your license does not cover Universal Windows Platform Publishing</em> 的错误</p>
<a id="more"></a>
<h2 id="关于出现-your-license-does-not-cover-Universal-Windows-Platform-Publishing-的错误"><a href="#关于出现-your-license-does-not-cover-Universal-Windows-Platform-Publishing-的错误" class="headerlink" title="关于出现 your license does not cover Universal Windows Platform Publishing 的错误"></a>关于出现 <em>your license does not cover Universal Windows Platform Publishing</em> 的错误</h2><p>错误截图如下：</p>
<p><a href="https://imgchr.com/i/YPoiYn"><img src="https://s1.ax1x.com/2020/05/05/YPoiYn.png" alt="YPoiYn.png"></a></p>
<p>解决方法：重新激活许可证即可解决</p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>AR资源</title>
    <url>/2020/04/19/AR%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AR视频课程资源与书籍资源汇总</p>
<a id="more"></a>
<blockquote>
<p>本文转载于<a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485416&amp;idx=1&amp;sn=e7cc50d5c06b61892b1370f71632a4e8&amp;chksm=96f45a72a183d3641bfca0c3e29bdaf9ec0bdf2e464071cee2ca535191fa23d611403d08f622&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1587217180782&amp;sharer_shareid=93eb2711304121e2bbb43bede39aadd0#rd">https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485416&amp;idx=1&amp;sn=e7cc50d5c06b61892b1370f71632a4e8&amp;chksm=96f45a72a183d3641bfca0c3e29bdaf9ec0bdf2e464071cee2ca535191fa23d611403d08f622&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1587217180782&amp;sharer_shareid=93eb2711304121e2bbb43bede39aadd0#rd</a></p>
</blockquote>
<p>本文主要整理了一些AR开发过程中会用到的视频课程（公开课）和相关开发书籍，适合AR初级开发者和一些资深程序员学习。</p>
<h2 id="视频课程"><a href="#视频课程" class="headerlink" title="视频课程"></a>视频课程</h2><hr>
<h3 id="EasyAR"><a href="#EasyAR" class="headerlink" title="EasyAR"></a>EasyAR</h3><ol>
<li><p><strong>EasyAR Scene 4.0使用系列教程</strong></p>
<p>课程介绍：EasyAR4.0的简单的使用说明，包括了基本设置，平面图像跟踪，3D物体跟踪，表面跟踪，运动跟踪和稀疏空间云。</p>
<p>image1</p>
<p><a href="https://v.qq.com/vplus/6d186ec7b4372bc7#uin=6d186ec7b4372bc7?page=video">https://v.qq.com/vplus/6d186ec7b4372bc7#uin=6d186ec7b4372bc7?page=video</a></p>
</li>
<li><p><strong>EasyAR4.0官方示例演示</strong></p>
<p><a href="https://v.qq.com/x/page/v0948ktcrbo.html">https://v.qq.com/x/page/v0948ktcrbo.html</a></p>
<p><a href="https://v.qq.com/x/page/q0948767iwz.html">https://v.qq.com/x/page/q0948767iwz.html</a></p>
</li>
<li><p><strong>实现室内AR导航教程</strong></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485173&amp;idx=1&amp;sn=4bef5df0b2cf08951909d5eab47e8809&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s/LMP5x5jaQkfoH52ILWA5tw</a></p>
</li>
<li><p><strong>小程序AR教程</strong></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDYzNjcyOQ==&amp;mid=2247484130&amp;idx=1&amp;sn=2a02d650f6a4f365e18d1a6f523ea626&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s/g5mBhw73t54Wl2Tgs2gxtA</a></p>
</li>
<li><p><strong>AR互动大屏项目实战课程（付费）</strong></p>
<p>课程介绍：课程会完整的从整体设计、AR环境搭建、动画制作、动画控制、脚本编写、服务器交互、二维码生成、跨平台修改等进行全流程讲解。</p>
<p><a href="https://edu.manew.com/course/216">https://edu.manew.com/course/216</a></p>
</li>
<li><p><strong>国产AR引擎 EasyAR的使用流程演示</strong></p>
<p><a href="https://www.bilibili.com/video/BV11W411m79a">https://www.bilibili.com/video/BV11W411m79a</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485383&amp;idx=1&amp;sn=6f5d252057104bc7e4c43dcf4c624caa&amp;chksm=96f45a5da183d34bf2ea3ab6530840deac791c0ef11a2c3805cbdad0adcf1ea6f52a45102889&amp;scene=21#wechat_redirect">完备的EasyAR学习路线，最详细的资源整理！</a></p>
</li>
</ol>
<hr>
<h3 id="ARKit"><a href="#ARKit" class="headerlink" title="ARKit"></a>ARKit</h3><ol>
<li><p><strong>ARKit入门到精通-1.0 -基础内容</strong></p>
<p>课程介绍：其视频内容涵盖了ARKit 1.0版本的实现原理、启动相机、Remote的使用、开启／控制检测、自定义平面、自定义点云、API介绍等。</p>
<p><a href="https://www.bilibili.com/video/BV13W411Z78Z?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV13W411Z78Z?from=search&amp;seid=15033026591829912754</a></p>
</li>
</ol>
<ol>
<li><p><strong>ARKit入门到精通 1.0 - 实战案例 AR打地鼠</strong></p>
<p>课程介绍：主要通过一个实际案例【AR打地鼠】对ARKit1.0版本的使用做一个复习强化。</p>
<p><a href="https://www.bilibili.com/video/BV1GW411Z7Pb?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1GW411Z7Pb?from=search&amp;seid=15033026591829912754</a></p>
<ol>
<li><p><strong>ARKit入门到精通-1.5 -基础内容</strong></p>
<p>课程介绍：其视频介绍了ARKit 1.5版本的面部追踪、人脸检测、垂直平面检测、图片识别等特性。</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z7zu?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z7zu?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>ARKit入门到精通-2.0 -基础内容</strong></p>
<p>课程介绍：其视频介绍了ARKit 2.0版本多人互动、数据共享等功能。</p>
<p><a href="https://www.bilibili.com/video/BV1JW411C7oc?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1JW411C7oc?from=search&amp;seid=15033026591829912754</a></p>
</li>
</ol>
</li>
<li><p><strong>ARKit视觉风暴</strong></p>
<p>课程介绍：本套课程从技术理念到项目实践，教大家系统掌握ARKit技术开发，随心打造iOS端AR增强现实应用。由一开始的开发环境搭建，到Unity ARKit Plugin、ARFoundation ARKit等不同时期技术的讲解。从平面模型放置、识别图片、手势交互、3D物体识别、面部AR贴纸、光照估计、环境探针、多人AR技术，甚至包含ARKit3.0的动作捕捉技术等。</p>
<p><a href="https://edu.csdn.net/course/detail/27549?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158718710819726869002335%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158718710819726869002335&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-4">https://edu.csdn.net/course/detail/27549?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158718710819726869002335%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158718710819726869002335&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-4</a></p>
</li>
<li><p><strong>ARKit玩起来 - AR卡通秀</strong></p>
<p>课程介绍：此课程使用ARKit 面部检测功能,将虚拟物体放置到面部</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z77u?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z77u?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>零基础，17分钟制作AR丧尸游戏</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Rx411i764?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1Rx411i764?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>ARkit实战开发视频教程</strong></p>
<p>课程介绍：通过多个实战案例实际操作开发，从而掌握ARkit的相关开发技能：1.认知ARkit的工作流。2.slam与imu的实际应用。3.平面检测与打击测试。4.光照捕获原理。5.在三维引擎上开发内容。6.物体追踪摄像机。7.实现简易版测量尺。8.实现任意门效果（空间穿越）。</p>
<p><a href="https://edu.51cto.com/course/10845.html">https://edu.51cto.com/course/10845.html</a></p>
</li>
<li><p><strong>ARKit玩起来 - AR预览唱片</strong></p>
<p>课程介绍：使用ARKit-1.5 图片检测功能, 在识别到图片之后播放视频</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z7Ju?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z7Ju?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485061&amp;idx=2&amp;sn=d32a791c4e658cf9a44f0746190585ff&amp;chksm=96f45b1fa183d2092b002e564f3522f95cb2c2e862d2af8f8d7130b001068b31d4c81ee75725&amp;scene=21#wechat_redirect">ARKit开发资源合集</a></p>
</li>
</ol>
<hr>
<h3 id="ARCore"><a href="#ARCore" class="headerlink" title="ARCore"></a>ARCore</h3><ol>
<li><p><strong>ARCore增强现实开发从0到1</strong></p>
<p>课程介绍：课程由浅入深，教快速掌握ARCore开发技术，打造出属于自己的AR增强现实应用。由一开始的开发环境搭建，到ARCore的讲解，再到识别图片、手势交互、甚至可以做出热门短视频的AR贴纸特效。</p>
<p><a href="https://ke.qq.com/course/436124">https://ke.qq.com/course/436124</a></p>
</li>
<li><p><strong>10分钟unity上ARCore发布流程</strong></p>
<p><a href="https://www.bilibili.com/video/av837691674/">https://www.bilibili.com/video/av837691674/</a></p>
</li>
<li><p><strong>Unity ARCore 开发全流程演示</strong><br><a href="https://www.bilibili.com/video/BV1SW411o7zj?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1SW411o7zj?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>Unity+ARcore 实现传送门</strong></p>
<p><a href="https://www.bilibili.com/video/BV1tb411N7i6?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1tb411N7i6?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>如何在Unity中创建ARCore的应用</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Yx41177nV?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1Yx41177nV?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>HoloLens与ARcore第三视角开发</strong></p>
<p>课程介绍：使用ARcore实现HoloLens第三视角开发，课程包括客户端及服务端Socket异步套接字网络开发，HoloLens接入VuforiaSDK，ARcore与HoloLens空间同步，房间系统，命令同步等。</p>
<p><a href="https://edu.csdn.net/course/detail/23985">https://edu.csdn.net/course/detail/23985</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247484948&amp;idx=1&amp;sn=bb7a11416021adcd9b8d305756098a7c&amp;chksm=96f45b8ea183d298805439eca4fb5c6feb247cf4bd838f1f2a05031108a43cdcceceb3d0f469&amp;scene=21#wechat_redirect">【AR优秀开源项目】ARCore项目工程汇总</a></p>
</li>
</ol>
<hr>
<h3 id="Hololens"><a href="#Hololens" class="headerlink" title="Hololens"></a>Hololens</h3><ol>
<li><p><strong>Hololens开发入门篇</strong></p>
<p>课程介绍：学会Hololens模拟器开发环境的配置及使用方法 应用凝视（Gaze）、手势（Guesture）、英文语音控制（Voice）、立体音效（Spatial sound）、空间映射（Spatial mapping）功能整合开发一个应用并在模拟器上部署运行。</p>
<p><a href="https://edu.csdn.net/course/detail/6639">https://edu.csdn.net/course/detail/6639</a></p>
</li>
<li><p><strong>Hololens MR 技术分享</strong></p>
<p><a href="https://edu.manew.com/my/course/204">https://edu.manew.com/my/course/204</a></p>
</li>
<li><p><strong>HoloLens开发教程</strong></p>
<p><a href="https://space.bilibili.com/109590528?from=search&amp;seid=11372730618997738226">https://space.bilibili.com/109590528?from=search&amp;seid=11372730618997738226</a></p>
</li>
<li><p><strong>PP先生帮你5分钟搞定HoloLens2程序</strong></p>
<p><a href="https://www.bilibili.com/video/BV1hJ411U7Mb?from=search&amp;seid=6201309428496584363">https://www.bilibili.com/video/BV1hJ411U7Mb?from=search&amp;seid=6201309428496584363</a></p>
</li>
<li><p><strong>Unity HoloLens 开发教程系列</strong></p>
<p><a href="https://space.bilibili.com/19357096/video">https://space.bilibili.com/19357096/video</a></p>
</li>
<li><p><strong>HoloLens与ARcore第三视角开发</strong></p>
<p>课程介绍：使用ARcore实现HoloLens第三视角开发，课程包括客户端及服务端Socket异步套接字网络开发，HoloLens接入VuforiaSDK，ARcore与HoloLens空间同步，房间系统，命令同步等。</p>
<p><a href="https://edu.csdn.net/course/detail/23985">https://edu.csdn.net/course/detail/23985</a></p>
</li>
<li><p><strong>HoloLens全息应用开发</strong></p>
<p><a href="https://edu.csdn.net/course/detail/4897/88469?ops_request_misc=&amp;request_id=&amp;biz_id=105&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~sobaiduweb~default-0">https://edu.csdn.net/course/detail/4897/88469?ops_request_misc=&amp;request_id=&amp;biz_id=105&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~sobaiduweb~default-0</a></p>
</li>
<li><p><strong>Hololens全息房产项目（上）</strong></p>
<p>课程介绍：讲解hololens的环境配置：模拟器安装配置，VS配置，系统配置，Unity配置。基础功能：语音、凝视以及手势控制，空间扫描与定位。经典的hololens设计方式——传送门，通过传送门在现实空间与虚拟空间穿梭。</p>
<p><a href="https://edu.manew.com/course/350">https://edu.manew.com/course/350</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247484878&amp;idx=1&amp;sn=db93b4334cc4781d038eaf7cc078e260&amp;chksm=96f45854a183d1421303227f11ffb5af22d81c0205f222f9858ca6b1d2b35262439a5bfb5222&amp;scene=21#wechat_redirect">HoloLens应用场景大盘点（上）</a></p>
</li>
</ol>
<hr>
<h3 id="Vuforia"><a href="#Vuforia" class="headerlink" title="Vuforia"></a>Vuforia</h3><ol>
<li><p><strong>【SiKi学院Unity3D视频教程】AR系列教程 - Vuforia入门</strong></p>
<p><a href="https://www.bilibili.com/video/BV134411s725?from=search&amp;seid=819133152602426925">https://www.bilibili.com/video/BV134411s725?from=search&amp;seid=819133152602426925</a></p>
</li>
<li><p><strong>Unity AR开发实践之Vuforia详解</strong></p>
<p><a href="https://www.bilibili.com/video/BV1At41117J9?from=search&amp;seid=13345706439745907767">https://www.bilibili.com/video/BV1At41117J9?from=search&amp;seid=13345706439745907767</a></p>
</li>
<li><p><strong>Unity + Vuforia 构建企业级AR应用</strong></p>
<p><a href="https://www.bilibili.com/video/BV1CJ411t7qp/?spm_id_from=333.788.videocard.3">https://www.bilibili.com/video/BV1CJ411t7qp/?spm_id_from=333.788.videocard.3</a></p>
</li>
<li><p><strong>教你用Unity制作一个AR初音尬舞</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Ux411h75b/?spm_id_from=333.788.videocard.1">https://www.bilibili.com/video/BV1Ux411h75b/?spm_id_from=333.788.videocard.1</a></p>
</li>
<li><p><strong>Vuforia远程视频AR标注</strong></p>
<p>课程介绍：Vuforia+UnityChatSDK开发远程视频AR标注，实现Vuforia Chalk的功能，支持PC、Android、IOS平台。</p>
<p><a href="https://edu.csdn.net/course/detail/27280?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-2">https://edu.csdn.net/course/detail/27280?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-2</a></p>
</li>
<li><p><strong>Vuforia Studio工业增强现实应用技术及最佳实践</strong></p>
<p>课程介绍：Vuforia Studio是PTC基于全球最领先的增强现实平台Vuforia开发的AR企业级工具，可通过简单的拖放操作界面，打造以企业为重点的AR体验。企业可利用现有的3D资产创建可扩展的服务应用程序、专注于培训体验、销售和营销虚拟演示，甚至是利用Vuforia Studio实现制造流程序列。介绍企业级AR的应用价值，使用PTC Vuforia Studio如何降低企业开发成本，简化系统可扩展性，利用企业丰富的三维数据和物联网资源，加速创建引人注目的增强现实内容，轻松提供洞察力。</p>
<p><a href="https://edu.csdn.net/course/detail/20764?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-1">https://edu.csdn.net/course/detail/20764?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-1</a></p>
</li>
<li><p><strong>增强现实，超凡体验 Qualcomm Vuforia SDK在线培训</strong></p>
<p>课程介绍：Qualcomm Vuforia 移动视觉平台和开发套件的功能特点作深度讲解，同时也包括相关配套工具，新的云端识别服务和资费方案概况。除此之外培训中还将详细介绍新发布的Vuforia 5新功能</p>
<p><a href="https://edu.csdn.net/course/detail/1467?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-3">https://edu.csdn.net/course/detail/1467?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-3</a></p>
</li>
<li><p><strong>基于Unity 的AR 游戏开发实践</strong></p>
<p>课程介绍：本次课程将以一个具体的坦克游戏为例，介绍AR技术在Unity中的使用。AR技术通过在真实场景中增加虚拟场景，创造了一种全新的交互体验。目前，这项技术已经应用到了游戏，教育等诸多领域， 比如火遍全球的Pokemongo游戏。Unity通过集成Vuforia插件，帮助开发者可以方便的把AR技术应用到自己开发的游戏或者应用中。</p>
<p><a href="https://edu.csdn.net/course/detail/5659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-6">https://edu.csdn.net/course/detail/5659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-6</a></p>
</li>
<li><p><strong>Vuforia AR实战教程</strong></p>
<p><a href="https://www.taikr.com/course/531">https://www.taikr.com/course/531</a></p>
</li>
<li><p><strong>PokemonGo-LBS AR项目实战</strong></p>
<p>课程介绍：基于Unity2017.3.1 本课程将带领大家制作AR游戏中最火的PokemonGO，侧重于快速简单的实现LBS基于地理的GPS定位技术、AR捕捉功能。</p>
<p><a href="https://edu.manew.com/course/516">https://edu.manew.com/course/516</a></p>
</li>
<li><p><strong>AR - 双卡互动 专题讲解</strong></p>
<p><a href="https://edu.manew.com/my/course/175">https://edu.manew.com/my/course/175</a></p>
</li>
<li><p><strong>AR房地产 - 实战讲解</strong></p>
<p><a href="https://edu.manew.com/course/172">https://edu.manew.com/course/172</a></p>
</li>
<li><p><strong>AR涂涂乐 （Vuforia） - 实战讲解</strong></p>
<p>课程介绍：本课程将带领大家使用VuforiaSDK（高通）制作涂色AR，课程重点在于如何获取画面，a获取后的画面如何计算得出正确的位置，b拉伸贴图匹配UV，c通过UI来判断识别图在屏幕中的位置。课程会完整的从平面图形制作，模型制作，C#,Shader编写进行全流程讲解。并将思路与详细制作过程分开，适合不同基础的学员学习。制作中使用的PS、Maya、Unity软件操作细节都会一一讲解并将课程源码，操作方式，快捷键说明附在课程资料中供大家下载。即使零基础也可完整制作最终APP(安卓和IOS)。</p>
<p><a href="https://edu.manew.com/course/162">https://edu.manew.com/course/162</a></p>
</li>
<li><p><strong>增强现实AR基础实例讲解</strong></p>
<p><a href="https://edu.manew.com/course/106">https://edu.manew.com/course/106</a></p>
</li>
</ol>
<hr>
<h3 id="其他SDK"><a href="#其他SDK" class="headerlink" title="其他SDK"></a>其他SDK</h3><ol>
<li><p><strong>Nreal SDK教程 - 10分钟创建Nreal AR应用程序</strong></p>
<p><a href="https://www.bilibili.com/video/BV1j4411z7Us?from=search&amp;seid=7664168149376911358">https://www.bilibili.com/video/BV1j4411z7Us?from=search&amp;seid=7664168149376911358</a></p>
</li>
<li><p><strong>Nreal MR眼镜快速开发教程</strong></p>
<p><a href="https://www.bilibili.com/video/BV1zJ411C7BJ?from=search&amp;seid=7664168149376911358">https://www.bilibili.com/video/BV1zJ411C7BJ?from=search&amp;seid=7664168149376911358</a></p>
</li>
<li><p><strong>百度AR开发系列教程</strong></p>
<p><a href="https://ai.baidu.com/support/video">https://ai.baidu.com/support/video</a></p>
</li>
</ol>
<hr>
<h2 id="开发书籍"><a href="#开发书籍" class="headerlink" title="开发书籍"></a>开发书籍</h2><h3 id="ARKit开发实战"><a href="#ARKit开发实战" class="headerlink" title="ARKit开发实战"></a>ARKit开发实战</h3><p>本书主要介绍ARKit的原生API，分别从世界跟踪、场景理解、几何渲染、人脸跟踪4个方面详细叙述ARKit的功能，以及在Unity中接入ARKit的方法。并且在开始部分添加了使用ARKit所必需的一些基础知识，为了减少接受难度，本书只会叙述用到的知识点。本书的最后一部分介绍了EasyAR和Vuforia这两款AR SDK的功能和使用方法。本书适合对ARKit感兴趣的iOS开发者，以及其他想要了解ARKit原生API的读者阅读。</p>
<h3 id="Unity-AR-增强现实完全自学教程"><a href="#Unity-AR-增强现实完全自学教程" class="headerlink" title="Unity AR 增强现实完全自学教程"></a>Unity AR 增强现实完全自学教程</h3><p>本书是初学者快速学习AR应用的全面教程，从基础理论到经典的AR案例都进行了详尽的讲解。保证即便是零基础的读者也可以通过本书学习并制作出常见的AR应用。本书共分10章，基础部分会介绍Unity的安装配置、基础操作、C#编程基础、坐标系统、UI系统以及AR应用在常用平台（PC、Android、iOS）的发布等。AR案例部分会以涂色类AR、多卡互动AR、恐龙博物馆AR大屏互动为例，在实际制作过程中教大家AR应用的通用设计方式，以及如何处理AR应用在制作过程中常见的问题。为了方便读者学习，本书随书提供课程中案例的所有资源及源文件，可以随时查阅对比。本书适合于想要进入AR行业的兴趣爱好者，传统行业转型AR的管理者、投资人，以及针对AR中特定案例有需求的从业人员。</p>
<h3 id="Unity-2018-Augmented-Reality-Projects"><a href="#Unity-2018-Augmented-Reality-Projects" class="headerlink" title="Unity 2018 Augmented Reality Projects"></a>Unity 2018 Augmented Reality Projects</h3><p>这本书教你如何使用Unity来开发AR应用程序，可以通过HoloLens和Daydream等设备来体验。在逐步实现基于传感器的AR应用程序之前，你将学习如何在你的相机上集成、动画和覆盖3D对象。</p>
<h3 id="沉浸感：不可错过的虚拟现实革命"><a href="#沉浸感：不可错过的虚拟现实革命" class="headerlink" title="沉浸感：不可错过的虚拟现实革命"></a>沉浸感：不可错过的虚拟现实革命</h3><p>本书是作者关于虚拟现实（VR）的长期思考，深入讨论了虚拟现实的本质、特点、应用前景，以及商业价值。通过虚拟现实这一个大趋势，作者也讲解了增强现实、混合现实、IP、模因、注意力经济等重要话题。</p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>ARCore导入Unity，打包HelloAR</title>
    <url>/2020/04/03/ARCore%E5%AF%BC%E5%85%A5Unity%EF%BC%8C%E6%89%93%E5%8C%85HelloAR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录第一次使用ARCore的报错经历</p>
<a id="more"></a>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h4><p>硬件：<a href="https://developers.google.com/ar/discover/supported-devices">支持ARCore的手机</a></p>
<p>软件：</p>
<ul>
<li>Unity2017.4.9f1及以上版本</li>
<li>ARCore SDK for Unity 1.5.0 或更高版本</li>
<li>使用<a href="https://developer.android.com/studio">Android Studio</a> 中的 SDK 管理器安装的 Android SDK <strong>7.0（API 级别 24）或更高版本</strong></li>
</ul>
<h4 id="第一步：下载SDK包"><a href="#第一步：下载SDK包" class="headerlink" title="第一步：下载SDK包"></a>第一步：下载SDK包</h4><p>下载 <a href="https://github.com/google-ar/arcore-unity-sdk/releases">ARCore SDK for Unity <strong>1.5.0 或更高版本</strong></a>，下载的 SDK 文件名为 <code>arcore-unity-sdk-v1.5.0.unitypackage</code>。</p>
<h4 id="第二步：新建项目并导入SDK"><a href="#第二步：新建项目并导入SDK" class="headerlink" title="第二步：新建项目并导入SDK"></a>第二步：新建项目并导入SDK</h4><ol>
<li>打开 Unity 并新建一个 <strong>3D</strong> 项目。</li>
<li>选择 <strong>Assets &gt; Import Package &gt; Custom Package</strong>。</li>
<li>选择您上面下载的 <code>arcore-unity-sdk-v1.5.0.unitypackage</code> Unity 软件包。</li>
<li>在 <strong>Importing Package</strong> 对话框中，确保已选择所有软件包选项，并点击 <strong>Import</strong>。</li>
<li>出现提示时接受任何 <a href="https://docs.unity3d.com/Manual/APIUpdater.html">API 升级</a>。</li>
</ol>
<h4 id="第三步：配置"><a href="#第三步：配置" class="headerlink" title="第三步：配置"></a>第三步：配置</h4><ol>
<li><p>转到 <strong>File &gt; Build Settings</strong> 以打开 <strong><a href="https://docs.unity3d.com/Manual/BuildSettings.html">Build Settings</a></strong> 窗口。</p>
</li>
<li><p>选择 <strong>Android</strong> 并点击 <strong>Switch Platform</strong>。</p>
</li>
<li><p>在 <strong>Build Settings</strong> 窗口中，点击 <strong>Player Settings</strong>。</p>
</li>
<li><p>在Inspector窗口中，配置下列播放器设置：</p>
<p>| 设置                                                         | 值                                                           |<br>| :—————————————————————————————- | :—————————————————————————————- |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Package Name</strong>  | 创建一个 Java 软件包名称格式的唯一应用 ID。 例如，使用 <code>com.example.helloAR</code> |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Minimum API Level</strong> | Android 7.0 或更高版本                                       |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Target API Level</strong> | <del>Android 7.0 或更高版本</del> 直接自动最高版本                  |<br>| <strong>Player Settings</strong> &gt; <strong>XR Settings</strong> &gt; <strong>ARCore Supported</strong> | 启用                                                         |</p>
</li>
</ol>
<h4 id="第四步：解决报错"><a href="#第四步：解决报错" class="headerlink" title="第四步：解决报错"></a>第四步：解决报错</h4><p>导入SDK后，控制台报错如下：</p>
<blockquote>
<p>The type or namespace name ‘SpatialTracking’ does not exist in the namespace ‘UnityEngine’</p>
</blockquote>
<p>大概有17条错误</p>
<p><strong>解决方法：</strong></p>
<ol>
<li>打开windows -&gt; package manger</li>
<li>分别搜索 <strong>Multiplayer HLAPI </strong>和 <strong>XR Legacy Input Helper </strong>,安装即可</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://developers.google.com/ar/develop/unity/quickstart-android">https://developers.google.com/ar/develop/unity/quickstart-android</a></p>
<p><a href="https://forum.unity.com/threads/he-type-or-namespace-name-spatialtracking-does-not-exist-in-the-namespace-unityengine-are-you-m.650662/">https://forum.unity.com/threads/he-type-or-namespace-name-spatialtracking-does-not-exist-in-the-namespace-unityengine-are-you-m.650662/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>ARCore</tag>
        <tag>HelloAR</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuforia-在Unity2019.3.4中安装Vuforia</title>
    <url>/2020/04/02/Vuforia-%E5%9C%A8Unity2019-3-4%E4%B8%AD%E5%AE%89%E8%A3%85Vuforia/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装unity</p>
<a id="more"></a>
<h3 id="下载安装Unity2019-3-4-f1"><a href="#下载安装Unity2019-3-4-f1" class="headerlink" title="下载安装Unity2019.3.4.f1"></a>下载安装Unity2019.3.4.f1</h3><h4 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h4><ul>
<li>进入官方网站 <a href="https://unity.com/">https://unity.com/</a></li>
<li>在页面最下方找到 download unity</li>
<li>在页面最下方找到 older versions</li>
<li>下载安装在线版即可</li>
</ul>
<h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><ul>
<li>unityHub上直接下载</li>
</ul>
<p>PS：方式二有离线文档可供选择</p>
<h3 id="安装Vuforia"><a href="#安装Vuforia" class="headerlink" title="安装Vuforia"></a>安装Vuforia</h3><ul>
<li>windows -&gt; package manager -&gt; 搜索 Vuforia 即可</li>
</ul>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>Vuforia</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuforia-ImageTarget阶段Demo小总结</title>
    <url>/2020/04/02/Vuforia-%E9%98%B6%E6%AE%B5Demo%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/junlin49/VuforiaDemo">https://github.com/junlin49/VuforiaDemo</a></p>
<p>VuforiaImageDemo_1_Ashe</p>
<hr>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>实现如下效果：</p>
<ul>
<li>相机对准黑桃K后，出现人物</li>
<li>人物先从纸牌中出现，后跳舞，再奔跑，最后攻击</li>
<li>有特效要求</li>
<li>要有截屏，闪光灯，自动对焦功能</li>
<li>双击人物，人物消失</li>
<li>可以两指放大，缩小</li>
<li>可旋转</li>
</ul>
<hr>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol>
<li><p>自动对焦</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">var</span> vuforia = VuforiaARController.Instance;</span><br><span class="line">       vuforia.RegisterVuforiaStartedCallback(OnVuforiaStarted);<span class="comment">// Vuforia启动完成时的回调函数</span></span><br><span class="line">       vuforia.RegisterOnPauseCallback(OnVuforiaPaused);<span class="comment">//Vuforia暂停时的回调函数</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnVuforiaStarted</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="comment">//程序启动，自动对焦</span></span><br><span class="line">       CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_CONTINUOUSAUTO);<span class="comment">//连续自动对焦</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnVuforiaPaused</span>(<span class="params"><span class="built_in">bool</span> isPaused</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCameraFocus</span>(<span class="params"></span>)<span class="comment">//手动单次对焦</span></span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_TRIGGERAUTO);<span class="comment">//手动单次对焦</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>闪光灯</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFlash</span>(<span class="params"></span>)<span class="comment">//设置闪光灯</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CameraDevice.Instance.SetFlashTorchMode(openFlash);</span><br><span class="line">        openFlash = !openFlash;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>双击消失</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> touchTime;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">bool</span> touchNew = <span class="literal">false</span>;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))<span class="comment">//有触屏</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//从点击位置发射射线</span></span><br><span class="line">           Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">          <span class="comment">//接受返回信息</span></span><br><span class="line">           RaycastHit hitInfor;</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">if</span> (Physics.Raycast(ray,<span class="keyword">out</span> hitInfor))<span class="comment">//如果接受到信息</span></span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">//  if(Input.touchCount == 1 &amp;&amp; Input.GetTouch(0).phase == TouchPhase.Began)//1根手指点击，且刚刚点击</span></span><br><span class="line">              <span class="comment">// &#123;</span></span><br><span class="line">                   <span class="comment">//双击</span></span><br><span class="line">                   <span class="comment">//if(Input.GetTouch(0).tapCount == 2)//双击</span></span><br><span class="line">                   <span class="comment">//&#123;</span></span><br><span class="line">                   <span class="comment">//    Destroy(hitInfor.collider.gameObject);//射线射到的collider所属的游戏物体，销毁</span></span><br><span class="line">                   <span class="comment">//&#125;</span></span><br><span class="line">   </span><br><span class="line">                   <span class="comment">//长按aixi，销毁</span></span><br><span class="line">                   <span class="keyword">if</span> (Input.touchCount == <span class="number">1</span>)<span class="comment">//1根手指按</span></span><br><span class="line">                   &#123;</span><br><span class="line">                       Touch touch = Input.GetTouch(<span class="number">0</span>);<span class="comment">//第一根触摸的手指</span></span><br><span class="line">                       <span class="keyword">if</span> (touch.phase == TouchPhase.Began)<span class="comment">//刚按，A finger touched the screen.</span></span><br><span class="line">                   &#123;</span><br><span class="line">                           touchNew = <span class="literal">true</span>;</span><br><span class="line">                           touchTime = Time.time;<span class="comment">//记录开始按的时候的时间</span></span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (touch.phase == TouchPhase.Stationary)<span class="comment">//按住静止不动；A finger is touching the screen but hasn&#x27;t moved.</span></span><br><span class="line">                   &#123;</span><br><span class="line">                         <span class="keyword">if</span> (touchNew == <span class="literal">true</span> &amp;&amp; Time.time-touchTime&gt;<span class="number">1</span>)<span class="comment">//长按1s后</span></span><br><span class="line">                           &#123;</span><br><span class="line">                               touchNew = <span class="literal">false</span>;</span><br><span class="line">                               Destroy(hitInfor.collider.gameObject);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                       &#123;</span><br><span class="line">                           touchNew = <span class="literal">false</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">              <span class="comment">// &#125;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>旋转放缩</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))<span class="comment">//触屏了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Input.touchCount == <span class="number">1</span>)<span class="comment">//一个手指头</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Input.GetTouch(<span class="number">0</span>).phase == TouchPhase.Moved)<span class="comment">//状态移动</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.transform.Rotate(<span class="number">0</span>, -xRotationSpeed * Time.deltaTime * Input.GetAxis (<span class="string">&quot;Mouse X&quot;</span>),<span class="number">0</span>,Space.World);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Input.touchCount == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Input.GetTouch(<span class="number">0</span>).phase == TouchPhase.Moved || Input.GetTouch(<span class="number">1</span>).phase == TouchPhase.Moved)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector2 temPositon1 = Input.GetTouch(<span class="number">0</span>).position;</span><br><span class="line">                    Vector2 temPositon2 = Input.GetTouch(<span class="number">1</span>).position;</span><br><span class="line">                    <span class="keyword">if</span> (IsLarge(oldPositon1,oldPositon2,temPositon1,temPositon2))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//arCamera.fieldOfView -= arCamera.fieldOfView*0.01*</span></span><br><span class="line">                        <span class="keyword">this</span>.transform.localScale = <span class="keyword">new</span> Vector3(</span><br><span class="line">                            <span class="keyword">this</span>.transform.localScale.x * scaleOut, <span class="keyword">this</span>.transform.localScale.y * scaleOut, <span class="keyword">this</span>.transform.localScale.z * scaleOut);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.transform.localScale = <span class="keyword">new</span> Vector3(</span><br><span class="line">                           <span class="keyword">this</span>.transform.localScale.x * scaleIn, <span class="keyword">this</span>.transform.localScale.y * scaleIn, <span class="keyword">this</span>.transform.localScale.z * scaleIn);</span><br><span class="line">                    &#125;</span><br><span class="line">                    oldPositon1 = temPositon1;</span><br><span class="line">                    oldPositon2 = temPositon2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsLarge</span>(<span class="params">Vector2 oldPoint1, Vector2 oldPoint2 , Vector2 newPoint1 , Vector2 newPoint2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Vector2.Distance(oldPoint1, oldPoint2) &lt; Vector2.Distance(newPoint1,newPoint2))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></h2><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><a href="https://imgchr.com/i/8OLECj"><img src="https://s1.ax1x.com/2020/03/25/8OLECj.jpg" alt="8OLECj.jpg"></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Vuforia</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-场景切换</title>
    <url>/2020/04/02/Unity-%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录如何在Unity中实现场景切换</p>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void Click()</span><br><span class="line">&#123;</span><br><span class="line">      Invoke(&quot;ChangeScene&quot;, 1);  # 1s后切换场景，延时作用</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void ChangeScene()</span><br><span class="line">&#123;</span><br><span class="line">      SceneManager.LoadScene(&quot;场景名字&quot;);  &#x2F;&#x2F; 登陆成功则切换到游戏界面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载当前场景"><a href="#加载当前场景" class="headerlink" title="加载当前场景"></a>加载当前场景</h3><p>比如点击重新开始按钮后，重新开始游戏。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SceneManager.LoadScene(SceneManager.GetActiveScene().name);</span><br></pre></td></tr></table></figure>
<p>注意该语句执行的时候，仍会执行<code>update</code>函数。因此在<code>update</code>中置位标志位要多加留意。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://www.jianshu.com/p/fb688b80986b?tdsourcetag=s_pcqq_aiomsg">https://www.jianshu.com/p/fb688b80986b?tdsourcetag=s_pcqq_aiomsg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Vuforia更新错误:Failed to resolve packages</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E6%9B%B4%E6%96%B0%E9%94%99%E8%AF%AF-Failed-to-resolve-packages/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>新冠期间总是不开学，最近Vuforia更新了9.0版本，所以尝试下</p>
<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>错误提示：</p>
<p>Failed to resolve packages: Cannot read property ‘scopedRegistries’ of undefined. No packages loaded.</p>
<p>如果使用 Unity 2019及以上版本，可以发现 AR camera 的输入密钥页面，已经提示有新版本可用，如下：</p>
<p><a href="https://imgchr.com/i/G3Lmzn"><img src="https://s1.ax1x.com/2020/04/01/G3Lmzn.png" alt="G3Lmzn.png"></a></p>
<p><a href="https://imgchr.com/i/G3LZGj"><img src="https://s1.ax1x.com/2020/04/01/G3LZGj.png" alt="G3LZGj.png"></a></p>
<p>点击后，直接跳转到此界面：</p>
<p> <a href="https://library.vuforia.com/content/vuforia-library/en/articles/Solution/vuforia-engine-package-hosting-for-unity.html">https://library.vuforia.com/content/vuforia-library/en/articles/Solution/vuforia-engine-package-hosting-for-unity.html</a></p>
<p>第一种方式最简单，直接下载 SDK 升级即可，但是博主下载导入到 Unity 后，发现不仅没有升级，还出现了很多错误，而且在package manager 界面上，完全没有内容，似乎有文件找不到</p>
<p><a href="https://imgchr.com/i/G3LViQ"><img src="https://s1.ax1x.com/2020/04/01/G3LViQ.png" alt="G3LViQ.png"></a></p>
<p>错误提示：</p>
<p>Failed to resolve packages: Cannot read property ‘scopedRegistries’ of undefined. No packages loaded.</p>
<p>Cannot perform upm operation: Cannot read property ‘scopedRegistries’ of undefined [NotFound]<br>UnityEditor.EditorApplication:Internal_CallUpdateFunctions()</p>
<p>Error fetching package list.<br>UnityEditor.EditorApplication:Internal_CallUpdateFunctions()</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>按照官方链接的最后一个方法，下载 Vuforia Engine软件包，解压后将原名为<em>package</em>的文件夹，改名为<em>com.ptc.vuforia.engine</em>，放进项目对应的 package 目录，即可发现 Unity 界面已经开始导入。</p>
<p><a href="https://imgchr.com/i/G3L5TS"><img src="https://s1.ax1x.com/2020/04/01/G3L5TS.png" alt="G3L5TS.png"></a></p>
<h2 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h2><p><del>发现不能直接拖拽 .unitypackage 文件进行导入，只能通过右键菜单里的导入进行操作</del></p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Vuforia错误：Failed-load-data-set-xxx</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E9%94%99%E8%AF%AF%EF%BC%9AFailed-load-data-set-xxx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vuforia运行问题</p>
<a id="more"></a>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>按照常规套路，布置好AR Camera , 2个model target 之后，运行会报错。提示 failed-load-data-set-xxx </p>
<!-- more -->
<p>错误提示：</p>
<blockquote>
<p>Failed to load data set all.<br>UnityEngine.Debug:LogError(Object)<br>Vuforia.DatabaseLoadARController:LoadDatasets()<br>Vuforia.VuforiaARController:StartAfterInitializationCompleted()<br>Vuforia.VuforiaARController:Start()<br>System.Delegate:DynamicInvoke(Object[])<br>Vuforia.DelegateHelper:InvokeDelegate(Delegate, Object[])<br>Vuforia.DelegateHelper:InvokeWithExceptionHandling(Action)<br>Vuforia.VuforiaBehaviour:Start()</p>
</blockquote>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>推荐 Vuforia 官方论坛搜索，此问题已经有人反映过，链接：<a href="https://developer.vuforia.com/forum/model-targets/failed-load-data-set-xxx">https://developer.vuforia.com/forum/model-targets/failed-load-data-set-xxx</a> ；</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>尝试换Key，但是没啥用；</p>
<p>亲测解决方法：Unity 版本2019及以上，Vuforia 9.0 即可，就没有报错了</p>
<p>Vuforia 更新可以看我的另一篇文章：<a href="https://junlu.club/2020/04/02/问题-Vuforia更新错误-Failed-to-resolve-packages/">https://junlu.club/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E6%9B%B4%E6%96%B0%E9%94%99%E8%AF%AF-Failed-to-resolve-packages/</a></p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Unity移动不连续</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Unity%E7%A7%BB%E5%8A%A8%E4%B8%8D%E8%BF%9E%E7%BB%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>初学Unity的问题</p>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>刚刚装了Unity2019.3.4.f1 ，在scene页面移动cube时，发现移动不连续，即按照网格移动，类似于建模软件中的情况</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>so easy</p>
<p><a href="https://imgchr.com/i/GKKNGt"><img src="https://s1.ax1x.com/2020/03/31/GKKNGt.png" alt="GKKNGt.png"></a></p>
<p>点击一下就行了</p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>下载YouTuBe字幕</title>
    <url>/2020/04/02/%E4%B8%8B%E8%BD%BDYouTuBe%E5%AD%97%E5%B9%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>字幕下载方法</p>
<a id="more"></a>
<h3 id="1-Keepvid"><a href="#1-Keepvid" class="headerlink" title="1. Keepvid"></a>1. Keepvid</h3><p><a href="https://keepvid.com/">https://keepvid.com/</a></p>
<h3 id="2-Dbxdb"><a href="#2-Dbxdb" class="headerlink" title="2.Dbxdb"></a>2.Dbxdb</h3><p><a href="http://mo.dbxdb.com/setting.html">http://mo.dbxdb.com/setting.html</a></p>
<h3 id="3-Zhuwei"><a href="#3-Zhuwei" class="headerlink" title="3. Zhuwei"></a>3. Zhuwei</h3><p><a href="https://zhuwei.me/y2b/">https://zhuwei.me/y2b/</a></p>
<h3 id="4-FindYoutube"><a href="#4-FindYoutube" class="headerlink" title="4. FindYoutube"></a>4. FindYoutube</h3><p><a href="https://www.findyoutube.net/">https://www.findyoutube.net/</a></p>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>YouTuBe</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv-VS2019环境配置</title>
    <url>/2020/04/02/Opencv-VS2019%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录Win10操作系统下，Opencv+VS2019的环境配置，具体Opencv版本为4.1.0</p>
<a id="more"></a>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>Opencv 官网下载链接：<a href="https://opencv.org/releases/">传送门</a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol>
<li><p>下载好的文件解压到合适的目录下，本文以<code>D:\OpenCV</code>目录放置解压文件，如下图</p>
<p><a href="https://imgchr.com/i/8sQycT"><img src="https://s1.ax1x.com/2020/03/19/8sQycT.md.png" alt="8sQycT.md.png"></a></p>
</li>
<li><p>打开资源管理器窗口，在<code>此电脑</code>上右击，点击<code>属性</code>，弹出<code>控制面板中的系统窗口</code>，点击<code>高级系统设置</code>，弹出<code>系统属性窗口</code>，点击<code>环境变量</code></p>
</li>
<li><p>在窗口上方的<code>用户变量</code>中，选中Path变量，点击下方编辑，在编辑系统变量窗口中，新增以下变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\x64\vc15\bin</span><br></pre></td></tr></table></figure></li>
<li>连续点击3个确定，关闭系统窗口</li>
</ol>
<h3 id="配置VS"><a href="#配置VS" class="headerlink" title="配置VS"></a>配置VS</h3><ol>
<li><p>打开VS2019，选择创建新项目</p>
<p><a href="https://imgchr.com/i/8slUxK"><img src="https://s1.ax1x.com/2020/03/19/8slUxK.md.png" alt="8slUxK.md.png"></a></p>
</li>
<li><p>在弹出的创建新项目面板中，选择C++语言的空项目，点击右下方的下一步</p>
<p><a href="https://imgchr.com/i/8sQs3V"><img src="https://s1.ax1x.com/2020/03/19/8sQs3V.md.png" alt="8sQs3V.md.png"></a></p>
</li>
<li><p>结合自身情况，选择储存位置，点击创建</p>
</li>
<li><p>在新打开的VS界面中，找到右侧<code>解决方案资源管理器</code>，右键单击【源文件】-&gt;【添加】-&gt;【新建项】，新建一个命名为“main”的<code>C++文件</code></p>
</li>
<li><p>点开【视图】-&gt;【其他窗口】-&gt;【属性管理器】，打开属性管理器面板</p>
</li>
<li><p>调试模式改为<code>Debug x64</code>模式。</p>
</li>
<li><p>找到Opencv的安装目录<code>D:\OpenCV\opencv\build\x64\vc15\bin</code>，将如下图所示的三个文件（dll文件），复制粘贴到系统路径<code>C:\Windows\System32</code>文件夹内。</p>
<p><a href="https://imgchr.com/i/8sQ0Nn"><img src="https://s1.ax1x.com/2020/03/19/8sQ0Nn.md.png" alt="8sQ0Nn.md.png"></a></p>
</li>
<li><p>接下来，开始为软件配置目录和附加项。右键点击【属性管理器】中的【Debug | x64】选项，选择【添加新的项目属性表】</p>
</li>
<li><p>将新建的项目属性表重命名为<code>Opencv410Debugx64</code>，之后双击打开，选中【VC++ 目录】-&gt;【包含目录】，新增以下路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\include</span><br><span class="line">D:\OpenCV\opencv\build\include\opencv2</span><br></pre></td></tr></table></figure></li>
<li><p>在【库目录】中添加以下路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\x64\vc15\lib</span><br></pre></td></tr></table></figure></li>
<li><p>打开【链接器】-&gt;【输入】-&gt;【附加依赖项】，添加以下名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv_world410d.lib</span><br></pre></td></tr></table></figure>
<p>PS：opencv_world410d.lib 是指 Debug 编辑模式，opencv_world410.lib 是指Relsase 编辑模式。</p>
</li>
</ol>
<h3 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h3><p>在main.cpp中粘贴以下程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;opencv.hpp&quot; &#x2F;&#x2F;opencv 的头文件</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv; &#x2F;&#x2F;opencv 的命名空间</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;Hello Open CV!&quot;);</span><br><span class="line">	Mat srcImage &#x3D; imread(&quot;1.jpg&quot;);	&#x2F;&#x2F;图片需要在工程目录下</span><br><span class="line">	Mat temImage, dstImage1;</span><br><span class="line">	temImage &#x3D; srcImage;</span><br><span class="line">	&#x2F;&#x2F;尺寸调整</span><br><span class="line">	resize(temImage, dstImage1, Size(0, 0), 0.25, 0.25, INTER_LINEAR);     &#x2F;&#x2F;长宽缩小1&#x2F;4</span><br><span class="line">	imshow(&quot;缩小&quot;, dstImage1);</span><br><span class="line">	waitKey();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后续工作"><a href="#后续工作" class="headerlink" title="后续工作"></a>后续工作</h3><p>调试时如果在下方出现 <code>xxx符号在加载</code>，并且很久都没有出现图片，需要做以下工作：</p>
<p>进入【工具】-&gt;【选项】-&gt;【调试】-&gt;【符号】，看右边有个<code>Microsoft符号服务器</code>，将前面的勾去掉</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://blog.csdn.net/qingzai_/article/details/73838709">https://blog.csdn.net/qingzai_/article/details/73838709</a></p>
<p><a href="https://blog.csdn.net/qq_24912401/article/details/90475290?utm_source=app">https://blog.csdn.net/qq_24912401/article/details/90475290?utm_source=app</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>VS2019</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题优化记录</title>
    <url>/2020/04/02/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经典主题！</p>
<a id="more"></a>
<h3 id="名词说明"><a href="#名词说明" class="headerlink" title="名词说明"></a>名词说明</h3><ul>
<li>站点配置文件：指文件所在路径为：根目录\_config.yml </li>
<li>主题配置文件：指文件所在路径为：根目录\themes\next\_config.yml </li>
</ul>
<h3 id="配置1：语言与基本信息更改"><a href="#配置1：语言与基本信息更改" class="headerlink" title="配置1：语言与基本信息更改"></a>配置1：语言与基本信息更改</h3><p>改变博客的语言为中文，博客标题，博客作者</p>
<ul>
<li>打开站点配置文件</li>
<li>找到代码并修改如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: JunLuBlog #要修改的内容区域</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: JunLu #要修改的内容区域</span><br><span class="line">language: zh-Hans #要修改的内容区域</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure>
<h3 id="配置2：主题样式修改"><a href="#配置2：主题样式修改" class="headerlink" title="配置2：主题样式修改"></a>配置2：主题样式修改</h3><p>Next主题提供了多种样式以供选择</p>
<ul>
<li>打开主题配置文件</li>
<li>修改代码如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces 若选择此样式，将其前面的#去掉即可</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<h3 id="配置3：菜单设置"><a href="#配置3：菜单设置" class="headerlink" title="配置3：菜单设置"></a>配置3：菜单设置</h3><p>在博客顶端需要有标签，分类，关于等菜单栏</p>
<ul>
<li>在根目录开启 <code>Git Bash Here</code></li>
<li>命令：<code>hexo new page &quot;tags&quot;</code></li>
<li>命令：<code>hexo new page &quot;categories&quot;</code></li>
<li>命令：<code>hexo new page &quot;about&quot;</code></li>
<li>进入路径：根目录\source，可以看到新建了分类，标签，关于的文件夹</li>
<li>打开主题配置文件，修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;|| home</span><br><span class="line">  about: &#x2F;about&#x2F;|| user</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br><span class="line">  archives: &#x2F;archives&#x2F;|| archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br></pre></td></tr></table></figure>
<p>PS：一丁点空格也不许错</p>
<h3 id="配置3-：侧边栏"><a href="#配置3-：侧边栏" class="headerlink" title="配置3 ：侧边栏"></a>配置3 ：侧边栏</h3><p>Next主题提供了侧边栏的左右放置方向</p>
<ul>
<li>打开主题配置文件</li>
<li>修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  #position: left</span><br><span class="line">  position: right</span><br></pre></td></tr></table></figure>
<h3 id="配置4：-开启动态背景"><a href="#配置4：-开启动态背景" class="headerlink" title="配置4： 开启动态背景"></a>配置4： 开启动态背景</h3><ul>
<li>打开主题配置文件</li>
<li>修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next-支持数学公式输入配置</title>
    <url>/2020/04/02/Hexo-Next-%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>忘记是哪个版本适用来着</p>
<a id="more"></a>
<h3 id="1-使用Kramed-代替-Marked"><a href="#1-使用Kramed-代替-Marked" class="headerlink" title="1. 使用Kramed 代替 Marked"></a>1. 使用Kramed 代替 Marked</h3><p>渲染引擎kramed支持mathjax</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>打开:博客根目录<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code><br>将下面这几句进行更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">  &#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">  return text.replace(&#x2F;&#96;\$(.*?)\$&#96;&#x2F;g, &#39;$$$$$1$$$$&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">  &#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-使用hexo-renderer-mathjax-代替-hexo-math"><a href="#2-使用hexo-renderer-mathjax-代替-hexo-math" class="headerlink" title="2. 使用hexo-renderer-mathjax 代替 hexo-math"></a>2. 使用hexo-renderer-mathjax 代替 hexo-math</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>
<h3 id="3-更新-Mathjax-的-CDN-链接"><a href="#3-更新-Mathjax-的-CDN-链接" class="headerlink" title="3. 更新 Mathjax 的 CDN 链接"></a>3. 更新 Mathjax 的 CDN 链接</h3><p>打开:<code>博客根目录/node_modules/hexo-renderer-mathjax/mathjax.html</code><br>将最下面&lt;script src=后的url改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-MML-AM_CHTML</span><br></pre></td></tr></table></figure>
<h3 id="4-更改默认转义规则"><a href="#4-更改默认转义规则" class="headerlink" title="4. 更改默认转义规则"></a>4. 更改默认转义规则</h3><p>打开:<code>博客根目录/node_modules/kramed/lib/rules/inline.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;escape: &#x2F;^\\([\\&#96;*&#123;&#125;\[\]()#$+\-.!_&gt;])&#x2F;,      第11行，将其修改为</span><br><span class="line">escape: &#x2F;^\\([&#96;*\[\]()#$+\-.!_&gt;])&#x2F;,</span><br><span class="line">&#x2F;&#x2F;em: &#x2F;^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,    第20行，将其修改为</span><br><span class="line">em: &#x2F;^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure>
<h3 id="5-开启mathjax"><a href="#5-开启mathjax" class="headerlink" title="5. 开启mathjax"></a>5. 开启mathjax</h3><p>在主题的配置文件中,我用的是next主题,那么在其_config.yml中找到mathjax并设置为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: &#x2F;&#x2F;cdn.bootcss.com&#x2F;mathjax&#x2F;2.7.1&#x2F;latest.js?config&#x3D;TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>
<p>之后再写文章时,加上mathjax: true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date: 2017&#x2F;8&#x2F;3 18:20:00</span><br><span class="line">tags: hexo</span><br><span class="line">mathjax: true</span><br><span class="line">title: hexo博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://blog.csdn.net/littlehaes/article/details/84370393">https://blog.csdn.net/littlehaes/article/details/84370393</a></p>
<p><a href="https://andyvj.coding.me/2019/02/26/190226-02/">https://andyvj.coding.me/2019/02/26/190226-02/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo静态博客配置</title>
    <url>/2020/04/02/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>博客搭建第一步！</p>
<a id="more"></a>
<h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><ol>
<li><p>github 账号。</p>
</li>
<li><p><del>购买一个域名的钱</del></p>
<p><a href="https://www.freenom.com/zh/index.html?lang=zh">免费域名传送门</a></p>
</li>
</ol>
<hr>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="github-创建仓库"><a href="#github-创建仓库" class="headerlink" title="github 创建仓库"></a>github 创建仓库</h4><ul>
<li><p>登录 github 账号，<a href="https://github.com/">传送门</a></p>
</li>
<li><p>Start Project</p>
<p><a href="https://imgchr.com/i/G0YxHI"><img src="https://s1.ax1x.com/2020/04/04/G0YxHI.png" alt="G0YxHI.png"></a></p>
</li>
<li><p>在Repository name中输入新建仓库的名称，yourname.github.io，点击Create Repository</p>
<p><a href="https://imgchr.com/i/G0YvDA"><img src="https://s1.ax1x.com/2020/04/04/G0YvDA.png" alt="G0YvDA.png"></a></p>
</li>
</ul>
<hr>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><ul>
<li>下载安装地址：<ul>
<li>官网：<a href="https://gitforwindows.org/">传送门</a></li>
<li>蓝奏云：<a href="https://www.lanzous.com/iazxt2j">传送门</a></li>
</ul>
</li>
<li>一路默认安装即可</li>
</ul>
<hr>
<h4 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h4><blockquote>
<p>为了把本地的仓库中的内容传输到GitHub上，需要配置ssh key，无论是上传自己的博客还是上传其他的仓库都需要连接Github，ssh key是一个token，作用是身份验证。</p>
</blockquote>
<ul>
<li><p><strong>打开Git Bash，输入命令：</strong>（email是注册Github时使用的邮箱）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>输入上面的命令后<strong>按Enter键</strong>，Git Bash会提示: </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase &lt;empty for no passphrase&gt;:_</span><br></pre></td></tr></table></figure></li>
<li><p><strong>直接按 Enter</strong>，Git Bash会在默认路径C:\users\用户名.ssh下生成几个文件。然后Git Bash又给出提示：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase &lt;empty for no passphrase&gt;:_</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是在提示我们输入密码，直接回车表示不设置密码</p>
</blockquote>
</li>
<li><p><strong>直接回车</strong>，然后Git Bash要求我们重复密码，也<strong>直接回车</strong>，然后就会提示ssh key已经生成。</p>
</li>
<li><p><strong>进入到默认的地址</strong>中查看ssh key文件</p>
<p><a href="https://imgchr.com/i/G0YOjH"><img src="https://s1.ax1x.com/2020/04/04/G0YOjH.png" alt="G0YOjH.png"></a></p>
</li>
<li><p>使用记事本或者其他软件<strong>打开 id_rsa.pub 文件，复制全部内容</strong></p>
</li>
<li><p>浏览器<strong>进入 github ，进入博客仓库</strong></p>
<p><a href="https://imgchr.com/i/G0YLge"><img src="https://s1.ax1x.com/2020/04/04/G0YLge.png" alt="G0YLge.png"></a></p>
</li>
</ul>
<p>​        <a href="https://imgchr.com/i/G0tpUP"><img src="https://s1.ax1x.com/2020/04/04/G0tpUP.png" alt="G0tpUP.png"></a></p>
<ul>
<li><p><strong>点击设置</strong></p>
<p><a href="https://imgchr.com/i/G0t94f"><img src="https://s1.ax1x.com/2020/04/04/G0t94f.png" alt="G0t94f.png"></a></p>
</li>
<li><p>在页面左侧<strong>找到Deploy keys并点击</strong></p>
<p><a href="https://imgchr.com/i/G0tPC8"><img src="https://s1.ax1x.com/2020/04/04/G0tPC8.png" alt="G0tPC8.png"></a></p>
</li>
<li><p>点击右侧的<strong>Add deploy key</strong>按钮，title填什么都可以，Key中<strong>粘贴</strong>我们刚刚在ssh key文件中复制的key；点击Add Key，<strong>保存ssh key</strong></p>
<p><a href="https://imgchr.com/i/G0tFgg"><img src="https://s1.ax1x.com/2020/04/04/G0tFgg.png" alt="G0tFgg.png"></a></p>
<p>​        <a href="https://imgchr.com/i/G0tSEt"><img src="https://s1.ax1x.com/2020/04/04/G0tSEt.png" alt="G0tSEt.png"></a></p>
</li>
<li><p>在本地验证ssh key设置是否成功，<strong>打开Git Bash，输入命令</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><strong>回车</strong>后，如果看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;You’ve successfully authenticated, but GitHub does not provide shell access&#96;</span><br></pre></td></tr></table></figure>
<p>表示当前已经成功地连接上了自己的GitHub账户。</p>
</li>
<li><p>接下来，设置一下自己的用户名和邮箱，<strong>输入以下命令：</strong>（name 和 email 每个人不同）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;my name&quot;</span><br><span class="line">git config --global user.email &quot;my email&quot;</span><br></pre></td></tr></table></figure></li>
<li>到此为止，我们已经成功地将个人电脑和Github账号连接。</li>
</ul>
<hr>
<h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><ul>
<li><p>下载</p>
<ul>
<li>官网： <a href="https://nodejs.org/en/">传送门</a></li>
<li>城通（win）：<a href="https://474b.com/file/14976410-435186222">传送门</a></li>
</ul>
</li>
<li><p>按照需要选择不同的版本，下载到本地之后，<strong>直接双击安装，一路默认</strong></p>
</li>
<li><p>检验是否安装成功：</p>
<p>打开windows的控制台，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li>
<li>电脑若显示当前安装的node.js的版本，则安装成功</li>
</ul>
<hr>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul>
<li><p>在电脑的磁盘里<strong>新建一个空文件夹</strong>，如E:\HexoB，用于存放本地仓库</p>
</li>
<li><p>在<strong>windows控制台中输入命令</strong>，跳转至D:\GIT\hexotext；代码如下：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd E:\HexoB</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Hexo，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></li>
<li><p>检查Hexo是否安装成功，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><ul>
<li><p>初始化 E:\HexoB 这个文件夹，打开Git Bash进入此目录，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li>
<li><p>安装Hexo所需要的组件，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li><p>产生webapp文件，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>开启服务器，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li><p>此时控制台提示：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO Start processing</span><br><span class="line">INFO Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>浏览器输入</strong>地址：localhost:4000 预览</p>
</li>
<li><p><strong>新建markdown文件</strong>，保存为.md文件到本地，并移至E:\HexoB\source\_posts中</p>
</li>
<li><p>和上次一样，打开的Git Bash，<strong>执行以下命令</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li>打开浏览器，访问：localhost:4000，此时可以看到刚刚发布的内容</li>
</ul>
<hr>
<h4 id="连接Hexo和Github-Pages及部署博客"><a href="#连接Hexo和Github-Pages及部署博客" class="headerlink" title="连接Hexo和Github Pages及部署博客"></a>连接Hexo和Github Pages及部署博客</h4><ul>
<li>打开 E:\HexoB 中的<strong>_config.yml文件</strong>，找到deploy字段，改为如下内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@github.com:someurl&#x2F;someurl.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p> git@github.com:someurl/someurl.github.io.git 是博客仓库的地址，获取方式是登录GitHub，找到自己的博客的仓库</p>
<p><a href="https://imgchr.com/i/GBEbB4"><img src="https://s1.ax1x.com/2020/04/05/GBEbB4.png" alt="GBEbB4.png"></a></p>
</blockquote>
<ul>
<li><p>现在将Hexo部署到GitHub的仓库里</p>
</li>
<li><p>在仓库中点击<strong>Settings，往下拉，找到GitHub Pages</strong></p>
<p><a href="https://imgchr.com/i/GBETjU"><img src="https://s1.ax1x.com/2020/04/05/GBETjU.png" alt="GBETjU.png"></a></p>
</li>
<li><p>Source选择 <strong>master branch</strong></p>
</li>
<li><p>在 E:\HexoB 中打开Git Bash，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p><strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li>
<li>部署完成之后，在浏览器中输入地址 www.yourname.github.io，这个地址就是在repository的Setting页面中看到的那个，就可以访问自己的博客啦，以后写了新的博客，保存成md文件放到source_post文件夹中，执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<ul>
<li>就可以发布到GitHub上啦</li>
</ul>
<hr>
<h3 id="购买域名并解析"><a href="#购买域名并解析" class="headerlink" title="购买域名并解析"></a>购买域名并解析</h3><ul>
<li>已腾讯云为例，<a href="https://cloud.tencent.com/">传送门</a></li>
</ul>
<p><a href="https://imgchr.com/i/834tYj"><img src="https://s1.ax1x.com/2020/03/15/834tYj.png" alt="834tYj.png"></a></p>
<ul>
<li>点击 产品-&gt;域名注册</li>
</ul>
<p><a href="https://imgchr.com/i/835CNQ"><img src="https://s1.ax1x.com/2020/03/15/835CNQ.png" alt="835CNQ.png"></a></p>
<ul>
<li>选择一个域名进行购买</li>
<li>购买后进入 控制台</li>
<li>进入域名管理界面</li>
<li>首先，实名认证</li>
<li>成功后，解析</li>
</ul>
<p><a href="https://imgchr.com/i/83ozB6"><img src="https://s1.ax1x.com/2020/03/15/83ozB6.png" alt="83ozB6.png"></a></p>
<ul>
<li>记录值的获取方式：<ul>
<li>打开windows控制台，ping www.yourname.github.io</li>
<li>将IP地址填写进入记录值</li>
</ul>
</li>
<li>在本地的D:\GIT\hexotext\source中新建一个名为CNAME的文件，内容则是刚刚申请的域名，然后重新发布</li>
<li>到此成功</li>
</ul>
<h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><ul>
<li><p>对于nmp工具</p>
<ul>
<li>更换淘宝源<code>npm install --registry=https://registry.npm.taobao.org</code></li>
<li>安装cnmp <code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/zyupupup/article/details/85098366">https://blog.csdn.net/zyupupup/article/details/85098366</a></p>
</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://blog.csdn.net/qq_34229391/article/details/82251852">https://blog.csdn.net/qq_34229391/article/details/82251852</a></li>
<li><a href="https://blog.csdn.net/zyupupup/article/details/85098366">https://blog.csdn.net/zyupupup/article/details/85098366</a></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>chorme插件记录</title>
    <url>/2020/04/02/chorme%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>小小插件小记录</p>
<a id="more"></a>
<h2 id="chorme-插件"><a href="#chorme-插件" class="headerlink" title="chorme 插件"></a>chorme 插件</h2><hr>
<p>chorme 浏览器成功的地方在于，其强大的扩展能力。在chorme 网上商店强大的加持下，chorme浏览器成为市面上最好用的浏览器，通过安装不同的插件，达到其他浏览器无法达到的效果</p>
<hr>
<h3 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h3><hr>
<ol>
<li><p>GHelpera</p>
<p>对于大陆用户，此插件的目的在于链接上chorme官方的网上商店，以获取更多的其他插件。</p>
<p>除此之外，GHelper 可以用于科研，访问谷歌学术等</p>
</li>
<li><p>Adblock</p>
<p>作用：拦截广告</p>
</li>
<li><p>stylus</p>
<p>作用：美化界面</p>
</li>
<li><p>IDM</p>
<p>作用：强大的下载功能，装机必备</p>
</li>
<li><p>SimpleExtManger</p>
<p>作用：管理所有插件，不需要的可以随时关闭，加快浏览器速度</p>
</li>
<li><p>Toby</p>
<p>作用：保存标签页，工作必备</p>
</li>
<li><p>chorme better history</p>
<p>作用：历史记录，更好的历史记录</p>
</li>
<li><p>whatFont</p>
<p>作用：查询网页字体</p>
</li>
<li><p>Picture in Picture for every website</p>
<p>作用：对于视频网站，达到画中画的效果播放</p>
</li>
<li><p>Global Rank</p>
<p>作用：发现相似网站</p>
</li>
<li><p>微信同步助手</p>
<p>作用：将微信文章同步到简书，知乎等平台</p>
</li>
<li><p>open write助手</p>
<p>作用：分发文章，在各个平台</p>
</li>
</ol>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>chorme插件</tag>
      </tags>
  </entry>
</search>
