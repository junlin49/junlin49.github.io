<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu-开发库配置记录</title>
    <url>/2020/12/25/Ubuntu-%E5%BC%80%E5%8F%91%E5%BA%93%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-开发库配置记录"><a href="#Ubuntu-开发库配置记录" class="headerlink" title="Ubuntu-开发库配置记录"></a>Ubuntu-开发库配置记录</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>由于配置库的过程太过惨痛，所以将现在以及以后的开发库的配置过程记录一下，以供后续参考</p>
<h2 id="2-Eigen"><a href="#2-Eigen" class="headerlink" title="2. Eigen"></a>2. Eigen</h2><ol>
<li><p>简单命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure></li>
<li><p>源码编译安装</p>
<p>git clone</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;libeigen&#x2F;eigen.git</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake ..</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-Cmake"><a href="#3-Cmake" class="headerlink" title="3. Cmake"></a>3. Cmake</h2><ol>
<li><p>进入<a href="https://cmake.org/download/">官网</a>下载压缩包</p>
</li>
<li><p>解压后按照Github上的提示，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bootstrap</span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h2 id="4-OpenCV"><a href="#4-OpenCV" class="headerlink" title="4. OpenCV"></a>4. OpenCV</h2></li>
<li><p>github clone</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;opencv&#x2F;opencv.git</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;opencv&#x2F;opencv_contrib.git</span><br></pre></td></tr></table></figure></li>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE&#x3D;RELEASE \</span><br><span class="line">    -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local \</span><br><span class="line">    -D INSTALL_C_EXAMPLES&#x3D;ON \</span><br><span class="line">    -D OPENCV_ENABLE_NONFREE&#x3D;ON \</span><br><span class="line">    -D INSTALL_PYTHON_EXAMPLES&#x3D;ON \</span><br><span class="line">    -D OPENCV_GENERATE_PKGCONFIG&#x3D;ON \</span><br><span class="line">    -D OPENCV_EXTRA_MODULES_PATH&#x3D;~&#x2F;OpenCV&#x2F;opencv_contrib&#x2F;modules \</span><br><span class="line">    -D BUILD_EXAMPLES&#x3D;ON ..</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>库</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装系统以及花屏问题解决</title>
    <url>/2020/12/25/Ubuntu-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E8%8A%B1%E5%B1%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-安装系统以及花屏问题解决"><a href="#Ubuntu-安装系统以及花屏问题解决" class="headerlink" title="Ubuntu-安装系统以及花屏问题解决"></a>Ubuntu-安装系统以及花屏问题解决</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>马上就快寒假了，想到回家的时候家里没有这么好的科研条件，就打算买个笔记本作为主力机，教研室电脑作为Ubuntu的机子，然后使用向日葵连接使用；今年已经配置了号多次Ubuntu系统，今天记录一下，以后直接上就好了</p>
<h2 id="1-制作安装盘"><a href="#1-制作安装盘" class="headerlink" title="1. 制作安装盘"></a>1. 制作安装盘</h2><ol>
<li>从<a href="https://cn.ubuntu.com/download">官网</a>下载安装包，格式化U盘，然后将<strong>.iso</strong>文件全部解压到U盘中；</li>
<li>制作完成</li>
</ol>
<h2 id="2-花屏问题解决"><a href="#2-花屏问题解决" class="headerlink" title="2. 花屏问题解决"></a>2. 花屏问题解决</h2><ol>
<li><p>安装系统时，采用安全图形模式安装，最后安装重启阶段，一直按住e键不放，进入一大摞代码的界面；</p>
</li>
<li><p>修改代码，在quite splash后面输入nomodeset；</p>
</li>
<li><p>快捷键 Ctrl+x启动系统</p>
</li>
<li><p>进入系统后，第一件事，并不是修改软件源，而是在终端执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;default&#x2F;grub</span><br></pre></td></tr></table></figure></li>
<li><p>同样，找到quite splash，在后面加入nomodeset</p>
</li>
<li><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>
<h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h2></li>
</ol>
<p>重新进入系统后，更换软件源，添加附加驱动等等，就不详细说了</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段总结</title>
    <url>/2020/12/19/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3387af0b325b15b443c2c51a05b22e2baa92d4b90ebafcd068115e337565e980"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Summary</category>
      </categories>
      <tags>
        <tag>阶段总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大学生在线答题打开复制权限</title>
    <url>/2020/12/01/%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%9C%A8%E7%BA%BF%E7%AD%94%E9%A2%98%E6%89%93%E5%BC%80%E5%A4%8D%E5%88%B6%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于实现“大学生在线”答题页面开启复制题目权限的技巧"><a href="#关于实现“大学生在线”答题页面开启复制题目权限的技巧" class="headerlink" title="关于实现“大学生在线”答题页面开启复制题目权限的技巧"></a>关于实现“大学生在线”答题页面开启复制题目权限的技巧</h1><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ul>
<li>谷歌浏览器</li>
<li>油猴插件</li>
</ul>
<h2 id="正式行动"><a href="#正式行动" class="headerlink" title="正式行动"></a>正式行动</h2><ol>
<li><p>安装谷歌浏览器，<a href="https://www.google.cn/intl/zh-CN/chrome/">点我进下载页面</a></p>
</li>
<li><p>安装油猴插件</p>
<ol>
<li><p>打开谷歌浏览器，打开<strong>设置</strong>，点击<strong>更多工具</strong>，点击<strong>扩展程序</strong>，如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/30/iKardxQjqfvOVc1.png" alt=""></p>
</li>
<li><p>在右上角开启<strong>开发者模式</strong>，如下图</p>
<p><img src="https://i.loli.net/2020/11/30/9iLyc78JbROedsa.png" alt=""></p>
</li>
<li><p>下载油猴插件，<a href="https://wwe.lanzous.com/im2mPixnyng">点我下载</a>，下载完成后，是一个<strong>.crx</strong>文件，要做的是将其安装到浏览器中</p>
<ul>
<li><p>下载完成后，放在桌面上，将文件的<strong>后缀名.crx</strong>改掉，改为<strong>.zip</strong>，然后将其用解压软件<strong>解压</strong>到桌面</p>
</li>
<li><p>打开浏览器的扩展程序页面，选择<strong>加载已解压的扩展程序</strong>，选择桌面上的已经解压的文件夹，安装扩展程序</p>
<p><img src="https://i.loli.net/2020/11/30/3VTR9M7SHZoCN82.png" alt=""></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>安装网页限制解除脚本</p>
<p>打开<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits-modified">此网址</a>，点击<strong>安装</strong>按钮，如下图所示；</p>
<p><img src="https://i.loli.net/2020/11/30/mhzNHLXOpIkPUb3.png" alt=""></p>
<p>安装完成后，任意打开网页，如，百度主页，<strong>鼠标移动至左上角</strong>，如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/30/w9k1FPehMJzsAVQ.png" alt=""></p>
<p>可以发现有解除限制的选项，点它！就可以在此网页有复制权限了，因此，<strong>在大学生在线答题之前，需要先点击此按钮，再答题</strong></p>
<p>至此配置结束</p>
</li>
</ol>
<h2 id="具体效果"><a href="#具体效果" class="headerlink" title="具体效果"></a>具体效果</h2><p><img src="https://i.loli.net/2020/11/30/gmns5GQjYivwUlA.png" alt=""></p>
<p><img src="https://i.loli.net/2020/12/01/rlnXqy8dzUIk976.png" alt=""></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>大学生在线</tag>
      </tags>
  </entry>
  <entry>
    <title>将ubuntu默认中文文件夹名称改为英文</title>
    <url>/2020/11/27/%E5%B0%86ubuntu%E9%BB%98%E8%AE%A4%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E6%94%B9%E4%B8%BA%E8%8B%B1%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="将Ubuntu默认中文文件夹名称改为英文"><a href="#将Ubuntu默认中文文件夹名称改为英文" class="headerlink" title="将Ubuntu默认中文文件夹名称改为英文"></a>将Ubuntu默认中文文件夹名称改为英文</h1><blockquote>
<p>转载于<a href="https://blog.csdn.net/jeffrey_li/article/details/54947502">https://blog.csdn.net/jeffrey_li/article/details/54947502</a></p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li><p><strong>方法一：</strong><br>打开 系统设置-》语言支持 将“english”拖动到最上端，重启系统。<br>重启后，会提示更新文件名称，更新后在将语言”中文“拖动到顶部，重启系统 。</p>
</li>
<li><p><strong>方法二：</strong>编辑~/.config/user-dirs.dirs文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.config&#x2F;user-dirs.dirs1</span><br></pre></td></tr></table></figure>
<p>修改文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XDG_DESKTOP_DIR&#x3D;&quot;$HOME&#x2F;Desktop&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR&#x3D;&quot;$HOME&#x2F;Downloads&quot;</span><br><span class="line">XDG_TEMPLATES_DIR&#x3D;&quot;$HOME&#x2F;Templates&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR&#x3D;&quot;$HOME&#x2F;Public&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR&#x3D;&quot;$HOME&#x2F;Documents&quot;</span><br><span class="line">XDG_MUSIC_DIR&#x3D;&quot;$HOME&#x2F;Music&quot;</span><br><span class="line">XDG_PICTURES_DIR&#x3D;&quot;$HOME&#x2F;Pictures&quot;</span><br><span class="line">XDG_VIDEOS_DIR&#x3D;&quot;$HOME&#x2F;Videos&quot;12345678</span><br></pre></td></tr></table></figure></li>
<li><p><strong>方法三：</strong><br>打开终端，在终端中输入命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;en_US</span><br><span class="line">xdg-user-dirs-gtk-update12</span><br></pre></td></tr></table></figure>
<p>跳出对话框询问是否将目录转化为英文路径,同意并关闭。<br>在终端中输入命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;zh_CN1</span><br></pre></td></tr></table></figure>
<p>重新启动系统，系统会提示更新文件名称，选择不再提示,并取消修改。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title>clion输入中文</title>
    <url>/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu20-04下clion无法输入中文问题解决"><a href="#Ubuntu20-04下clion无法输入中文问题解决" class="headerlink" title="Ubuntu20.04下clion无法输入中文问题解决"></a>Ubuntu20.04下clion无法输入中文问题解决</h1><blockquote>
<p>转载于<a href="https://blog.csdn.net/dyg7777/article/details/108334293?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/dyg7777/article/details/108334293?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242</a></p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>设置输入法</p>
<p>将 Ubuntu 的输入法设置为 Ibus Pinyin</p>
<p><a href="https://blog.forgiveher.cn/2020/08/20/1597932898303/ibus.png"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLmZvcmdpdmVoZXIuY24vMjAyMC8wOC8yMC8xNTk3OTMyODk4MzAzL2lidXMucG5n?x-oss-process=image/format,png" alt="Ibus"></a></p>
</li>
<li><p>下载JBR</p>
<p>下载解压 <a href="https://confluence.jetbrains.com/pages/viewpage.action?pageId=173178989">JBR</a></p>
<p><a href="https://blog.forgiveher.cn/2020/08/20/1597932898303/jbr.png"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLmZvcmdpdmVoZXIuY24vMjAyMC8wOC8yMC8xNTk3OTMyODk4MzAzL2pici5wbmc?x-oss-process=image/format,png" alt="JBR"></a></p>
</li>
<li><p>安装runtime插件</p>
<p>打开 IDE，下载插件 <a href="https://www.jetbrains.com/help/idea/switching-boot-jdk.html">Choose Runtime</a></p>
</li>
<li><p>IDE在jbr下运行</p>
<p>在 CLion中按下 <code>Ctrl + Shift + A</code>， 随后输入 <code>Choose Runtime</code>，打开对话框，随后选择下载解压的 JBR，点击 <code>Install</code>，随后 IDE 会在自动重启</p>
<p>就此结束</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>clion</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04拨号上网</title>
    <url>/2020/11/27/ubuntu18-04%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu18-04-拨号上网方法"><a href="#Ubuntu18-04-拨号上网方法" class="headerlink" title="Ubuntu18.04 拨号上网方法"></a>Ubuntu18.04 拨号上网方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于20.04系统还没有成熟，博主使用的相关的开发工具还没有支持20系统，所以又重新格式化装了18.04；但是上网步骤这里卡住了，特此记录</p>
<p>网上的大多数方法，比如改正true之类的，对我都没有太大用处。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<p>转载于<a href="https://blog.csdn.net/qq_38649880/article/details/102651760">https://blog.csdn.net/qq_38649880/article/details/102651760</a></p>
</blockquote>
<ol>
<li><p>输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmcli con edit type pppoe con-name “YOUR_CONNECTION_NAME”</span><br></pre></td></tr></table></figure>
<p>把里面的<code>YOUR_CONNECTION_NAME</code>改成新建立的拨号上网的名字。<br>然后命令行界面会有所变化，接下来开始设置用户名和密码就行了.</p>
</li>
<li><p>依次输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set pppoe.username YOUR_DSL_ACCOUNT_USERNAME</span><br><span class="line">set pppoe.password YOUR_DSL_ACCOUNT_PASSWORD</span><br><span class="line">save</span><br></pre></td></tr></table></figure>
<p>把用户名和密码填成你自己的账号和密码就OK。<br>接下来回询问你是否想设置成自动连接，经常用的话输入<code>yes</code>就可以，开机就会自动连接，比较方便。<br>这就设置好了，然后输入<code>quit</code>退出即可。</p>
<p>就此结束</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>拨号上网</tag>
      </tags>
  </entry>
  <entry>
    <title>三维重建基础与极几何</title>
    <url>/2020/11/09/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%9E%81%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="三维重建基础与极几何"><a href="#三维重建基础与极几何" class="headerlink" title="三维重建基础与极几何"></a>三维重建基础与极几何</h1><blockquote>
<p>学习记录</p>
</blockquote>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>多视图几何中的关键问题有：</p>
<ol>
<li><p>摄像机几何</p>
<blockquote>
<p>从一张或者多张图像中求解摄像机的内外参数</p>
</blockquote>
</li>
<li><p>场景几何</p>
<blockquote>
<p>通过多个图像求解3D场景坐标</p>
</blockquote>
</li>
<li><p>对应关系</p>
<blockquote>
<p>已知一个图像的p点，如何在另一张图像中找到p’点</p>
</blockquote>
</li>
</ol>
<p>1+3 =&gt; 2：三维重建</p>
<p>3 =&gt; 1 + 2：SFM（运动恢复结构）</p>
<h2 id="三维重建基础"><a href="#三维重建基础" class="headerlink" title="三维重建基础"></a>三维重建基础</h2><h3 id="从单幅视图恢复场景结构"><a href="#从单幅视图恢复场景结构" class="headerlink" title="从单幅视图恢复场景结构"></a>从单幅视图恢复场景结构</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164053.png" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164136.png" alt=""></p>
<p>一张照片缺乏深度信息，从上图看出，不止有P点一个点可以在成像平面上成像点p，红线上的场景点都满足；所以说，单张照片2D到3D的映射具有多义性。</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164617.png" alt=""></p>
<p>考虑两只眼睛观察空间，模型如下：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164554.png" style="zoom:150%;" /></p>
<p>O1与O2分别代表两只眼睛，两个相机，p与p’所在平面分别为两个相机的成像平面，P点为空间点；</p>
<p>理想情况下，P点空间点的确定由以下公式确定：</p>
<script type="math/tex; mode=display">
P = l × l'</script><p>但是实际情况下，由于噪声的存在，或者由于计算机精度丢失的原因，导致两条直线通常不会相交，实际使用中此方法无法做到，作废</p>
<p>所以，求解空间点P的问题，可以描述为：</p>
<blockquote>
<p>已知p和p’，K与K’，R，T</p>
<p>求解：P的三维坐标</p>
</blockquote>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="线性解法"><a href="#线性解法" class="headerlink" title="线性解法"></a>线性解法</h4><p>线性解法参见《 Multiple View Geometry in Computer Vision》</p>
<h4 id="非线性解法"><a href="#非线性解法" class="headerlink" title="非线性解法"></a>非线性解法</h4><p>最优化问题，求点$P^<em>$，使得$MP^</em>$到$p$的距离，加上${M’P^*}$到$p’$的距离之和最小</p>
<p>即：</p>
<script type="math/tex; mode=display">
d\left(p, M P^{*}\right)+d\left(p^{\prime}, M^{\prime} P^{*}\right)</script><p>求解方法：牛顿法与列文伯格-马夸尔特法（L-M方法）</p>
<h2 id="极几何"><a href="#极几何" class="headerlink" title="极几何"></a>极几何</h2><h3 id="极几何解决的问题"><a href="#极几何解决的问题" class="headerlink" title="极几何解决的问题"></a>极几何解决的问题</h3><p>已知一个图像的p点，如何在另一张图像中找到p’点</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109171145.png" alt=""></p>
<p>极平面：过点P，$O_1$与$O_2$的平面</p>
<p>基线：$O_1$与$O_2$的连线</p>
<p>极线：极平面与成像平面的交线</p>
<p>极点：基线与成像平面的交点</p>
<h3 id="本质矩阵"><a href="#本质矩阵" class="headerlink" title="本质矩阵"></a>本质矩阵</h3><p>定义：本质矩阵是对<code>规范化摄像机</code>拍摄的两个视点图像间的极几何关系进行代数描述</p>
<h3 id="规范化摄像机"><a href="#规范化摄像机" class="headerlink" title="规范化摄像机"></a>规范化摄像机</h3><p>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><p>规范化摄像机指的是K = 0的情况下。</p>
<h3 id="推导本质矩阵"><a href="#推导本质矩阵" class="headerlink" title="推导本质矩阵"></a>推导本质矩阵</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201127092425.png" alt=""></p>
<ol>
<li><p>三维点$p’$ 在$O_1$下的坐标是多少？</p>
<p>设$p’$在$O_2$下的坐标为$P_{O2}$，$p’$在$O_1$下的坐标为$P_{O1}$</p>
<script type="math/tex; mode=display">
P'_{O2} = RP'_{O1}+T</script><p>由上述公式可以推导出:</p>
<script type="math/tex; mode=display">
P'_{O1} = R^T(P'_{O2} - T) \\
= R^TP'_{O2} - R^TT</script></li>
<li><p>三维点$O_2$在$O_1$下的坐标是多少？</p>
<p>根据上面的公式，令$P’_{O2}$为0，即$P’$与$O_2$重合，可得三维点$O_2$在$O_1$下的坐标是$-R^TT$</p>
</li>
<li><p>两个向量叉乘，得到垂直于极平面的向量，与$p$点在$O_1$下的向量，点乘为0</p>
<script type="math/tex; mode=display">
\vec{a} =R^TT \times (R^TP'_{O2}-R^TT) \\
\vec{b}=P_{O1} \\
\vec{a} ^T\cdot \vec{b} = 0</script><p>最终得到：</p>
<script type="math/tex; mode=display">
[R^TT \times (R^TP'_{O2}-R^TT) ]^T \cdot P_{O1} = 0</script><p>最终化简得到：</p>
<script type="math/tex; mode=display">
p'^{T}[T \times R]p = 0</script><blockquote>
<p>p’：1x3，右边图像像素坐标系下的p’的齐次坐标</p>
<p>p： 3x1，左边图像像素坐标系下的p 的齐次坐标</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>叉乘变成矩阵乘法</p>
<p>若$\vec{a} =\begin{bmatrix}\ a_1 \\ \ a_2 \\ \ a_3 \end{bmatrix}$，$\vec{b} =\begin{bmatrix}\ b_1 \\ \ b_2 \\ \ b_3 \end{bmatrix}$</p>
<p>则$\vec{a} \times \vec{b} = \begin{bmatrix} \ 0 &amp;-a_3  &amp;a_2 \\ \ a_3 &amp;0 &amp;-a_1 \\ \ -a_2 &amp;a_1 &amp;0\end{bmatrix}\begin{bmatrix} \ b_1 \\ \ b_2 \\ \ b_3 \end{bmatrix}$</p>
</li>
<li><p>将3中的最终得到的公式，将叉乘变为矩阵运算</p>
<p>记 $E=T\times R$</p>
<script type="math/tex; mode=display">
p'^{T}Ep = 0</script><blockquote>
<p>E 称之为<strong>本质矩阵*</strong></p>
<p>p’：1x3，右边图像像素坐标系下的p’的齐次坐标</p>
<p>p： 3x1，左边图像像素坐标系下的p 的齐次坐标</p>
</blockquote>
<p>此公式反映了左右两个图像上的点之间的对应关系，也就是本质矩阵的内涵</p>
</li>
</ol>
<h3 id="基础矩阵"><a href="#基础矩阵" class="headerlink" title="基础矩阵"></a>基础矩阵</h3><p>基础矩阵是对<strong>一般的透视摄像机</strong>拍摄的两个视点之间图像之间的极几何关系的代数描述</p>
<h3 id="一般的透视摄像机"><a href="#一般的透视摄像机" class="headerlink" title="一般的透视摄像机"></a>一般的透视摄像机</h3><p>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换：</p>
<script type="math/tex; mode=display">
p=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><blockquote>
<p>$p$为像素坐标系的二维坐标</p>
<p>$P$为相机坐标系下的空间坐标</p>
</blockquote>
<h3 id="推导基础矩阵"><a href="#推导基础矩阵" class="headerlink" title="推导基础矩阵"></a>推导基础矩阵</h3><p>思路：将其变为规范化摄像机</p>
<script type="math/tex; mode=display">
p= K\begin{bmatrix} \ E & 0 \\ \end{bmatrix}P \\
K^{-1}p = K^{-1}K\begin{bmatrix} \ E & 0 \end{bmatrix} P 
= \begin{bmatrix}
\ 1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 &  0 & 1 & 0 \\
\end{bmatrix}
P</script><p>设 $P_c = K^{-1}p$，则上式可以写为：</p>
<script type="math/tex; mode=display">
P_c = \begin{bmatrix}
\ 1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 &  0 & 1 & 0 \\
\end{bmatrix}
P</script><p>由规范化相机模型可知：</p>
<script type="math/tex; mode=display">
P_c'^{T}EP_c = 0 \\
(K'^{-1}p')^{T}E(K^{-1}p)=0 \\
p'^{T}K'^{-T}EK^{-1}p = 0 \\</script><p>记$F = K’^{-T}EK^{-1}$，上式可以表达为：</p>
<script type="math/tex; mode=display">
p'^{T}Fp = 0</script><p>F即为<strong>基础矩阵</strong></p>
<p>由于$E = T \times R$，所以E与外部参数有关，又因为K是相机内部参数的矩阵，所以，基础矩阵F与内部参数，外部参数都有关；</p>
<h3 id="基础矩阵小结"><a href="#基础矩阵小结" class="headerlink" title="基础矩阵小结"></a>基础矩阵小结</h3><p>基础矩阵F刻画了两幅图像之间的极几何关系，即相同场景下，不同视图之间的对应关系</p>
<h3 id="估计基础矩阵"><a href="#估计基础矩阵" class="headerlink" title="估计基础矩阵"></a>估计基础矩阵</h3><p>已知$p’$与$p$，求解F</p>
<p>通常使用<strong>归一化八点算法</strong>对F进行估计</p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>三维重建</tag>
      </tags>
  </entry>
  <entry>
    <title>C#-文件操作</title>
    <url>/2020/10/27/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-文件操作"><a href="#C-文件操作" class="headerlink" title="C#-文件操作"></a>C#-文件操作</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line">namespace 文件操作</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//文件操作</span></span><br><span class="line">            <span class="comment">//-------------------------</span></span><br><span class="line">            <span class="comment">//FileInfo fileInfo = new FileInfo(&quot;TextFile1.txt&quot;);//相对路径，只找当前程序输出路径内的文件</span></span><br><span class="line">            FileInfo fileInfo = <span class="keyword">new</span> FileInfo(<span class="string">@&quot;F:\VS_Area\sikiLearning\文件操作\bin\Debug\TextFile2.txt&quot;</span>);<span class="comment">//绝对路径</span></span><br><span class="line">            <span class="keyword">if</span> ( fileInfo.Exists)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">                Console.WriteLine(fileInfo.Name);<span class="comment">//文件名称</span></span><br><span class="line">                Console.WriteLine(fileInfo.Directory);<span class="comment">//文件所在路径</span></span><br><span class="line">                Console.WriteLine(fileInfo.Length);<span class="comment">//文件大小，单位字节</span></span><br><span class="line">                Console.WriteLine(fileInfo.IsReadOnly);<span class="comment">//判断是否只读</span></span><br><span class="line">                <span class="comment">//fileInfo.Delete();//删除文件</span></span><br><span class="line">                <span class="comment">//fileInfo.CopyTo(&quot;copy.txt&quot;);//复制文件到当前目录，为copy.txt</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">                fileInfo.Create();<span class="comment">//创建文件</span></span><br><span class="line">                fileInfo.MoveTo(<span class="string">&quot;重命名.txt&quot;</span>);<span class="comment">//剪切，相当于重命名操作</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//文件夹操作</span></span><br><span class="line">            <span class="comment">//----------------------------</span></span><br><span class="line">            DirectoryInfo dirInfo = <span class="keyword">new</span> DirectoryInfo(<span class="string">@&quot;F:\VS_Area\sikiLearning\文件操作\bin\Debug&quot;</span>);<span class="comment">//绝对路径</span></span><br><span class="line">            <span class="keyword">if</span> (dirInfo.Exists)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(dirInfo.CreationTime);<span class="comment">//获取创建时间</span></span><br><span class="line">                dirInfo.CreateSubdirectory(<span class="string">&quot;soki&quot;</span>);<span class="comment">//创建子目录</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取得文件内容</span></span><br><span class="line">            <span class="comment">//----------------------------------</span></span><br><span class="line">            <span class="built_in">string</span>[] line = File.ReadAllLines(<span class="string">&quot;TextFile1.txt&quot;</span>);<span class="comment">//读取行,文本文件</span></span><br><span class="line">            <span class="keyword">foreach</span>(<span class="built_in">string</span> item <span class="keyword">in</span> line)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] image = File.ReadAllBytes(<span class="string">&quot;1.jpg&quot;</span>);<span class="comment">//对于非文本文件</span></span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> image)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写文件</span></span><br><span class="line">            <span class="comment">//-----------------------------</span></span><br><span class="line">            File.WriteAllText(<span class="string">&quot;3.txt&quot;</span>, <span class="string">&quot;kjsafjnksdlajfksdajagsjdalkfjk\nskdjfksjdkafj&quot;</span>);<span class="comment">//写文本文件到相对目录</span></span><br><span class="line">            File.WriteAllBytes(<span class="string">&quot;3.jpg&quot;</span>, image);<span class="comment">//写非文本文件到相对目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Eigen几何模块</title>
    <url>/2020/10/26/SLAM-Eigen%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Eigen几何模块"><a href="#SLAM-Eigen几何模块" class="headerlink" title="SLAM-Eigen几何模块"></a>SLAM-Eigen几何模块</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Geometry&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 本程序演示Eigen几何模块的使用方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//生成单位矩阵</span></span><br><span class="line">    Matrix3d rotation_matrix = Matrix3d::Identity();</span><br><span class="line">    <span class="comment">//旋转向量使用AngleAxisd，底层非Matrix，但是可以当做矩阵使用运算(重载运算符）</span></span><br><span class="line">    <span class="comment">//定义旋转向量，沿z轴旋转45度</span></span><br><span class="line">    <span class="function">AngleAxisd <span class="title">rotation_vector</span><span class="params">(M_PI/<span class="number">4</span>,Vector3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>))</span></span>;</span><br><span class="line">    <span class="comment">//格式控制，输出时保持小数点后3位</span></span><br><span class="line">    <span class="built_in">cout</span>.precision(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//将旋转向量转化为矩阵形式，AngleAxisd转为matrix</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;rotation matrix =\n&quot;</span>&lt;&lt;rotation_vector.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//将旋转向量转化为旋转矩阵，AngleAxisd转Matrix</span></span><br><span class="line">    rotation_matrix = rotation_vector.toRotationMatrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用AngleAxisd进行坐标转换</span></span><br><span class="line">    <span class="function">Vector3d <span class="title">v</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    Vector3d v_rotated = rotation_vector * v;<span class="comment">//方式1:使用旋转向量</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation (by angle axis) = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    v_rotated = rotation_matrix*v;<span class="comment">//方式2:使用旋转矩阵</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation (by matrix) = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//欧拉角:旋转矩阵-&gt;欧拉角</span></span><br><span class="line">    Vector3d euler_angles = rotation_matrix.eulerAngles(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//ZYX顺序</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;yaw pitch roll = &quot;</span>&lt;&lt;euler_angles.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//欧式变换矩阵</span></span><br><span class="line">    Isometry3d T =Isometry3d::Identity();</span><br><span class="line">    T.rotate(rotation_vector);<span class="comment">//设置变换矩阵的旋转向量</span></span><br><span class="line">    T.pretranslate(Vector3d(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//将平移向量设置为（1,3,4）</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Transform matrix = \n&quot;</span>&lt;&lt;T.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用欧式变换矩阵对v进行变换</span></span><br><span class="line">    Vector3d v_transformed = T*v;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;v transformed = &quot;</span>&lt;&lt;v_transformed.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//AngleAxisd转换为四元数</span></span><br><span class="line">    Quaterniond q = Quaterniond(rotation_vector);</span><br><span class="line">    <span class="comment">//输出四元数系数，(x,y,z,w)；w是实部，xyz是虚部</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;quaternion from rotation vector = &quot;</span>&lt;&lt;q.coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//matrix转换为四元数</span></span><br><span class="line">    q = Quaterniond(rotation_matrix);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;quaternion form roation matrix = &quot;</span>&lt;&lt;q.coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用四元数旋转向量</span></span><br><span class="line">    v_rotated = q*v;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;should be equal to &quot;</span>&lt;&lt;(q*Quaterniond(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)*q.inverse()).coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>Eigen</tag>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hololens与六维力传感器通信</title>
    <url>/2020/10/25/Hololens%E4%B8%8E%E5%85%AD%E7%BB%B4%E5%8A%9B%E4%BC%A0%E6%84%9F%E5%99%A8%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d4a6e10dc6726b1203db53941e5e9e829ab65b4fc064a9c5d314b2fd8076063b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>udp</tag>
        <tag>Hololens2</tag>
        <tag>传感器</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP-客户端无限次发送消息</title>
    <url>/2020/10/23/UDP-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E9%99%90%E6%AC%A1%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="UDP-简单无限次发送消息"><a href="#UDP-简单无限次发送消息" class="headerlink" title="UDP-简单无限次发送消息"></a>UDP-简单无限次发送消息</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>UDP的使用，与之前相比增加了消息的发送次数，可以达到无限次</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UDPServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//udp服务端</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Socket udpServer;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            </span><br><span class="line">            udpServer = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</span><br><span class="line">            udpServer.Bind(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;192.168.31.125&quot;</span>), <span class="number">7788</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(ReceiveMessage) &#123; IsBackground  = <span class="literal">true</span>&#125;.Start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//udpServer.Close();</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                EndPoint remoteEndPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">int</span> length = udpServer.ReceiveFrom(data, <span class="keyword">ref</span> remoteEndPoint);<span class="comment">//data 存发送过来的数据，remoteEndPoint存客户端IP与端口</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> message = Encoding.UTF8.GetString(data, <span class="number">0</span>, length);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;从IP：&quot;</span> + (remoteEndPoint <span class="keyword">as</span> IPEndPoint).Address.ToString() + <span class="string">&quot;端口：&quot;</span> + (remoteEndPoint <span class="keyword">as</span> IPEndPoint).Port + <span class="string">&quot;收到了数据：&quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UdpClient_TestUse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Socket udpClient = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> message = Console.ReadLine();</span><br><span class="line">                <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(message);</span><br><span class="line">                EndPoint severPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;192.168.31.125&quot;</span>), <span class="number">7788</span>);</span><br><span class="line">                udpClient.SendTo(data, severPoint);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            udpClient.Close();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201023095356.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP-简单通信</title>
    <url>/2020/10/23/UDP-%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="UDP-简单通信"><a href="#UDP-简单通信" class="headerlink" title="UDP-简单通信"></a>UDP-简单通信</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>UDP的简单使用，基于VS的客户端与服务端，客户端只能发送1条消息</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UDPServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//udp服务端</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Socket udpServer = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</span><br><span class="line">            udpServer.Bind(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;192.168.31.125&quot;</span>), <span class="number">7788</span>));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            EndPoint remoteEndPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">int</span> length = udpServer.ReceiveFrom(data, <span class="keyword">ref</span> remoteEndPoint);<span class="comment">//data 存发送过来的数据，remoteEndPoint存客户端IP与端口</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> message = Encoding.UTF8.GetString(data, <span class="number">0</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;从IP：&quot;</span> + (remoteEndPoint <span class="keyword">as</span> IPEndPoint).Address.ToString() + <span class="string">&quot;端口：&quot;</span>+ (remoteEndPoint <span class="keyword">as</span> IPEndPoint).Port);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;收到了数据：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">            udpServer.Close();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UdpClient_TestUse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Socket udpClient = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> message = Console.ReadLine();</span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(message);</span><br><span class="line">            EndPoint severPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;192.168.31.125&quot;</span>), <span class="number">7788</span>);</span><br><span class="line">            udpClient.SendTo(data, severPoint);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201023093520.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Eigen初识</title>
    <url>/2020/10/22/SLAM-Eigen%E5%88%9D%E5%A7%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Eigen初识"><a href="#SLAM-Eigen初识" class="headerlink" title="SLAM-Eigen初识"></a>SLAM-Eigen初识</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************</span></span><br><span class="line"><span class="comment"> * 本程序演示了Eigen基本类型的使用</span></span><br><span class="line"><span class="comment"> * ************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">2</span>,<span class="number">3</span>&gt; matrix_23;</span><br><span class="line">    <span class="comment">//3维向量,3x1,与Matrix&lt;double,3,1&gt; v_3d相同</span></span><br><span class="line">    Vector3d v_3d;</span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">3</span>,<span class="number">1</span>&gt; vd_3d;</span><br><span class="line">    <span class="comment">//Matrix3d实质上是Matrix&lt;double,3,3&gt;</span></span><br><span class="line">    Matrix3d matrix_33 = Matrix3d::Zero();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不确定矩阵大小，使用动态大小的矩阵</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,Dynamic,Dynamic&gt; matrix_dynamic;</span><br><span class="line">    <span class="comment">//同上，动态大小</span></span><br><span class="line">    MatrixXd matrix_x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入数据（初始化）</span></span><br><span class="line">    matrix_23&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;</span><br><span class="line">    <span class="comment">//输出各个元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;matrix 2x3 from 1 to 6:\n&quot;</span>&lt;&lt;matrix_23&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用（）访问矩阵中的元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;print matrix 2x3&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt;<span class="number">2</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;matrix_23(i,j)&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v_3d&lt;&lt;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>;</span><br><span class="line">    vd_3d&lt;&lt;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;</span><br><span class="line">    <span class="comment">//matrix_23里的元素是float类型</span></span><br><span class="line">    <span class="comment">//vd_3d里的元素是float类型</span></span><br><span class="line">    <span class="comment">//v_3d里的元素是double类型</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,<span class="number">2</span>,<span class="number">1</span>&gt; result = matrix_23.cast&lt;<span class="keyword">double</span>&gt;()*v_3d;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;[1,2,3;4,5,6]*[3,2,1]=&quot;</span>&lt;&lt;result.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">2</span>,<span class="number">1</span>&gt; result2 = matrix_23 * vd_3d;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;[1,2,3;4,5,6]*[4,5,6]&quot;</span>&lt;&lt;result2.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//矩阵运算</span></span><br><span class="line">    <span class="comment">//随机数矩阵</span></span><br><span class="line">    matrix_33 = Matrix3d::Random();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;random matrix ：\n&quot;</span>&lt;&lt;matrix_33&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;transpose:\n&quot;</span>&lt;&lt;matrix_33.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;the sum of all members:\n&quot;</span>&lt;&lt;matrix_33.sum()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;trace:\n&quot;</span>&lt;&lt;matrix_33.trace()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;数乘:\n&quot;</span>&lt;&lt;matrix_33*<span class="number">10</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;inverse:\n&quot;</span>&lt;&lt;matrix_33.inverse()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;det:\n&quot;</span>&lt;&lt;matrix_33.determinant()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特征值</span></span><br><span class="line">    <span class="comment">//实对称矩阵可以保证对角化成功</span></span><br><span class="line">    <span class="function">SelfAdjointEigenSolver&lt;Matrix3d&gt; <span class="title">eigen_solver</span><span class="params">(matrix_33.transpose() * matrix_33)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Eigen values = \n&quot;</span>&lt;&lt;eigen_solver.eigenvalues()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Eigen vectors = \n&quot;</span>&lt;&lt;eigen_solver.eigenvectors()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解方程</span></span><br><span class="line">    <span class="comment">//求解matrix_NN * x = v_Nd 方程</span></span><br><span class="line">    <span class="comment">//N的大小在前边的宏里定义，由随机数生成</span></span><br><span class="line">    <span class="comment">//直接求逆是最直接的，但是运算量大</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,MATRIX_SIZE&gt; matrix_NN = MatrixXd::Random(MATRIX_SIZE,MATRIX_SIZE);</span><br><span class="line">    matrix_NN = matrix_NN * matrix_NN.transpose();<span class="comment">//保证半正定</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,<span class="number">1</span>&gt; v_Nd = MatrixXd::Random(MATRIX_SIZE,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> time_stt = clock();<span class="comment">//计时</span></span><br><span class="line">    <span class="comment">//直接求逆</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,<span class="number">1</span>&gt; x = matrix_NN.inverse() * v_Nd;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of normal inverse is &quot;</span>&lt;&lt;<span class="number">1000</span> * (clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通常用矩阵分解来求解，例如QR分解，速度会快很多</span></span><br><span class="line">    time_stt = clock();</span><br><span class="line">    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of Qr decomposition is &quot;</span>&lt;&lt;<span class="number">1000</span>*(clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于正定矩阵，还可以用cholesky分解来分解方程</span></span><br><span class="line">    time_stt = clock();</span><br><span class="line">    x = matrix_NN.ldlt().solve(v_Nd);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of ldlt decompisition is &quot;</span>&lt;&lt;<span class="number">1000</span> * (clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>Eigen</tag>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>融合NKeyBoard与滚动条的适用于Hololens2的通用Socket通信服务端与客户端</title>
    <url>/2020/10/21/%E8%9E%8D%E5%90%88NKeyBoard%E4%B8%8E%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8EHololens2%E7%9A%84Socket%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3bcf5d78b56acf8d822943e446f9cedb4dc0c8d2cac3d55f6b8e7136268109ba"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>NKeyBoard</tag>
        <tag>Hololens2</tag>
      </tags>
  </entry>
  <entry>
    <title>Hololens-Socket服务端</title>
    <url>/2020/10/18/Hololens-Socket%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="a9ada52777de59671dcfcbe850b348803968202566be8c7022b7492b8dda2d1a"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>Hololens</tag>
      </tags>
  </entry>
  <entry>
    <title>C#编程-线程01</title>
    <url>/2020/10/14/C-%E7%BA%BF%E7%A8%8B01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-编程-线程01"><a href="#C-编程-线程01" class="headerlink" title="C#编程-线程01"></a>C#编程-线程01</h1><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p>
<p>如果工厂的电力有限一次只能供给一个车间使用。也就是说一个车间开工的时候，其他车间就必须停工。背后的含义就是。单个CPU一次只能运行一个任务。（多核CPU可以运行多个任务）</p>
<p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<p>一个车间里，可以有很多工人，他们协同完成一个任务。</p>
<p>线程就好比车间里的工人。一个进程可以包括多个线程。</p>
<p>车间的控件是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享空间。</p>
<p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<p>一个防止他人进入的简单方法，就是门口加一把锁（厕所）。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫<strong>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</strong>。</p>
<p>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p>
<p>1这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<strong>“信号量”（Semaphore），用来保证多个线程不会互相冲突</strong>。</p>
<p>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p>
<p>操作系统的设计，因此可以归结为三点：</p>
<ul>
<li>以多进程形式，允许多个任务同时运行；</li>
<li>以多线程形式，允许单个任务分成不同的部分运行；</li>
<li>提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</li>
</ul>
<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line">namespace 线程委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> c,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">test2</span>(<span class="params"><span class="built_in">float</span> c,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">            <span class="comment">//线程休眠100ms</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">test3</span>(<span class="params"><span class="built_in">float</span> c, <span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3&quot;</span>);</span><br><span class="line">            <span class="comment">//线程休眠100ms</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onCallBack</span>(<span class="params">IAsyncResult acr</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3已经结束，我是回调函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//acr.AsyncState 是 c.BeginInvoke 的倒数第一个参数，c</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; c = acr.AsyncState <span class="keyword">as</span> Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> d = c.EndInvoke(acr);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3结束后的输出结果为：&quot;</span>+d);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 一般为比较耗时的任务，开启线程</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;args&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//主线程</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 定义线程方式01</span></span><br><span class="line">            <span class="comment">//1. 使用委托定义线程</span></span><br><span class="line">            <span class="comment">//无返回值，有形参</span></span><br><span class="line">            Action&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; a = test;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启线程1</span></span><br><span class="line">            a.BeginInvoke(<span class="number">120</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 定义线程方式02</span></span><br><span class="line">            <span class="comment">//1. 使用委托定义线程</span></span><br><span class="line">            <span class="comment">//有返回值，有形参</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b = test2;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启线程2</span></span><br><span class="line">            <span class="comment">//取得当前线程的状态,ar</span></span><br><span class="line">            IAsyncResult ar = b.BeginInvoke(<span class="number">1.0f</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//检测线程是否运行完毕</span></span><br><span class="line">            <span class="comment">//method01(b,ar);</span></span><br><span class="line">            <span class="comment">//method02(b, ar);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//异步回调</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; c = test3;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//倒数第二个参数，委托类型，表示回调函数，线程结束后，调用此方法</span></span><br><span class="line">            <span class="comment">//倒数第一个参数，用来给回调函数传递数据，可以是任意类型，现在把c传出去</span></span><br><span class="line">            IAsyncResult acr = c.BeginInvoke(<span class="number">1.0f</span>, <span class="string">&quot;&quot;</span>,onCallBack, c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span>(<span class="params">Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b, IAsyncResult ar</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">bool</span> isEnd = ar.AsyncWaitHandle.WaitOne(<span class="number">1000</span>);<span class="comment">//等待&lt;=1000ms，若线程结束，返回true，若线程未结束，返回false</span></span><br><span class="line">            <span class="keyword">if</span> (isEnd)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2已经完成&quot;</span>);</span><br><span class="line">                <span class="built_in">int</span> res2 = b.EndInvoke(ar);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2完成结果：&quot;</span> + res2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2未在规定时间内完成&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span>(<span class="params">Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b, IAsyncResult ar</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//判断线程是否执行完成</span></span><br><span class="line">            <span class="keyword">while</span> (!ar.IsCompleted)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="comment">//主线程休眠10ms，控制检测频率</span></span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2已经完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取得线程执行完毕后的返回值</span></span><br><span class="line">            <span class="built_in">int</span> res = b.EndInvoke(ar);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2完成结果为：&quot;</span> + res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//检测线程结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-Socket通信_3</title>
    <url>/2020/10/12/Unity-Socket%E9%80%9A%E4%BF%A1-3/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="4c45a051702f02bffcf8faaddaf7ce012f45899b4ad786099393a80e57e8adbe"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Socket</category>
      </categories>
  </entry>
  <entry>
    <title>Idea</title>
    <url>/2020/10/12/Idea/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="54c1605b806a1d77feab4b19507d8055de2ed359d085afb3b632e6ac97c8f352">43c704dc60e25eb0927d1ece2da05a37482c7c1a678b4d28d4ac39943a79a111db5fc0c4a59ccec5ca4a5f94db5c271eb472f6d8219c1489f788331e0b2fb5867c4b69fe341cdd8ed41fbbf277ce397b99f60d1ed018921811de70ef51af1a5dfbd2229e63e6c6d285bbecc17ed05bfbf07609213ad4ae9695057ac36c6155bbd8bbc89d08ec507da1c9a800931f50657d42da0c85830e26a5425e88fc3983aa7192d158f98e392d8326f3f0d7856b163dbcf7bddae8661b8ea35788a53ab5787d1eb74bf7b95a799f281d771f19168c37b6e0771e6125d7617910ba8c1a4a7ba76149ffdaa942d73927cc31e2e33829ba3006d5ff70d72fa120a05815d0d79b53b6f5fbbbb8c3b98b49ede61e3cde0ea90ce9688ac1224be3f4813d4f575ba5cbc0f1ad39a1665202a156a8a1214e70cf46ea8afe4f80032188c6755f5d06bd9df8ac0e32ec81e3f9aae2b64772c913ab77704cbf23a388f771506d668fa3171ed4e3cf8670b0bab954cea5abbf871f245785805c4f8b8e314c1568def6fe53a43daac84342b91240b467c170ac8c0d122483a56c6aa0b998bc7f373c363b91990e354402dce952da227f98bf5987e6bab82dc1bfce9a049c6a11561aed9aa3dab79aef8d70bcaae63d26ee2ebef66de2f254f7b029e5f617b23ff96081d44f245134c724bf8c4de6309ea5814f9fafa9d4fb5c91df5760e7758affbca25d6c0d31492ffa014d42c29a598fa64d66c124d46f5f6ce1491bf4cb666d8729f97d982dc5fed460495e14dedd6cda331d76d6795285bf5540d842a24f30b36b97d9ecdef6366cf90f31769a2c4cf537449c6058128a3ba5aa5b15763d91e802f5034cb5bd0d21ce35c9e42257371669286c46a8e1029066d7f78761cd34b5c0ff7e3ecadc5c49ae895ae7f4a7c4eed1eb0d</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>C++核心编程</title>
    <url>/2020/10/09/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p>
<h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>
<ul>
<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>
<li>全局区：存放全局变量和静态变量以及常量</li>
<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>
<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>
</ul>
<p><strong>内存四区意义：</strong></p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>
<p>​    <strong>代码区：</strong></p>
<p>​        存放 CPU 执行的机器指令</p>
<p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p>​    <strong>全局区：</strong></p>
<p>​        全局变量和静态变量存放在此.</p>
<p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p>​        ==该区域的数据在程序结束后由操作系统释放==.</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204015.png" alt=""></p>
<p>总结：</p>
<ul>
<li>C++中在程序运行前分为全局区和代码区</li>
<li>代码区特点是共享和只读</li>
<li>全局区中存放全局变量、静态变量、常量</li>
<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>
</ul>
<h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​    <strong>栈区：</strong></p>
<p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    <strong>堆区：</strong></p>
<p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>​        在C++中主要利用new在堆区开辟内存</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用new关键字进行开辟内存</p>
<h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p>
<p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>
<p>​    语法：<code>new 数据类型</code></p>
<p>​    利用new创建的数据，会返回该数据对应的类型的指针</p>
<p><strong>示例1： 基本语法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用delete释放堆区数据</span></span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：开辟数组</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆区开辟数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[i] = i + <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放数组 delete 后加 []</span></span><br><span class="line">	<span class="keyword">delete</span>[] arr;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p><strong>作用： </strong>给变量起别名</p>
<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul>
<li>引用必须初始化</li>
<li>引用在初始化后，不可以改变</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="comment">//int &amp;c; //错误，引用必须初始化</span></span><br><span class="line">	<span class="keyword">int</span> &amp;c = a; <span class="comment">//一旦初始化后，就不可以更改</span></span><br><span class="line">	c = b; <span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>
<p><strong>优点：</strong>可以简化指针修改实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap02</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap03</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	mySwap01(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	mySwap02(&amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	mySwap03(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
</blockquote>
<h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：<strong>不要返回局部变量引用</strong></p>
<p>用法：函数调用作为左值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回局部变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回静态变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不能返回局部变量的引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = test01();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果函数做左值，那么必须返回引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref2 = test02();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	test02() = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    </p>
<h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>
<p>讲解示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ref)</span></span>&#123;</span><br><span class="line">	ref = <span class="number">100</span>; <span class="comment">// ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = a; </span><br><span class="line">	ref = <span class="number">20</span>; <span class="comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class="line">    </span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	func(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用使用的场景，通常用来修饰形参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//v += 10;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line">	<span class="comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//函数中利用常量引用防止误操作修改实参</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	showValue(a);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：<code>返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>, <span class="keyword">int</span> c = <span class="number">10</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class="line"><span class="comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">20</span>, <span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	func(<span class="number">10</span>,<span class="number">10</span>); <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p>
<p><strong>函数重载满足条件：</strong></p>
<ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>
</ul>
<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值不可以作为函数重载条件</span></span><br><span class="line"><span class="comment">//int func(double a, int b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	func();</span><br><span class="line">	func(<span class="number">10</span>);</span><br><span class="line">	func(<span class="number">3.14</span>);</span><br><span class="line">	func(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line">	func(<span class="number">3.14</span> , <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul>
<li>引用作为重载条件</li>
<li>函数重载碰到函数默认参数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载注意事项</span></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	func(a); <span class="comment">//调用无const</span></span><br><span class="line">	func(<span class="number">10</span>);<span class="comment">//调用有const</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p>
<p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p>
<p><strong>例如：</strong></p>
<p>​    人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>
<p>​    车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>
<p>​    具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p>
<h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<ul>
<li>将属性和行为作为一个整体，表现生活中的事物</li>
<li>将属性和行为加以权限控制</li>
</ul>
<p><strong>封装意义一：</strong></p>
<p>​    在设计类的时候，属性和行为写在一起，表现事物</p>
<p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>
<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、封装的意义</span></span><br><span class="line"><span class="comment">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个圆类，求圆的周长</span></span><br><span class="line"><span class="comment">//class代表设计一个类，后面跟着的是类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//访问权限  公共的权限</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//行为</span></span><br><span class="line">	<span class="comment">//获取到圆的周长</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//2 * pi  * r</span></span><br><span class="line">		<span class="comment">//获取圆的周长</span></span><br><span class="line">		<span class="keyword">return</span>  <span class="number">2</span> * PI * m_r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过圆类，创建圆的对象</span></span><br><span class="line">	<span class="comment">// c1就是一个具体的圆</span></span><br><span class="line">	Circle c1;</span><br><span class="line">	c1.m_r = <span class="number">10</span>; <span class="comment">//给圆对象的半径 进行赋值操作</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2 * pi * 10 = = 62.8</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p><strong>示例2代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">		m_name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		m_id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_name;</span><br><span class="line">	<span class="keyword">int</span> m_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Student stu;</span><br><span class="line">	stu.setName(<span class="string">&quot;德玛西亚&quot;</span>);</span><br><span class="line">	stu.setID(<span class="number">250</span>);</span><br><span class="line">	stu.showStudent();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>封装意义二：</strong></p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<ol>
<li>public        公共权限  </li>
<li>protected 保护权限</li>
<li>private      私有权限</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三种权限</span></span><br><span class="line"><span class="comment">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="comment">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//姓名  公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//汽车  保护权限</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Car;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//银行卡密码  私有权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">		m_Car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">		m_Password = <span class="number">123456</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	p.m_Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">	<span class="comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class="line">	<span class="comment">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>
<p>区别：</p>
<ul>
<li>struct 默认权限为公共</li>
<li>class   默认权限为私有</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span>  m_A; <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> m_A;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	C1 c1;</span><br><span class="line">	c1.m_A = <span class="number">10</span>; <span class="comment">//错误，访问权限是私有</span></span><br><span class="line"></span><br><span class="line">	C2 c2;</span><br><span class="line">	c2.m_A = <span class="number">10</span>; <span class="comment">//正确，访问权限是公共</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>
<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//姓名设置可读可写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">		m_Name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取年龄 </span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置年龄</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你个老妖精!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置为只写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLover</span><span class="params">(<span class="built_in">string</span> lover)</span> </span>&#123;</span><br><span class="line">		m_Lover = lover;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Name; <span class="comment">//可读可写  姓名</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> m_Age; <span class="comment">//只读  年龄</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Lover; <span class="comment">//只写  情人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	<span class="comment">//姓名设置</span></span><br><span class="line">	p.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄设置</span></span><br><span class="line">	p.setAge(<span class="number">50</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄： &quot;</span> &lt;&lt; p.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置</span></span><br><span class="line">	p.setLover(<span class="string">&quot;苍井&quot;</span>);</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例1：设计立方体类</strong></p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204054.png" alt=""></p>
<p><strong>练习案例2：点和圆的关系</strong></p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204105.png" alt=""></p>
<h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul>
<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>
<li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>
</ul>
<h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>
<p>​    一个对象或者变量没有初始状态，对其使用后果是未知</p>
<p>​    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>
<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>
<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>
<ul>
<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>
<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>
</ul>
<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>
<ol>
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>
</ol>
<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>
<ol>
<li>析构函数，没有返回值也不写void</li>
<li>函数名称与类名相同,在名称前加上符号  ~</li>
<li>析构函数不可以有参数，因此不可以发生重载</li>
<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p>
<p>​    按参数分为： 有参构造和无参构造</p>
<p>​    按类型分为： 普通构造和拷贝构造</p>
<p>三种调用方式：</p>
<p>​    括号法</p>
<p>​    显示法</p>
<p>​    隐式转换法</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、构造函数分类</span></span><br><span class="line"><span class="comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class="line"><span class="comment">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.1  括号法，常用</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line">	<span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.2 显式法</span></span><br><span class="line">	Person p2 = Person(<span class="number">10</span>); </span><br><span class="line">	Person p3 = Person(p2);</span><br><span class="line">	<span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.3 隐式转换法</span></span><br><span class="line">	Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10); </span></span><br><span class="line">	Person p5 = p4; <span class="comment">// Person p5 = Person(p4); </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line">	<span class="comment">//Person p5(p4);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p>
<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
<li>值传递的方式给函数参数传值</li>
<li>以值方式返回局部对象</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Person(<span class="keyword">int</span> age) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = age;</span><br><span class="line">	&#125;</span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = p.mAge;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数在释放内存之前调用</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">man</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">//p对象已经创建完毕</span></span><br><span class="line">	<span class="function">Person <span class="title">newman</span><span class="params">(man)</span></span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">	Person newman2 = man; <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person newman3;</span></span><br><span class="line">	<span class="comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//相当于Person p1 = p;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(Person p1)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//无参构造函数</span></span><br><span class="line">	doWork(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p1;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)&amp;p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p = doWork2();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)&amp;p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line">	test03();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<ul>
<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li>
</ul>
<ul>
<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class="line">	Person p1; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//用户提供的有参</span></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">	Person p4; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//此时如果用户自己没有提供有参，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p6</span><span class="params">(p5)</span></span>; <span class="comment">//用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> age ,<span class="keyword">int</span> height) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		m_age = age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="keyword">int</span>(height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数  </span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class="line">		m_age = p.m_age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (m_height != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_height;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_age;</span><br><span class="line">	<span class="keyword">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
</blockquote>
<h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">////传统方式初始化</span></span><br><span class="line">	<span class="comment">//Person(int a, int b, int c) &#123;</span></span><br><span class="line">	<span class="comment">//	m_A = a;</span></span><br><span class="line">	<span class="comment">//	m_B = b;</span></span><br><span class="line">	<span class="comment">//	m_C = c;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表方式初始化</span></span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) :m_A(a), m_B(b), m_C(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">	p.PrintPerson();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>B类中有对象A作为成员，A为对象成员</p>
<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Phone(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		m_PhoneName = name;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~Phone()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_PhoneName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class="line">	Person(<span class="built_in">string</span> name, <span class="built_in">string</span> pName) :m_Name(name), m_Phone(pName)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="string">&quot; 牌手机! &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line">	Phone m_Phone;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class="line">	<span class="comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line">	<span class="comment">//析构顺序与构造相反</span></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span> , <span class="string">&quot;苹果X&quot;</span>)</span></span>;</span><br><span class="line">	p.playGame();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>
<p>静态成员分为：</p>
<ul>
<li>静态成员变量<ul>
<li>所有对象共享同一份数据</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化</li>
</ul>
</li>
<li>静态成员函数<ul>
<li>所有对象共享同一个函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul>
</li>
</ul>
<p><strong>示例1 ：</strong>静态成员变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员变量特点：</span></span><br><span class="line">	<span class="comment">//1 在编译阶段分配内存</span></span><br><span class="line">	<span class="comment">//2 类内声明，类外初始化</span></span><br><span class="line">	<span class="comment">//3 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_B; <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.m_A = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	Person p2;</span><br><span class="line">	p2.m_A = <span class="number">200</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//共享同一份数据</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong>静态成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数特点：</span></span><br><span class="line">	<span class="comment">//1 程序共享一个函数</span></span><br><span class="line">	<span class="comment">//2 静态成员函数只能访问静态成员变量</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">		<span class="comment">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line">	<span class="keyword">int</span> m_B; <span class="comment">// </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.func();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	Person::func();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person::func2(); //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		mA = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//非静态成员变量占对象空间</span></span><br><span class="line">	<span class="keyword">int</span> mA;</span><br><span class="line">	<span class="comment">//静态成员变量不占对象空间</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> mB; </span><br><span class="line">	<span class="comment">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//静态成员函数也不占对象空间</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Person) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>
<p>this指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this指针不需要定义，直接使用即可</p>
<p>this指针的用途：</p>
<ul>
<li>当形参和成员变量同名时，可用this指针来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">		<span class="comment">//返回对象本身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>
<p>如果用到this指针，需要加以判断保证代码的健壮性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空指针访问成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我是Person类!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; mAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person * p = <span class="literal">NULL</span>;</span><br><span class="line">	p-&gt;ShowClassName(); <span class="comment">//空指针，可以调用成员函数</span></span><br><span class="line">	p-&gt;ShowPerson();  <span class="comment">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p>
<ul>
<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>
<li>常函数内不可以修改成员属性</li>
<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>
</ul>
<p><strong>常对象：</strong></p>
<ul>
<li>声明对象前加const称该对象为常对象</li>
<li>常对象只能调用常函数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		m_A = <span class="number">0</span>;</span><br><span class="line">		m_B = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class="line">	<span class="comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//const Type* const pointer;</span></span><br><span class="line">		<span class="comment">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class="line">		<span class="comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MyFunc</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//mA = 10000;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="keyword">int</span> m_B; <span class="comment">//可修改 可变的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰对象  常对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> Person person; <span class="comment">//常量对象  </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; person.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class="line">	person.m_B = <span class="number">100</span>; <span class="comment">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//常对象访问成员函数</span></span><br><span class="line">	person.MyFunc(); <span class="comment">//常对象不能调用const的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为  ==friend==</p>
<p>友元的三种实现</p>
<ul>
<li>全局函数做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Building()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom; <span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Building b;</span><br><span class="line">	goodGay(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	goodGay();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">goodGay</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay gg;</span><br><span class="line">	gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	goodGay();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>; <span class="comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit2</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay  gg;</span><br><span class="line">	gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;&#125;;</span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//成员函数实现 + 号运算符重载</span></span><br><span class="line">	Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		Person temp;</span><br><span class="line">		temp.m_A = <span class="keyword">this</span>-&gt;m_A + p.m_A;</span><br><span class="line">		temp.m_B = <span class="keyword">this</span>-&gt;m_B + p.m_B;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现 + 号运算符重载</span></span><br><span class="line"><span class="comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span></span><br><span class="line"><span class="comment">//	Person temp(0, 0);</span></span><br><span class="line"><span class="comment">//	temp.m_A = p1.m_A + p2.m_A;</span></span><br><span class="line"><span class="comment">//	temp.m_B = p1.m_B + p2.m_B;</span></span><br><span class="line"><span class="comment">//	return temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符重载 可以发生函数重载 </span></span><br><span class="line">Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p2, <span class="keyword">int</span> val)  </span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p2.m_A + val;</span><br><span class="line">	temp.m_B = p2.m_B + val;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数方式</span></span><br><span class="line">	Person p3 = p2 + p1;  <span class="comment">//相当于 p2.operaor+(p1)</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Person p4 = p3 + <span class="number">10</span>; <span class="comment">//相当于 operator+(p3,10)</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
<p>总结2：不要滥用运算符重载</p>
</blockquote>
<h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line">	<span class="comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//链式编程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
</blockquote>
<h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MyInteger() &#123;</span><br><span class="line">		m_Num = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前置++</span></span><br><span class="line">	MyInteger&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">		<span class="comment">//先++</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="comment">//再返回</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置++</span></span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">		<span class="comment">//先返回</span></span><br><span class="line">		MyInteger temp = *<span class="keyword">this</span>; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ++myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++ 先返回 再++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 前置递增返回引用，后置递增返回值</p>
</blockquote>
<h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p>
<ol>
<li>默认构造函数(无参，函数体为空)</li>
<li>默认析构函数(无参，函数体为空)</li>
<li>默认拷贝构造函数，对属性进行值拷贝</li>
<li>赋值运算符 operator=, 对属性进行值拷贝</li>
</ol>
<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//将年龄数据开辟到堆区</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载赋值运算符 </span></span><br><span class="line">	Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line">		<span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_Age);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回自身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄的指针</span></span><br><span class="line">	<span class="keyword">int</span> *m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int a = 10;</span></span><br><span class="line">	<span class="comment">//int b = 20;</span></span><br><span class="line">	<span class="comment">//int c = 30;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//c = b = a;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//int a = 0;</span></span><br><span class="line">	<span class="comment">//int b = 0;</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">a</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">b</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a == b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a != b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul>
<li>函数调用运算符 ()  也可以重载</li>
<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>
<li>仿函数没有固定写法，非常灵活</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> text)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; text &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line">	MyPrint myFunc;</span><br><span class="line">	myFunc(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 + v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyAdd add;</span><br><span class="line">	<span class="keyword">int</span> ret = add(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//匿名对象调用  </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; MyAdd()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204150.png" alt=""></p>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p><strong>普通实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.header();</span><br><span class="line">	ja.footer();</span><br><span class="line">	ja.left();</span><br><span class="line">	ja.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Python py;</span><br><span class="line">	py.header();</span><br><span class="line">	py.footer();</span><br><span class="line">	py.left();</span><br><span class="line">	py.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.header();</span><br><span class="line">	cp.footer();</span><br><span class="line">	cp.left();</span><br><span class="line">	cp.content();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>继承实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.header();</span><br><span class="line">	ja.footer();</span><br><span class="line">	ja.left();</span><br><span class="line">	ja.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Python py;</span><br><span class="line">	py.header();</span><br><span class="line">	py.footer();</span><br><span class="line">	py.left();</span><br><span class="line">	py.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.header();</span><br><span class="line">	cp.footer();</span><br><span class="line">	cp.left();</span><br><span class="line">	cp.content();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>继承的好处：==可以减少重复的代码==</p>
<p>class A : public B; </p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p><strong>派生类中的成员，包含两大部分</strong>：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>
<p><strong>继承方式一共有三种：</strong></p>
<ul>
<li>公共继承</li>
<li>保护继承</li>
<li>私有继承</li>
</ul>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204211.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> :</span><span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 public权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son1 s1;</span><br><span class="line">	s1.m_A; <span class="comment">//其他类只能访问到公共权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span><span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son2 s;</span><br><span class="line">	<span class="comment">//s.m_A; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span><span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 private权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 private权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandSon3</span> :</span><span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class="line">		<span class="comment">//m_A;</span></span><br><span class="line">		<span class="comment">//m_B;</span></span><br><span class="line">		<span class="comment">//m_C;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用工具查看：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204222.png" alt=""></p>
<p>打开工具窗口后，定位到当前CPP文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p>
<p>效果如下图：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204234.png" alt=""></p>
<blockquote>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
</blockquote>
<h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Base()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Son()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">	Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
</blockquote>
<h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class="line">	<span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	s.func();</span><br><span class="line">	s.Base::func();</span><br><span class="line">	s.Base::func(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>子类对象可以直接访问到子类中同名成员</li>
<li>子类对象加作用域可以访问到父类同名成员</li>
<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>
</ol>
<h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过类名访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son s;</span><br><span class="line">	s.func();</span><br><span class="line">	s.Base::func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son::func();</span><br><span class="line">	Son::Base::func();</span><br><span class="line">	<span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">	Son::Base::func(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
</blockquote>
<h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p>
<p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p><strong>C++实际开发中不建议用多继承</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base1()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base2()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;  <span class="comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		m_C = <span class="number">300</span>;</span><br><span class="line">		m_D = <span class="number">400</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; s.Base1::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; s.Base2::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
</blockquote>
<h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p>
<p>​    两个派生类继承同一个基类</p>
<p>​    又有某个类同时继承者两个派生类</p>
<p>​    这种继承被称为菱形继承，或者钻石继承</p>
<p><strong>典型的菱形继承案例：</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204252.jpg" alt=""></p>
<p><strong>菱形继承问题：</strong></p>
<ol>
<li><p>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</p>
</li>
<li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>   :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span> <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">	st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>
<li>利用虚继承可以解决菱形继承问题</li>
</ul>
<h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p>
<p>多态分为两类</p>
<ul>
<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>
<li>动态多态: 派生类和虚函数实现运行时多态</li>
</ul>
<p>静态多态和动态多态区别：</p>
<ul>
<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>
</ul>
<p>下面通过案例进行讲解多态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//Speak函数就是虚函数</span></span><br><span class="line">	<span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSpeak</span><span class="params">(Animal &amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cat cat;</span><br><span class="line">	DoSpeak(cat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Dog dog;</span><br><span class="line">	DoSpeak(dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>多态满足条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
<p>多态使用条件</p>
<ul>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>
<h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<ul>
<li>代码组织结构清晰</li>
<li>可读性强</li>
<li>利于前期和后期的扩展以及维护</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="built_in">string</span> oper)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果要提供新的运算，需要修改源码</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//普通实现测试</span></span><br><span class="line">	Calculator c;</span><br><span class="line">	c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">	c.m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;+&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;-&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;*&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态实现</span></span><br><span class="line"><span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//创建加法计算器</span></span><br><span class="line">	AbstractCalculator *abc = <span class="keyword">new</span> AddCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;  <span class="comment">//用完了记得销毁</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建减法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;  </span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建乘法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> MulCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
</blockquote>
<h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>
<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>
<p>当类中有了纯虚函数，这个类也称为==抽象类==</p>
<p><strong>抽象类特点</strong>：</p>
<ul>
<li>无法实例化对象</li>
<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//纯虚函数</span></span><br><span class="line">	<span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line">	<span class="comment">//抽象类无法实例化对象</span></span><br><span class="line">	<span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Base * base = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">	base = <span class="keyword">new</span> Son;</span><br><span class="line">	base-&gt;func();</span><br><span class="line">	<span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p>
<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204307.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象制作饮品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//规定流程</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MakeDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Boil();</span><br><span class="line">		Brew();</span><br><span class="line">		PourInCup();</span><br><span class="line">		PutSomething();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入牛奶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮自来水!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入枸杞!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(AbstractDrinking* drink)</span> </span>&#123;</span><br><span class="line">	drink-&gt;MakeDrink();</span><br><span class="line">	<span class="keyword">delete</span> drink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	DoWork(<span class="keyword">new</span> Coffee);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	DoWork(<span class="keyword">new</span> Tea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>
<p>虚析构和纯虚析构共性：</p>
<ul>
<li>可以解决父类指针释放子类对象</li>
<li>都需要有具体的函数实现</li>
</ul>
<p>虚析构和纯虚析构区别：</p>
<ul>
<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>
</ul>
<p>虚析构语法：</p>
<p><code>virtual ~类名()&#123;&#125;</code></p>
<p>纯虚析构语法：</p>
<p><code>virtual ~类名() = 0;</code></p>
<p><code>类名::~类名()&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Animal()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class="line">	<span class="comment">//virtual ~Animal()</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">virtual</span> ~Animal() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~Animal()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Cat(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt;  <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Cat()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Name;</span><br><span class="line">			m_Name = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> *m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Animal *animal = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	animal-&gt;Speak();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line">	<span class="comment">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class="line">	<span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line">	<span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>​    1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
<p>​    2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
<p>​    3. 拥有纯虚析构函数的类也属于抽象类</p>
<h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的计算函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的显示函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的存储函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Computer(CPU * cpu, VideoCard * vc, Memory * mem)</span><br><span class="line">	&#123;</span><br><span class="line">		m_cpu = cpu;</span><br><span class="line">		m_vc = vc;</span><br><span class="line">		m_mem = mem;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供工作的函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//让零件工作起来，调用接口</span></span><br><span class="line">		m_cpu-&gt;calculate();</span><br><span class="line"></span><br><span class="line">		m_vc-&gt;display();</span><br><span class="line"></span><br><span class="line">		m_mem-&gt;storage();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供析构函数 释放3个电脑零件</span></span><br><span class="line">	~Computer()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放CPU零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_cpu;</span><br><span class="line">			m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放显卡零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_vc;</span><br><span class="line">			m_vc = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放内存条零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_mem;</span><br><span class="line">			m_mem = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	CPU * m_cpu; <span class="comment">//CPU的零件指针</span></span><br><span class="line">	VideoCard * m_vc; <span class="comment">//显卡零件指针</span></span><br><span class="line">	Memory * m_mem; <span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体厂商</span></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//第一台电脑零件</span></span><br><span class="line">	CPU * intelCpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">	VideoCard * intelCard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">	Memory * intelMem = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//创建第一台电脑</span></span><br><span class="line">	Computer * computer1 = <span class="keyword">new</span> Computer(intelCpu, intelCard, intelMem);</span><br><span class="line">	computer1-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer1;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//第二台电脑组装</span></span><br><span class="line">	Computer * computer2 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer2-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer2;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//第三台电脑组装</span></span><br><span class="line">	Computer * computer3 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> IntelVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer3-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过<strong>文件可以将数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>
<p>文件类型分为两种：</p>
<ol>
<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>
<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>
</ol>
<p>操作文件的三大类:</p>
<ol>
<li>ofstream：写操作</li>
<li>ifstream： 读操作</li>
<li>fstream ： 读写操作</li>
</ol>
<h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p> #include <fstream\></p>
</li>
<li><p>创建流对象  </p>
<p> ofstream ofs;</p>
</li>
<li><p>打开文件</p>
<p> ofs.open(“文件路径”,打开方式);</p>
</li>
<li><p>写数据</p>
<p> ofs &lt;&lt; “写入的数据”;</p>
</li>
<li><p>关闭文件</p>
<p> ofs.close();</p>
</li>
</ol>
<p>文件打开方式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr>
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr>
<td>ios::ate</td>
<td>初始位置：文件尾</td>
</tr>
<tr>
<td>ios::app</td>
<td>追加方式写文件</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果文件存在先删除，再创建</td>
</tr>
<tr>
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>
<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件操作必须包含头文件 fstream</li>
<li>读文件可以利用 ofstream  ，或者fstream类</li>
<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>
<li>利用&lt;&lt;可以向文件中写数据</li>
<li>操作完毕，要关闭文件</li>
</ul>
<h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p> #include <fstream\></p>
</li>
<li><p>创建流对象  </p>
<p> ifstream ifs;</p>
</li>
<li><p>打开文件并判断文件是否打开成功</p>
<p> ifs.open(“文件路径”,打开方式);</p>
</li>
<li><p>读数据</p>
<p> 四种方式读取</p>
</li>
<li><p>关闭文件</p>
<p> ifs.close();</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.open(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一种方式</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs &gt;&gt; buf)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第三种</span></span><br><span class="line">	<span class="comment">//string buf;</span></span><br><span class="line">	<span class="comment">//while (getline(ifs, buf))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">while</span> ((c = ifs.get()) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>读文件可以利用 ifstream  ，或者fstream类</li>
<li>利用is_open函数可以判断文件是否打开成功</li>
<li>close 关闭文件 </li>
</ul>
<h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 ==ios::binary==</p>
<h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件  写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1、包含头文件</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、创建输出流对象</span></span><br><span class="line">	<span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3、打开文件</span></span><br><span class="line">	<span class="comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span></span><br><span class="line"></span><br><span class="line">	Person p = &#123;<span class="string">&quot;张三&quot;</span>  , <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4、写文件</span></span><br><span class="line">	ofs.write((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5、关闭文件</span></span><br><span class="line">	ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>
</ul>
<h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	ifs.read((<span class="keyword">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL-简单点云可视化</title>
    <url>/2020/10/09/PCL-%E7%AE%80%E5%8D%95%E7%82%B9%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PCL-简单点云可视化"><a href="#PCL-简单点云可视化" class="headerlink" title="PCL-简单点云可视化"></a>PCL-简单点云可视化</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"><span class="comment">//简单点云可视化</span></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> user_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 回调函数，只能调用一次的回调函数</span></span><br><span class="line"><span class="comment">/// 对可视化对象背景的颜色设置，添加一个圆球几何体</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;viewer&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerOneOff</span><span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//背景</span></span><br><span class="line">    viewer.setBackgroundColor(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="comment">//存储球心位置</span></span><br><span class="line">    pcl::PointXYZ o;</span><br><span class="line">    o.x = <span class="number">1.0</span>;</span><br><span class="line">    o.y = <span class="number">0</span>;</span><br><span class="line">    o.z = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//添加圆球几何对象</span></span><br><span class="line">    viewer.addSphere(o, <span class="number">0.25</span>, <span class="string">&quot;sphere&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;i only run once&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 渲染输出时每次都调用的回调函数</span></span><br><span class="line"><span class="comment">/// 每帧都执行一次</span></span><br><span class="line"><span class="comment">/// 在可视化对象中添加一个刷新显示字符串</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;viewer&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerPsycho</span><span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;Once per viewer loop: &quot;</span> &lt;&lt; count++;</span><br><span class="line">    viewer.removeShape(<span class="string">&quot;text&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    viewer.addText(ss.str(), <span class="number">200</span>, <span class="number">300</span>, <span class="string">&quot;text&quot;</span>, <span class="number">0</span>); </span><br><span class="line">    <span class="comment">//<span class="doctag">FIXME:</span> possible race condition here:</span></span><br><span class="line">    user_data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;)</span></span>;</span><br><span class="line">    pcl::io::loadPCDFile(<span class="string">&quot;my_point_cloud.pcd&quot;</span>, *cloud);</span><br><span class="line"></span><br><span class="line">    pcl::<span class="function">visualization::CloudViewer <span class="title">viewer</span><span class="params">(<span class="string">&quot;Cloud Viewer&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//showCloud函数是同步的，在此处等待直到渲染显示为止</span></span><br><span class="line">    viewer.showCloud(cloud);</span><br><span class="line">    <span class="comment">//该注册函数在可视化时只调用一次</span></span><br><span class="line">    viewer.runOnVisualizationThreadOnce(viewerOneOff);</span><br><span class="line">    <span class="comment">//该注册函数在渲染输出时每次都调用</span></span><br><span class="line">    viewer.runOnVisualizationThread(viewerPsycho);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!viewer.wasStopped())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在此处可以添加其他处理</span></span><br><span class="line">        user_data++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PCL</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL-kdtree实现快速邻域搜索</title>
    <url>/2020/10/09/PCL-kdtree%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E9%82%BB%E5%9F%9F%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PCL-kdtree实现快速邻域搜索"><a href="#PCL-kdtree实现快速邻域搜索" class="headerlink" title="PCL-kdtree实现快速邻域搜索"></a>PCL-kdtree实现快速邻域搜索</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/kdtree/kdtree_flann.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"><span class="comment">//PCL中实现快速邻域搜索</span></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//用系统时间初始化随机种子</span></span><br><span class="line">	srand(time(<span class="literal">NULL</span>));</span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">	<span class="comment">//随机点云生成</span></span><br><span class="line">	cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">	cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建KdTreeFLANN类型对象，kdtree</span></span><br><span class="line">	pcl::KdTreeFLANN&lt;pcl::PointXYZ&gt;kdtree;</span><br><span class="line">	<span class="comment">//设置搜索空间</span></span><br><span class="line">	kdtree.setInputCloud(cloud);</span><br><span class="line">	<span class="comment">//定义查询点并赋随机值</span></span><br><span class="line">	pcl::PointXYZ searchPoint;</span><br><span class="line">	searchPoint.x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="comment">// k近邻搜索</span></span><br><span class="line">	<span class="keyword">int</span> K = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//定义向量pointIdxNKNSearch，存储查询点邻近索引</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pointIdxNKNSearch(K);</span><br><span class="line">	<span class="comment">//定义向量pointNKNSquaredDistance，存储近邻点对应平方距离</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;pointNKNSquaredDistance(K);</span><br><span class="line">	<span class="comment">//打印相关信息</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;K nearest neighbor search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with K=&quot;</span> &lt;&lt; K &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (kdtree.nearestKSearch(searchPoint, K, pointIdxNKNSearch, pointNKNSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="comment">//执行K邻近搜索，返回值是近邻的个数</span></span><br><span class="line">		<span class="comment">//searchPoint，查询点</span></span><br><span class="line">		<span class="comment">//K，10</span></span><br><span class="line">		<span class="comment">//pointIdxNKNSearch，存储查询点近邻索引的向量</span></span><br><span class="line">		<span class="comment">//pointNKNSquaredDistance，存储近邻点对应的平方距离</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//打印输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxNKNSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointNKNSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 在半径r内搜索近邻</span></span><br><span class="line">	<span class="comment">//重新定义两个向量，存储近邻索引与对应平方距离</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pointIdxRadiusSearch;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; pointRadiusSquaredDistance;</span><br><span class="line">	<span class="comment">//定义随机数r</span></span><br><span class="line">	<span class="keyword">float</span> radius = <span class="number">256.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="comment">//打印相关信息</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (kdtree.radiusSearch(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="comment">//执行r内邻近搜索，返回值是近邻的个数</span></span><br><span class="line">		<span class="comment">//searchPoint，查询点</span></span><br><span class="line">		<span class="comment">//radius，半径</span></span><br><span class="line">		<span class="comment">//pointIdxRadiusSearch，存储查询点近邻索引的向量</span></span><br><span class="line">		<span class="comment">//pointRadiusSquaredDistance，存储近邻点对应的平方距离</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//打印输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PCL</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础入门</title>
    <url>/2020/10/08/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155005.png" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155020.png" alt=""></p>
<h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155041.png" alt=""></p>
<p>给C++文件起个名称，然后点击添加即可。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155125.png" alt=""></p>
<h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155146.png" alt=""></p>
<h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol>
<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>
</ul>
</li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>
<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>
</ul>
</li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//变量的定义</span></span><br><span class="line">	<span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol>
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>
<li>==通常在文件上方定义==，表示一个常量</li>
</ul>
</li>
</ol>
<ol>
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>
<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot; 天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、const修饰变量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">12</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; 个月份&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
</tr>
</tbody>
</table>
</div>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>
</blockquote>
<h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>
<p>浮点型变量分为两种：</p>
<ol>
<li>单精度float </li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; f1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(f1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(d1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学计数法</span></span><br><span class="line">	<span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用==1个字节==。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class="line">	<span class="comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">	ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ASCII码表格：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>\</td>
<td></td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
</div>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>
<p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td><strong>\\\\</strong></td>
<td><strong>代表一个反斜线字符”\”</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>\’</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>\”</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>\?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0~9，a~f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody>
</table>
</div>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\tHello&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol>
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>
<p> 示例：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
</li>
<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>
<p> 示例：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include\<string>==</p>
</blockquote>
<h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>
<p>bool类型只有两个值：</p>
<ul>
<li>true  —- 真（本质是1）</li>
<li>false —- 假（本质是0）</li>
</ul>
<p><strong>bool类型占==1个字节==大小</strong></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//整型输入</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//浮点型输入</span></span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符型输入</span></span><br><span class="line">	<span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串型输入</span></span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//布尔类型输入</span></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; flag;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>
<p>算术运算符包括以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>—</td>
<td>前置递减</td>
<td>a=2; b=—a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>—</td>
<td>后置递减</td>
<td>a=2; b=a—;</td>
<td>a=1; b=2;</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 + b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 - b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 * b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 / b1 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 / b2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数可以相除</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1 / d2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 % b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数不可以取模</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//前置递增</span></span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	++b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//区别</span></span><br><span class="line">	<span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// =</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// +=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// -=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// *=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// /=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// %=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>></td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>>=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a == b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a != b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>
</blockquote>
<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>\</td>
<td>\</td>
<td></td>
<td>或</td>
<td>a \</td>
<td>\</td>
<td>b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例1：</strong>逻辑非</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !!a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>
</blockquote>
<h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p>
</li>
<li><p>多行格式if语句</p>
</li>
<li><p>多条件的if语句</p>
</li>
</ul>
<ol>
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<p> <img src="https://gitee.com/JunLuJun/up/raw/master/20201008155230.png" alt=""></p>
</li>
</ol>
<pre><code>示例：

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//选择结构-单行if语句</span></span><br><span class="line">    	<span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line">    </span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//if语句</span></span><br><span class="line">    	<span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line">    	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol>
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155302.png" alt=""></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155326.png" alt=""></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了北大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了清华&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了人大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155344.jpg" alt=""></p>
<h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	c = a &gt; b ? a : b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">	(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//请给电影评分 </span></span><br><span class="line">	<span class="comment">//10 ~ 9   经典   </span></span><br><span class="line">	<span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line">	<span class="comment">// 6 ~ 5   一般</span></span><br><span class="line">	<span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请给电影打分&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (score)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;非常好&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155407.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>==猜数字==</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155419.jpg" alt=""></p>
<h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155435.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>详解：</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155455.png" alt=""></p>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<p><img src="\iframe\timg.gif" alt=""></p>
<h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155627.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155637.jpg" alt=""></p>
<h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1、普通&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2、中等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3、困难&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (num)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2、在循环语句中用break</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	FLAG:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>
<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155650.png" alt=""></p>
<h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式1</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line">	<span class="keyword">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标赋值</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标输出</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种定义方式</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line">	<span class="keyword">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//逐个输出</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="keyword">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组名用途</span></span><br><span class="line">	<span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155703.png" alt=""></p>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155713.png" alt=""></p>
<h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>
<ol>
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code>数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>
</blockquote>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式1  </span></span><br><span class="line">	<span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式4 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//二维数组数组名</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody>
</table>
</div>
<p><strong>参考答案：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += scores[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型 </p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句 </p>
<p>5、return 表达式</p>
<p><strong>语法：</strong> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code>函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//调用add函数</span></span><br><span class="line">	<span class="keyword">int</span> sum = add(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	sum = add(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，==如果形参发生，并不会影响实参==</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2 = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = a + b;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; max(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件  </li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p>
</li>
<li><p>可以利用指针变量保存地址</p>
</li>
</ul>
<h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、指针的定义</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量赋值</span></span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印数据a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、指针的使用</span></span><br><span class="line">	<span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
<p>总结2：利用指针可以记录地址</p>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//* 解引用</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问空指针报错 </span></span><br><span class="line">	<span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问野指针报错 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>
<ol>
<li>const修饰指针   —- 常量指针</li>
<li>const修饰常量   —- 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * p1 = &amp;a; </span><br><span class="line">	p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line">	<span class="comment">//*p1 = 100;  报错</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line">	<span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">	<span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">	*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line">	<span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line">	<span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//利用指针遍历数组</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b; </span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	swap1(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">	swap2(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len);</span><br><span class="line"></span><br><span class="line">	printArray(arr, len);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>
<h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式1</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span> <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">	stu1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	stu1.age = <span class="number">18</span>;</span><br><span class="line">	stu1.score = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式2</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	stu3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">	stu3.age = <span class="number">18</span>;</span><br><span class="line">	stu3.score = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>
</blockquote>
<h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//结构体数组</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> =</span> &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span> =</span> &amp;stu;</span><br><span class="line">	</span><br><span class="line">	p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">	<span class="keyword">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//教师姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span> <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">	t1.id = <span class="number">10000</span>;</span><br><span class="line">	t1.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">	t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">	t1.stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	t1.stu.age = <span class="number">18</span>;</span><br><span class="line">	t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu.age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line">	<span class="comment">//值传递</span></span><br><span class="line">	printStudent(stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址传递</span></span><br><span class="line">	printStudent2(&amp;stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(<span class="keyword">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">	printStudent(&amp;stu);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> tName = <span class="string">&quot;教师&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tArray[i].name = tName + nameSeed[i];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">			tArray[i].sArray[j].score = rand() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">	Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArray) / <span class="keyword">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line">	allocateSpace(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">	printTeachers(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="built_in">string</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">			&#123;</span><br><span class="line">				hero temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hero</span> <span class="title">arr</span>[5] =</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">	printHeros(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>AzureKinectDK与PCL点云生成</title>
    <url>/2020/10/08/AzureKinectDC%E4%B8%8EPCL%E7%82%B9%E4%BA%91%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AzureKinectDK与PCL点云生成"><a href="#AzureKinectDK与PCL点云生成" class="headerlink" title="AzureKinectDK与PCL点云生成"></a>AzureKinectDK与PCL点云生成</h1><blockquote>
<p>参考博文：</p>
<p><a href="https://blog.csdn.net/weixin_39746114/article/details/107835727">https://blog.csdn.net/weixin_39746114/article/details/107835727</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008095211.jpg" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008095233.jpg" alt=""></p>
<h2 id="AzureKinectDK"><a href="#AzureKinectDK" class="headerlink" title="AzureKinectDK"></a>AzureKinectDK</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008094515.png" style="zoom:50%;" /></p>
<p>Azure Kinect DK 是一款开发人员套件和 PC 外部设备，它搭载 100 万像素高级深度摄像头、360˚ 麦克风阵列，1200万像素全高清摄像头和方向传感器，适用于先进的计算机视觉和语音模型开发。它的长度不到13厘米，厚度仅为4厘米。</p>
<p>系统要求：采用第7代 Intel® CoreTM i3 处理器（双核 2.4GHz 包含 HD620 GPU 或更快）的 Windows 10® 计算机、USB 3.0 端口、4GB 内存。不支持 Windows 10 S 模式。人体跟踪等其他功能可能需要更高级的 PC 硬件。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008094609.jpg" alt=""></p>
<ol>
<li>100 万像素深度传感器，具有宽、窄视场角 (FOV) 选项，可针对应用程序进行优化</li>
<li>7 麦克风阵列，可用于远场语音和声音捕获</li>
<li>1200 万像素 RGB 摄像头，提供和深度数据匹配的彩色图像数据流</li>
<li>加速计和陀螺仪 (IMU)，可用于传感器方向和空间跟踪</li>
<li>外部同步引脚，可轻松同步多个 Kinect 设备的传感器数据流</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol>
<li><p>main.cpp</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/make_shared.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;k4a_grabber.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/filters/passthrough.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> pcl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZRGBA PointType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerOneOff</span><span class="params">(visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	viewer.setBackgroundColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//设置背景颜色为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">uint32_t</span> deviceCount = k4a::device::get_installed_count();</span><br><span class="line">	<span class="keyword">if</span> (deviceCount == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no azure kinect devices detected!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// PCL Visualizer</span></span><br><span class="line">	<span class="function">boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; <span class="title">viewer</span><span class="params">(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">&quot;Point Cloud Viewer&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义初始点云</span></span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 回调函数</span></span><br><span class="line">	boost::mutex mutex;</span><br><span class="line">	boost::function&lt;<span class="keyword">void</span>(<span class="keyword">const</span> pcl::PointCloud&lt;PointType&gt;::ConstPtr&amp;)&gt; function =</span><br><span class="line">		[&amp;cloud, &amp;mutex](<span class="keyword">const</span> pcl::PointCloud&lt;PointType&gt;::ConstPtr&amp; ptr)</span><br><span class="line">	&#123;</span><br><span class="line">		boost::mutex::scoped_lock lock(mutex);</span><br><span class="line">		<span class="comment">//-----------------------------------------</span></span><br><span class="line">		<span class="comment">/* Point Cloud Processing */</span></span><br><span class="line">		<span class="comment">//-----------------------------------------</span></span><br><span class="line">		cloud = ptr-&gt;makeShared();</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义grabber</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::Grabber&gt; grabber =</span><br><span class="line">		boost::make_shared&lt;pcl::KinectAzureDKGrabber&gt;(<span class="number">0</span>, K4A_DEPTH_MODE_WFOV_2X2BINNED, K4A_IMAGE_FORMAT_COLOR_BGRA32, K4A_COLOR_RESOLUTION_720P);</span><br><span class="line">	<span class="comment">//强制类型转换</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::KinectAzureDKGrabber&gt; grabber_ = boost::dynamic_pointer_cast&lt;pcl::KinectAzureDKGrabber&gt;(grabber);</span><br><span class="line">	<span class="comment">//注册回调函数</span></span><br><span class="line">	boost::signals2::connection connection = grabber-&gt;registerCallback(function);</span><br><span class="line">	<span class="comment">//开始</span></span><br><span class="line">	grabber-&gt;start();</span><br><span class="line"></span><br><span class="line">	k4a::calibration calibration = grabber_-&gt;getCalibration();</span><br><span class="line">	<span class="keyword">k4a_calibration_intrinsic_parameters_t</span>* intrinsics = &amp;calibration.color_camera_calibration.intrinsics.parameters;</span><br><span class="line">	Eigen::Matrix3f intrinsics_eigen;</span><br><span class="line">	intrinsics_eigen &lt;&lt;</span><br><span class="line">		intrinsics-&gt;param.fx, <span class="number">0.0f</span>, intrinsics-&gt;param.cx,</span><br><span class="line">		<span class="number">0.0f</span>, intrinsics-&gt;param.fy, intrinsics-&gt;param.cy,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>;</span><br><span class="line">	<span class="comment">/*Eigen::Matrix4f extrinsics_eigen = Eigen::Matrix4f::Identity();*/</span></span><br><span class="line">	Eigen::Matrix4f extrinsics_eigen;</span><br><span class="line">	extrinsics_eigen &lt;&lt; <span class="number">-1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>; <span class="comment">//看起来方向是正确的 </span></span><br><span class="line">	viewer-&gt;setCameraParameters(intrinsics_eigen, extrinsics_eigen);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示采集到的点云数据</span></span><br><span class="line">	<span class="keyword">while</span> (!viewer-&gt;wasStopped())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Update Viewer</span></span><br><span class="line">		viewer-&gt;spinOnce();</span><br><span class="line">		boost::<span class="function">mutex::scoped_try_lock <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (lock.owns_lock() &amp;&amp; cloud)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//pcl::PassThrough&lt;pcl::PointXYZRGBA&gt; pass;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">//pass.setInputCloud(cloud);            //设置输入点云</span></span><br><span class="line">			<span class="comment">//pass.setFilterFieldName(&quot;z&quot;);         //设置过滤时所需要点云类型的Z字段</span></span><br><span class="line">			<span class="comment">//pass.setFilterLimits(0.5, 1.08);        //设置在过滤字段的范围</span></span><br><span class="line">			<span class="comment">//pass.setFilterLimitsNegative(true);   //设置保留范围内还是过滤掉范围内</span></span><br><span class="line">			<span class="comment">//pass.filter(*cloud);            //执行滤波，保存过滤结果在cloud_filtered</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// Update Point Cloud</span></span><br><span class="line">			<span class="keyword">if</span> (!viewer-&gt;updatePointCloud(cloud, <span class="string">&quot;cloud&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				viewer-&gt;addPointCloud(cloud, <span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (_kbhit())</span><br><span class="line">		&#123;</span><br><span class="line">			grabber-&gt;stop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Stop Grabber</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	pcl::<span class="function">visualization::CloudViewer <span class="title">pviewer</span><span class="params">(<span class="string">&quot;Cloud Viewer&quot;</span>)</span></span>;     <span class="comment">//创建viewer对象</span></span><br><span class="line">	pviewer.showCloud(cloud);</span><br><span class="line">	pviewer.runOnVisualizationThreadOnce(viewerOneOff);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Disconnect Callback Function</span></span><br><span class="line">	<span class="keyword">if</span> (connection.connected())</span><br><span class="line">	&#123;</span><br><span class="line">		connection.disconnect();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>k4a_grabber.h</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/boost.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/grabber.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pcl</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZ;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZI;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZRGB;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZRGBA;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">pcl</span>:</span>:PointCloud;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">KinectAzureDKGrabber</span> :</span> <span class="keyword">public</span> pcl::Grabber</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		KinectAzureDKGrabber(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_);</span><br><span class="line">		<span class="keyword">virtual</span> ~KinectAzureDKGrabber() <span class="keyword">throw</span> ();</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">isRunning</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">getFramesPerSecond</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZ)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZI)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZI&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZRGB)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZRGB&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZRGBA)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;&gt;&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setupDevice</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_)</span></span>;</span><br><span class="line"></span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZ&gt;* signal_PointXYZ;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZI&gt;* signal_PointXYZI;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZRGB&gt;* signal_PointXYZRGB;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZRGBA&gt;* signal_PointXYZRGBA;</span><br><span class="line"></span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">convertDepthToPointXYZ</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZI&gt;::<span class="function">Ptr <span class="title">convertInfraredDepthToPointXYZI</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZRGB&gt;::<span class="function">Ptr <span class="title">convertRGBDepthToPointXYZRGB</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">convertRGBADepthToPointXYZRGBA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::thread thread;</span><br><span class="line">		<span class="keyword">mutable</span> <span class="built_in">std</span>::mutex mutex;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">threadFunction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> quit;</span><br><span class="line">		<span class="keyword">bool</span> running;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">k4a_device_configuration_t</span> config;</span><br><span class="line">		k4a::device dev;</span><br><span class="line">		<span class="keyword">int</span> device_id;</span><br><span class="line"></span><br><span class="line">		k4a::calibration calibration;</span><br><span class="line">		k4a::transformation transformation;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> colorWidth;</span><br><span class="line">		<span class="keyword">int</span> colorHeight;</span><br><span class="line">		k4a::image colorImage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> depthWidth;</span><br><span class="line">		<span class="keyword">int</span> depthHeight;</span><br><span class="line">		k4a::image depthImage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> infraredWidth;</span><br><span class="line">		<span class="keyword">int</span> infraredHeight;</span><br><span class="line">		k4a::image infraredImage;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">		<span class="function">k4a::calibration <span class="title">getCalibration</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>k4a_grabber.cpp</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;k4a_grabber.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">pcl::KinectAzureDKGrabber::KinectAzureDKGrabber(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_) :</span><br><span class="line">	config(K4A_DEVICE_CONFIG_INIT_DISABLE_ALL),</span><br><span class="line">	dev(<span class="literal">nullptr</span>),</span><br><span class="line">	colorImage(<span class="literal">nullptr</span>),</span><br><span class="line">	depthImage(<span class="literal">nullptr</span>),</span><br><span class="line">	infraredImage(<span class="literal">nullptr</span>),</span><br><span class="line">	running(<span class="literal">false</span>),</span><br><span class="line">	quit(<span class="literal">false</span>),</span><br><span class="line">	signal_PointXYZ(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZI(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZRGB(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZRGBA(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">	setupDevice(device_id_, depth_mode_, color_format_, color_resolution_);</span><br><span class="line"></span><br><span class="line">	signal_PointXYZ = createSignal&lt;signal_KinectAzureDK_PointXYZ&gt;();</span><br><span class="line">	signal_PointXYZI = createSignal&lt;signal_KinectAzureDK_PointXYZI&gt;();</span><br><span class="line">	signal_PointXYZRGB = createSignal&lt;signal_KinectAzureDK_PointXYZRGB&gt;();</span><br><span class="line">	signal_PointXYZRGBA = createSignal&lt;signal_KinectAzureDK_PointXYZRGBA&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::KinectAzureDKGrabber::~KinectAzureDKGrabber() <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">	stop();</span><br><span class="line"></span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZ&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZI&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZRGB&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZRGBA&gt;();</span><br><span class="line"></span><br><span class="line">	thread.join();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dev)</span><br><span class="line">	&#123;</span><br><span class="line">		transformation.destroy();</span><br><span class="line">		dev.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::start()</span><br><span class="line">&#123;</span><br><span class="line">	dev = k4a::device::open(device_id);</span><br><span class="line">	dev.start_cameras(&amp;config);</span><br><span class="line">	calibration = dev.get_calibration(config.depth_mode, config.color_resolution);</span><br><span class="line">	transformation = k4a::transformation(calibration);</span><br><span class="line"></span><br><span class="line">	running = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	thread = <span class="built_in">std</span>::thread(&amp;KinectAzureDKGrabber::threadFunction, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">k4a::calibration pcl::KinectAzureDKGrabber::getCalibration()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> calibration;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::stop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">	quit = <span class="literal">true</span>;</span><br><span class="line">	running = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> pcl::KinectAzureDKGrabber::isRunning() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> running;</span><br><span class="line"></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pcl::KinectAzureDKGrabber::getName() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;KinectAzureDKGrabber: &quot;</span> + <span class="built_in">std</span>::to_string(device_id));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> pcl::KinectAzureDKGrabber::getFramesPerSecond() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> config.camera_fps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::setupDevice(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_)</span><br><span class="line">&#123;</span><br><span class="line">	device_id = device_id_;</span><br><span class="line"></span><br><span class="line">	config.camera_fps = K4A_FRAMES_PER_SECOND_30;</span><br><span class="line">	config.depth_mode = <span class="keyword">k4a_depth_mode_t</span>(depth_mode_);</span><br><span class="line">	config.color_format = <span class="keyword">k4a_image_format_t</span>(color_format_);</span><br><span class="line">	config.color_resolution = <span class="keyword">k4a_color_resolution_t</span>(color_resolution_);</span><br><span class="line">	config.synchronized_images_only = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::threadFunction()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (!quit)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">		k4a::capture capture;</span><br><span class="line">		<span class="keyword">if</span> (!dev.get_capture(&amp;capture, <span class="built_in">std</span>::chrono::milliseconds(<span class="number">0</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		depthImage = capture.get_depth_image();</span><br><span class="line">		<span class="keyword">if</span> (depthImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get depth image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		colorImage = capture.get_color_image();</span><br><span class="line">		<span class="keyword">if</span> (colorImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get color image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		infraredImage = capture.get_ir_image();</span><br><span class="line">		<span class="keyword">if</span> (infraredImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get IR image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		lock.unlock();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZ-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZ-&gt;<span class="keyword">operator</span>()(convertDepthToPointXYZ());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZI-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZI-&gt;<span class="keyword">operator</span>()(convertInfraredDepthToPointXYZI());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZRGB-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZRGB-&gt;<span class="keyword">operator</span>()(convertRGBDepthToPointXYZRGB());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZRGBA-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZRGBA-&gt;<span class="keyword">operator</span>()(convertRGBADepthToPointXYZRGBA());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr pcl::KinectAzureDKGrabber::convertDepthToPointXYZ()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZ&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZ point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZI&gt;::Ptr pcl::KinectAzureDKGrabber::convertInfraredDepthToPointXYZI()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZI&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZI&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_infrared_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_infrared_image = k4a::image::create(K4A_IMAGE_FORMAT_IR16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_color_camera(infraredImage, &amp;transformed_infrared_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">int16_t</span>* transformed_infrared_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)transformed_infrared_image.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZI point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		point.intensity = transformed_infrared_image_data[i];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZRGB&gt;::Ptr pcl::KinectAzureDKGrabber::convertRGBDepthToPointXYZRGB()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZRGB&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZRGB&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">uint8_t</span>* color_image_data = colorImage.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZRGB point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		point.b = color_image_data[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">		point.g = color_image_data[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">		point.r = color_image_data[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">		<span class="keyword">uint8_t</span> alpha = color_image_data[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">		<span class="keyword">if</span> (point.b == <span class="number">0</span> &amp;&amp; point.g == <span class="number">0</span> &amp;&amp; point.r == <span class="number">0</span> &amp;&amp; alpha == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::Ptr pcl::KinectAzureDKGrabber::convertRGBADepthToPointXYZRGBA(<span class="comment">/*RGBQUAD* colorBuffer, UINT16* depthBuffer*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZRGBA&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">uint8_t</span>* color_image_data = colorImage.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZRGBA point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		point.b = color_image_data[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">		point.g = color_image_data[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">		point.r = color_image_data[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">		point.a = color_image_data[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.b == <span class="number">0</span> &amp;&amp; point.g == <span class="number">0</span> &amp;&amp; point.r == <span class="number">0</span> &amp;&amp; point.a == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkerLess AR Cube Demo 总结</title>
    <url>/2020/10/07/MarkerLess-AR-Cube-Demo-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MarkerLess-AR-Cube-Demo-总结"><a href="#MarkerLess-AR-Cube-Demo-总结" class="headerlink" title="MarkerLess AR Cube Demo 总结"></a>MarkerLess AR Cube Demo 总结</h1><blockquote>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/98848510">https://blog.csdn.net/qq_33446100/article/details/98848510</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/iframe/aruco06.gif" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>根据<a href="https://junlu.club/2020/09/21/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86-2/">ARUCO实现AR梳理-2</a>中的叙述，可以知道，以OpenGL为最后显示平台的AR实现方案，最终要考虑的问题是，<strong>如何获得相机的外部参数？</strong></p>
<p>如果知道了相机的外部参数，即可将其带入<strong>View Matrix</strong>；加上<strong>Model Matrix</strong>可以人为指定，<strong>Projection Matrix</strong>是由相机内参定义的，一切将水到渠成。</p>
<h2 id="Markerless"><a href="#Markerless" class="headerlink" title="Markerless"></a>Markerless</h2><p>AR可以分为基于标志物的AR，与基于无标志物的AR，基于无标志物的AR又可以分为很多种，本文实现的是利用RGB单目摄像头，利用自然特征实现AR。</p>
<h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><ol>
<li>使用<strong>SURF</strong>（SpeedUp Robust Features 加速版的具有鲁棒性的特征）特征点检测算法检测事先准备的图像的特征点</li>
<li>使用<strong>SURF</strong>特征点检测算法，检测相机拍到的实时图像</li>
<li>使用<strong>FLANN</strong>（Fast Library for Approximate Nearest Neighbors 快速最近邻逼近搜索函数库）特征点匹配算法，将事先准备好的图像的特征点，与相机实时捕获的图像特征点作匹配</li>
<li>根据<strong>FLANN</strong>，使用<strong>findHomography</strong>函数，得出单应性矩阵，将事先准备好的图像的四个角点，映射到相机捕获的图像上</li>
<li>使用<strong>SolvePnP</strong>函数估计相机位姿，即相机外参</li>
<li>代入<strong>View Matrix</strong></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>视觉SLAM14讲总结-0</title>
    <url>/2020/10/06/%E8%A7%86%E8%A7%89SLAM14%E8%AE%B2%E6%80%BB%E7%BB%93-0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="视觉SLAM14讲总结-0"><a href="#视觉SLAM14讲总结-0" class="headerlink" title="视觉SLAM14讲总结-0"></a>视觉SLAM14讲总结-0</h1><blockquote>
<p>第2讲，初始SLAM</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总结一下自己看过的</p>
<h2 id="什么是视觉SLAM？"><a href="#什么是视觉SLAM？" class="headerlink" title="什么是视觉SLAM？"></a>什么是视觉SLAM？</h2><p><strong>SLAM</strong>：Simultaneous Localization and Mapping</p>
<p>同时定位与地图构建</p>
<p><strong>标准定义：</strong>搭载特定传感器的主体，在没有环境先验信息的情况下，于运动过程中建立环境的模型，同时估计自己的运动</p>
<p><strong>视觉SLAM</strong>：指的是传感器是相机</p>
<h2 id="视觉SLAM的经典框架"><a href="#视觉SLAM的经典框架" class="headerlink" title="视觉SLAM的经典框架"></a>视觉SLAM的经典框架</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201006160322.png" alt=""></p>
<ol>
<li>传感器信息读取</li>
<li>视觉里程计</li>
<li>后端优化</li>
<li>回环检测</li>
<li>建图</li>
</ol>
<h2 id="视觉里程计"><a href="#视觉里程计" class="headerlink" title="视觉里程计"></a>视觉里程计</h2><h3 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h3><p>如何确定相机的运动？</p>
<p>通过相邻帧之间的图像，估计相机的运动，恢复场景的空间结构</p>
<h3 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h3><p>视觉里程计是SLAM的关键，如果忽略漂移等问题，视觉里程计就可以实现SLAM的目标</p>
<h3 id="涉及领域"><a href="#涉及领域" class="headerlink" title="涉及领域"></a>涉及领域</h3><p>计算机视觉，如特征匹配，特征提取</p>
<h2 id="后端优化"><a href="#后端优化" class="headerlink" title="后端优化"></a>后端优化</h2><h3 id="主要任务-1"><a href="#主要任务-1" class="headerlink" title="主要任务"></a>主要任务</h3><p>处理SLAM过程中的噪声问题，从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大</p>
<p>视觉里程计作出的相机运动估计，有多大的噪声？我们对这个估计又有多大的自信？</p>
<h3 id="涉及领域-1"><a href="#涉及领域-1" class="headerlink" title="涉及领域"></a>涉及领域</h3><p>滤波，非线性优化</p>
<h2 id="回环检测"><a href="#回环检测" class="headerlink" title="回环检测"></a>回环检测</h2><h3 id="主要任务-2"><a href="#主要任务-2" class="headerlink" title="主要任务"></a>主要任务</h3><p>解决位置估计随着时间漂移的问题</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>利用相机，判断图像的相似性，判断是否来过此处</p>
]]></content>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows+pcl1.11.1+vs2019环境配置</title>
    <url>/2020/10/05/Windows-pcl1-11-1-vs2019%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Windows-pcl1-11-1-vs2019环境配置"><a href="#Windows-pcl1-11-1-vs2019环境配置" class="headerlink" title="Windows+pcl1.11.1+vs2019环境配置"></a>Windows+pcl1.11.1+vs2019环境配置</h1><blockquote>
<p>参考博文【若有侵权，立即删除】</p>
<p><a href="https://blog.csdn.net/qq_36686437/article/details/106347482">https://blog.csdn.net/qq_36686437/article/details/106347482</a></p>
<p><a href="https://blog.csdn.net/qq_36686437/article/details/108803098">https://blog.csdn.net/qq_36686437/article/details/108803098</a></p>
<p><a href="https://blog.csdn.net/zhangxz259/article/details/85683201">https://blog.csdn.net/zhangxz259/article/details/85683201</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>想学点云处理方面的知识了，就配一个pcl</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="下载PCL1-11-0"><a href="#下载PCL1-11-0" class="headerlink" title="下载PCL1.11.0"></a>下载PCL1.11.0</h3><p>Github下载地址：<a href="https://github.com/PointCloudLibrary/pcl/releases">https://github.com/PointCloudLibrary/pcl/releases</a><br>下载红框内的两个文件<br><img src="https://img-blog.csdnimg.cn/20200526085007336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="安装PCL1-11-0"><a href="#安装PCL1-11-0" class="headerlink" title="安装PCL1.11.0"></a>安装PCL1.11.0</h3><p><strong>安装“PCL-1.11.0-AllInOne-msvc2019-win64.exe”。</strong></p>
<ul>
<li>选择第二个，自动添加系统变量<br>  <img src="https://img-blog.csdnimg.cn/20200526085600527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面00"></li>
<li>安装路径选择D盘，系统会自动新建PCL 1.11.0文件夹。<br>  <img src="https://img-blog.csdnimg.cn/20200526085833607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面01"></li>
<li><strong>安装完成之后打开文件夹 D:\PCL 1.11.0\3rdParty\OpenNI2<br>  双击OpenNI-Windows-x64-2.2 选择路径（D:\PCL 1.11.0\3rdParty\OpenNI2）安装即可。</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090128836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面02"></li>
<li><strong>全部安装完成后，将pcl-1.11.0-pdb-msvc2019-win64.zip解压后的.pdb文件拷贝到（D:\PCL 1.11.0\bin）中。</strong></li>
<li><strong>设置环境变量：右击计算机—属性—高级系统设置—高级—环境变量—用户变量—Path—编辑!</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090605288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面03"></li>
<li>如下图所示。<br>  <img src="https://img-blog.csdnimg.cn/20200526090646241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面04"><br>  在这里直接给出，防止出现错误（依次添加）：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%PCL_ROOT%\<span class="number">3</span>rdParty\FLANN\bin</span><br><span class="line">%PCL_ROOT%\<span class="number">3</span>rdParty\VTK\bin</span><br><span class="line">%OPENNI2_REDIST64%</span><br><span class="line">%OPENNI2_LIB64%</span><br><span class="line">%OPENNI2_INCLUDE64%</span><br></pre></td></tr></table></figure>
<p>到此，环境变量的配置完成。</p>
<h3 id="VS2019相关设置"><a href="#VS2019相关设置" class="headerlink" title="VS2019相关设置"></a>VS2019相关设置</h3><ul>
<li><strong>新建空项目</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090823909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面00"></li>
<li>解决方案配置选择Debug，解决方案平台选择x64。<br>  <img src="https://img-blog.csdnimg.cn/20200526103129751.png" alt="VS配置界面01"></li>
<li><strong>新建一个C++源文件</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526103415256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面02"></li>
<li><strong>右击新建的项目—属性：打开属性表</strong></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200526103657409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面03"></p>
<ul>
<li><strong>配置属性—调试—环境—添加：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PATH=D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\FLANN\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\VTK\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\OpenNI2\Tools</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526104101644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面04"></p>
<ul>
<li><strong>C/C++—语言—符合模式：否</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526104535843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面05"></li>
<li><strong>C/C++—常规—SDL检查：否</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526104722251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面06"></li>
</ul>
<h3 id="配置PCL1-11-0"><a href="#配置PCL1-11-0" class="headerlink" title="配置PCL1.11.0"></a>配置PCL1.11.0</h3><p><strong>为了使用方便，这里使用添加属性表的形式。注意：添加属性表的方式，需要再次将属性表内的SDL检测设置为：否。否则将报如下错误：</strong><br><img src="https://img-blog.csdnimg.cn/20200925194241929.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li><p><strong>视图—其他窗口—属性管理器</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526091549978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p><strong>打开属性管理器之后，选择Debug|X64—单击Debug|X64左侧倒三角—右击选择 添加型项目属性表</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526092104635.png" alt="在这里插入图片描述"></p>
</li>
<li><strong>项目属性表命名</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526092333946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><strong>双击新添加的属性表—VC++目录—包含目录，添加7个include路径</strong><br>  <img src="https://img-blog.csdnimg.cn/2020052609260194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<p>具体添加的include路径如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\include\pcl<span class="number">-1.11</span></span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Boost\include\boost<span class="number">-1</span>_73</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Eigen\eigen3</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\FLANN\include</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Qhull\include</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\include\vtk<span class="number">-8.2</span></span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\OpenNI2\Include</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>VC++目录—库目录，添加6个lib路径</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526093426340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  具体添加的lib路径如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Boost\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\FLANN\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Qhull\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\OpenNI2\Lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\lib</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526093806871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>C/C++—预处理器—预处理器定义—添加：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOST_USE_WINDOWS_H</span><br><span class="line">NOMINMAX</span><br><span class="line">_CRT_SECURE_NO_DEPRECATE</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526094047662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>链接器—输入—附加依赖项——添加PCL和VTK的相关lib文件。我用的Debug版本。</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526094504741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  附加依赖项具体添加内容如下：（文章末尾 <strong>附录</strong>中 给出批量获取附加依赖项的方法）<br>  输入到属性表里边的时候必须一行对应一个lib才能成功。<br>  Debug版本</li>
<li><strong>保存属性表</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526102730254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  下一次需要创建新项目的时候，只需进行第三步 <strong>VS2019相关设置</strong> 的操作，然后打开属性管理器，添加现有属性表，找到之前保存的属性表添加进去即可。<br>  <img src="https://img-blog.csdnimg.cn/20200526105924435.png" alt="在这里插入图片描述"><br>  ![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20200526110148988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20200526110148988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70</a></li>
</ul>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/octree/octree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span><br><span class="line">&#123;</span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">	<span class="comment">// 创建点云数据</span></span><br><span class="line">	cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">	cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pcl::<span class="function">octree::OctreePointCloudSearch&lt;pcl::PointXYZ&gt; <span class="title">octree</span><span class="params">(<span class="number">0.1</span>)</span></span>;</span><br><span class="line">	octree.setInputCloud(cloud);</span><br><span class="line">	octree.addPointsFromInputCloud();</span><br><span class="line">	pcl::PointXYZ searchPoint;</span><br><span class="line">	searchPoint.x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//半径内近邻搜索</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pointIdxRadiusSearch;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;pointRadiusSquaredDistance;</span><br><span class="line">	<span class="keyword">float</span> radius = <span class="number">256.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (octree.radiusSearch(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 初始化点云可视化对象</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt;viewer(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">&quot;显示点云&quot;</span>));</span><br><span class="line">	viewer-&gt;setBackgroundColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  <span class="comment">//设置背景颜色为黑色</span></span><br><span class="line">	<span class="comment">// 对点云着色可视化 (red).</span></span><br><span class="line">	pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt;target_color(cloud, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	viewer-&gt;addPointCloud&lt;pcl::PointXYZ&gt;(cloud, target_color, <span class="string">&quot;target cloud&quot;</span>);</span><br><span class="line">	viewer-&gt;setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">1</span>, <span class="string">&quot;target cloud&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 等待直到可视化窗口关闭</span></span><br><span class="line">	<span class="keyword">while</span> (!viewer-&gt;wasStopped())</span><br><span class="line">	&#123;</span><br><span class="line">		viewer-&gt;spinOnce(<span class="number">100</span>);</span><br><span class="line">		boost::this_thread::sleep(boost::posix_time::microseconds(<span class="number">1000</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出下图（数字可能不同），则表示安装成功！</strong><br><img src="https://img-blog.csdnimg.cn/20200526110936338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">win+r调出“运行”窗口并输出cmd</span><br><span class="line">输入：cd /d D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\lib 回车 （填自己的路径）</span><br><span class="line">输入：dir /b *.lib *&gt;<span class="number">0.</span>txt 回车 </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526112537554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时打开你对应路劲的目录，多了一个0.txt文件，里面存了你这个文件夹里所有链接库名字。<br>由于每一个Debug版本和Release版本的链接库是挨在一起的。写一个读取文档并对其分别保存就行了。<br>具体代码如下：（主要功能是读取一个txt文件，将其中奇数行和偶数行单独输出到新的txt文档。）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ifstream txtfile;<span class="comment">//打开读取的文件</span></span><br><span class="line">	ofstream txt01;<span class="comment">//保存的文件</span></span><br><span class="line">	ofstream txt02;<span class="comment">//保存的文件</span></span><br><span class="line">	<span class="built_in">string</span> temp;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于判断奇偶</span></span><br><span class="line"></span><br><span class="line">	txtfile.open(<span class="string">&quot;0.txt&quot;</span>, ios::in);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span> (!txtfile.eof())            <span class="comment">// 若未到文件结束一直循环</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		getline(txtfile, temp);<span class="comment">//一行一行读取</span></span><br><span class="line">		<span class="keyword">if</span> (index%<span class="number">2</span>==<span class="number">0</span>)<span class="comment">//判断除以2的余数，即为奇偶的判断</span></span><br><span class="line">		&#123;</span><br><span class="line">			txt01.open(<span class="string">&quot;1.txt&quot;</span>, ios::app);</span><br><span class="line">			txt01 &lt;&lt; temp;</span><br><span class="line">			txt01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			txt01.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			txt02.open(<span class="string">&quot;2.txt&quot;</span>, ios::app);</span><br><span class="line">			txt02 &lt;&lt; temp;</span><br><span class="line">			txt02 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			txt02.close();</span><br><span class="line">		&#125;</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">	txtfile.close();   <span class="comment">//关闭文件</span></span><br><span class="line">	txtfile.close();</span><br><span class="line">	txt01.close();</span><br><span class="line">	txt02.close();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-2021计划表</title>
    <url>/2020/09/27/2020-2021%E8%AE%A1%E5%88%92%E8%A1%A8/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="63ade692bfc9452750e1dc70419cc93fafc25a7fcff907678d32164cec1907b8"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>摄像机模型详解</title>
    <url>/2020/09/26/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="摄像机几何模型详解"><a href="#摄像机几何模型详解" class="headerlink" title="摄像机几何模型详解"></a>摄像机几何模型详解</h1><h2 id="针孔模型-amp-透镜"><a href="#针孔模型-amp-透镜" class="headerlink" title="针孔模型&amp;透镜"></a>针孔模型&amp;透镜</h2><h3 id="问题引出-我们如何记录世界？"><a href="#问题引出-我们如何记录世界？" class="headerlink" title="问题引出 - 我们如何记录世界？"></a>问题引出 - 我们如何记录世界？</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926200942.png" alt="图0 如何记录世界？"></p>
<p>如果按照上面图片的设计，物体的每一个点，都会在胶片的同一个地方，留下自己的信息；由此胶片上的每一个地方都是物体每一点的信息集合，根本无法记录现实物体。</p>
<h3 id="改进方案-针孔摄像机"><a href="#改进方案-针孔摄像机" class="headerlink" title="改进方案 - 针孔摄像机"></a>改进方案 - 针孔摄像机</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201249.png" alt="图1 针孔摄像机"></p>
<p>与原有的设计相比，此改进方案增加了一个隔板，只留下了一个孔；正如图上所标注的，光线穿过针孔，物体的每一个点，都在胶片的不同位置留下了自己的信息，不会像之前设计的胶片信息杂乱混合。</p>
<p>胶片就这样记录下了物体的信息。</p>
<h3 id="针孔摄像机模型"><a href="#针孔摄像机模型" class="headerlink" title="针孔摄像机模型"></a>针孔摄像机模型</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201625.png" alt="图2 针孔摄像机模型"></p>
<p>图中的各个参数的含义如下：</p>
<blockquote>
<p><strong>f</strong> ：摄像机模型的<strong>焦距</strong> </p>
<p><strong>O</strong> ：针孔，亦称<strong>光圈</strong>/<strong>摄像机中心</strong> </p>
</blockquote>
<p>像平面与虚拟像平面相对于摄像机中心对称，唯一的不同是，虚拟像平面成像是正的，我们一般都是讨论虚拟像平面；像平面成像是倒着的。</p>
<h3 id="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）"><a href="#相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）" class="headerlink" title="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）"></a><strong>相机坐标系下的空间点</strong>与<strong>像平面坐标系上的平面点</strong>之间的映射（1）</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926202434.png" alt="图3 摄像机坐标系与像平面坐标系之间，点的映射关系"></p>
<p>上图各个符号的含义如下：</p>
<blockquote>
<p><strong>P</strong>：真实物理空间中的某一点，在摄像机坐标系下，其坐标为（x，y，z）</p>
<p><strong>O</strong>：摄像机坐标系的原点</p>
<p><strong>i，j，k</strong>：摄像机坐标系的单位向量，构成坐标轴</p>
<p><strong>f</strong>：摄像机模型的焦距</p>
<p><strong>C’</strong>：像平面坐标系的原点</p>
<p><strong>P’</strong>：真实空间点P在成像平面上成像的点，在像平面坐标系下，其坐标为（x’，y’）</p>
</blockquote>
<p>以-i方向观察上图，可以简化为：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926203254.png" alt="图4 以-i方向观察图4"></p>
<p>采用相似三角形法则，可以得出：</p>
<script type="math/tex; mode=display">
\frac{y'}{f}=\frac{y}{z}\Rightarrow y'=f\frac{y}{z}</script><p>又因为$ P=\left[\begin{array}{l}<br>x \\<br>y \\<br>z<br>\end{array}\right] $，$P^{\prime}=\left[\begin{array}{l}<br>x^{\prime} \\<br>y^{\prime}<br>\end{array}\right]$；</p>
<p>所以：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{1}
x^{\prime}=f \frac{x}{z} \\
y^{\prime}=f \frac{y}{z}
\end{array}\right.
\tag {公式1}</script><h3 id="透镜"><a href="#透镜" class="headerlink" title="透镜"></a>透镜</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201249.png" alt="图5 针孔摄像机"></p>
<p>光圈，亦称针孔；</p>
<p>光圈的尺寸大小与成像的关系：</p>
<blockquote>
<p>光圈越大，成像越模糊，但是也越亮</p>
<p>光圈越小，成像越清晰，但是也越暗</p>
</blockquote>
<p>光圈越大，穿过光圈的光线越多，因此也更亮，但是随着光圈的增大，物体上不同的，但是相近的位置点，都会发射光线到达胶片上的同一点，因此成像也越模糊。</p>
<p>光圈越小，穿过光圈的光线越少，因此也更暗，但是随着光圈的减小，物体上不同的，发射光线到达胶片上的同一点的概率也越小，因此成像也越模糊。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926211838.png" alt="图6 光圈尺寸与成像的关系"></p>
<p>毫无疑问，我们最终想要的是既明亮又清晰的图像，如何能在光圈小的情况下，增大亮度，即让物体同一点的光线到胶片上同一点的光线数量越多？</p>
<p>答案是<strong>增加透镜</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212145.png" alt="图7 增加透镜"></p>
<p>透镜将物体上同一点的多条光线聚集到胶片上的同一点，增大了亮度</p>
<p><strong>透镜焦距</strong>的定义：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212659.png" alt="图8 透镜焦距的定义"></p>
<blockquote>
<p>f：透镜的焦距</p>
</blockquote>
<h3 id="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）"><a href="#相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）" class="headerlink" title="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）"></a><strong>相机坐标系下的空间点</strong>与<strong>像平面坐标系上的平面点</strong>之间的映射（2）</h3><p>将上述讨论的透镜，加入模型中：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212904.png" alt="图9 透镜加入模型"></p>
<p>参数说明：</p>
<blockquote>
<p><strong>f</strong>：透镜的焦距</p>
<p><strong>$z_0$</strong>：透镜的焦点到胶片的距离</p>
<p><strong>Z’</strong>：摄像机模型的焦距</p>
</blockquote>
<p>上述参数满足：$Z’=f+Z_0$</p>
<p>以后，以字母f代表摄像机模型的焦距Z‘</p>
<h3 id="像平面坐标系下的平面点-在像平面坐标系与像素平面坐标系的转换"><a href="#像平面坐标系下的平面点-在像平面坐标系与像素平面坐标系的转换" class="headerlink" title="像平面坐标系下的平面点 在像平面坐标系与像素平面坐标系的转换"></a>像平面坐标系下的平面点 在像平面坐标系与像素平面坐标系的转换</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926215929.png" alt="图10 像坐标系与像素坐标系" style="zoom:70%;" /></p>
<blockquote>
<p><strong>像素坐标系</strong>：</p>
<ul>
<li>以胶片的左下角为坐标原点的二维坐标系</li>
<li>单位是像素</li>
</ul>
<p><strong>像坐标系</strong>：</p>
<ul>
<li>同样成为像平面坐标系，以胶片中心为C’为坐标原点</li>
<li>单位是米</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926220338.png" alt="图11 示意图"></p>
<h3 id="理想情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换"><a href="#理想情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换" class="headerlink" title="理想情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换"></a>理想情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换</h3><p>此转换亦为3D与2D之间的转换；</p>
<p>坐标转换为：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(f k \frac{x}{z}+c_{x}, f l \frac{y}{z}+c_{y}\right)


\tag{公式3}</script><script type="math/tex; mode=display">
\alpha = fk</script><script type="math/tex; mode=display">
\beta = fl</script><blockquote>
<p><strong>k,l</strong> 单位为pixel/m</p>
<p><strong>f</strong> 单位为m</p>
<p><strong>$\alpha，\beta，c_x$ </strong>单位：pixel</p>
</blockquote>
<p>由于上述变换是非线性变换，后续处理采用齐次坐标的概念</p>
<hr>
<p><strong>齐次坐标</strong></p>
<p>欧几里得空间 -&gt; 齐次坐标空间：</p>
<ul>
<li>图像点的齐次坐标：</li>
</ul>
<script type="math/tex; mode=display">
(x, y) \Rightarrow\left[\begin{array}{l}
x \\
y \\
1
\end{array}\right]</script><ul>
<li>空间点的齐次坐标：</li>
</ul>
<script type="math/tex; mode=display">
(x, y, z) \Rightarrow\left[\begin{array}{l}
x \\
y \\
z \\
1
\end{array}\right]</script><p>齐次坐标空间 -&gt; 欧几里得空间：</p>
<ul>
<li>图像点：</li>
</ul>
<script type="math/tex; mode=display">
\left[\begin{array}{l}
x \\
y \\
w
\end{array}\right] \Rightarrow(x / w, y / w)</script><ul>
<li>空间点：</li>
</ul>
<script type="math/tex; mode=display">
\left[\begin{array}{l}
x \\
y \\
z \\
w
\end{array}\right] \Rightarrow(x / w, y / w, z / w)</script><hr>
<p>因为：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(f k \frac{x}{z}+c_{x}, f l \frac{y}{z}+c_{y}\right)


\tag{公式3}</script><script type="math/tex; mode=display">
\alpha = fk</script><script type="math/tex; mode=display">
\beta = fl</script><p>所以：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(\alpha \frac{x}{z}+c_{x}, \beta \frac{y}{z}+c_{y}\right)


\tag{公式4}</script><script type="math/tex; mode=display">
u =\alpha \frac{x}{z}+c_{x}</script><script type="math/tex; mode=display">
v=\beta \frac{y}{z}+c_{y}</script><blockquote>
<p>u，v 分别是像素坐标系下空间点P在成像平面上的坐标表示</p>
<p>x，y，z 分别是相机坐标系下空间点P的坐标表示</p>
</blockquote>
<p>使用齐次坐标表示 $\left.(x, y, z) \rightarrow(\alpha \frac{x}{z}+c_{x}, \beta \frac{y}{z}+c_{y}\right)$ ：</p>
<script type="math/tex; mode=display">
(\alpha \frac{x}{z}+c_X,\beta \frac{y}{z}+c_y) \rightarrow{转为齐次坐标}\rightarrow\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}</script><script type="math/tex; mode=display">
\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\tag{公式5}</script><p>记像平面上的坐标点为<strong>P’</strong></p>
<p>则<strong>公式5</strong>可以写为：</p>
<script type="math/tex; mode=display">
P'=
\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><script type="math/tex; mode=display">
M =
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}</script><blockquote>
<p>$\alpha，\beta，c_x，c_y$全部属于相机内部参数</p>
<p>M是相机坐标系下空间点P到像素坐标系下点P’之间的投影矩阵，3x4</p>
</blockquote>
<h3 id="实际情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换"><a href="#实际情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换" class="headerlink" title="实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换"></a>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换</h3><p>由于现实生活中，相机会有畸变问题，实际的像素坐标系如下所示：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001102638.png" alt="图12 实际畸变"></p>
<p>修正理想情况下的转换关系：</p>
<script type="math/tex; mode=display">
P'=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><script type="math/tex; mode=display">
M =
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\tag{公式6}</script><blockquote>
<p>$\alpha，\beta，c_x，c_y ，\theta$全部属于相机内部参数</p>
<p>M 共有5个自由度，即5个未知量</p>
<p>M是相机坐标系下空间点P到像素坐标系下点P’之间的投影矩阵，3x4</p>
</blockquote>
<p>从M中取出前3列，作为一个3x3的新矩阵，称为<strong>相机内参矩阵K</strong></p>
<script type="math/tex; mode=display">
K=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x  \\
0 & \frac{\beta}{sin\theta} & c_y  \\
0 & 0 & 1  \\
\end{bmatrix}</script><p>因此，<strong>公式6</strong>可以表示为如下形式：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP
\tag{公式7}</script><blockquote>
<p>E 为单位矩阵</p>
<p>K 为内参矩阵</p>
<p>M 为相机坐标系下空间点到像素坐标系下平面点的投影矩阵</p>
</blockquote>
<h3 id="世界坐标系下的空间物体-向-相机坐标系下的空间物体-的转换"><a href="#世界坐标系下的空间物体-向-相机坐标系下的空间物体-的转换" class="headerlink" title="世界坐标系下的空间物体 向 相机坐标系下的空间物体 的转换"></a>世界坐标系下的空间物体 向 相机坐标系下的空间物体 的转换</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001105119.png" alt="图13 示意图"></p>
<script type="math/tex; mode=display">
P=
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1  \\
\end{bmatrix}
=
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
P_w
\tag{公式8}</script><blockquote>
<p>R，T：相机外参数，表征相机在世界坐标系中的位姿</p>
</blockquote>
<h3 id="综合前面所有，从-世界坐标系空间点P-到-像素坐标系成像点P’-的转换关系"><a href="#综合前面所有，从-世界坐标系空间点P-到-像素坐标系成像点P’-的转换关系" class="headerlink" title="综合前面所有，从 世界坐标系空间点P 到 像素坐标系成像点P’ 的转换关系"></a>综合前面所有，从 世界坐标系空间点P 到 像素坐标系成像点P’ 的转换关系</h3><p>综合<strong>公式7</strong>与<strong>公式8</strong>：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
P_w
=
K
\begin{bmatrix}
\ R & T \\
\end{bmatrix}
P_w
\\\\
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1 \\
\end{bmatrix}
\\\\
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1 \\
\end{bmatrix}
\tag{公式9}</script><blockquote>
<p>[ R  T ] 称为相机外参矩阵，3x4，6个自由度</p>
<p>K：称为相机内参矩阵，3x3，5个自由度</p>
<p>总体有11个自由度（未知量）</p>
</blockquote>
<p>设</p>
<script type="math/tex; mode=display">
M  
= K
\begin{bmatrix}
\ R & T \\
\end{bmatrix}</script><blockquote>
<p>M 为世界坐标系与像素坐标系之间的透视投影矩阵</p>
</blockquote>
<p>所以结合<strong>公式9</strong>：</p>
<script type="math/tex; mode=display">
p'=K
\begin{bmatrix}
\ R & T \\ 
\end{bmatrix}
P_w
=
M P_w
=
\begin{bmatrix}
\ m1 \\
\ m2 \\
\ m3 \\
\end{bmatrix}
P_w</script><p>转换为欧几里得空间：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
\ u \\
\ v \\
\end{bmatrix}
=
\begin{bmatrix}
\ \frac{m_1 P_w}{m_3 P_w} \\
\ \frac{m_2 P_w}{m_3 P_w} \\
\end{bmatrix}
\tag{公式10}</script><h2 id="相机标定"><a href="#相机标定" class="headerlink" title="相机标定"></a>相机标定</h2><h3 id="相机标定的目的"><a href="#相机标定的目的" class="headerlink" title="相机标定的目的"></a>相机标定的目的</h3><p>求解相机的内外参数</p>
<h3 id="为什么相机标定很重要？"><a href="#为什么相机标定很重要？" class="headerlink" title="为什么相机标定很重要？"></a>为什么相机标定很重要？</h3><p>相机的内外参数描述了三维世界到二维像素的映射关系</p>
<h3 id="标定原理"><a href="#标定原理" class="headerlink" title="标定原理"></a>标定原理</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001152618.png" alt="图14 标定装置"></p>
<blockquote>
<p>已知条件：</p>
<ul>
<li>世界坐标系中$P_1，P_2…P_n$的位置</li>
<li>像素坐标系中$p_1，p_2…p_n$的位置</li>
</ul>
<p>求解目标：</p>
<ul>
<li>摄像机内外参数</li>
</ul>
</blockquote>
<p>结合<strong>公式10</strong>，各个点的坐标表示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
\ u_i \\
\ v_i \\
\end{bmatrix}
=
\begin{bmatrix}
\ \frac{m_1 P_i}{m_3 P_i} \\
\ \frac{m_2 P_i}{m_3 P_i} \\
\end{bmatrix}</script><script type="math/tex; mode=display">
\begin{array}{l}
u_{i}=\frac{m_{1} P_{i}}{m_{3} P_{i}} \rightarrow u_{i}\left(m_{3} P_{i}\right)=m_{1} P_{i} \rightarrow u_{i}\left(m_{3} P_{i}\right)-m_{1} P_{i}=0 \\\\
v_{i}=\frac{m_{2} P_{i}}{m_{3} P_{i}} \rightarrow v_{i}\left(m_{3} P_{i}\right)=m_{2} P_{i} \rightarrow v_{i}\left(m_{3} P_{i}\right)-m_{2} P_{i}=0
\end{array}</script><blockquote>
<p>一对点（世界坐标系中的点和对应的像素坐标系中的点）可以写出2个方程</p>
<p>共有11个未知量</p>
<p>所以要使用至少6对点</p>
</blockquote>
<p>在实际操作中，使用多于6对点获得更加鲁棒的结果。</p>
<p>方程组：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{c}
u_{1}\left(m_{3} P_{1}\right)-m_{1} P_{1}=0 \\
v_{1}\left(m_{3} P_{1}\right)-m_{2} P_{1}=0 \\
\vdots \\\\
u_{i}\left(m_{3} P_{i}\right)-m_{1} P_{i}=0 \\
v_{i}\left(m_{3} P_{i}\right)-m_{2} P_{i}=0 \\
\vdots \\\\
u_{n}\left(m_{3} P_{n}\right)-m_{1} P_{n}=0 \\
v_{n}\left(m_{3} P_{n}\right)-m_{2} P_{n}=0
\end{array}\right.</script><p>化为齐次线性方程组，如下：</p>
<script type="math/tex; mode=display">
Pm=0</script><script type="math/tex; mode=display">
P \stackrel{\text { def }}{=}\left(\begin{array}{ccc}
P_{1}^{T} & 0^{T} & -u_{1}P_{1}^{T} \\
0^{T} & P_{1}^{T} & -v_{1} P_{1}^{T} \\
& \vdots & \\
P_{n}^{T} & 0^{T} & -u_{n} P_{n}^{T} \\
0^{T} & P_{n}^{T} & -v_{n} P_{n}^{T}
\end{array}\right)_{2 n \times 12}</script><script type="math/tex; mode=display">
m \stackrel{\text { def }}{=}\left(\begin{array}{l}
\mathrm{m}_{1} ^{T} \\
\mathrm{m}_{2}^{T} \\
\mathrm{m}_{3}^{T}
\end{array}\right)</script><p>方程组个数：2n</p>
<p>未知参数：11</p>
<p>求解超定方程组</p>
<ul>
<li>0总是一个解，不存在非0解</li>
</ul>
<p>求解目标：（最小二乘法）</p>
<script type="math/tex; mode=display">
\begin{array}{c}
\min _{\boldsymbol{m}}\|\boldsymbol{P} \boldsymbol{m}\| \\
\text { s.t. }\|\boldsymbol{m}\|=1
\end{array}</script>]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>相机模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Aruco实现AR梳理_2</title>
    <url>/2020/09/21/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Aruco-实现AR过程梳理-2"><a href="#Aruco-实现AR过程梳理-2" class="headerlink" title="Aruco 实现AR过程梳理_2_"></a>Aruco 实现AR过程梳理_2_</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://junlu.club/2020/09/14/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86/">上一篇</a>说的比较不系统，而且有一些问题没有说清楚，这一篇将系统的整理一下OpenCV，OpenGL，Aruco的具体分工，以及一些疑问。</p>
<h2 id="目标效果"><a href="#目标效果" class="headerlink" title="目标效果"></a>目标效果</h2><p><img src="/iframe/aruco04.gif" alt=""></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和之前的一篇一样</p>
<blockquote>
<p><strong>OpenGL的世界中有虚拟相机，现实世界中有真实相机，只要将两个世界的世界坐标重合，相机位置重合，分别渲染虚拟模型与真实场景，即可达到AR效果</strong></p>
</blockquote>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="OpenCV与Aruco"><a href="#OpenCV与Aruco" class="headerlink" title="OpenCV与Aruco"></a>OpenCV与Aruco</h3><ul>
<li>将真实相机捕获的画面，传递给OpenGL，用作背景</li>
<li>相机标定，将真实相机的内参标定出来</li>
</ul>
<h3 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h3><ul>
<li>将真实画面，正交投影至矩形中，充当背景</li>
<li>定义虚拟的Cube顶点</li>
<li>生成OpenGL窗口</li>
<li>Cube经历的变换为 <em>MVP（model transform, view transform, projection transform）</em>变换</li>
</ul>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul>
<li><p>如何将真实的世界坐标系与OpenGL的世界坐标系重合呢？如何将相机位置重合呢？</p>
<p>OpenGL中，相机的位置是固定不变的，我们看到的永远是相机看到的，所以，只要清楚相机与世界坐标系的转换矩阵，即View Matrix，就可以将世界坐标系重合了。</p>
</li>
<li><p>Aruco的作用是什么呢？</p>
<p>获取真实相机相对于Marker的位姿（相机外参），传给OpenGL</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Aruco</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>关于AR键盘</title>
    <url>/2020/09/19/%E5%85%B3%E4%BA%8EAR%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AR-Keyboard"><a href="#AR-Keyboard" class="headerlink" title="AR Keyboard"></a>AR Keyboard</h1><blockquote>
<p>参考链接：</p>
<p><a href="https://www.cnblogs.com/mantgh/p/5680580.html#other">https://www.cnblogs.com/mantgh/p/5680580.html#other</a></p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>任何一套成熟的开发系统，都需要一整套开发套件，其中UI套件必不可少，其实用性，美观性关系着开发者的体验以及用户的体验。</p>
<p>目前，截至现在，Hololens2的开发工作，在Unity上的UI套件主要包括以下几种：</p>
<p>我有一个虚拟键盘的需求，类似于Hololens2的系统键盘那样，但是根据官方手册的指导，进展的并不顺利。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在混合现实主页的模式（即全息三维模式）下，使用虚拟键盘输入文本，类似于Unity 2D模式下的InputFiled。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Unity</li>
<li>MRTK</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li><p>首先我想到的是查看官方手册，该如何调用系统键盘，能不能实现在应用内部调用系统键盘，从而实现上述需求</p>
<p><a href="https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/README_SystemKeyboard.html">官方主页链接</a></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200919213126.png" alt=""></p>
<p>官方链接里面内容说的很清楚，这里不再赘述，将代码列在下方。</p>
<ul>
<li><p>how to invoke the system keyboard</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TouchScreenKeyboard keyboard;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenSystemKeyboard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    keyboard = TouchScreenKeyboard.Open(<span class="string">&quot;&quot;</span>, TouchScreenKeyboardType.Default, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>how to read the input</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TouchScreenKeyboard keyboard;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyboard != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        keyboardText = keyboard.text;</span><br><span class="line">        <span class="comment">// Do stuff with keyboardText</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Build的时候，尽量选择到处类型为XAML</li>
</ul>
</li>
<li><p>按照官方给的方法，实现的效果不好</p>
<p>当让其显示虚拟键盘的时候，Hololens会直接退出混合现实主页视图，直接变成了进入应用之前的场景，然后出现虚拟键盘，与我的需求并不契合；输入完成后，按Enter键，Unity又会重新进入混合现实主页视图，此时，输入框中会有刚刚输入的文字</p>
</li>
</ol>
<h2 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h2><ul>
<li>自定义一个自己的呗</li>
<li>听写识别输入</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>git clone 速度满，加快速度方法</title>
    <url>/2020/09/19/git-clone-%E9%80%9F%E5%BA%A6%E6%BB%A1%EF%BC%8C%E5%8A%A0%E5%BF%AB%E9%80%9F%E5%BA%A6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git-clone-速度满，加快速度方法"><a href="#git-clone-速度满，加快速度方法" class="headerlink" title="git clone 速度满，加快速度方法"></a>git clone 速度满，加快速度方法</h1><blockquote>
<p>转载于</p>
<p><a href="https://www.cnblogs.com/PieDaoChuan/p/9773039.html">https://www.cnblogs.com/PieDaoChuan/p/9773039.html</a></p>
</blockquote>
<h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure>
<p><strong>注意：端口号1080为VPN设置的代理端口，可自行修改为自己的VPN代理端口</strong></p>
<p>有人使用第一种无加速效果，第二种代理方式速度得到明显提升，峰值可达1M/s。</p>
<h3 id="取消git代理设置"><a href="#取消git代理设置" class="headerlink" title="取消git代理设置"></a>取消git代理设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>C#语言实现Socket通信_2</title>
    <url>/2020/09/18/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Socket%E9%80%9A%E4%BF%A1-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-语言实现Socket通信-2"><a href="#C-语言实现Socket通信-2" class="headerlink" title="C#语言实现Socket通信_2"></a>C#语言实现Socket通信_2</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>上一篇说的<a href="https://junlu.club/2020/09/18/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Socket%E9%80%9A%E4%BF%A1/">c#语言实现Socket通信_1</a>存在以下问题：</p>
<blockquote>
<ul>
<li>服务器端<ol>
<li>只能接收1个客户端的连接</li>
<li>只能发送与接收各1条消息</li>
</ol>
</li>
<li>客户端<ol>
<li>只能发送与接收各1条消息</li>
</ol>
</li>
</ul>
</blockquote>
<p>此篇文章使用Unity建立客户端，VS2019建立服务器端，实现双向通信，且不限制客户端的数量，不限制收发消息的数量</p>
<h2 id="涉及知识"><a href="#涉及知识" class="headerlink" title="涉及知识"></a>涉及知识</h2><ul>
<li>Unity</li>
<li>Ngui</li>
<li>Socket</li>
<li>线程</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp4</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">        <span class="keyword">private</span> Thread t;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];<span class="comment">//容器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Client</span>(<span class="params">Socket s</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            clientSocket = s;</span><br><span class="line">            <span class="comment">//启动一个线程，处理客户端的数据接受</span></span><br><span class="line">            t = <span class="keyword">new</span> Thread(ReceiveMessage);</span><br><span class="line">            t.Start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//一直接收客户端数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//接受数据前，判断socket是否断开</span></span><br><span class="line">                <span class="keyword">if</span> (clientSocket.Poll(<span class="number">10</span>, SelectMode.SelectRead))</span><br><span class="line">                &#123;</span><br><span class="line">                    clientSocket.Close();</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//终止线程</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">int</span> length = clientSocket.Receive(data);</span><br><span class="line">                <span class="built_in">string</span> message = Encoding.UTF8.GetString(data, <span class="number">0</span>, length);</span><br><span class="line">                <span class="comment">// 接受到数据后，把数据分发到客户端</span></span><br><span class="line">                Program.BroadcastMessage(message);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;recieved message :&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(message);</span><br><span class="line">            clientSocket.Send(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> Connected</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> clientSocket.Connected;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 服务器端</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">Client</span>&gt; clientList</span> = <span class="keyword">new</span> List&lt;Client&gt;();</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 广播</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;message&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BroadcastMessage</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> notConnectedList = <span class="keyword">new</span> List&lt;Client&gt;();</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> client <span class="keyword">in</span> clientList)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (client.Connected)</span><br><span class="line">                    client.sendMessage(message);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    notConnectedList.Add(client);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> temp <span class="keyword">in</span> notConnectedList)</span><br><span class="line">            &#123;</span><br><span class="line">                clientList.Remove(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//创建Socket</span></span><br><span class="line">            Socket tcpSever = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">            <span class="comment">//绑定IP与端口</span></span><br><span class="line">            tcpSever.Bind(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;192.168.31.125&quot;</span>),<span class="number">7788</span>));</span><br><span class="line">            <span class="comment">//开始监听</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;server running ... &quot;</span>);</span><br><span class="line">            tcpSever.Listen(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Socket clientSocket = tcpSever.Accept();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;a client is connected  &quot;</span>);</span><br><span class="line">                Client client = <span class="keyword">new</span> Client(clientSocket);<span class="comment">//把与客户端的通信逻辑放进client类中；</span></span><br><span class="line">                clientList.Add(client);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Unity项目界面如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200918194720.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200918195224.png" alt=""></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ipaddress = <span class="string">&quot;192.168.31.125&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> port = <span class="number">7788</span>;</span><br><span class="line">    <span class="keyword">public</span> UIInput inputFieldArea;</span><br><span class="line">    <span class="keyword">public</span> UILabel outMessage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> message = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ConnectedToServer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span> &amp;&amp; message != <span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            outMessage.text = outMessage.text + <span class="string">&quot;\nrecevce a message :&quot;</span> + message;</span><br><span class="line">            message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConnectedToServer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//创建</span></span><br><span class="line">        clientSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        clientSocket.Connect(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(ipaddress), port));</span><br><span class="line">        <span class="comment">//创建一个新的线程用来接受消息</span></span><br><span class="line">        t = <span class="keyword">new</span> Thread(receiveMessage);</span><br><span class="line">        t.Start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">receiveMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (clientSocket.Connected == <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> length = clientSocket.Receive(data);</span><br><span class="line">            message = Encoding.UTF8.GetString(data, <span class="number">0</span>, length);</span><br><span class="line">            <span class="comment">//outMessage.text = outMessage.text + &quot;\n&quot; + message;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SendMyMessage</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(message);</span><br><span class="line">        clientSocket.Send(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSendButtonClick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        outMessage.text = outMessage.text + <span class="string">&quot;\n&quot;</span> + inputFieldArea.<span class="keyword">value</span>;</span><br><span class="line">        SendMyMessage(inputFieldArea.<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        clientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line">        clientSocket.Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title> C#语言实现Socket通信_1</title>
    <url>/2020/09/18/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Socket%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-语言实现Socket通信-1"><a href="#C-语言实现Socket通信-1" class="headerlink" title="C#语言实现Socket通信_1"></a>C#语言实现Socket通信_1</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>实现1个服务器端，1个客户端，两者相互通信</p>
<h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><ol>
<li><p>创建socket</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * AddressFamily.InterNetwork -- 内网</span></span><br><span class="line"><span class="comment"> * SocketType.Stream -- 流形式</span></span><br><span class="line"><span class="comment"> * ProtocolType.Tcp -- Tcp协议</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Socket tcpSever = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br></pre></td></tr></table></figure></li>
<li><p>绑定自身IP，分配端口号</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IP地址：两台计算机之间的识别，局域网一般是192.168.xxx</span></span><br><span class="line"><span class="comment">//端口号：两台计算机上的软件之间的通讯（一个软件占用一个端口号），一般分布在0-6w之间</span></span><br><span class="line"><span class="comment">//端口号一般申请4位数，不容易被软件使用</span></span><br><span class="line"><span class="comment">//一个计算机上可能有多个IP地址（网卡多）</span></span><br><span class="line">IPAddress ipaddress = <span class="keyword">new</span> IPAddress(<span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">192</span>,<span class="number">168</span>,<span class="number">1</span>,<span class="number">107</span> &#125;);</span><br><span class="line">EndPoint point = <span class="keyword">new</span> IPEndPoint(ipaddress,<span class="number">7788</span>);<span class="comment">//ipendpoint是对IP和端口做了一层封装的类</span></span><br><span class="line">tcpSever.Bind( point );<span class="comment">//向操作系统申请一个可用的IP和端口用来通信</span></span><br></pre></td></tr></table></figure></li>
<li><p>开始监听</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">tcpSever.Listen(<span class="number">100</span>);<span class="comment">//最大链接数100</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;开始监听&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>建立连接</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Socket clientSocket = tcpSever.Accept();<span class="comment">//暂停当前线程，直到有一个客户端链接过来，进行下方代码</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;1个客户端已经连接&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>向客户端发送数据</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> message = <span class="string">&quot;Good news everyone , you have been a PhD&quot;</span>;</span><br><span class="line"><span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(message);<span class="comment">//对字符串编码（UTF8），得到字符串的字节数组</span></span><br><span class="line">clientSocket.Send(data);<span class="comment">//发送byte数组</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;1条数据已经发送&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3></li>
<li><p>创建Socket</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * AddressFamily.InterNetwork -- 内网</span></span><br><span class="line"><span class="comment"> * SocketType.Stream -- 流形式</span></span><br><span class="line"><span class="comment"> * ProtocolType.Tcp -- Tcp协议</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Socket tcpClient = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br></pre></td></tr></table></figure></li>
<li><p>发起请求，请求建立连接</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">IPAddress ipaddress = IPAddress.Parse(<span class="string">&quot;192.168.1.107&quot;</span>);<span class="comment">//可以把一个字符串的IP地址转化为ipaddress对象</span></span><br><span class="line">EndPoint point = <span class="keyword">new</span> IPEndPoint(ipaddress, <span class="number">7788</span>);<span class="comment">//ipendpoint是对IP和端口做了一层封装的类</span></span><br><span class="line">tcpClient.Connect(point);<span class="comment">//通过IP：端口号，定位一个要链接到的服务器端（服务器端的IP与端口号）</span></span><br></pre></td></tr></table></figure></li>
<li><p>接受服务器发送的数据</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义存放数据的data；</span></span><br><span class="line"><span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">int</span> length = tcpClient.Receive(data);</span><br><span class="line"><span class="comment">//把接受的0-length字节转化为string（length返回值表示接收到多少字节）</span></span><br><span class="line"><span class="built_in">string</span> message = Encoding.UTF8.GetString(data,<span class="number">0</span>,length);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;接受到一条消息：&quot;</span> + message);</span><br></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li>
</ol>
<h3 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//服务器端</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.创建socket</span></span><br><span class="line">            <span class="comment">//-------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * AddressFamily.InterNetwork -- 内网</span></span><br><span class="line"><span class="comment">             * SocketType.Stream -- 流形式</span></span><br><span class="line"><span class="comment">             * ProtocolType.Tcp -- Tcp协议</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Socket tcpSever = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.绑定IP和端口号</span></span><br><span class="line">            <span class="comment">//---------------------------------------------------------------------------------------------------                                      </span></span><br><span class="line">            <span class="comment">//IP地址：两台计算机之间的识别，局域网一般是192.168.xxx</span></span><br><span class="line">            <span class="comment">//端口号：两台计算机上的软件之间的通讯（一个软件占用一个端口号），一般分布在0-6w之间</span></span><br><span class="line">            <span class="comment">//端口号一般申请4位数，不容易被软件使用</span></span><br><span class="line">            <span class="comment">//一个计算机上可能有多个IP地址（网卡多）</span></span><br><span class="line">            IPAddress ipaddress = <span class="keyword">new</span> IPAddress(<span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">192</span>,<span class="number">168</span>,<span class="number">1</span>,<span class="number">107</span> &#125;);</span><br><span class="line">            EndPoint point = <span class="keyword">new</span> IPEndPoint(ipaddress,<span class="number">7788</span>);<span class="comment">//ipendpoint是对IP和端口做了一层封装的类</span></span><br><span class="line">            tcpSever.Bind( point );<span class="comment">//向操作系统申请一个可用的IP和端口用来通信</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.开始监听（等待客户端链接）</span></span><br><span class="line">            <span class="comment">//--------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            tcpSever.Listen(<span class="number">100</span>);<span class="comment">//最大链接数100</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;开始监听&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.建立链接</span></span><br><span class="line">            <span class="comment">//-----------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            Socket clientSocket = tcpSever.Accept();<span class="comment">//暂停当前线程，直到有一个客户端链接过来，进行下方代码</span></span><br><span class="line">            <span class="comment">//-----------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;1个客户端已经连接&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用返回的 clientSocket 与客户端做通信</span></span><br><span class="line">            <span class="comment">//-----------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="built_in">string</span> message = <span class="string">&quot;Good news everyone , you have been a PhD&quot;</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(message);<span class="comment">//对字符串编码（UTF8），得到字符串的字节数组</span></span><br><span class="line">            clientSocket.Send(data);<span class="comment">//发送byte数组</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;1条数据已经发送&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.接受客户端发送的消息</span></span><br><span class="line">            <span class="comment">//-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="built_in">byte</span>[] data2 = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];<span class="comment">//创建字节数组，存放客户端发送的数据</span></span><br><span class="line">            <span class="built_in">int</span> length = clientSocket.Receive(data2);<span class="comment">//向data2中存放数据;length表示接收了多少字节</span></span><br><span class="line">            <span class="built_in">string</span> message2 = Encoding.UTF8.GetString(data2, <span class="number">0</span>, length);<span class="comment">//把接收的0-length字节转化为string</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;接受到一条消息：&quot;</span>+message2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//客户端</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.创建 socket</span></span><br><span class="line">            <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * AddressFamily.InterNetwork -- 内网</span></span><br><span class="line"><span class="comment">             * SocketType.Stream -- 流形式</span></span><br><span class="line"><span class="comment">             * ProtocolType.Tcp -- Tcp协议</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Socket tcpClient = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.发起建立链接的请求</span></span><br><span class="line">            <span class="comment">//------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            IPAddress ipaddress = IPAddress.Parse(<span class="string">&quot;192.168.1.107&quot;</span>);<span class="comment">//可以把一个字符串的IP地址转化为ipaddress对象</span></span><br><span class="line">            EndPoint point = <span class="keyword">new</span> IPEndPoint(ipaddress, <span class="number">7788</span>);<span class="comment">//ipendpoint是对IP和端口做了一层封装的类</span></span><br><span class="line">            tcpClient.Connect(point);<span class="comment">//通过IP：端口号，定位一个要链接到的服务器端（服务器端的IP与端口号）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.接收服务器端发出的消息</span></span><br><span class="line">            <span class="comment">//------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="comment">//定义存放数据的data；</span></span><br><span class="line">            <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="built_in">int</span> length = tcpClient.Receive(data);</span><br><span class="line">            <span class="comment">//把接受的0-length字节转化为string（length返回值表示接收到多少字节）</span></span><br><span class="line">            <span class="built_in">string</span> message = Encoding.UTF8.GetString(data,<span class="number">0</span>,length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;接受到一条消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.向服务器端发送消息</span></span><br><span class="line">            <span class="comment">//-----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="built_in">string</span> message2 = Console.ReadLine();<span class="comment">//读取用户输入</span></span><br><span class="line">            tcpClient.Send(Encoding.UTF8.GetBytes(message2));<span class="comment">//把字符串转换为byte数组，发送服务器端</span></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Augument Reality : Review 1</title>
    <url>/2020/09/17/Augument-Reality-Review-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Augument-Reality-Review-1"><a href="#Augument-Reality-Review-1" class="headerlink" title="Augument Reality : Review 1"></a>Augument Reality : Review 1</h1><h2 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h2><blockquote>
<p>Azuma [3] provides a commonly accepted definition of AR as a technology which (1) combines real and virtual imagery, (2)  is interactive in real time, and (3) registers the virtual imagery with the real world.</p>
<p>—-<Trends in Augmented Reality Tracking, Interaction and Display : A Review of Ten Years of ISMAR></p>
<ol>
<li><p>Combines real and virtual</p>
</li>
<li><p>Is interactive in real time</p>
</li>
<li>Is registered in three dimensions</li>
</ol>
<p>—-<A Survey of Augmented Reality></p>
</blockquote>
<hr>
<h2 id="AR-Research-Topics"><a href="#AR-Research-Topics" class="headerlink" title="AR Research Topics"></a>AR Research Topics</h2><ol>
<li><p>Graphics rendering hardware and software</p>
<p>Graphics rendering hardware and software that can create the virtual content for overlaying the real world.</p>
</li>
<li><p><strong>Tracking techniques</strong></p>
<p>Tracking techniques so that <strong>the changes in the viewer’s position can be properly reflected in the rendered graphics</strong></p>
</li>
<li><p><strong>Tracker calibration and registration tools</strong></p>
<p>Tracker calibration and registration tools for <strong>precisely aligning the real and virtual views when the user view is fixed</strong></p>
</li>
<li><p>Display hardware</p>
<p>Display hardware for merging virtual images with views of the real world</p>
</li>
<li><p>Computer processing hardware for running AR simulation code and supporting input and output devices</p>
</li>
<li><p>Interaction techniques</p>
<p>Interaction techniques specifying how the user can manipulate the AR virtual content.</p>
</li>
</ol>
<hr>
<h2 id="Tracking-Techniques"><a href="#Tracking-Techniques" class="headerlink" title="Tracking Techniques"></a>Tracking Techniques</h2><h3 id="Sensor-Based-Tracking-Techniques"><a href="#Sensor-Based-Tracking-Techniques" class="headerlink" title="Sensor-Based Tracking Techniques"></a>Sensor-Based Tracking Techniques</h3><hr>
<hr>
<h3 id="Vision-Based-Tracking-Techniques"><a href="#Vision-Based-Tracking-Techniques" class="headerlink" title="Vision-Based Tracking Techniques"></a>Vision-Based Tracking Techniques</h3><p>Vision-based tracking techniques can use image processing methods to <strong>calculate the camera pose relative to real world objects.</strong></p>
<h4 id="feature-based"><a href="#feature-based" class="headerlink" title="feature-based"></a>feature-based</h4><p>The rationale underlying feature-based methods is to find a correspondence between 2D image features and their 3D world frame coordinates.</p>
<hr>
<hr>
<hr>
<h5 id="Markers"><a href="#Markers" class="headerlink" title="Markers"></a>Markers</h5><h6 id="Artificial-markers"><a href="#Artificial-markers" class="headerlink" title="Artificial markers"></a>Artificial markers</h6><p>Early computer vision papers at IWAR described marker tracking methods that could be used to calculate camera pose in real time from artificial markers.</p>
<h6 id="Natural-Features-such-as-points-lines-edges-or-textures"><a href="#Natural-Features-such-as-points-lines-edges-or-textures" class="headerlink" title="Natural Features,such as points, lines, edges or textures"></a>Natural Features,such as points, lines, edges or textures</h6><hr>
<hr>
<hr>
<h4 id="model-based"><a href="#model-based" class="headerlink" title="model-based"></a>model-based</h4><p>Model-based trackers usually construct their models based on lines or edges in the model.</p>
<p>Texture is another useful feature for constructing models. </p>
<hr>
<hr>
<h3 id="hybrid-tracking-techniques"><a href="#hybrid-tracking-techniques" class="headerlink" title="hybrid tracking techniques"></a>hybrid tracking techniques</h3><hr>
]]></content>
      <tags>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV中的Aruco识别</title>
    <url>/2020/09/17/OpenCV%E4%B8%AD%E7%9A%84Aruco%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OpenCV中的Aruco识别"><a href="#OpenCV中的Aruco识别" class="headerlink" title="OpenCV中的Aruco识别"></a>OpenCV中的Aruco识别</h1><blockquote>
<p>转载博客：</p>
<p><a href="https://blog.csdn.net/u010260681/article/details/77089657">https://blog.csdn.net/u010260681/article/details/77089657</a></p>
<p>如有侵权，立即删除</p>
</blockquote>
<p>姿态估计（Pose estimation）在<a href="http://lib.csdn.net/base/computervison">计算机视觉</a>领域扮演着十分重要的角色：<a href="http://lib.csdn.net/base/robot">机器人</a>导航、增强现实以及其它。这一过程的基础是找到现实世界和图像投影之间的对应点。这通常是很困难的一步，因此我们常常用自己制作的或基本的Marker来让这一切变得更容易。</p>
<p>最为流行的一个途径是基于二进制平方的标记。这种Marker的主要便利之处在于，一个Marker提供了足够多的对应（四个角）来获取相机的信息。同样的，内部的二进制编码使得<a href="http://lib.csdn.net/base/datastructure">算法</a>非常健壮，允许应用错误检测和校正技术的可能性。</p>
<p>aruco模块基于ArUco库，这是一个检测二进制marker的非常流行的库，是由Rafael Muñoz和Sergio Garrido完成的。</p>
<p>aruco的函数包含在c++：<a href="http://docs.opencv.org/3.1.0/d9/d53/aruco_8hpp.html">链接地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2&#x2F;aruco.hpp&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Marker和字典"><a href="#Marker和字典" class="headerlink" title="Marker和字典"></a>Marker和字典</h2><p>一个ArUco marker是一个二进制平方标记，它由一个宽的黑边和一个内部的二进制矩阵组成，内部的矩阵决定了它们的id。黑色的边界有利于快速检测到图像，二进制编码可以验证id，并且允许错误检测和矫正技术的应用。marker的大小决定了内部矩阵的大小。例如，一个4x4的marker由16bits组成。</p>
<p>一些ArUco markers的例子：</p>
<p><img src="http://docs.opencv.org/3.1.0/markers.jpg" alt="markers.jpg"></p>
<p>应当注意到，我们需要检测到一个Marker在空间中发生了旋转，但是，检测的过程需要确定它的初始角度，所以每个角落需要是明确的，不能有歧义，保证上述这点也是靠二进制编码完成的。</p>
<p>markers的字典是在一个特殊应用中使用到的marker的集合。这仅仅是每个marker的二进制编码的链表。</p>
<p>字典的主要性质是字典的大小和marker的大小：</p>
<ul>
<li>字典的大小是组成字典的marker的数量</li>
<li><p>marker的大小是这些marker的尺寸（位的个数）</p>
<p>aruco模块包含了一些预定义的字典，这些字典涵盖了一系列的字典大小和Marker尺寸。</p>
</li>
</ul>
<p>有些人可能会认为Marker的id是从十进制转成二进制的。但是，考虑到较大的marker会有较多的位数，管理如此多的数据不那么现实，这并不可能。反之，一个marker的id仅需是marker在它所在的字典的下标。例如，一个字典里的五个marker的id是：0,1,2,3和4。</p>
<p>更多有关字典的信息在“选择字典”部分提及。</p>
<h2 id="创建Marker"><a href="#创建Marker" class="headerlink" title="创建Marker"></a>创建Marker</h2><p>​    在检测之前，我们需要打印marker，以把它们放到环境中。marker的图像可以使用<a href="http://docs.opencv.org/3.1.0/d6/d6e/group__imgproc__draw.html#ga482fa7b0f578fcdd8a174904592a6250">drawMarker()</a>函数生成。</p>
<p>​    例如，让我们分析一下如下的调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat markerImage;</span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</span><br><span class="line"></span><br><span class="line">  cv::aruco::drawMarker(dictionary, <span class="number">23</span>, <span class="number">200</span>, markerImage, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>首先，我们通过选择aruco模块中一个预定义的字典来创建一个字典对象，具体而言，这个字典是由250个marker组成的，每个marker的大小为6x6bits(DICT_6X6_250)</p>
<p>​     <code>drawMarker</code>的参数如下：</p>
<ul>
<li>第一个参数是之前创建的字典对象。</li>
<li>第二个参数是marker的id，在这个例子中选择的是字典DICT_6X6_250第23个marker。注意到每个字典是由不同数目的Marker组成的，在这个例子中，有效的Id数字范围是0到249。不在有效区间的特定id将会产生异常。</li>
<li>第三个参数，200，是输出Marker图像的大小。在这个例子中，输出的图像将是200x200像素大小。注意到这一参数需要满足能够存储特定字典 的所有位。所以，举例而言，你不能为6x6大小的marker生成一个5x5图像（这还没有考虑到Marker的边界）。除此之外，为了避免变形，这一参数最好和位数+边界的大小成正比，至少要比marker的大小大得多（如这个例子中的200)，这样变形就不显著了。</li>
<li>第四个参数是输出的图像。</li>
<li>最终，最后一个参数是一个可选的参数，它指定了Marer黑色边界的大小。这一大小与位数数目成正比。例如，值为2意味着边界的宽度将会是2的倍数。默认的值为1。</li>
<li>生成的图像如下：</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/marker23.jpg" alt="marker23.jpg"></p>
<p>​    详细的例子在模块演示文件夹中的 <code>create_marker.cpp</code> </p>
<h2 id="检测Marker"><a href="#检测Marker" class="headerlink" title="检测Marker"></a>检测Marker</h2><p>给定一个可以看见ArUco marker的图像，检测程序应当返回检测到的marker的列表。每个检测到的marker包括：</p>
<ul>
<li>图像四个角的位置（按照原始的顺序）</li>
<li>marker的Id</li>
</ul>
<p>marker检测过程由以下两个主要步骤构成：</p>
<ol>
<li>检测有哪些marker。在这一阶段我们分析图像，以找到哪些形状可以被识别为Markers。首先要做的是利用自适应性阈值来分割marker，然后从阈值化的图像中提取外形轮廓，并且舍弃那些非凸多边形的，以及那些不是方形的。我们还使用了一些额外的滤波（来剔除那些过小或者过大的轮廓，过于相近的凸多边形，等）</li>
<li>检测完marker之后，我们有必要分析它的内部编码来确定它们是否确实是marker。此步骤首先提取每个标记的标记位。为了达到这个目的，首先，我们需要对图像进行透视变换，来得到它规范的形态（正视图）。然后，对规范的图像用Ossu阈值化以分离白色和黑色位。这一图像根据marker大小和边界大小被分为不同格子，我们统计落在每个格子中的黑白像素数目来决定这是黑色还是白色的位。最终，我们分析这些位数来决定这个marker是属于哪个特定字典的，如果有必要的话，需要对错误进行检测。</li>
</ol>
<p>考虑如下图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersoriginal.png" alt="singlemarkersoriginal.png"></p>
<p>这些是检测出来的marker（用绿色标记）</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersdetection.png" alt="singlemarkersdetection.png"></p>
<p>以下是识别阶段被剔除的Marker候选（用粉红色标记）：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersrejected.png" alt="singlemarkersrejected.png"></p>
<p>在aruco模块，检测是由<code>detectMarkers()</code> 函数完成的，这一函数是这个模块中最重要的函数，因为剩下的所有函数操作都基于detectMarkers()返回的检测出的markers。</p>
<p>一个marker检测的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat inputImage;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; markerIds; </span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;Point2f&gt; &gt; markerCorners, rejectedCandidates; </span><br><span class="line">cv::aruco::DetectorParameters parameters; </span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br><span class="line">cv::aruco::detectMarkers(inputImage, dictionary, markerCorners, markerIds, parameters, rejectedCandidates); </span><br></pre></td></tr></table></figure>
<p><code>detectMarkers</code> 的参数为：</p>
<ul>
<li>第一个参数是待检测marker的图像。</li>
<li>第二个参数是字典对象，在这一例子中是之前定义的字典 (<code>DICT_6X6_250</code>).</li>
<li>检测出的markers存储在<code>markerCorners</code> 和 <code>markerIds</code>结构中：<ul>
<li><code>markerCorners</code> 是检测出的图像的角的列表。对于每个marker，将返回按照原始顺序排列的四个角（从左上角顺时针开始）。因此，第一个点是左上角的角，紧接着右上角、右下角和左下角。</li>
<li><code>markerIds</code> 是在markerCorners检测出的所有maker的id列表.注意返回的markerCorners和<code>markerIds</code> 向量具有相同的大小。 </li>
</ul>
</li>
<li>第四个参数是类型的对象 <code>DetectionParameters</code>. 这一对象包含了检测阶段的所有参数。这一参数将在 下一章节详细介绍。</li>
<li><p>最后的参数, <code>rejectedCandidates</code>, 返回了所有的marker候选, 例如， 那些被检测出来的不是有效编码的方形。每个候选同样由四个角定义， 它的 形式和markerCorners的参数一样。这一参数可以省略，它仅仅用于debug阶段，或是用于“再次寻找”策略（见<a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga90374a799f1da566e5de16f277b12463">refineDetectedMarkers()</a>）</p>
<p><code>detectMarkers()</code>之后，接下来你想要做的事情可能是检查你的marker是否被正确地检测出来了。幸运的是，aruco模块提供了一个函数，它能在输入图像中来绘制检测出来的markers，这个函数就是<a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga2ad34b0f277edebb6a132d3069ed2909">drawDetectedMarkers()</a> ,例子如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat outputImage;</span><br><span class="line">cv::aruco::drawDetectedMarkers(image, markerCorners, markerIds);</span><br></pre></td></tr></table></figure></li>
<li><code>image</code> 是输入/输出图像，程序将在这张图上绘制marker。（它通常就是检测出marker的那张图像）</li>
<li><code>markerCorners</code> 和 <code>markerIds</code> 是检测出marker的结构，它们的格式和 <code>detectMarkers()</code>函数提供的一样。</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersdetection.png" alt="singlemarkersdetection.png"></p>
<p> 注意到这个函数仅仅用于可视化，而没有别的什么用途。</p>
<p>使用这两个函数我们完成了基本的marker识别步骤，我们可以从相机中检测出Marker了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture inputVideo; </span><br><span class="line"></span><br><span class="line">inputVideo.open(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (inputVideo.grab()) </span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    cv::Mat image, imageCopy;</span><br><span class="line">    inputVideo.retrieve(image); </span><br><span class="line">    image.copyTo(imageCopy);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners; </span><br><span class="line">    cv::aruco::detectMarkers(image, dictionary, corners, ids);</span><br><span class="line">    <span class="comment">// if at least one marker detected </span></span><br><span class="line">    <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) </span><br><span class="line">        cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">    cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy); </span><br><span class="line">    <span class="keyword">char</span> key = (<span class="keyword">char</span>) cv::waitKey(waitTime); </span><br><span class="line">    <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    注意到这里忽略了有些可选的参数，比如检测参数对象、以及输出的被剔除的候选对象向量。</p>
<p>​    完整的工程代码包含在模块样例文件夹中的<code>detect_markers.cpp</code> </p>
<h2 id="Pose检测"><a href="#Pose检测" class="headerlink" title="Pose检测"></a>Pose检测</h2><p>接下来你想要做的应当是通过Marker检测来获取相机pose。</p>
<p>为了展现相机的Pose检测，你需要知道你的相机的校准（Calibration）参数。这是一个相机矩阵和畸变系数。如果你不知道如何校准你的相机，你可以看一看<code>calibrateCamera()</code> 函数，以及<a href="http://lib.csdn.net/base/opencv">OpenCV</a>的校准教程。你同样可以使用aruco模块来校准你的相机，这在使用aruco进行校准的教程中将会介绍。注意这个过程只需要做一次，除非你的相机的光学性质发生了改变（例如调焦）</p>
<p>最后，在校准之后我们得到的是相机矩阵：这是一个3x3的矩阵，包含了焦距和相机中心坐标（相机的内参），以及畸变系数：一个包含五个以上元素的向量，它描述的是相机产生的畸变。</p>
<p>当你用ArUco marker来检测相机Pose时，你可以单独地检测每个Marker的pose。如果你想要从一堆Marker里检测出一个pose，你需要的是aruco板。（参见ArUco板教程）</p>
<p>涉及到marker的相机pose是一个从marker坐标系统到相机坐标系统的三维变换。这是由一个旋转和一个平移向量确定的（参见 <code>solvePnP()</code> 函数）</p>
<p>aruco模块提供了一个函数，用来检测所有探测到的Marker的pose。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Mat cameraMatrix, distCoeffs; </span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs; </span><br><span class="line"></span><br><span class="line">cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, cameraMatrix, distCoeffs, rvecs, tvecs); </span><br></pre></td></tr></table></figure>
<ul>
<li><code>corners</code> 参数是marker的角向量，是由<code>detectMarkers()</code> 函数返回的。</li>
<li>第二个参数是marker的大小（单位是米或者其它）。注意Pose检测的平移矩阵单位都是相同的。</li>
<li><code>cameraMatrix</code> 和 <code>distCoeffs</code> 是需要求解的相机校准参数。</li>
<li><p><code>rvecs</code> 和 <code>tvecs</code> 分别是每个markers角的旋转和平移向量。</p>
<p>这一函数获取的marker坐标系统处在marker重心，Z坐标指向纸面外部，如下图所示。坐标的颜色为,X:红色，Y：绿色，Z：蓝色。</p>
</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersaxis.png" alt="singlemarkersaxis.png"></p>
<p>aruco模块提供了一个函数绘制上图中的坐标，所以我们可以检查pose检测的正确性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::drawAxis (image, cameraMatrix, distCoeffs, rvec, tvec, <span class="number">0.1</span>); </span><br></pre></td></tr></table></figure>
<ul>
<li><code>image</code> 是输入/输出图像，坐标将会在这张图像上绘制（通常就是检测marker的那张图像）。</li>
<li><code>cameraMatrix</code> 和 <code>distCoeffs</code> 是相机校准参数。</li>
<li><code>rvec</code> 和 <code>tvec</code> 是Pose参数，指明了坐标绘制的位置。</li>
<li>最后一个参数是坐标轴的长度，和tvec单位一样（通常是米）。</li>
</ul>
<p>针对一个marker的pose检测的基本的完整示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture inputVideo;</span><br><span class="line">inputVideo.open(<span class="number">0</span>);</span><br><span class="line">cv::Mat cameraMatrix, distCoeffs; <span class="comment">// camera parameters are read from somewhere </span></span><br><span class="line"></span><br><span class="line">readCameraParameters(cameraMatrix, distCoeffs);</span><br><span class="line"></span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (inputVideo.grab()) &#123; </span><br><span class="line">	cv::Mat image, imageCopy;</span><br><span class="line">	inputVideo.retrieve(image); </span><br><span class="line">	image.copyTo(imageCopy);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids; </span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners; </span><br><span class="line">	cv::aruco::detectMarkers(image, dictionary, corners, ids);<span class="comment">// if at least one marker detected </span></span><br><span class="line">	<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123; </span><br><span class="line">		cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">        <span class="built_in">vector</span>&lt; Mat &gt; rvecs, tvecs; </span><br><span class="line">        cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, cameraMatrix, distCoeffs, rvecs, tvecs); <span class="comment">// draw axis for each marker </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ids.size(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            cv::aruco::drawAxis(imageCopy, cameraMatrix, distCoeffs, rvecs[i], tvecs[i], <span class="number">0.1</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy); </span><br><span class="line">        <span class="keyword">char</span> key = (<span class="keyword">char</span>) cv::waitKey(waitTime); </span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    样例视频:</p>
<p>​    <a href="https://youtu.be/IsXWrcB_Hvs"><img src="http://img.youtube.com/vi/IsXWrcB_Hvs/0.jpg" alt="ArUco markers detection video"></a></p>
<p>​    完整的工程代码包含在模块样例文件夹中的 <code>detect_markers.cpp</code></p>
<h2 id="选择字典"><a href="#选择字典" class="headerlink" title="选择字典"></a>选择字典</h2><p>aruco模块提供了Dictionary类来描述marker的字典。</p>
<p>除了marker大小和字典中的marker数目，字典还有一个很重要的参数，就是内部marker的距离。内部marker的距离是marker之间的最小距离，它决定了字典错误检测和纠正能力。</p>
<p>一般而言，较小的字典大小和较大的marker大小将会产生更大的内部marker距离，反之亦然。但是，过大的Marker在检测中更加困难，因为我们需要从图像中提取出更多位的信息。</p>
<p> 例如，如果你的应用中仅仅需要10个marker，最好使用只包含10个marker的字典，而不是包含1000个marker的字典。原因在于，由10个marker组成的字典将会有更大的内部Marker距离，因此，它的容错性更强。</p>
<p>结果，aruco模块包含了很多选择marker字典的途径，所以你可以让你的系统变得更加健壮。</p>
<ul>
<li>预定义的字典：</li>
</ul>
<p>这是选择字典最简单的办法。aruco模块包含了一系列预定义的字典，涵盖了不同的marker大小和marker数量。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br></pre></td></tr></table></figure>
<p>DICT_6X6_250 是一个预定义的字典，它包含6x6位的marker，总共有250个marker。</p>
<p>在所有提供的字典中，我们推荐使用你选择尽可能小的marker。例如，如果你需要6x6位的200个marker，选择DICT_6X6_250要优于选择DICT_6X6_1000。字典越小，内部距离就越大。</p>
<ul>
<li>自动生成的字典:</li>
</ul>
<p>我们可以针对想要的marker数量和位来生成字典，以得到最优的内部Marker距离。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::generateCustomDictionary(<span class="number">36</span>, <span class="number">5</span>); </span><br></pre></td></tr></table></figure>
<p>这将会产生一个由36个5X5位字典组成的标准字典。这个过程需要几秒钟，具体时间取决于你的参数（更大的字典和更多的位数会耗费更多的时间）</p>
<ul>
<li>手动生成的字典:</li>
</ul>
<p>最终，我们可以手动设置字典，方便做任何修改。为了做到这一点，我们需要手动给 <code>Dictionary</code> 对象参数赋值。必须注意的是，除非你有一些特别的理由需要自己来生成字典，一般情况下我们推荐前面的任一种方案。</p>
<p>字典参数为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">    	Mat bytesList; </span><br><span class="line">    	<span class="keyword">int</span> markerSize; </span><br><span class="line">    	<span class="keyword">int</span> maxCorrectionBits; <span class="comment">// maximum number of bits that can be corrected</span></span><br><span class="line">    	...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>bytesList</code> 是一个数组，它包含了所有marker代码的信息。markerSize是每个marker的维度（例如，参数为5代表5x5位）。最终， <code>maxCorrectionBits</code>是marker检测中 可校正的最大比特数，如果这个值过大，会得到大量的错误位置。</p>
<p> <code>bytesList</code> 中的每一行代表字典中的一个marker。但是，这些marker的数据并不以二进制形式存储，而是以一种特殊的方式存储，这样可以简化检测的过程。</p>
<p>幸运的是，我们可以简单地调用静态方法<code>Dictionary::getByteListFromBits()</code>来转换到这种形式。</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Dictionary dictionary; </span><br><span class="line"><span class="comment">// markers of 6x6 bits </span></span><br><span class="line">dictionary.markerSize = <span class="number">6</span>; </span><br><span class="line"><span class="comment">// maximum number of bit corrections </span></span><br><span class="line">dictionary.maxCorrectionBits = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// lets create a dictionary of 100 markers </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">&#123;<span class="comment">// assume generateMarkerBits() generate a new marker in binary format, so that </span></span><br><span class="line"><span class="comment">// markerBits is a 6x6 matrix of CV_8UC1 type, only containing 0s and 1s </span></span><br><span class="line">	cv::Mat markerBits = generateMarkerBits(); </span><br><span class="line">	cv::Mat markerCompressed = getByteListFromBits(markerBits); <span class="comment">// add the marker as a new row</span></span><br><span class="line">	dictionary.bytesList.push_back(markerCompressed); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="检测参数"><a href="#检测参数" class="headerlink" title="检测参数"></a>检测参数</h2><p> <a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga306791ee1aab1513bc2c2b40d774f370">detectMarkers()</a>的一个参数是DetectorParameters对象。这一对象包含了marker检测过程中所有特定的选项。</p>
<p>在这一章节中，我们将介绍所有的参数。我们可以根据它们涉及的阶段来给这些参数分类。</p>
<h4 id="阈值化"><a href="#阈值化" class="headerlink" title="阈值化"></a>阈值化</h4><p>检测的第一步是输入图像的阈值化。</p>
<p>例如，上述样例中的图像阈值化的结果如下：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersthresh.png" alt="singlemarkersthresh.png"></p>
<p>这一阈值化过程由以下几个参数决定：</p>
<ul>
<li><code>int adaptiveThreshWinSizeMin</code>, <code>intadaptiveThreshWinSizeMax</code>, <code>int adaptiveThreshWinSizeStep</code></li>
</ul>
<p>​    <code>adaptiveThreshWinSizeMin</code> 和 <code>adaptiveThreshWinSizeMax</code> 参数代表选择的自适应阈值窗口大小（以像素为单位）间隔（具体参见<a href="http://lib.csdn.net/base/opencv">opencv</a>的 <code>threshold()</code>函数）。</p>
<p>参数adaptiveThreshWinSizeStep表明了窗口从adaptiveThreshWinSizeMin到adaptiveThreshWinSizeMax大小的增量。</p>
<p>例如，对于adaptiveThreshWinSizeMin=5，adaptiveThreshWinSizeMax=21以及adaptiveThreshWinSizeStep=4，那么将会产生5个阈值化步骤，窗口大小分别为5, 9, 13, 17 和 21。在每个阈值化图像中，都会选出一些marker候选。</p>
<p>如果marker大小太大的话，较小的窗口大小可能会切割marker的边界，所以它将不会被检测到，就像下图一样：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersbrokenthresh.png" alt="singlemarkersbrokenthresh.png"></p>
<p>Broken marker image</p>
<p>另一方面，如果marker太小的话，较大的窗口大小也会有类似的效果。此外这一过程将会趋向于全局阈值，而失去了自适应的特性。</p>
<p>最简单的例子是对adaptiveThreshWinSizeMin和 <code>adaptiveThreshWinSizeMax</code>使用相同的值，这样就只会执行一次阈值化步骤。但是，最好还是使用一个范围的值作为窗口大小，虽然较多的阈值化步骤会在一定程度上降低性能。</p>
<p>缺省参数：<code>adaptiveThreshWinSizeMin</code>: 3, <code>adaptiveThreshWinSizeMax</code>: 23, <code>adaptiveThreshWinSizeStep</code>: 10</p>
<ul>
<li><p><code>double adaptiveThreshConstant</code></p>
<p>这一参数表达了阈值状态下的常量（参见Opencv函数）。它的默认值是大多数例子下较好的情况。</p>
</li>
</ul>
<p>默认值: 7</p>
<h4 id="轮廓滤波"><a href="#轮廓滤波" class="headerlink" title="轮廓滤波"></a>轮廓滤波</h4><p>阈值化之后，我们需要检测轮廓。但是，我们并不会把所有的轮廓都当作是候选。在不同步骤中，我们通过滤波剔除一些不太可能是marker的轮廓。这一章节中的参数可以自定义这一过程。</p>
<p> 需要注意到，大多数例子中我们需要平衡检测的性能和效率。所有考虑到的轮廓都会在接下来的过程中做进一步处理，这通常产生了更高的计算消耗。所以，我们希望能够在这一阶段就丢弃错误的候选，而不是下一阶段继续处理。</p>
<p>另一方面，如果滤波的条件过于苛刻，事实上的marker轮廓可能会被错误地剔除，因此，没有检测到marker。</p>
<ul>
<li><p><code>double minMarkerPerimeterRate</code>, <code>doublemaxMarkerPerimeterRate</code></p>
<p>这些参数决定了marker的最小值和最大值，具体来说，是最大最小marker的周长。它们并不是以绝对像素值作为单位，而是相对于输入图片的最大尺寸指定的。</p>
</li>
</ul>
<p>例如，大小为640x480，最小相对marker周长为0.05的图像，将会产生一个最小周长640x0.05 = 32(像素)的marker，因为640是图像的最大尺寸。参数 <code>maxMarkerPerimeterRate</code> 也是类似的。</p>
<p> 如果 <code>minMarkerPerimeterRate</code>太小，检测阶段性能会降低，因为会有更多的轮廓进入到接下来的阶段。这一弊端对于 <code>maxMarkerPerimeterRate</code>参数而言不是那么显著，因为小的轮廓数目通常要多于大的轮廓。选取 <code>minMarkerPerimeterRate</code>值为0以及值为4，就相当于考虑了图像中的所有轮廓，但是出于性能考虑这是不推荐的。</p>
<p> 缺省值：</p>
<p>Default values:<code>minMarkerPerimeterRate</code> : 0.03, <code>maxMarkerPerimeterRate</code> : 4.0</p>
<ul>
<li><code>double polygonalApproxAccuracyRate</code></li>
</ul>
<p>我们对所有的候选进行多边形近似，只有近似结果为方形的形状才能通过<a href="http://lib.csdn.net/base/softwaretest">测试</a>。这一值决定了多边形近似产生的最大误差（参见<code>approxPolyDP()</code> 函数）。</p>
<p> 这一参数是相对于候选长度的（像素上）。所以如果候选的周长为100像素，polygonalApproxAccuracyRate的值为0.04，那么最大的误差应当为100x0.04=5.4像素。</p>
<p>在大多例子中，缺省参数的表现已经很好了，但对高失真的图像，我们需要更大的误差值。</p>
<p>​    缺省值：0.05</p>
<ul>
<li><code>double minCornerDistanceRate</code></li>
</ul>
<p>同一张marker中每一对角的最小距离。这是相对于marker周长的值。像素的最小距离为Perimeter * minCornerDistanceRate.</p>
<p>​    缺省值: 0.05</p>
<ul>
<li><p><code>double minMarkerDistanceRate</code></p>
<p>两张不同的marker之间的任一对角的最小距离。它表示相对于两个marker的最小标记周长。如果两个候选太接近，较小的一个被忽略。</p>
</li>
</ul>
<p>​    缺省值：0.05</p>
<ul>
<li><code>int minDistanceToBorder</code></li>
</ul>
<p>marker角到图像边缘最小距离。部分图像边缘被遮挡的marker也能被正确地检测出来，如果遮挡部分比较小的话。但是，如果其中一个角被挡住了，返回的角通常在图像边界的一个错误的位置。</p>
<p>如果marker角的位置很重要的话，例如你想要做pose检测，最好舍弃掉那些离图像边缘太接近的角。否则就没有必要。</p>
<p>​    缺省值：3</p>
<h4 id="比特位提取"><a href="#比特位提取" class="headerlink" title="比特位提取"></a>比特位提取</h4><p>检测到候选之后，我们需要分析每个候选的比特位，来确定它们是不是marker。</p>
<p>在分析二进制编码之前，我们需要提取出比特位。为了达到这个目的，将对透视变换后的图像使用Otsu进行阈值化，来分离黑色和白色像素。</p>
<p>以下是一个透视变换后的图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/removeperspective.png" alt="removeperspective.png"></p>
<p>接下来，图像被划分为网格，和marker位数相同。在每个单元格里，我们统计黑色和白色的个数，决定这个单元格的比特位。</p>
<p><img src="http://docs.opencv.org/3.1.0/bitsextraction1.png" alt="bitsextraction1.png"></p>
<p>以下参数可以自定义这一过程：</p>
<ul>
<li><code>int markerBorderBits</code></li>
</ul>
<p>这一参数指定了marker边界的宽度。这和每个比特位的大小相关。因此，值为2意味着边界的长度是两个内部比特位的长度。</p>
<p>这一参数需要和你使用的Marker边界大小一致，边界的大小可以在绘制函数如 <code>drawMarker()</code>中设置。</p>
<p>​    缺省值：1</p>
<ul>
<li><code>double minOtsuStdDev</code></li>
</ul>
<p>这个值决定了进行Otsu的最小标准差的像素值。如果偏差很低，这可能意味着所有方形都是黑色的(或白色的），Ostu将不起作用。如果是这样的话，所有的比特位都根据平均值大于还是小于128被设为0或者1.</p>
<p>​    缺省值：5.0</p>
<ul>
<li><code>int perpectiveRemovePixelPerCell</code></li>
</ul>
<p>这一参数决定了透视变换后图像的像素数目（每个单元格，包含边界）。这是上图中红色正方形的大小。</p>
<p>例如，让我们假设我们在处理5x5比特位、边界为1比特位的marker（参见markerBorderBit）。然后，每一维的单元格/比特位的个数为：5 + 2* 1 = 7（边界需要被统计2次）。单元格总体大小为：7x7。</p>
<p>如果perpectiveRemovePixelPerCell的值为10，那么获取到的图像大小为10*7 = 70 -&gt; 70x70 </p>
<p>这一参数选择更大的值可以提升比特位的提取过程（在某一程度上），但是它同样也降低了性能。</p>
<p>​    缺省值：4</p>
<ul>
<li><code>double perspectiveRemoveIgnoredMarginPerCell</code></li>
</ul>
<p>当提取每个单元格的比特位时，需要统计黑色和白色的像素个数。一般而言，我们不推荐考虑单元格的所有像素。反之，最好忽略单元格的一些像素。</p>
<p>原因在于，透视变换之后，单元格的颜色不会完全分离，白色的单元格可能会混入一些黑色的单元格（反之亦然）。因此，最好忽略这些像素，以避免错误的像素计数。</p>
<p>例如，以下图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/bitsextraction2.png" alt="bitsextraction2.png"></p>
<p>我们只考虑处在绿色正方形中的像素。我们可以在右边的图像中看到，最终的像素包含了邻域单元格更少的噪声。参数<code>perspectiveRemoveIgnoredMarginPerCell</code> 指明了红色和绿色正方形之间的距离。</p>
<p>这一参数是相对于单元格整体的大小的。例如，如果单元格的大小为40像素，这一参数的值为0.1，那么大小为40*0.1=4像素的边界将被剔除。这意味着每个单元格实际上要分析的像素大小为32x32，而不是40x40。</p>
<p>​     缺省值：0.13</p>
<h4 id="Marker-ID"><a href="#Marker-ID" class="headerlink" title="Marker ID"></a>Marker ID</h4><p>比特位提取之后，接下来的步骤是检查提取的编码是否属于这个marker字典，有必要的话，还需要做错误检测步骤。</p>
<ul>
<li><p><code>double maxErroneousBitsInBorderRate</code></p>
<p>marker边界的比特位应当是黑色的。这一参数指明了允许的边界出错比特位的个数。如，边界可以出现的白色比特位的最大值。它的大小相对于marker中的比特位总数。</p>
</li>
</ul>
<p>​    缺省值：0.35</p>
<ul>
<li><code>double errorCorrectionRate</code></li>
</ul>
<p>每个marker字典有一位可以纠正的理论最大值（Dictionary.maxCorrectionBits）。但是，这个值可以由<code>errorCorrectionRate</code> 参数来修改。</p>
<p> 例如，如果允许纠正的比特位（对于使用的字典）数目为6， <code>errorCorrectionRate</code>的值为0.5，那么实际上最大的可以纠正的比特位个数为6*0.5=3</p>
<p>这一值对减少错误容忍率以避免错误的位置识别很有帮助。</p>
<p>​    缺省值：0.6</p>
<h4 id="角落细化（Corner-Refinement）"><a href="#角落细化（Corner-Refinement）" class="headerlink" title="角落细化（Corner Refinement）"></a>角落细化（Corner Refinement）</h4><p>当我们检测完marker，并且验证了它们的id之后，最后要做的一步是在角落处的亚像素级的细化（参见OpenCV <code>cornerSubPix()</code>)</p>
<p>注意，这一步是可选的，仅在我们对marker角位置的准确性要求很高时才有意义。例如，pose的检测。这一步骤很耗费时间，所以默认下是不做的。</p>
<ul>
<li><code>bool doCornerRefinement</code></li>
</ul>
<p>这一参数决定了是否要进行角落亚像素级细化过程，如果对角点的准确性要求不高，可以不进行这一过程。</p>
<p>​    缺省值：false</p>
<ul>
<li><code>int cornerRefinementWinSize</code></li>
</ul>
<p>这一参数决定了亚像素级细化过程的窗口大小。</p>
<p>较大的值可以产生窗口区域内比较靠近的图像角，marker角会移动到一个不同的错误的地方。除此之外这还会影响到性能。</p>
<p>​    缺省值：5</p>
<ul>
<li><code>int cornerRefinementMaxIterations</code>, <code>doublecornerRefinementMinAccuracy</code></li>
</ul>
<p>这两个值决定了亚像素级细化过程的结束条件。cornerRefinementMaxIterations指明了迭代的最大次数，<code>cornerRefinementMinAccuracy</code> 是结束这一过程前的最小错误值。</p>
<p>如果迭代次数过高，这会影响到性能。此外，如果太小的话，亚像素级细化就基本没有发挥作用。</p>
<p>​    缺省值：</p>
<p><code>cornerRefinementMaxIterations</code>: 30, <code>cornerRefinementMinAccuracy</code>: 0.1</p>
]]></content>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Windows10设置Windows terminal 当前目录打开</title>
    <url>/2020/09/15/%E5%85%B3%E4%BA%8EWindows10%E8%AE%BE%E7%BD%AEWindows-terminal-%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Win10-设置Windows-terminal-的特定目录打开设置"><a href="#关于Win10-设置Windows-terminal-的特定目录打开设置" class="headerlink" title="关于Win10 设置Windows terminal 的特定目录打开设置"></a>关于Win10 设置Windows terminal 的特定目录打开设置</h1><blockquote>
<p>参考博客:</p>
<p><a href="https://blog.csdn.net/andyL_05/article/details/105943820">https://blog.csdn.net/andyL_05/article/details/105943820</a></p>
<p>以下内容全部来自参考博客，如有侵权，请联系我删除，感谢</p>
</blockquote>
<h2 id="Windows-Terminal-简介"><a href="#Windows-Terminal-简介" class="headerlink" title="Windows Terminal 简介"></a>Windows Terminal 简介</h2><p>Windows Terminal 是微软推出的Windows端新的命令行工具，相比于之前一直被吐槽丑的command 和 powershell，Windows Terminal更加“现代”，界面好看，使用方便。</p>
<p>作为一款开源工具，repo位于<a href="https://github.com/Microsoft/Terminal">Windows Terminal</a>这里。当前（2020年5月初）版本为v0.11.1251.0，也是v1.0rc1，基本上就是预览版（preview）的最后一个版本了，在源码仓库里时间表上也可以看到<br><img src="https://img-blog.csdnimg.cn/20200506092739206.png" alt="在这里插入图片描述"><br>预计就是本月推出正式版的windows terminal了。<br>以往的预览版通常无法直接安装，需要从源码自行编译。目前已经可以直接从Microsoft Store里直接安装，不过要求系统版本<br><img src="https://img-blog.csdnimg.cn/20200506092952865.png" alt="在这里插入图片描述"><br>在1903或更新。</p>
<hr>
<h2 id="Windows-Terminal设置简要介绍"><a href="#Windows-Terminal设置简要介绍" class="headerlink" title="Windows Terminal设置简要介绍"></a>Windows Terminal设置简要介绍</h2><p>安装后直接打开的Windows Terminal是这个样子：<br><img src="https://img-blog.csdnimg.cn/20200506093128723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">注意到“Windows Terminal”这个名字实在是太长了，所以其实运行的可执行文件叫做 “wt”，按win键启动开始菜单输入 wt 就可以直接打开。<br>首先我们注意到字体就比cmd或者powershell好看了很多<br>点击右侧下拉菜单，可以选择新建其他的命令行，这里只是显示了默认的几个，实际上通过设置可以进行ssh连接到远程主机（不限于win系统）<br><img src="https://img-blog.csdnimg.cn/20200506093355250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置是通过setting.json实现的。<br>打开设置文件，可以看到一系列的设置选项：<br><img src="https://img-blog.csdnimg.cn/20200506093906551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>微软也有完善的文档支持这些设置，<a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md">使用者文档（user documentation）</a></p>
<p>以及 <a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md">setting.json文档</a></p>
<p>可以参考完成设置，我这里就不多说了。<br>简单说一下default里面的设置，就是默认打开的终端设置，这里不光可以设置背景颜色，字体等，还可以选择自定义的图片作为背景，比如我就设置了：<br><img src="https://img-blog.csdnimg.cn/2020050609424670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样的背景，感觉使用起来还是蛮有感觉的。</p>
<p>list内部就是自定义的profiles，可以配置打开不同的终端时的设置。guid就是全局唯一标识符，可以从工具自动生成。其他设置参考文档中的设置即可。</p>
<p>背景的独立设置，不仅美观，而且能够帮助我们直观的区分所处的环境，避免输入错误的命令导致严重后果。</p>
<hr>
<h2 id="Windows-Terminal-当前路径打开"><a href="#Windows-Terminal-当前路径打开" class="headerlink" title="Windows Terminal 当前路径打开"></a>Windows Terminal 当前路径打开</h2><p>熟悉cmd或powershell的朋友们应该知道，如果在文件夹地址栏直接输出 cmd 或 powershell 就可以在文件夹所处路径直接打开命令行终端，而不需要启动后再切换路径，对于Windows系统来说，由于磁盘分区、中文路径、反斜杠等因素，切换路径比起linux更让人烦一点。<br>除此之外，通过修改注册表也能够使用shift+右键选择此处启动powershell，这些都是快速在当前路径启动命令行的方式，那么Windows Terminal能不能这么做呢？</p>
<p>测试发现直接在文件夹地址栏输入wt（因为这个可执行文件就是wt.exe而不是完整名字）确实启动了Windows Terminal，但是初始路径位置并不是当前的文件夹。这里参考我们上面的设置，default里增加一行 “startingDirectory”: “.”，也就是打开目录为当前路径，就可以做到地址栏输入WT在特定目录启动Windows terminal了。</p>
<p>不过这里仍然有一些<strong>问题</strong>：<br>1· 首先如果不加这一行或者不对startingDirectory设置，那么默认启动路径是C:\Users\username这里，无论是双击wt.exe还是地址栏还是开始菜单启动都是这样，设置了之后默认位置就变成了C:\WINDOWS\system32这里，除了地址栏输入wt能够在特定目录启动外，其他运行Windows Terminal的方式一律在这里打开了。<br>2· 另外如果已经有Windows Terminal的窗口打开了，再次启动或者通过地址栏运行wt都会新建一个窗口而不是原来窗口的新标签页，并且标签页不能像浏览器一样拖进拖出；同时在某个路径下打开WT的窗口，点击右边“+”新建的标签页一定在同一个路径。一开始发现这个有点不爽，但是仔细想想可能这样做更实用一些，如果所有终端页面都是可拖动的标签页也难免混淆。<br>以上就是特定目录启动wt的一种方法，setting.json增加相应设置，然后地址栏输入wt按下回车即可。另外在文件夹中，快捷键 ctrl+L将焦点锁定地址栏，这样完全不需要鼠标，听起来有点geek了。</p>
<p>除此之外，通过自己建立注册表，也可以实现类似powershell的右键打开方式，具体方法参考<a href="https://github.com/microsoft/terminal/issues/1060">这个issue</a></p>
<p>由于我本人更喜欢地址栏打开方式，右键打开的配置就不赘述了，通过上述链接查看即可。</p>
]]></content>
      <tags>
        <tag>Windows terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub上传项目文件</title>
    <url>/2020/09/15/GitHub%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="在GitHub上，上传项目文件"><a href="#在GitHub上，上传项目文件" class="headerlink" title="在GitHub上，上传项目文件"></a>在GitHub上，上传项目文件</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>新建仓库</li>
<li>将仓库下载到本地</li>
<li>把要上传的项目文件夹，放进下载的仓库文件夹中</li>
<li>使用以下代码push到GitHub：</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .        </span><br><span class="line">git commit  -m  &quot;提交信息&quot;  </span><br><span class="line">git push -u origin master   </span><br></pre></td></tr></table></figure></h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>对于体积较大的项目文件，可能会遇到如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: the remote end hung up unexpectedly Everything up-to-date</span><br></pre></td></tr></table></figure>
<p><strong>错误原因</strong>：</p>
<p>文件太大</p>
<p><strong>解决办法</strong> :</p>
<blockquote>
<p>转载自<a href="https://blog.csdn.net/qq_21770005/article/details/78733008">https://blog.csdn.net/qq_21770005/article/details/78733008</a></p>
</blockquote>
<ul>
<li>windows:</li>
</ul>
<p>在 .git/config 文件中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">postBuffer &#x3D; 524288000</span><br></pre></td></tr></table></figure>
<ul>
<li>linux:</li>
</ul>
<p>在 .git/config 文件中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux:</span><br><span class="line">git config http.postBuffer 524288000</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Aruco实现AR梳理_1</title>
    <url>/2020/09/14/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Aruco-AR过程梳理-1"><a href="#Aruco-AR过程梳理-1" class="headerlink" title="Aruco AR过程梳理_1"></a>Aruco AR过程梳理_1</h1><hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>目的</strong>：在<em>VS2019</em>运行的<em>OpenGL</em>窗口上，<em>generated virtual computer generated 3D graphics on the realistic environment , i.e.</em> 在<em>OpenGL</em>的相机位置看到<em>AR</em>效果</p>
<p><strong>思路</strong>：</p>
<p><strong>OpenGL的世界中有虚拟相机，现实世界中有真实相机，只要将两个世界的世界坐标重合，相机位置重合，分别渲染虚拟模型与真实场景，即可达到AR效果</strong></p>
<ul>
<li>生成<em>OpenGL</em>窗口</li>
<li>将外部相机捕获的<em>frame</em>传递到<em>OpenGL</em>中，作为背景</li>
<li>定义虚拟的三维物体，将其渲染</li>
<li>相机捕获的背景，不需要透视变换，正交变换即可</li>
<li><p>虚拟物体，需要<em>MVP（model transform, view transform, projection transform）</em>变换</p>
</li>
<li><p>世界坐标系重合，使用OpenCV去做</p>
</li>
</ul>
<hr>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>两个世界的世界坐标系要完全重合，相机位置完全重合</p>
<blockquote>
<p>OpenGL中的世界坐标与虚拟物体局部坐标系的变换为Model Transform，世界坐标系与相机坐标系之间的变换为View Transform；</p>
<p>OpenCV中的aruco，将世界坐标系注册在marker上；<strong>Model Transform 保持不变（即虚拟物体的位置保持不变）</strong> </p>
</blockquote>
<p><em>OpenGL</em> 的摄像机需要实时改变自身位置与姿态，数据来自于<em>opencv</em> 相机标定<del>外参</del> </p>
<blockquote>
<p>相机标定完成后，得到的是相机内参与畸变参数，对于特定的相机来说，都是不变量，因此，相机标定只需要一次即可</p>
<p><strong>通过aruco的marker，获得相机的外参（重点），并实时传入OpenGL的View Transform矩阵</strong> </p>
<blockquote>
<p>用 aruco 的 marker 检测相机位姿时，是从marker坐标系（marker中心）到相机坐标系的一个三维变换矩阵</p>
</blockquote>
<p><strong>相机内参的作用：用来构造Projection Transform</strong> </p>
</blockquote>
<p><em>OpenGL</em> 中的背景图也需要实时改变</p>
<blockquote>
<p>将OpenCV捕获的图像，实时正交投影至背景</p>
</blockquote>
<hr>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ul>
<li><p>虚拟模型没有出现在规定的世界原点处；</p>
</li>
<li><p><del>如何将三维模型直接导入OpenGL，而不是一个一个的定义顶点坐标</del> </p>
<blockquote>
<p>解决方法：导入Assimp库，Assimp能够导入很多种不同的模型文件格式（并也能够导出部分的格式），它会将所有的模型数据加载至Assimp的通用数据结构中。当Assimp加载完模型之后，我们就能够从Assimp的数据结构中提取我们所需的所有数据了</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200913163957.png" alt=""></p>
]]></content>
      <categories>
        <category>Aruco</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>ArucoDemo-2</title>
    <url>/2020/08/23/ArucoDemo-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/95796560">https://blog.csdn.net/qq_33446100/article/details/95796560</a></p>
</blockquote>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawCubeWireframe</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputOutputArray image, cv::InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputArray distCoeffs, cv::InputArray rvec, cv::InputArray tvec,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">float</span> l</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> wait_time = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">float</span> actual_marker_l = <span class="number">0.101</span>; <span class="comment">// this should be in meters</span></span><br><span class="line"></span><br><span class="line">	<span class="function">VideoWriter <span class="title">writer</span><span class="params">(<span class="string">&quot;VideoTest.avi&quot;</span>, VideoWriter::fourcc(<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), <span class="number">20.0</span>, Size(<span class="number">640</span>, <span class="number">480</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">	cv::Mat image, image_copy;</span><br><span class="line">	cv::Mat camera_matrix, dist_coeffs;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">ostringstream</span> vector_to_marker;</span><br><span class="line"></span><br><span class="line">	cv::VideoCapture in_video;</span><br><span class="line">	in_video.open(<span class="number">0</span>);</span><br><span class="line">	cv::Ptr&lt;cv::aruco::Dictionary&gt; dictionary =</span><br><span class="line">		cv::aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">	<span class="function">cv::FileStorage <span class="title">fs</span><span class="params">(<span class="string">&quot;camera.yml&quot;</span>, cv::FileStorage::READ)</span></span>;</span><br><span class="line"></span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; camera_matrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; dist_coeffs;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;camera_matrix\n&quot;</span></span><br><span class="line">		&lt;&lt; camera_matrix &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\ndist coeffs\n&quot;</span></span><br><span class="line">		&lt;&lt; dist_coeffs &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> frame_width = <span class="number">480</span>;</span><br><span class="line">	<span class="keyword">int</span> frame_height = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (in_video.grab())</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		in_video.retrieve(image);</span><br><span class="line">		image.copyTo(image_copy);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt;&gt; corners;</span><br><span class="line">		cv::aruco::detectMarkers(image, dictionary, corners, ids);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// if at least one marker detected</span></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::aruco::drawDetectedMarkers(image_copy, corners, ids);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Vec3d&gt; rvecs, tvecs;</span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(</span><br><span class="line">				corners, actual_marker_l, camera_matrix, dist_coeffs,</span><br><span class="line">				rvecs, tvecs</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// draw axis for each marker</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.size(); i++)</span><br><span class="line">			&#123;</span><br><span class="line">				drawCubeWireframe(</span><br><span class="line">					image_copy, camera_matrix, dist_coeffs, rvecs[i], tvecs[i],</span><br><span class="line">					actual_marker_l</span><br><span class="line">				);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;x: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">0</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">30</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;y: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">1</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">50</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;z: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">2</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">70</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;Pose estimation&quot;</span>, image_copy);</span><br><span class="line"></span><br><span class="line">		writer &lt;&lt; image_copy;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)cv::waitKey(wait_time);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawCubeWireframe</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputOutputArray image, cv::InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputArray distCoeffs, cv::InputArray rvec, cv::InputArray tvec,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">float</span> l</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	CV_Assert(</span><br><span class="line">		image.getMat().total() != <span class="number">0</span> &amp;&amp;</span><br><span class="line">		(image.getMat().channels() == <span class="number">1</span> || image.getMat().channels() == <span class="number">3</span>)</span><br><span class="line">	);</span><br><span class="line">	CV_Assert(l &gt; <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">float</span> half_l = l / <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// project cube points</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point3f&gt; axisPoints;</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, -half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, -half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, -half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, -half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, half_l, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; imagePoints;</span><br><span class="line">	projectPoints(</span><br><span class="line">		axisPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// draw cube edges lines</span></span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">1</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">3</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">4</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">1</span>], imagePoints[<span class="number">2</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">1</span>], imagePoints[<span class="number">5</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">2</span>], imagePoints[<span class="number">3</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">2</span>], imagePoints[<span class="number">6</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">3</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">4</span>], imagePoints[<span class="number">5</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">4</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">5</span>], imagePoints[<span class="number">6</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">6</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200823075820.png" alt=""></p>
]]></content>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco Demo_1</title>
    <url>/2020/08/22/Aruco-Demo-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89209901">https://blog.csdn.net/qq_33446100/article/details/89209901</a></p>
</blockquote>
<a id="more"></a>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>Aruco Demo_1 是在<strong>board</strong>板上显示图片，在相机标定的基础上完成</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\videoio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::aruco;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_NAME <span class="meta-string">&quot;ARDemo&quot;</span></span></span><br><span class="line"></span><br><span class="line">Mat camMatrix, distCoeffs, srcImage;</span><br><span class="line"><span class="keyword">float</span> markerLength = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">readCameraParameters</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename, Mat&amp; camMatrix, Mat&amp; distCoeffs)</span> </span>&#123;</span><br><span class="line">	<span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::READ)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; camMatrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; distCoeffs;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_image</span><span class="params">(Mat image, Mat&amp; frame, Vec3d&amp; rvec, Vec3d&amp; tvec)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;Point3f&gt; points;</span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2f&gt; imagePoints;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> l = markerLength * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">	points.emplace_back(-l, l, <span class="number">0</span>);<span class="comment">//确定每个marker对应的坐标系中四个顶点的位置</span></span><br><span class="line">	points.emplace_back(l, l, <span class="number">0</span>);<span class="comment">//这个坐标是上一篇中绘制出来的坐标轴中对应的坐标</span></span><br><span class="line">	points.emplace_back(l, -l, <span class="number">0</span>);</span><br><span class="line">	points.emplace_back(-l, -l, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过相机内参、外参将3d坐标映射到图像坐标系</span></span><br><span class="line">	cv::projectPoints(points, rvec, tvec, camMatrix, distCoeffs, imagePoints);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> x = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)imagePoints[<span class="number">0</span>].x;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> y = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)imagePoints[<span class="number">0</span>].y;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2f&gt; corners;</span><br><span class="line">	corners.emplace_back(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	corners.emplace_back(image.cols, <span class="number">0</span>);</span><br><span class="line">	corners.emplace_back(image.cols, image.rows);</span><br><span class="line">	corners.emplace_back(<span class="number">0</span>, image.rows);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从四对对应点计算透视变换</span></span><br><span class="line">	cv::Mat T = getPerspectiveTransform(corners, imagePoints);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将透视变换应用于image</span></span><br><span class="line">	Mat warpedImg;</span><br><span class="line">	cv::warpPerspective(image, warpedImg, T, frame.size());</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2i&gt; pts;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : imagePoints) &#123;</span><br><span class="line">		pts.emplace_back((<span class="keyword">int</span>)i.x, (<span class="keyword">int</span>)i.y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用全0填充凸多边形</span></span><br><span class="line">	cv::fillConvexPoly(frame, pts, cv::Scalar::all(<span class="number">0</span>), cv::LINE_AA);</span><br><span class="line">	<span class="comment">//或运算</span></span><br><span class="line">	cv::bitwise_or(warpedImg, frame, frame);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*cout &lt;&lt; points &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; imagePoints &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; corners &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; pts &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	[-50, 50, 0;</span></span><br><span class="line"><span class="comment">	 50, 50, 0;</span></span><br><span class="line"><span class="comment">	 50, -50, 0;</span></span><br><span class="line"><span class="comment">	 -50, -50, 0]</span></span><br><span class="line"><span class="comment">	[98.558197, 147.89699;</span></span><br><span class="line"><span class="comment">	 131.39151, 168.23427;</span></span><br><span class="line"><span class="comment">	 108.73455, 203.80612;</span></span><br><span class="line"><span class="comment">	 75.317993, 184.06393]</span></span><br><span class="line"><span class="comment">	[0, 0;</span></span><br><span class="line"><span class="comment">	 100, 0;</span></span><br><span class="line"><span class="comment">	 100, 100;</span></span><br><span class="line"><span class="comment">	 0, 100]</span></span><br><span class="line"><span class="comment">	[98, 147;</span></span><br><span class="line"><span class="comment">	 131, 168;</span></span><br><span class="line"><span class="comment">	 108, 203;</span></span><br><span class="line"><span class="comment">	 75, 184]</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//waitKey();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">VideoCapture <span class="title">inputVideo</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="comment">//VideoWriter writer(&quot;VideoTest.avi&quot;, VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 25.0, Size(640, 480));</span></span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> readOk = readCameraParameters(<span class="string">&quot;camera.yml&quot;</span>, camMatrix, distCoeffs);</span><br><span class="line">	<span class="keyword">if</span> (!readOk) &#123;</span><br><span class="line">		<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Invalid camera file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; camMatrix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; distCoeffs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	srcImage = imread(<span class="string">&quot;image.png&quot;</span>);</span><br><span class="line">	resize(srcImage, srcImage, Size(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">	namedWindow(WINDOW_NAME);</span><br><span class="line"></span><br><span class="line">	Mat frame;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">		inputVideo &gt;&gt; frame;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point2f&gt;&gt; corners;</span><br><span class="line"></span><br><span class="line">		aruco::detectMarkers(frame, dictionary, corners, ids);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs;<span class="comment">//得到旋转矢量以及平移矢量</span></span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">100</span>, camMatrix, distCoeffs, rvecs, tvecs);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.size(); i++) &#123;</span><br><span class="line">				draw_image(srcImage, frame, rvecs[i], tvecs[i]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//writer &lt;&lt; frame;</span></span><br><span class="line">		&#125;</span><br><span class="line">		cv::imshow(WINDOW_NAME, frame);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	inputVideo.release();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822193805.png" alt=""></p>
]]></content>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco 相机标定</title>
    <url>/2020/08/22/Aruco-%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89192005">https://blog.csdn.net/qq_33446100/article/details/89192005</a></p>
<p><a href="https://mp.weixin.qq.com/s/BT7V4de8p8tpJEcV7acwHA">https://mp.weixin.qq.com/s/BT7V4de8p8tpJEcV7acwHA</a></p>
</blockquote>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Azure Kinect 相机；</p>
<h2 id="步骤一：生成ChAruco-Aruco标定板"><a href="#步骤一：生成ChAruco-Aruco标定板" class="headerlink" title="步骤一：生成ChAruco(Aruco标定板)"></a>步骤一：生成ChAruco(Aruco标定板)</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">By downloading, copying, installing or using the software you agree to this</span></span><br><span class="line"><span class="comment">license. If you do not agree to this license, do not download, install,</span></span><br><span class="line"><span class="comment">copy or use the software.</span></span><br><span class="line"><span class="comment">                          License Agreement</span></span><br><span class="line"><span class="comment">               For Open Source Computer Vision Library</span></span><br><span class="line"><span class="comment">                       (3-clause BSD License)</span></span><br><span class="line"><span class="comment">Copyright (C) 2013, OpenCV Foundation, all rights reserved.</span></span><br><span class="line"><span class="comment">Third party copyrights are property of their respective owners.</span></span><br><span class="line"><span class="comment">Redistribution and use in source and binary forms, with or without modification,</span></span><br><span class="line"><span class="comment">are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">  * Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">  * Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">    and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">  * Neither the names of the copyright holders nor the names of the contributors</span></span><br><span class="line"><span class="comment">    may be used to endorse or promote products derived from this software</span></span><br><span class="line"><span class="comment">    without specific prior written permission.</span></span><br><span class="line"><span class="comment">This software is provided by the copyright holders and contributors &quot;as is&quot; and</span></span><br><span class="line"><span class="comment">any express or implied warranties, including, but not limited to, the implied</span></span><br><span class="line"><span class="comment">warranties of merchantability and fitness for a particular purpose are</span></span><br><span class="line"><span class="comment">disclaimed. In no event shall copyright holders or contributors be liable for</span></span><br><span class="line"><span class="comment">any direct, indirect, incidental, special, exemplary, or consequential damages</span></span><br><span class="line"><span class="comment">(including, but not limited to, procurement of substitute goods or services;</span></span><br><span class="line"><span class="comment">loss of use, data, or profits; or business interruption) however caused</span></span><br><span class="line"><span class="comment">and on any theory of liability, whether in contract, strict liability,</span></span><br><span class="line"><span class="comment">or tort (including negligence or otherwise) arising in any way out of</span></span><br><span class="line"><span class="comment">the use of this software, even if advised of the possibility of such damage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/aruco/charuco.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* about = <span class="string">&quot;Create a ChArUco board image&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys =</span><br><span class="line">        <span class="string">&quot;&#123;@outfile |&lt;none&gt; | Output image &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;w        |       | Number of squares in X direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;h        |       | Number of squares in Y direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sl       |       | Square side length (in pixels) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ml       |       | Marker side length (in pixels) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;d        |       | dictionary: DICT_4X4_50=0, DICT_4X4_100=1, DICT_4X4_250=2,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_4X4_1000=3, DICT_5X5_50=4, DICT_5X5_100=5, DICT_5X5_250=6, DICT_5X5_1000=7, &quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_6X6_50=8, DICT_6X6_100=9, DICT_6X6_250=10, DICT_6X6_1000=11, DICT_7X7_50=12,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_7X7_100=13, DICT_7X7_250=14, DICT_7X7_1000=15, DICT_ARUCO_ORIGINAL = 16&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;m        |       | Margins size (in pixels). Default is (squareLength-markerLength) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;bb       | 1     | Number of bits in marker borders &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;si       | false | show generated image &#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    parser.about(about);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">7</span>) &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> squaresX = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squaresY = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squareLength = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;sl&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> markerLength = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ml&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> dictionaryId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> margins = squareLength - markerLength;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;m&quot;</span>)) &#123;</span><br><span class="line">        margins = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> borderBits = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    <span class="keyword">bool</span> showImage = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;si&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String out = parser.get&lt;String&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parser.check()) &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">        aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">    Size imageSize;</span><br><span class="line">    imageSize.width = squaresX * squareLength + <span class="number">2</span> * margins;</span><br><span class="line">    imageSize.height = squaresY * squareLength + <span class="number">2</span> * margins;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::CharucoBoard&gt; board = aruco::CharucoBoard::create(squaresX, squaresY, (<span class="keyword">float</span>)squareLength,</span><br><span class="line">        (<span class="keyword">float</span>)markerLength, dictionary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show created board</span></span><br><span class="line">    Mat boardImage;</span><br><span class="line">    board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showImage) &#123;</span><br><span class="line">        imshow(<span class="string">&quot;board&quot;</span>, boardImage);</span><br><span class="line">        waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    imwrite(out, boardImage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>使用Visual Studio要在属性中添加以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;chboard.png&quot; -w&#x3D;5 -h&#x3D;7 -sl&#x3D;200 -ml&#x3D;120 -d&#x3D;10</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>在源代码目录生成<strong>chboard.png</strong>图片，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822174733.png" alt=""></p>
<h2 id="步骤二：相机标定"><a href="#步骤二：相机标定" class="headerlink" title="步骤二：相机标定"></a>步骤二：相机标定</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">By downloading, copying, installing or using the software you agree to this</span></span><br><span class="line"><span class="comment">license. If you do not agree to this license, do not download, install,</span></span><br><span class="line"><span class="comment">copy or use the software.</span></span><br><span class="line"><span class="comment">                          License Agreement</span></span><br><span class="line"><span class="comment">               For Open Source Computer Vision Library</span></span><br><span class="line"><span class="comment">                       (3-clause BSD License)</span></span><br><span class="line"><span class="comment">Copyright (C) 2013, OpenCV Foundation, all rights reserved.</span></span><br><span class="line"><span class="comment">Third party copyrights are property of their respective owners.</span></span><br><span class="line"><span class="comment">Redistribution and use in source and binary forms, with or without modification,</span></span><br><span class="line"><span class="comment">are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">  * Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">  * Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">    and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">  * Neither the names of the copyright holders nor the names of the contributors</span></span><br><span class="line"><span class="comment">    may be used to endorse or promote products derived from this software</span></span><br><span class="line"><span class="comment">    without specific prior written permission.</span></span><br><span class="line"><span class="comment">This software is provided by the copyright holders and contributors &quot;as is&quot; and</span></span><br><span class="line"><span class="comment">any express or implied warranties, including, but not limited to, the implied</span></span><br><span class="line"><span class="comment">warranties of merchantability and fitness for a particular purpose are</span></span><br><span class="line"><span class="comment">disclaimed. In no event shall copyright holders or contributors be liable for</span></span><br><span class="line"><span class="comment">any direct, indirect, incidental, special, exemplary, or consequential damages</span></span><br><span class="line"><span class="comment">(including, but not limited to, procurement of substitute goods or services;</span></span><br><span class="line"><span class="comment">loss of use, data, or profits; or business interruption) however caused</span></span><br><span class="line"><span class="comment">and on any theory of liability, whether in contract, strict liability,</span></span><br><span class="line"><span class="comment">or tort (including negligence or otherwise) arising in any way out of</span></span><br><span class="line"><span class="comment">the use of this software, even if advised of the possibility of such damage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/calib3d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/aruco/charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* about =</span><br><span class="line">        <span class="string">&quot;Calibration using a ChArUco board\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  To capture a frame for calibration, press &#x27;c&#x27;,\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  If input comes from video, press any key for next frame\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  To finish capturing, press &#x27;ESC&#x27; key and calibration starts.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys =</span><br><span class="line">        <span class="string">&quot;&#123;w        |       | Number of squares in X direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;h        |       | Number of squares in Y direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sl       |       | Square side length (in meters) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ml       |       | Marker side length (in meters) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;d        |       | dictionary: DICT_4X4_50=0, DICT_4X4_100=1, DICT_4X4_250=2,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_4X4_1000=3, DICT_5X5_50=4, DICT_5X5_100=5, DICT_5X5_250=6, DICT_5X5_1000=7, &quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_6X6_50=8, DICT_6X6_100=9, DICT_6X6_250=10, DICT_6X6_1000=11, DICT_7X7_50=12,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_7X7_100=13, DICT_7X7_250=14, DICT_7X7_1000=15, DICT_ARUCO_ORIGINAL = 16&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@outfile |&lt;none&gt; | Output file with calibrated camera parameters &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;v        |       | Input from video file, if ommited, input comes from camera &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ci       | 0     | Camera id if input doesnt come from video (-v) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;dp       |       | File of marker detector parameters &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;rs       | false | Apply refind strategy &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;zt       | false | Assume zero tangential distortion &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;a        |       | Fix aspect ratio (fx/fy) to this value &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;pc       | false | Fix the principal point at the center &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sc       | false | Show detected chessboard corners after calibration &#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">readDetectorParameters</span><span class="params">(<span class="built_in">string</span> filename, Ptr&lt;aruco::DetectorParameters&gt;&amp; params)</span> </span>&#123;</span><br><span class="line">    <span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::READ)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeMin&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeMin;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeMax&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeMax;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeStep&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeStep;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshConstant&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshConstant;</span><br><span class="line">    fs[<span class="string">&quot;minMarkerPerimeterRate&quot;</span>] &gt;&gt; params-&gt;minMarkerPerimeterRate;</span><br><span class="line">    fs[<span class="string">&quot;maxMarkerPerimeterRate&quot;</span>] &gt;&gt; params-&gt;maxMarkerPerimeterRate;</span><br><span class="line">    fs[<span class="string">&quot;polygonalApproxAccuracyRate&quot;</span>] &gt;&gt; params-&gt;polygonalApproxAccuracyRate;</span><br><span class="line">    fs[<span class="string">&quot;minCornerDistanceRate&quot;</span>] &gt;&gt; params-&gt;minCornerDistanceRate;</span><br><span class="line">    fs[<span class="string">&quot;minDistanceToBorder&quot;</span>] &gt;&gt; params-&gt;minDistanceToBorder;</span><br><span class="line">    fs[<span class="string">&quot;minMarkerDistanceRate&quot;</span>] &gt;&gt; params-&gt;minMarkerDistanceRate;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMethod&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMethod;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementWinSize&quot;</span>] &gt;&gt; params-&gt;cornerRefinementWinSize;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMaxIterations&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMaxIterations;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMinAccuracy&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMinAccuracy;</span><br><span class="line">    fs[<span class="string">&quot;markerBorderBits&quot;</span>] &gt;&gt; params-&gt;markerBorderBits;</span><br><span class="line">    fs[<span class="string">&quot;perspectiveRemovePixelPerCell&quot;</span>] &gt;&gt; params-&gt;perspectiveRemovePixelPerCell;</span><br><span class="line">    fs[<span class="string">&quot;perspectiveRemoveIgnoredMarginPerCell&quot;</span>] &gt;&gt; params-&gt;perspectiveRemoveIgnoredMarginPerCell;</span><br><span class="line">    fs[<span class="string">&quot;maxErroneousBitsInBorderRate&quot;</span>] &gt;&gt; params-&gt;maxErroneousBitsInBorderRate;</span><br><span class="line">    fs[<span class="string">&quot;minOtsuStdDev&quot;</span>] &gt;&gt; params-&gt;minOtsuStdDev;</span><br><span class="line">    fs[<span class="string">&quot;errorCorrectionRate&quot;</span>] &gt;&gt; params-&gt;errorCorrectionRate;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">saveCameraParams</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename, Size imageSize, <span class="keyword">float</span> aspectRatio, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Mat&amp; cameraMatrix, <span class="keyword">const</span> Mat&amp; distCoeffs, <span class="keyword">double</span> totalAvgErr)</span> </span>&#123;</span><br><span class="line">    <span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::WRITE)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> tt;</span><br><span class="line">    time(&amp;tt);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">t2</span> =</span> localtime(&amp;tt);</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    strftime(buf, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>, <span class="string">&quot;%c&quot;</span>, t2);</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;calibration_time&quot;</span> &lt;&lt; buf;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;image_width&quot;</span> &lt;&lt; imageSize.width;</span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;image_height&quot;</span> &lt;&lt; imageSize.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; CALIB_FIX_ASPECT_RATIO) fs &lt;&lt; <span class="string">&quot;aspectRatio&quot;</span> &lt;&lt; aspectRatio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">&quot;flags: %s%s%s%s&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_USE_INTRINSIC_GUESS ? <span class="string">&quot;+use_intrinsic_guess&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_FIX_ASPECT_RATIO ? <span class="string">&quot;+fix_aspectRatio&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_FIX_PRINCIPAL_POINT ? <span class="string">&quot;+fix_principal_point&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_ZERO_TANGENT_DIST ? <span class="string">&quot;+zero_tangent_dist&quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;flags&quot;</span> &lt;&lt; flags;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;camera_matrix&quot;</span> &lt;&lt; cameraMatrix;</span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;distortion_coefficients&quot;</span> &lt;&lt; distCoeffs;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;avg_reprojection_error&quot;</span> &lt;&lt; totalAvgErr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    parser.about(about);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">7</span>) &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> squaresX = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squaresY = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">    <span class="keyword">float</span> squareLength = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;sl&quot;</span>);</span><br><span class="line">    <span class="keyword">float</span> markerLength = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;ml&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> dictionaryId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> outputFile = parser.get&lt;<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> showChessboardCorners = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;sc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> calibrationFlags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> aspectRatio = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">        calibrationFlags |= CALIB_FIX_ASPECT_RATIO;</span><br><span class="line">        aspectRatio = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;zt&quot;</span>)) calibrationFlags |= CALIB_ZERO_TANGENT_DIST;</span><br><span class="line">    <span class="keyword">if</span> (parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;pc&quot;</span>)) calibrationFlags |= CALIB_FIX_PRINCIPAL_POINT;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::DetectorParameters&gt; detectorParams = aruco::DetectorParameters::create();</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;dp&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">bool</span> readOk = readDetectorParameters(parser.get&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;dp&quot;</span>), detectorParams);</span><br><span class="line">        <span class="keyword">if</span> (!readOk) &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Invalid detector parameters file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> refindStrategy = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;rs&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> camId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ci&quot;</span>);</span><br><span class="line">    String video;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;v&quot;</span>)) &#123;</span><br><span class="line">        video = parser.get&lt;String&gt;(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parser.check()) &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    VideoCapture inputVideo;</span><br><span class="line">    <span class="keyword">int</span> waitTime;</span><br><span class="line">    <span class="keyword">if</span> (!video.empty()) &#123;</span><br><span class="line">        inputVideo.open(video);</span><br><span class="line">        waitTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        inputVideo.open(camId);</span><br><span class="line">        waitTime = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">        aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create charuco board object</span></span><br><span class="line">    Ptr&lt;aruco::CharucoBoard&gt; charucoboard =</span><br><span class="line">        aruco::CharucoBoard::create(squaresX, squaresY, squareLength, markerLength, dictionary);</span><br><span class="line">    Ptr&lt;aruco::Board&gt; board = charucoboard.staticCast&lt;aruco::Board&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// collect data from each frame</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; &gt; allCorners;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; &gt; allIds;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allImgs;</span><br><span class="line">    Size imgSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">        Mat image, imageCopy;</span><br><span class="line">        inputVideo.retrieve(image);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; ids;</span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; corners, rejected;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// detect markers</span></span><br><span class="line">        aruco::detectMarkers(image, dictionary, corners, ids, detectorParams, rejected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// refind strategy to detect more markers</span></span><br><span class="line">        <span class="keyword">if</span> (refindStrategy) aruco::refineDetectedMarkers(image, board, corners, ids, rejected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// interpolate charuco corners</span></span><br><span class="line">        Mat currentCharucoCorners, currentCharucoIds;</span><br><span class="line">        <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">            aruco::interpolateCornersCharuco(corners, ids, image, charucoboard, currentCharucoCorners,</span><br><span class="line">                currentCharucoIds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw results</span></span><br><span class="line">        image.copyTo(imageCopy);</span><br><span class="line">        <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) aruco::drawDetectedMarkers(imageCopy, corners);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentCharucoCorners.total() &gt; <span class="number">0</span>)</span><br><span class="line">            aruco::drawDetectedCornersCharuco(imageCopy, currentCharucoCorners, currentCharucoIds);</span><br><span class="line"></span><br><span class="line">        putText(imageCopy, <span class="string">&quot;Press &#x27;c&#x27; to add current frame. &#x27;ESC&#x27; to finish and calibrate&quot;</span>,</span><br><span class="line">            Point(<span class="number">10</span>, <span class="number">20</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line">        <span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(waitTime);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&#x27;c&#x27;</span> &amp;&amp; ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Frame captured&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            allCorners.push_back(corners);</span><br><span class="line">            allIds.push_back(ids);</span><br><span class="line">            allImgs.push_back(image);</span><br><span class="line">            imgSize = image.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (allIds.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Not enough captures for calibration&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat cameraMatrix, distCoeffs;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; rvecs, tvecs;</span><br><span class="line">    <span class="keyword">double</span> repError;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (calibrationFlags &amp; CALIB_FIX_ASPECT_RATIO) &#123;</span><br><span class="line">        cameraMatrix = Mat::eye(<span class="number">3</span>, <span class="number">3</span>, CV_64F);</span><br><span class="line">        cameraMatrix.at&lt; <span class="keyword">double</span> &gt;(<span class="number">0</span>, <span class="number">0</span>) = aspectRatio;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare data for calibration</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; allCornersConcatenated;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; allIdsConcatenated;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; markerCounterPerFrame;</span><br><span class="line">    markerCounterPerFrame.reserve(allCorners.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allCorners.size(); i++) &#123;</span><br><span class="line">        markerCounterPerFrame.push_back((<span class="keyword">int</span>)allCorners[i].size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; allCorners[i].size(); j++) &#123;</span><br><span class="line">            allCornersConcatenated.push_back(allCorners[i][j]);</span><br><span class="line">            allIdsConcatenated.push_back(allIds[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// calibrate camera using aruco markers</span></span><br><span class="line">    <span class="keyword">double</span> arucoRepErr;</span><br><span class="line">    arucoRepErr = aruco::calibrateCameraAruco(allCornersConcatenated, allIdsConcatenated,</span><br><span class="line">        markerCounterPerFrame, board, imgSize, cameraMatrix,</span><br><span class="line">        distCoeffs, noArray(), noArray(), calibrationFlags);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare data for charuco calibration</span></span><br><span class="line">    <span class="keyword">int</span> nFrames = (<span class="keyword">int</span>)allCorners.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allCharucoCorners;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allCharucoIds;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; filteredImages;</span><br><span class="line">    allCharucoCorners.reserve(nFrames);</span><br><span class="line">    allCharucoIds.reserve(nFrames);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nFrames; i++) &#123;</span><br><span class="line">        <span class="comment">// interpolate using camera parameters</span></span><br><span class="line">        Mat currentCharucoCorners, currentCharucoIds;</span><br><span class="line">        aruco::interpolateCornersCharuco(allCorners[i], allIds[i], allImgs[i], charucoboard,</span><br><span class="line">            currentCharucoCorners, currentCharucoIds, cameraMatrix,</span><br><span class="line">            distCoeffs);</span><br><span class="line"></span><br><span class="line">        allCharucoCorners.push_back(currentCharucoCorners);</span><br><span class="line">        allCharucoIds.push_back(currentCharucoIds);</span><br><span class="line">        filteredImages.push_back(allImgs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (allCharucoCorners.size() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Not enough corners for calibration&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// calibrate camera using charuco</span></span><br><span class="line">    repError =</span><br><span class="line">        aruco::calibrateCameraCharuco(allCharucoCorners, allCharucoIds, charucoboard, imgSize,</span><br><span class="line">            cameraMatrix, distCoeffs, rvecs, tvecs, calibrationFlags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> saveOk = saveCameraParams(outputFile, imgSize, aspectRatio, calibrationFlags,</span><br><span class="line">        cameraMatrix, distCoeffs, repError);</span><br><span class="line">    <span class="keyword">if</span> (!saveOk) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Cannot save output file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rep Error: &quot;</span> &lt;&lt; repError &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rep Error Aruco: &quot;</span> &lt;&lt; arucoRepErr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Calibration saved to &quot;</span> &lt;&lt; outputFile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show interpolated charuco corners for debugging</span></span><br><span class="line">    <span class="keyword">if</span> (showChessboardCorners) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> frame = <span class="number">0</span>; frame &lt; filteredImages.size(); frame++) &#123;</span><br><span class="line">            Mat imageCopy = filteredImages[frame].clone();</span><br><span class="line">            <span class="keyword">if</span> (allIds[frame].size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (allCharucoCorners[frame].total() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    aruco::drawDetectedCornersCharuco(imageCopy, allCharucoCorners[frame],</span><br><span class="line">                        allCharucoIds[frame]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line">            <span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol>
<li>Visual Studio 需要在项目属性中（项目属性 -&gt; 调试），添加以下参数：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;camera.yml&quot; -dp&#x3D;&quot;detector_params.yml&quot; -w&#x3D;5 -h&#x3D;7 -sl&#x3D;0.04 -ml&#x3D;0.02 -d&#x3D;10</span><br></pre></td></tr></table></figure>
<ol>
<li>在源代码目录，新建文件，名称为“detector_params.yml”；内容如下所示：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%YAML:1.0</span><br><span class="line">nmarkers: 1024</span><br><span class="line">adaptiveThreshWinSizeMin: 3</span><br><span class="line">adaptiveThreshWinSizeMax: 23</span><br><span class="line">adaptiveThreshWinSizeStep: 10</span><br><span class="line">adaptiveThreshWinSize: 21</span><br><span class="line">adaptiveThreshConstant: 7</span><br><span class="line">minMarkerPerimeterRate: 0.03</span><br><span class="line">maxMarkerPerimeterRate: 4.0</span><br><span class="line">polygonalApproxAccuracyRate: 0.05</span><br><span class="line">minCornerDistance: 10.0</span><br><span class="line">minDistanceToBorder: 3</span><br><span class="line">minMarkerDistance: 10.0</span><br><span class="line">minMarkerDistanceRate: 0.05</span><br><span class="line">cornerRefinementMethod: 0</span><br><span class="line">cornerRefinementWinSize: 5</span><br><span class="line">cornerRefinementMaxIterations: 30</span><br><span class="line">cornerRefinementMinAccuracy: 0.1</span><br><span class="line">markerBorderBits: 1</span><br><span class="line">perspectiveRemovePixelPerCell: 8</span><br><span class="line">perspectiveRemoveIgnoredMarginPerCell: 0.13</span><br><span class="line">maxErroneousBitsInBorderRate: 0.04</span><br><span class="line">minOtsuStdDev: 5.0</span><br><span class="line">errorCorrectionRate: 0.6</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175225.png" alt=""></p>
<p>选中窗口，通过连续按键“C”，采集不同角度的图像；结束按“ESC”；</p>
<p>程序运行结束后，会在源代码目录生成文件<strong>camera.yml</strong>；里面保存着相机标定后的结果；</p>
<h2 id="步骤三：相机标定验证"><a href="#步骤三：相机标定验证" class="headerlink" title="步骤三：相机标定验证"></a>步骤三：相机标定验证</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\videoio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">cv::VideoCapture <span class="title">inputVideo</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="comment">//VideoWriter writer(&quot;VideoTest.avi&quot;, VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 25.0, Size(640, 480));</span></span><br><span class="line">	cv::Mat cameraMatrix, distCoeffs; <span class="comment">// 相机参数</span></span><br><span class="line"></span><br><span class="line">	<span class="function">FileStorage <span class="title">fs</span><span class="params">(<span class="string">&quot;camera.yml&quot;</span>, FileStorage::READ)</span></span>;<span class="comment">//读取相机参数</span></span><br><span class="line">	<span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Could not open the configuration file!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; cameraMatrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; distCoeffs;</span><br><span class="line">	fs.release();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; cameraMatrix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; distCoeffs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);<span class="comment">//创建字典</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		cv::Mat image, imageCopy;</span><br><span class="line"></span><br><span class="line">		inputVideo.retrieve(image);</span><br><span class="line">		image.copyTo(imageCopy);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners;</span><br><span class="line"></span><br><span class="line">		cv::aruco::detectMarkers(image, dictionary, corners, ids);<span class="comment">// 检测markers</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">			<span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs;<span class="comment">//得到旋转矢量以及平移矢量</span></span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">100</span>, cameraMatrix, distCoeffs, rvecs, tvecs);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ids.size(); i++)</span><br><span class="line">				cv::aruco::drawAxis(imageCopy, cameraMatrix, distCoeffs, rvecs[i], tvecs[i], <span class="number">50</span>);<span class="comment">// 画方向轴</span></span><br><span class="line">			<span class="comment">//writer &lt;&lt; imageCopy;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)cv::waitKey(<span class="number">20</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p>将相机对准标定板（如下图所示）</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175801.png" alt=""></p>
<p>运行后结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175913.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title> Aruco创建Board</title>
    <url>/2020/08/22/Aruco%E5%88%9B%E5%BB%BABoard/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89186826">https://blog.csdn.net/qq_33446100/article/details/89186826</a></p>
</blockquote>
<a id="more"></a>
<h2 id="Board作用"><a href="#Board作用" class="headerlink" title="Board作用"></a>Board作用</h2><ul>
<li><p>board是一个aruco marker的棋盘，上面布置了许多marker。</p>
</li>
<li><p>board可用于校准（Calibrate）摄像机 </p>
</li>
</ul>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> markersX = <span class="number">5</span>;<span class="comment">//X轴上标记的数量</span></span><br><span class="line">	<span class="keyword">int</span> markersY = <span class="number">5</span>;<span class="comment">//Y轴上标记的数量   本例生成5x5的棋盘</span></span><br><span class="line">	<span class="keyword">int</span> markerLength = <span class="number">100</span>;<span class="comment">//标记的长度，单位是像素</span></span><br><span class="line">	<span class="keyword">int</span> markerSeparation = <span class="number">20</span>;<span class="comment">//每个标记之间的间隔，单位像素</span></span><br><span class="line">	<span class="keyword">int</span> dictionaryId = cv::aruco::DICT_4X4_50;<span class="comment">//生成标记的字典ID</span></span><br><span class="line">	<span class="keyword">int</span> margins = markerSeparation;<span class="comment">//标记与边界之间的间隔</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">int</span> borderBits = <span class="number">1</span>;<span class="comment">//标记的边界所占的bit位数</span></span><br><span class="line">	<span class="keyword">bool</span> showImage = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">	Size imageSize;</span><br><span class="line">	imageSize.width = markersX * (markerLength + markerSeparation) - markerSeparation + <span class="number">2</span> * margins;</span><br><span class="line">	imageSize.height =</span><br><span class="line">		markersY * (markerLength + markerSeparation) - markerSeparation + <span class="number">2</span> * margins;</span><br><span class="line"> </span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"> </span><br><span class="line">	Ptr&lt;aruco::GridBoard&gt; board = aruco::GridBoard::create(markersX, markersY, <span class="keyword">float</span>(markerLength),</span><br><span class="line">		<span class="keyword">float</span>(markerSeparation), dictionary);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// show created board</span></span><br><span class="line">	Mat boardImage;</span><br><span class="line">	board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> (showImage) &#123;</span><br><span class="line">		imshow(<span class="string">&quot;board&quot;</span>, boardImage);</span><br><span class="line">		waitKey(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822115151.png" alt=""></p>
]]></content>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco检测Marker</title>
    <url>/2020/08/22/Aruco%E6%A3%80%E6%B5%8BMarker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89115983">https://blog.csdn.net/qq_33446100/article/details/89115983</a></p>
<p><a href="https://docs.opencv.org/4.0.1/d9/d6a/group__aruco.html">https://docs.opencv.org/4.0.1/d9/d6a/group__aruco.html</a></p>
</blockquote>
<a id="more"></a>
<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><ul>
<li><p>Azure Kinect</p>
<p>使用RGB相机，Kinect不接电源</p>
</li>
<li><p>VS2019</p>
</li>
</ul>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cv::Mat markerImage;</span><br><span class="line">	<span class="function">cv::VideoCapture <span class="title">mVideoCapture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建字典，这里注意使用Ptr&lt;&gt;，不然无法显示结果</span></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);</span><br><span class="line">	cv::aruco::drawMarker(dictionary, <span class="number">23</span>, <span class="number">240</span>, markerImage);<span class="comment">//这里取出一个marker用于检测</span></span><br><span class="line"></span><br><span class="line">	imshow(<span class="string">&quot;marker&quot;</span>, markerImage);<span class="comment">//显示待检测标记</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (mVideoCapture.grab())<span class="comment">//取得下一帧</span></span><br><span class="line">	&#123;</span><br><span class="line">		cv::Mat frame, frame_show;</span><br><span class="line">		mVideoCapture.retrieve(frame);<span class="comment">//放入Mat</span></span><br><span class="line"></span><br><span class="line">		frame.copyTo(frame_show);<span class="comment">//复制一份</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt;&gt; corners;</span><br><span class="line"></span><br><span class="line">		cv::aruco::detectMarkers(frame, dictionary, corners, ids);<span class="comment">//检测该帧是否有标记</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">			cv::aruco::drawDetectedMarkers(frame_show, corners, ids);<span class="comment">//如果有，则标记出来，放入另一个Mat</span></span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;video&quot;</span>, frame_show);<span class="comment">//显示结果</span></span><br><span class="line"></span><br><span class="line">		waitKey(<span class="number">30</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822112653.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822112801.png" alt=""></p>
]]></content>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Windows本地配置Aruco</title>
    <url>/2020/08/20/Windows%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEAruco/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>环境：win10 + VS2019 + OpenCV4.30</p>
</blockquote>
<a id="more"></a>
<h2 id="下载Contrib库"><a href="#下载Contrib库" class="headerlink" title="下载Contrib库"></a>下载Contrib库</h2><p>传送门：<a href="https://github.com/opencv/opencv_contrib/releases">click it</a></p>
<p>(<strong>注意</strong>：选择与OpenCV对应的库)</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155046.png" alt=""></p>
<h2 id="CMake编译OpecCV"><a href="#CMake编译OpecCV" class="headerlink" title="CMake编译OpecCV"></a>CMake编译OpecCV</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155137.png" alt=""></p>
<p>点击<em>configure</em>，如果有红色，继续点<em>configure</em>，直至红色都消失</p>
<h2 id="CMake编译OpenCV-contrib"><a href="#CMake编译OpenCV-contrib" class="headerlink" title="CMake编译OpenCV-contrib"></a>CMake编译OpenCV-contrib</h2><ul>
<li>将<em>opencv_contrib-4.3.0</em>放置在<em>F:\DownLoad\opencv</em>目录下，在CMake中找到<em>OPENCV_EXTRA_MODULES_PATH</em>，填入<em>F:\DownLoad\opencv\opencv_contrib-4.3.0\modules</em>路径，并勾选上方<em>OPENCV_ENABLE_NONFREE</em>；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155702.png" alt=""></p>
<p>点击<em>configure</em>，如果有红色，继续点<em>configure</em>，直至红色都消失</p>
<p>最后点击<em>generate</em></p>
<h2 id="VS2019编译debug与release库"><a href="#VS2019编译debug与release库" class="headerlink" title="VS2019编译debug与release库"></a>VS2019编译debug与release库</h2><p>打开OpenCV.sln项目文件；</p>
<h3 id="编译debug库"><a href="#编译debug库" class="headerlink" title="编译debug库"></a>编译debug库</h3><p>解决方案 -&gt; 右键重新生成解决方案</p>
<p>完成后，找到CMakeTargets中的INSTALL，然后右键选择“仅限于项目”—&gt;“仅生成INSTALL”；</p>
<h3 id="编译release库"><a href="#编译release库" class="headerlink" title="编译release库"></a>编译release库</h3><p>和上面差不多</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>系统变量 -&gt; PATH ，添加 F:\DownLoad\MyBuild\install\x64\vc16\bin</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160215.png" alt=""></p>
<p>用户变量：</p>
<p>变量名：OPENCV</p>
<p>变量值：F:\DownLoad\MyBuild\install\include</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160401.png" alt=""></p>
<h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><p>与配置OpenCV相同，新建一个项目，新建一个属性表，为日后重复使用奠定基础</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160634.png" alt=""></p>
<p>属性 -&gt; VC++目录 -&gt; 包含目录，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\DownLoad\MyBuild\install\include</span><br><span class="line">F:\DownLoad\MyBuild\install\include\opencv2</span><br></pre></td></tr></table></figure>
<p>VC++目录 —&gt; 库目录，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\DownLoad\MyBuild\install\x64\vc16\lib</span><br></pre></td></tr></table></figure>
<p>链接器 -&gt; 输入 -&gt; 附加依赖项 ，添加以下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv_aruco430d.lib;</span><br><span class="line">opencv_bgsegm430d.lib;</span><br><span class="line">opencv_bioinspired430d.lib;</span><br><span class="line">opencv_calib3d430d.lib;</span><br><span class="line">opencv_ccalib430d.lib;</span><br><span class="line">opencv_core430d.lib;</span><br><span class="line">opencv_datasets430d.lib;</span><br><span class="line">opencv_dnn_objdetect430d.lib;</span><br><span class="line">opencv_dnn430d.lib;</span><br><span class="line">opencv_dpm430d.lib;</span><br><span class="line">opencv_face430d.lib;</span><br><span class="line">opencv_features2d430d.lib;</span><br><span class="line">opencv_flann430d.lib;</span><br><span class="line">opencv_fuzzy430d.lib;</span><br><span class="line">opencv_hdf430d.lib;</span><br><span class="line">opencv_hfs430d.lib;</span><br><span class="line">opencv_highgui430d.lib;</span><br><span class="line">opencv_img_hash430d.lib;</span><br><span class="line">opencv_imgcodecs430d.lib;</span><br><span class="line">opencv_imgproc430d.lib;</span><br><span class="line">opencv_line_descriptor430d.lib;</span><br><span class="line">opencv_ml430d.lib;</span><br><span class="line">opencv_objdetect430d.lib;</span><br><span class="line">opencv_optflow430d.lib;</span><br><span class="line">opencv_phase_unwrapping430d.lib;</span><br><span class="line">opencv_photo430d.lib;</span><br><span class="line">opencv_plot430d.lib;</span><br><span class="line">opencv_reg430d.lib;</span><br><span class="line">opencv_rgbd430d.lib;</span><br><span class="line">opencv_saliency430d.lib;</span><br><span class="line">opencv_shape430d.lib;</span><br><span class="line">opencv_stereo430d.lib;</span><br><span class="line">opencv_stitching430d.lib;</span><br><span class="line">opencv_structured_light430d.lib;</span><br><span class="line">opencv_superres430d.lib;</span><br><span class="line">opencv_surface_matching430d.lib;</span><br><span class="line">opencv_text430d.lib;</span><br><span class="line">opencv_tracking430d.lib;</span><br><span class="line">opencv_video430d.lib;</span><br><span class="line">opencv_videoio430d.lib;</span><br><span class="line">opencv_videostab430d.lib;</span><br><span class="line">opencv_xfeatures2d430d.lib;</span><br><span class="line">opencv_ximgproc430d.lib;</span><br><span class="line">opencv_xobjdetect430d.lib;</span><br><span class="line">opencv_xphoto430d.lib;</span><br></pre></td></tr></table></figure>
<h2 id="测试-生成Aruco-board"><a href="#测试-生成Aruco-board" class="headerlink" title="测试 - 生成Aruco_board"></a>测试 - 生成Aruco_board</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2\highgui.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco\dictionary.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco\charuco.hpp&gt;</span><br><span class="line">#include &lt;opencv2\core.hpp&gt;</span><br><span class="line">#include &lt;opencv2\imgproc\imgproc.hpp&gt;</span><br><span class="line">#include &lt;opencv2\opencv.hpp&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int markersX &#x3D; 5;&#x2F;&#x2F;X轴上标记的数量</span><br><span class="line">	int markersY &#x3D; 5;&#x2F;&#x2F;Y轴上标记的数量   本例生成5x5的棋盘</span><br><span class="line">	int markerLength &#x3D; 100;&#x2F;&#x2F;标记的长度，单位是像素</span><br><span class="line">	int markerSeparation &#x3D; 20;&#x2F;&#x2F;每个标记之间的间隔，单位像素</span><br><span class="line">	int dictionaryId &#x3D; cv::aruco::DICT_4X4_50;&#x2F;&#x2F;生成标记的字典ID</span><br><span class="line">	int margins &#x3D; markerSeparation;&#x2F;&#x2F;标记与边界之间的间隔</span><br><span class="line"></span><br><span class="line">	int borderBits &#x3D; 1;&#x2F;&#x2F;标记的边界所占的bit位数</span><br><span class="line">	bool showImage &#x3D; true;</span><br><span class="line"></span><br><span class="line">	Size imageSize;</span><br><span class="line"></span><br><span class="line">	imageSize.width &#x3D; markersX * (markerLength + markerSeparation) - markerSeparation + 2 * margins;</span><br><span class="line"></span><br><span class="line">	imageSize.height &#x3D; markersY * (markerLength + markerSeparation) - markerSeparation + 2 * margins;</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary &#x3D; aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::GridBoard&gt; board &#x3D; aruco::GridBoard::create(markersX, markersY, float(markerLength), float(markerSeparation), dictionary);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; show created board</span><br><span class="line">	Mat boardImage;</span><br><span class="line">	board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"></span><br><span class="line">	if (showImage) &#123;</span><br><span class="line">		imshow(&quot;board&quot;, boardImage);</span><br><span class="line">		waitKey(0);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820154403.png" alt=""></p>
]]></content>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VS2019 创建C++ dll用于Unity</title>
    <url>/2020/08/12/%E4%BD%BF%E7%94%A8VS2019-%E5%88%9B%E5%BB%BAC-dll%E7%94%A8%E4%BA%8EUnity/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考博客：</p>
<p><a href="https://www.cnblogs.com/aWxvdmVseXc0/p/12857974.html">https://www.cnblogs.com/aWxvdmVseXc0/p/12857974.html</a></p>
<p><a href="https://blog.csdn.net/zhunju0089/article/details/103458855">https://blog.csdn.net/zhunju0089/article/details/103458855</a></p>
</blockquote>
<a id="more"></a>
<h3 id="创建VS项目"><a href="#创建VS项目" class="headerlink" title="创建VS项目"></a>创建VS项目</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145559.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145630.png" alt=""></p>
<h3 id="创建项目成功后，打开pch-h文件，定义导出函数的定义"><a href="#创建项目成功后，打开pch-h文件，定义导出函数的定义" class="headerlink" title="创建项目成功后，打开pch.h文件，定义导出函数的定义"></a>创建项目成功后，打开<strong>pch.h</strong>文件，定义导出函数的定义</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145856.png" style="zoom:200%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">myadd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="打开pch-cpp文件，实现上述函数的具体功能"><a href="#打开pch-cpp文件，实现上述函数的具体功能" class="headerlink" title="打开pch.cpp文件，实现上述函数的具体功能"></a>打开<strong>pch.cpp</strong>文件，实现上述函数的具体功能</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150216.png" style="zoom:200%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="点击生成解决方案，即可生成dll文件"><a href="#点击生成解决方案，即可生成dll文件" class="headerlink" title="点击生成解决方案，即可生成dll文件"></a>点击<strong>生成解决方案</strong>，即可生成dll文件</h3><h3 id="在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中"><a href="#在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中" class="headerlink" title="在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中"></a>在Unity项目中，新建文件夹<strong>Plugins</strong>，将生成的dll文件复制进此文件夹中</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150544.png" alt=""></p>
<h3 id="脚本调用"><a href="#脚本调用" class="headerlink" title="脚本调用"></a>脚本调用</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150843.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150927.png" style="zoom:200%;" /></p>
]]></content>
      <tags>
        <tag>Unity</tag>
        <tag>dll</tag>
      </tags>
  </entry>
  <entry>
    <title> OpenGL调用Azure Kinect 实现过程</title>
    <url>/2020/08/03/OpenGL%E8%B0%83%E7%94%A8Azure-Kinect-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>源代码来源：</p>
<p>源代码作者：无雨森；浙江科技大学在读博士</p>
</blockquote>
<a id="more"></a>
<h2 id="软件硬件"><a href="#软件硬件" class="headerlink" title="软件硬件"></a>软件硬件</h2><p>VS2019</p>
<p>Azure Kinect</p>
<h2 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h2><p>OpenGL_GLUT_ShowImage</p>
<h2 id="本地配置过程"><a href="#本地配置过程" class="headerlink" title="本地配置过程"></a>本地配置过程</h2><h3 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h3><p>略过</p>
<h3 id="配置模式与头文件路径"><a href="#配置模式与头文件路径" class="headerlink" title="配置模式与头文件路径"></a>配置模式与头文件路径</h3><ul>
<li>本地建立VS空项目，release X64模式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102606.png" alt=""></p>
<ul>
<li>新建cpp文档，作为源文件，将OpenGL_GLUT_ShowImage的源代码复制进新建的cpp文档</li>
<li>配置头文件路径，本文以此为例</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102928.png" alt=""></p>
<p>项目 -&gt; 属性 -&gt; C/C++ -&gt; 附加包含目录</p>
<p>填入上面图片所示路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103339.png" alt=""></p>
<h3 id="安装Kinect包"><a href="#安装Kinect包" class="headerlink" title="安装Kinect包"></a>安装Kinect包</h3><p>打开包管理器，下载如下图所示包</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731101741.png" alt=""></p>
<p>安装结束后，即可发现代码已经没有报错</p>
<h3 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h3><p>此时F5运行，会发现报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731105327.png" alt=""></p>
<p>解决方法：</p>
<p>在windows.h语句上方，加入以下语句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOMINMAX</span></span><br></pre></td></tr></table></figure>
<p>整体看起来是这样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731105536.png" alt=""></p>
<p>此时F5运行，会出现更多错误</p>
<p>一种是 C++ error:LNK2005 已经在*.obj中定义</p>
<p>另一种是和OpenCV的错误一样，无法解析外部命令；这里就略过了</p>
<p>解决方法：</p>
<p>在 属性-&gt;配置属性-&gt;链接器-&gt;命令行中添加 /FORCE:MULTIPLE 即可</p>
<p>此时F5运行，出现错误：</p>
<p>fatal error LNK1179: 无效或损坏的文件: 重复的XXX</p>
<p>解决方法：</p>
<p>属性-C/C++-优化-全程序优化 选择“否”</p>
<p>此时F5运行，成功！</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200803215839.png" alt=""></p>
]]></content>
      <tags>
        <tag>Azure Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title> OpenCV调用Azure Kinect 实现过程</title>
    <url>/2020/08/01/OpenCV%E8%B0%83%E7%94%A8Azure-Kinect-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>源代码来源：</p>
<p>源代码作者：无雨森</p>
<p>浙江科技大学在读博士</p>
</blockquote>
<a id="more"></a>
<h2 id="软件硬件a"><a href="#软件硬件a" class="headerlink" title="软件硬件a"></a>软件硬件a</h2><p>VS2019</p>
<p>Azure Kinect</p>
<h2 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h2><p>OpenCV_OneKinect</p>
<h2 id="本地配置过程"><a href="#本地配置过程" class="headerlink" title="本地配置过程"></a>本地配置过程</h2><h3 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h3><p>略过</p>
<h3 id="配置模式与头文件路径"><a href="#配置模式与头文件路径" class="headerlink" title="配置模式与头文件路径"></a>配置模式与头文件路径</h3><ul>
<li>本地建立VS空项目，release X64模式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102606.png" alt=""></p>
<ul>
<li>新建cpp文档，作为源文件，将OpenCV_OneKinect的源代码复制进新建的cpp文档</li>
<li>配置头文件路径，本文以此为例</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102928.png" alt=""></p>
<p>项目 -&gt; 属性 -&gt; C/C++ -&gt; 附加包含目录</p>
<p>填入上面图片所示路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103339.png" alt=""></p>
<h3 id="安装Kinect包"><a href="#安装Kinect包" class="headerlink" title="安装Kinect包"></a>安装Kinect包</h3><p>打开包管理器，下载如下图所示包</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103706.png" alt=""></p>
<p>安装结束后，即可发现代码已经没有报错</p>
<h3 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h3><p>此时F5运行，会发现报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731104137.png" alt=""><br>错误    LNK2001    无法解析的外部符号 “void <strong>cdecl sen::ColorizeDepthImage(class k4a::image const &amp;,struct sen::Pixel (</strong>cdecl<em>)(unsigned short const &amp;,unsigned short const &amp;,unsigned short const &amp;),struct std::pair<unsigned short,unsigned short>,class std::vector<struct sen::Pixel,class std::allocator<struct sen::Pixel> &gt; </em>)” (?ColorizeDepthImage@sen@@YAXAEBVimage@k4a@@P6A?AUPixel@1@AEBG11@ZU?$pair@GG@std@@PEAV?$vector@UPixel@sen@@V?$allocator@UPixel@sen@@@std@@@6@@Z)    Test    F:\VS_Area\Test\源.obj    1    </p>
<p>原因：</p>
<p>StaticImageProperties.h头文件中，缺少ColorizeDepthImage的函数体</p>
<p>解决方法：</p>
<p>在StaticImageProperties.h头文件中添加即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ColorizeDepthImage</span><span class="params">(<span class="keyword">const</span> k4a::image&amp; depthImage,</span></span></span><br><span class="line"><span class="function"><span class="params">		DepthPixelVisualizationFunction visualizationFn,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">uint16_t</span>, <span class="keyword">uint16_t</span>&gt; expectedValueRange,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Pixel&gt;* buffer)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">k4a_image_format_t</span> imageFormat = depthImage.get_format();</span><br><span class="line">		<span class="keyword">if</span> (imageFormat != K4A_IMAGE_FORMAT_DEPTH16 &amp;&amp; imageFormat != K4A_IMAGE_FORMAT_IR16)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::logic_error(<span class="string">&quot;Attempted to colorize a non-depth image!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">int</span> width = depthImage.get_width_pixels();</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">int</span> height = depthImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">		buffer-&gt;resize(<span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(width * height));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">uint16_t</span>* depthData = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint16_t</span>*&gt;(depthImage.get_buffer());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; height; ++h)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; width; ++w)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">const</span> <span class="keyword">size_t</span> currentPixel = <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(h * width + w);</span><br><span class="line">				(*buffer)[currentPixel] = visualizationFn(depthData[currentPixel], expectedValueRange.first, expectedValueRange.second);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>运行成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200801211404.png" alt=""></p>
]]></content>
      <tags>
        <tag>Azure Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>HOLOLENS2开发1</title>
    <url>/2020/05/20/HOLOLENS2%E5%BC%80%E5%8F%911/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hololens初步上手</p>
<a id="more"></a>
<h2 id="HOLOLENS2-开发-环境配置"><a href="#HOLOLENS2-开发-环境配置" class="headerlink" title="HOLOLENS2 开发 - 环境配置"></a>HOLOLENS2 开发 - 环境配置</h2><blockquote>
<p>现在毕设项目已经做完，现在复盘下走过的坑</p>
<p>可通过邮件2998963449@qq.com联系</p>
</blockquote>
<h3 id="第1步：单独安装Win10-SDK"><a href="#第1步：单独安装Win10-SDK" class="headerlink" title="第1步：单独安装Win10 SDK"></a>第1步：单独安装Win10 SDK</h3><p>SDK下载链接：<a href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-10-sdk/">I am here</a></p>
<ol>
<li>安装时必须使用短路径！（建议放在C盘），如<code>C:\SDK</code></li>
<li>请记住这个路径，因为后续在VS中部署时，解决错误时需要用到此路径</li>
</ol>
<h3 id="第2步：安装Unity，VS2019"><a href="#第2步：安装Unity，VS2019" class="headerlink" title="第2步：安装Unity，VS2019"></a>第2步：安装Unity，VS2019</h3><p>安装完Win10 SDK后</p>
<h3 id="1-安装Unity"><a href="#1-安装Unity" class="headerlink" title="1. 安装Unity"></a>1. 安装Unity</h3><p>链接：<a href="https://unity.cn/releases">传送门</a></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>推荐下载下图所示，因为其他的安装渠道，博主并没有看到有单独安装组件的界面；不过需要外网才能提高网速，博主在不开启外网情况下，网速在30-40k/s<br><img src="https://img-blog.csdnimg.cn/20200302144820699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<ol>
<li><p>安装组件界面：（不必勾选这么多）<br><img src="https://img-blog.csdnimg.cn/20200302145208244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>下载完成后，如需要 Vuforia 组件，请<a href="https://blog.csdn.net/qq_43656250/article/details/104475189">参考此链接</a></p>
</li>
</ol>
<h3 id="2-安装VS2019"><a href="#2-安装VS2019" class="headerlink" title="2. 安装VS2019"></a>2. 安装VS2019</h3><p>链接：<a href="https://visualstudio.microsoft.com/zh-hans/vs/">传送门</a></p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol>
<li>组件选择：<br><img src="https://img-blog.csdnimg.cn/20200302145823352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<ol>
<li><p>使用Unity的游戏开发：不要勾选编辑器！之前装过了</p>
</li>
<li><p>通用Windows平台开发中会包含Win10 SDK，没办法</p>
</li>
</ol>
<h3 id="3-后续问题"><a href="#3-后续问题" class="headerlink" title="3.后续问题"></a>3.后续问题</h3><p>到此基本就已经结束了，但是在Unity做完项目以后，使用VS2019打开项目时，并不能直接使用，会出现以下报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MSB3774找不到SDK“ WindowsMo​​bile，版本&#x3D; 10.0.17763.0”</span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<p><a href="https://developercommunity.visualstudio.com/content/problem/402362/msb3774-could-not-find-sdk-windowsmobile-version10.html">https://developercommunity.visualstudio.com/content/problem/402362/msb3774-could-not-find-sdk-windowsmobile-version10.html</a></p>
<p><img src="https://i.loli.net/2020/05/20/jcPnxkgND3opC8a.png" alt=""></p>
]]></content>
      <tags>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>VisonLib SDK 初接触</title>
    <url>/2020/05/18/VisonLib-SDK-%E5%88%9D%E6%8E%A5%E8%A7%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AR质检方案</p>
<a id="more"></a>
<h2 id="接触VisonLib-SDK"><a href="#接触VisonLib-SDK" class="headerlink" title="接触VisonLib SDK"></a>接触VisonLib SDK</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>由于毕设需求，在网上寻找能够解决质量检测或者测量方面的<em>AR SDK</em>，找到了这篇报道：<a href="https://www.toutiao.com/a6674774916132241931/">VisionLib推跨平台AR质检解决方案，可结合CAD对比检测</a></p>
<p>所以开始准备尝试下</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>进<a href="https://visionlib.com/#sect-6">官网</a></li>
<li>注册申请使用<em>SDK</em>（会有人员审核，我是隔一天以后收到的登录密码）</li>
<li>等待邮件通知审核通过，复制账号密码</li>
<li><p>登录官网</p>
</li>
<li><p>直接下载<em>vlUnitySDK v20.3.1 Gengral Release</em></p>
</li>
<li>网页页面拉到底，下载许可证文件</li>
</ol>
<p><img src="https://i.loli.net/2020/05/18/7Nf4r9JIo6HvBKi.png" alt=""></p>
<ol>
<li>新建Unity 项目</li>
<li>导入下载好的<em>package</em></li>
</ol>
<p><img src="C:\Users\VR5\AppData\Roaming\Typora\typora-user-images\image-20200518191431453.png" alt="image-20200518191431453"></p>
<h3 id="配置工作"><a href="#配置工作" class="headerlink" title="配置工作"></a>配置工作</h3><ol>
<li>进入<em>StreamingAssets-&gt;VisionLib</em>目录，将下载的许可证文件（<em>license.xml</em>）复制进此目录下</li>
<li>将电脑接上摄像头</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>官方demo使用的是折纸折起来的各种汽车，官方资源链接在此 <a href="https://visionlib.com/customer-area/resources/">Resources</a></p>
<p>使用的话可以查看<em>SDK</em>本身自带的<em>demo</em></p>
<p>由于后续写的文章，没有拍摄图片下来，希望各位自己做一下</p>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>感觉和<em>Vuforia</em>功能上差别不大，<em>model target</em>（识别实物）的功能，这个<em>SDK</em>支持多个识别，<em>Vuforia</em>试过不可以。</p>
<p>另外，识别过程中的官方水印也太强了，真的是。。。。</p>
]]></content>
      <tags>
        <tag>VisonLib</tag>
      </tags>
  </entry>
  <entry>
    <title>word中美观地插入代码方法</title>
    <url>/2020/05/18/word%E4%B8%AD%E7%BE%8E%E8%A7%82%E5%9C%B0%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何在word中美观的写入code呢？</p>
<a id="more"></a>
<h2 id="优雅的在-Microsoft-word中插入代码，使文档更美观！！！"><a href="#优雅的在-Microsoft-word中插入代码，使文档更美观！！！" class="headerlink" title="优雅的在 Microsoft word中插入代码，使文档更美观！！！"></a>优雅的在 Microsoft word中插入代码，使文档更美观！！！</h2><blockquote>
<p>本文转载自 <a href="https://blog.csdn.net/u011303443/article/details/50992651?utm_source=copy">https://blog.csdn.net/u011303443/article/details/50992651?utm_source=copy</a></p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2020/05/18/a7OuKt9znPI5xHM.png" alt=""></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>浏览器打开网页<a href="http://www.planetb.ca/syntax-highlight-word">PlanetB</a></p>
<p><img src="https://i.loli.net/2020/05/18/d9HalcCbJYkyULP.png" alt=""></p>
</li>
<li><p>将要复制的代码粘贴进网页下方的<em>code</em>白框中</p>
<p><img src="https://i.loli.net/2020/05/18/mIeGjQL6f1FYbJ3.png" alt=""></p>
</li>
<li><p>选择语言类型</p>
</li>
<li><p>点击<em>Show HighLighted</em></p>
</li>
<li><p>在新打开的页面上<em>Ctrl+A</em>全选，复制，粘贴进<em>word</em>中。</p>
<p><img src="https://i.loli.net/2020/05/18/lEaDSFz5gIA3ctH.png" alt=""></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>word中插入代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity重新激活许可证</title>
    <url>/2020/05/06/Unity%E9%87%8D%E6%96%B0%E6%BF%80%E6%B4%BB%E8%AE%B8%E5%8F%AF%E8%AF%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于出现 <em>your license does not cover Universal Windows Platform Publishing</em> 的错误</p>
<a id="more"></a>
<h2 id="关于出现-your-license-does-not-cover-Universal-Windows-Platform-Publishing-的错误"><a href="#关于出现-your-license-does-not-cover-Universal-Windows-Platform-Publishing-的错误" class="headerlink" title="关于出现 your license does not cover Universal Windows Platform Publishing 的错误"></a>关于出现 <em>your license does not cover Universal Windows Platform Publishing</em> 的错误</h2><p>错误截图如下：</p>
<p><a href="https://imgchr.com/i/YPoiYn"><img src="https://s1.ax1x.com/2020/05/05/YPoiYn.png" alt="YPoiYn.png"></a></p>
<p>解决方法：重新激活许可证即可解决</p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuforia 9.0来啦</title>
    <url>/2020/04/28/Vuforia-9-0%E6%9D%A5%E5%95%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>来了，Vuforia 9.0来了！</p>
<a id="more"></a>
<p>转载自 <a href="https://unity.cn/projects/lai-liao-vuforia-9-0lai-liao">https://unity.cn/projects/lai-liao-vuforia-9-0lai-liao</a></p>
<p><a href="https://blogs.unity3d.com/2020/04/21/augment-your-spaces-with-vuforia-engine/">原文链接：https://blogs.unity3d.com/2020/04/21/augment-your-spaces-with-vuforia-engine/</a></p>
<p>在新版本中，可以使用Area Target（区域型目标）轻松地在大型环境中制作沉浸式增强现实（AR）体验。</p>
<p>日常的生活、工作和购物空间中包含大量的价值信息，但要获取特定语境的相关数据会比较困难。目前基于对象的增强现实（AR）技术仅能在视场中展示物体，并不具备处理大型空间的能力。</p>
<p>为了让制作大型增强现实体验成为现实，Vuforia Engine 9.0推出了新的Area Target功能。Area Target可让你在扫描而成的空间3D模型中制作巨大、连贯的AR体验，在选择区域中持续识别、跟踪场景内容，形成一种持续性的增强效果。制作成果可在各个手机、平板和AR头显上播放。</p>
<iframe width="100%" height="100%" src="https://unity.cn/player/5ea7a942edbc2a002026cef2" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" __idm_frm__="11" style="box-sizing: border-box; font-family: PingFangSC, Roboto, &quot;Noto Sans SC&quot;, SimSun, sans-serif;"></iframe>

<p>Area Target体验制作</p>
<p>制作Area Target体验的流程可总结为：扫描、创作和查看。流程可大致分为以下五步：</p>
<p>👉第一步：</p>
<p>扫描场景空间：Area Target经由真实空间的3D扫描模型制作而来。Vuforia Engine的最初版本可以使用Matterport Pro2 camera来抓拍扫描数据。</p>
<p>👉第二步：</p>
<p>创建一个Area Target：在3D模型扫描完成后，将数据导入Vuforia的Area Target Generator（区域性目标生成器），就能生成对应的Vuforia数据集。数据集包含一个带数据集文件的Unity包和扫描空间的纹理网格，可直接导入到Unity项目中。</p>
<p>👉第三步：</p>
<p>导入Area Target：在Unity中安装设置好Vuforia Engine，然后在GameObject下拉菜单中导入Area Targets文件。若想修改文件的配置，可参考Area Targets in Unity的详细指南。</p>
<p><img src="https://connect-cn-cdn-public-prd.unitychina.cn/h1/20200428/p/images/2c98786f-7ce6-41dd-8d63-b962e5d68823_image.png" alt="img"></p>
<p>👉第四步：</p>
<p>创作：如上图，在导入完成后，开发者可以查看详细的扫描3D模型，可以在环境中放置3D对象，使用播放模式来测试体验。播放模式可让开发者“演练”一遍3D模型，在电脑上观看AR体验的最终效果。如果某个空间不方便实地查看，可使用播放模式来测试应用。</p>
<p>👉第五步：</p>
<p>查看：在部署完Area Target应用后，你就能从场景中的任何位置启动增强应用了——启动操作简单明了。当使用者在空间中移动时，3D增强效果会被持续追踪，且因为采用了扫描数据，还能被真实物体遮挡。</p>
<p>通过沉浸式AR将人们连接在一起</p>
<p>Area Target功能不仅强大，还可用于商场、旅馆和工厂等各种场景，用庞大、持续性的AR体验提供独特的商业价值。</p>
<p>企业可将整个商店作为画布来制作AR体验，轻松展示或修改促销、发售或导购体验。专业客服可在对应语境中提供说明，如让顾客学会使用某些电器。体验可用不同语言进一步拓展，来支持不同国家的顾客。</p>
<p>在工业中，该技术可为前线工人提供实时、沉浸式的体验，让工作更加安全、简便。某些任务或设备的导览数据可部署到整个设施中，引导工人完成工作。此类方法可节省新员工培训的时间和成本，引导现场技术人员，协助工人在多个流程和设备间流畅地过渡。</p>
<p>Vuforia Engine 9.0已于3月18日发布，推出了更多高级的AR功能。</p>
<p>如果希望马上尝试Vuforia Area Target功能，可参阅How to Create Area Targets说明页面。</p>
<p><a href="https://library.vuforia.com/content/vuforia-library/en/features/environments/area-targets/how-to-create-area-targets.html">https://library.vuforia.com/content/vuforia-library/en/features/environments/area-targets/how-to-create-area-targets.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>AR资源</title>
    <url>/2020/04/19/AR%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AR视频课程资源与书籍资源汇总</p>
<a id="more"></a>
<blockquote>
<p>本文转载于<a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485416&amp;idx=1&amp;sn=e7cc50d5c06b61892b1370f71632a4e8&amp;chksm=96f45a72a183d3641bfca0c3e29bdaf9ec0bdf2e464071cee2ca535191fa23d611403d08f622&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1587217180782&amp;sharer_shareid=93eb2711304121e2bbb43bede39aadd0#rd">https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485416&amp;idx=1&amp;sn=e7cc50d5c06b61892b1370f71632a4e8&amp;chksm=96f45a72a183d3641bfca0c3e29bdaf9ec0bdf2e464071cee2ca535191fa23d611403d08f622&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1587217180782&amp;sharer_shareid=93eb2711304121e2bbb43bede39aadd0#rd</a></p>
</blockquote>
<p>本文主要整理了一些AR开发过程中会用到的视频课程（公开课）和相关开发书籍，适合AR初级开发者和一些资深程序员学习。</p>
<h2 id="视频课程"><a href="#视频课程" class="headerlink" title="视频课程"></a>视频课程</h2><hr>
<h3 id="EasyAR"><a href="#EasyAR" class="headerlink" title="EasyAR"></a>EasyAR</h3><ol>
<li><p><strong>EasyAR Scene 4.0使用系列教程</strong></p>
<p>课程介绍：EasyAR4.0的简单的使用说明，包括了基本设置，平面图像跟踪，3D物体跟踪，表面跟踪，运动跟踪和稀疏空间云。</p>
<p>image1</p>
<p><a href="https://v.qq.com/vplus/6d186ec7b4372bc7#uin=6d186ec7b4372bc7?page=video">https://v.qq.com/vplus/6d186ec7b4372bc7#uin=6d186ec7b4372bc7?page=video</a></p>
</li>
<li><p><strong>EasyAR4.0官方示例演示</strong></p>
<p><a href="https://v.qq.com/x/page/v0948ktcrbo.html">https://v.qq.com/x/page/v0948ktcrbo.html</a></p>
<p><a href="https://v.qq.com/x/page/q0948767iwz.html">https://v.qq.com/x/page/q0948767iwz.html</a></p>
</li>
<li><p><strong>实现室内AR导航教程</strong></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485173&amp;idx=1&amp;sn=4bef5df0b2cf08951909d5eab47e8809&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s/LMP5x5jaQkfoH52ILWA5tw</a></p>
</li>
<li><p><strong>小程序AR教程</strong></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDYzNjcyOQ==&amp;mid=2247484130&amp;idx=1&amp;sn=2a02d650f6a4f365e18d1a6f523ea626&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s/g5mBhw73t54Wl2Tgs2gxtA</a></p>
</li>
<li><p><strong>AR互动大屏项目实战课程（付费）</strong></p>
<p>课程介绍：课程会完整的从整体设计、AR环境搭建、动画制作、动画控制、脚本编写、服务器交互、二维码生成、跨平台修改等进行全流程讲解。</p>
<p><a href="https://edu.manew.com/course/216">https://edu.manew.com/course/216</a></p>
</li>
<li><p><strong>国产AR引擎 EasyAR的使用流程演示</strong></p>
<p><a href="https://www.bilibili.com/video/BV11W411m79a">https://www.bilibili.com/video/BV11W411m79a</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485383&amp;idx=1&amp;sn=6f5d252057104bc7e4c43dcf4c624caa&amp;chksm=96f45a5da183d34bf2ea3ab6530840deac791c0ef11a2c3805cbdad0adcf1ea6f52a45102889&amp;scene=21#wechat_redirect">完备的EasyAR学习路线，最详细的资源整理！</a></p>
</li>
</ol>
<hr>
<h3 id="ARKit"><a href="#ARKit" class="headerlink" title="ARKit"></a>ARKit</h3><ol>
<li><p><strong>ARKit入门到精通-1.0 -基础内容</strong></p>
<p>课程介绍：其视频内容涵盖了ARKit 1.0版本的实现原理、启动相机、Remote的使用、开启／控制检测、自定义平面、自定义点云、API介绍等。</p>
<p><a href="https://www.bilibili.com/video/BV13W411Z78Z?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV13W411Z78Z?from=search&amp;seid=15033026591829912754</a></p>
</li>
</ol>
<ol>
<li><p><strong>ARKit入门到精通 1.0 - 实战案例 AR打地鼠</strong></p>
<p>课程介绍：主要通过一个实际案例【AR打地鼠】对ARKit1.0版本的使用做一个复习强化。</p>
<p><a href="https://www.bilibili.com/video/BV1GW411Z7Pb?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1GW411Z7Pb?from=search&amp;seid=15033026591829912754</a></p>
<ol>
<li><p><strong>ARKit入门到精通-1.5 -基础内容</strong></p>
<p>课程介绍：其视频介绍了ARKit 1.5版本的面部追踪、人脸检测、垂直平面检测、图片识别等特性。</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z7zu?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z7zu?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>ARKit入门到精通-2.0 -基础内容</strong></p>
<p>课程介绍：其视频介绍了ARKit 2.0版本多人互动、数据共享等功能。</p>
<p><a href="https://www.bilibili.com/video/BV1JW411C7oc?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1JW411C7oc?from=search&amp;seid=15033026591829912754</a></p>
</li>
</ol>
</li>
<li><p><strong>ARKit视觉风暴</strong></p>
<p>课程介绍：本套课程从技术理念到项目实践，教大家系统掌握ARKit技术开发，随心打造iOS端AR增强现实应用。由一开始的开发环境搭建，到Unity ARKit Plugin、ARFoundation ARKit等不同时期技术的讲解。从平面模型放置、识别图片、手势交互、3D物体识别、面部AR贴纸、光照估计、环境探针、多人AR技术，甚至包含ARKit3.0的动作捕捉技术等。</p>
<p><a href="https://edu.csdn.net/course/detail/27549?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158718710819726869002335%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158718710819726869002335&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-4">https://edu.csdn.net/course/detail/27549?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158718710819726869002335%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158718710819726869002335&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-4</a></p>
</li>
<li><p><strong>ARKit玩起来 - AR卡通秀</strong></p>
<p>课程介绍：此课程使用ARKit 面部检测功能,将虚拟物体放置到面部</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z77u?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z77u?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>零基础，17分钟制作AR丧尸游戏</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Rx411i764?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1Rx411i764?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>ARkit实战开发视频教程</strong></p>
<p>课程介绍：通过多个实战案例实际操作开发，从而掌握ARkit的相关开发技能：1.认知ARkit的工作流。2.slam与imu的实际应用。3.平面检测与打击测试。4.光照捕获原理。5.在三维引擎上开发内容。6.物体追踪摄像机。7.实现简易版测量尺。8.实现任意门效果（空间穿越）。</p>
<p><a href="https://edu.51cto.com/course/10845.html">https://edu.51cto.com/course/10845.html</a></p>
</li>
<li><p><strong>ARKit玩起来 - AR预览唱片</strong></p>
<p>课程介绍：使用ARKit-1.5 图片检测功能, 在识别到图片之后播放视频</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z7Ju?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z7Ju?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485061&amp;idx=2&amp;sn=d32a791c4e658cf9a44f0746190585ff&amp;chksm=96f45b1fa183d2092b002e564f3522f95cb2c2e862d2af8f8d7130b001068b31d4c81ee75725&amp;scene=21#wechat_redirect">ARKit开发资源合集</a></p>
</li>
</ol>
<hr>
<h3 id="ARCore"><a href="#ARCore" class="headerlink" title="ARCore"></a>ARCore</h3><ol>
<li><p><strong>ARCore增强现实开发从0到1</strong></p>
<p>课程介绍：课程由浅入深，教快速掌握ARCore开发技术，打造出属于自己的AR增强现实应用。由一开始的开发环境搭建，到ARCore的讲解，再到识别图片、手势交互、甚至可以做出热门短视频的AR贴纸特效。</p>
<p><a href="https://ke.qq.com/course/436124">https://ke.qq.com/course/436124</a></p>
</li>
<li><p><strong>10分钟unity上ARCore发布流程</strong></p>
<p><a href="https://www.bilibili.com/video/av837691674/">https://www.bilibili.com/video/av837691674/</a></p>
</li>
<li><p><strong>Unity ARCore 开发全流程演示</strong><br><a href="https://www.bilibili.com/video/BV1SW411o7zj?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1SW411o7zj?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>Unity+ARcore 实现传送门</strong></p>
<p><a href="https://www.bilibili.com/video/BV1tb411N7i6?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1tb411N7i6?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>如何在Unity中创建ARCore的应用</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Yx41177nV?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1Yx41177nV?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>HoloLens与ARcore第三视角开发</strong></p>
<p>课程介绍：使用ARcore实现HoloLens第三视角开发，课程包括客户端及服务端Socket异步套接字网络开发，HoloLens接入VuforiaSDK，ARcore与HoloLens空间同步，房间系统，命令同步等。</p>
<p><a href="https://edu.csdn.net/course/detail/23985">https://edu.csdn.net/course/detail/23985</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247484948&amp;idx=1&amp;sn=bb7a11416021adcd9b8d305756098a7c&amp;chksm=96f45b8ea183d298805439eca4fb5c6feb247cf4bd838f1f2a05031108a43cdcceceb3d0f469&amp;scene=21#wechat_redirect">【AR优秀开源项目】ARCore项目工程汇总</a></p>
</li>
</ol>
<hr>
<h3 id="Hololens"><a href="#Hololens" class="headerlink" title="Hololens"></a>Hololens</h3><ol>
<li><p><strong>Hololens开发入门篇</strong></p>
<p>课程介绍：学会Hololens模拟器开发环境的配置及使用方法 应用凝视（Gaze）、手势（Guesture）、英文语音控制（Voice）、立体音效（Spatial sound）、空间映射（Spatial mapping）功能整合开发一个应用并在模拟器上部署运行。</p>
<p><a href="https://edu.csdn.net/course/detail/6639">https://edu.csdn.net/course/detail/6639</a></p>
</li>
<li><p><strong>Hololens MR 技术分享</strong></p>
<p><a href="https://edu.manew.com/my/course/204">https://edu.manew.com/my/course/204</a></p>
</li>
<li><p><strong>HoloLens开发教程</strong></p>
<p><a href="https://space.bilibili.com/109590528?from=search&amp;seid=11372730618997738226">https://space.bilibili.com/109590528?from=search&amp;seid=11372730618997738226</a></p>
</li>
<li><p><strong>PP先生帮你5分钟搞定HoloLens2程序</strong></p>
<p><a href="https://www.bilibili.com/video/BV1hJ411U7Mb?from=search&amp;seid=6201309428496584363">https://www.bilibili.com/video/BV1hJ411U7Mb?from=search&amp;seid=6201309428496584363</a></p>
</li>
<li><p><strong>Unity HoloLens 开发教程系列</strong></p>
<p><a href="https://space.bilibili.com/19357096/video">https://space.bilibili.com/19357096/video</a></p>
</li>
<li><p><strong>HoloLens与ARcore第三视角开发</strong></p>
<p>课程介绍：使用ARcore实现HoloLens第三视角开发，课程包括客户端及服务端Socket异步套接字网络开发，HoloLens接入VuforiaSDK，ARcore与HoloLens空间同步，房间系统，命令同步等。</p>
<p><a href="https://edu.csdn.net/course/detail/23985">https://edu.csdn.net/course/detail/23985</a></p>
</li>
<li><p><strong>HoloLens全息应用开发</strong></p>
<p><a href="https://edu.csdn.net/course/detail/4897/88469?ops_request_misc=&amp;request_id=&amp;biz_id=105&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~sobaiduweb~default-0">https://edu.csdn.net/course/detail/4897/88469?ops_request_misc=&amp;request_id=&amp;biz_id=105&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~sobaiduweb~default-0</a></p>
</li>
<li><p><strong>Hololens全息房产项目（上）</strong></p>
<p>课程介绍：讲解hololens的环境配置：模拟器安装配置，VS配置，系统配置，Unity配置。基础功能：语音、凝视以及手势控制，空间扫描与定位。经典的hololens设计方式——传送门，通过传送门在现实空间与虚拟空间穿梭。</p>
<p><a href="https://edu.manew.com/course/350">https://edu.manew.com/course/350</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247484878&amp;idx=1&amp;sn=db93b4334cc4781d038eaf7cc078e260&amp;chksm=96f45854a183d1421303227f11ffb5af22d81c0205f222f9858ca6b1d2b35262439a5bfb5222&amp;scene=21#wechat_redirect">HoloLens应用场景大盘点（上）</a></p>
</li>
</ol>
<hr>
<h3 id="Vuforia"><a href="#Vuforia" class="headerlink" title="Vuforia"></a>Vuforia</h3><ol>
<li><p><strong>【SiKi学院Unity3D视频教程】AR系列教程 - Vuforia入门</strong></p>
<p><a href="https://www.bilibili.com/video/BV134411s725?from=search&amp;seid=819133152602426925">https://www.bilibili.com/video/BV134411s725?from=search&amp;seid=819133152602426925</a></p>
</li>
<li><p><strong>Unity AR开发实践之Vuforia详解</strong></p>
<p><a href="https://www.bilibili.com/video/BV1At41117J9?from=search&amp;seid=13345706439745907767">https://www.bilibili.com/video/BV1At41117J9?from=search&amp;seid=13345706439745907767</a></p>
</li>
<li><p><strong>Unity + Vuforia 构建企业级AR应用</strong></p>
<p><a href="https://www.bilibili.com/video/BV1CJ411t7qp/?spm_id_from=333.788.videocard.3">https://www.bilibili.com/video/BV1CJ411t7qp/?spm_id_from=333.788.videocard.3</a></p>
</li>
<li><p><strong>教你用Unity制作一个AR初音尬舞</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Ux411h75b/?spm_id_from=333.788.videocard.1">https://www.bilibili.com/video/BV1Ux411h75b/?spm_id_from=333.788.videocard.1</a></p>
</li>
<li><p><strong>Vuforia远程视频AR标注</strong></p>
<p>课程介绍：Vuforia+UnityChatSDK开发远程视频AR标注，实现Vuforia Chalk的功能，支持PC、Android、IOS平台。</p>
<p><a href="https://edu.csdn.net/course/detail/27280?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-2">https://edu.csdn.net/course/detail/27280?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-2</a></p>
</li>
<li><p><strong>Vuforia Studio工业增强现实应用技术及最佳实践</strong></p>
<p>课程介绍：Vuforia Studio是PTC基于全球最领先的增强现实平台Vuforia开发的AR企业级工具，可通过简单的拖放操作界面，打造以企业为重点的AR体验。企业可利用现有的3D资产创建可扩展的服务应用程序、专注于培训体验、销售和营销虚拟演示，甚至是利用Vuforia Studio实现制造流程序列。介绍企业级AR的应用价值，使用PTC Vuforia Studio如何降低企业开发成本，简化系统可扩展性，利用企业丰富的三维数据和物联网资源，加速创建引人注目的增强现实内容，轻松提供洞察力。</p>
<p><a href="https://edu.csdn.net/course/detail/20764?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-1">https://edu.csdn.net/course/detail/20764?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-1</a></p>
</li>
<li><p><strong>增强现实，超凡体验 Qualcomm Vuforia SDK在线培训</strong></p>
<p>课程介绍：Qualcomm Vuforia 移动视觉平台和开发套件的功能特点作深度讲解，同时也包括相关配套工具，新的云端识别服务和资费方案概况。除此之外培训中还将详细介绍新发布的Vuforia 5新功能</p>
<p><a href="https://edu.csdn.net/course/detail/1467?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-3">https://edu.csdn.net/course/detail/1467?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-3</a></p>
</li>
<li><p><strong>基于Unity 的AR 游戏开发实践</strong></p>
<p>课程介绍：本次课程将以一个具体的坦克游戏为例，介绍AR技术在Unity中的使用。AR技术通过在真实场景中增加虚拟场景，创造了一种全新的交互体验。目前，这项技术已经应用到了游戏，教育等诸多领域， 比如火遍全球的Pokemongo游戏。Unity通过集成Vuforia插件，帮助开发者可以方便的把AR技术应用到自己开发的游戏或者应用中。</p>
<p><a href="https://edu.csdn.net/course/detail/5659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-6">https://edu.csdn.net/course/detail/5659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-6</a></p>
</li>
<li><p><strong>Vuforia AR实战教程</strong></p>
<p><a href="https://www.taikr.com/course/531">https://www.taikr.com/course/531</a></p>
</li>
<li><p><strong>PokemonGo-LBS AR项目实战</strong></p>
<p>课程介绍：基于Unity2017.3.1 本课程将带领大家制作AR游戏中最火的PokemonGO，侧重于快速简单的实现LBS基于地理的GPS定位技术、AR捕捉功能。</p>
<p><a href="https://edu.manew.com/course/516">https://edu.manew.com/course/516</a></p>
</li>
<li><p><strong>AR - 双卡互动 专题讲解</strong></p>
<p><a href="https://edu.manew.com/my/course/175">https://edu.manew.com/my/course/175</a></p>
</li>
<li><p><strong>AR房地产 - 实战讲解</strong></p>
<p><a href="https://edu.manew.com/course/172">https://edu.manew.com/course/172</a></p>
</li>
<li><p><strong>AR涂涂乐 （Vuforia） - 实战讲解</strong></p>
<p>课程介绍：本课程将带领大家使用VuforiaSDK（高通）制作涂色AR，课程重点在于如何获取画面，a获取后的画面如何计算得出正确的位置，b拉伸贴图匹配UV，c通过UI来判断识别图在屏幕中的位置。课程会完整的从平面图形制作，模型制作，C#,Shader编写进行全流程讲解。并将思路与详细制作过程分开，适合不同基础的学员学习。制作中使用的PS、Maya、Unity软件操作细节都会一一讲解并将课程源码，操作方式，快捷键说明附在课程资料中供大家下载。即使零基础也可完整制作最终APP(安卓和IOS)。</p>
<p><a href="https://edu.manew.com/course/162">https://edu.manew.com/course/162</a></p>
</li>
<li><p><strong>增强现实AR基础实例讲解</strong></p>
<p><a href="https://edu.manew.com/course/106">https://edu.manew.com/course/106</a></p>
</li>
</ol>
<hr>
<h3 id="其他SDK"><a href="#其他SDK" class="headerlink" title="其他SDK"></a>其他SDK</h3><ol>
<li><p><strong>Nreal SDK教程 - 10分钟创建Nreal AR应用程序</strong></p>
<p><a href="https://www.bilibili.com/video/BV1j4411z7Us?from=search&amp;seid=7664168149376911358">https://www.bilibili.com/video/BV1j4411z7Us?from=search&amp;seid=7664168149376911358</a></p>
</li>
<li><p><strong>Nreal MR眼镜快速开发教程</strong></p>
<p><a href="https://www.bilibili.com/video/BV1zJ411C7BJ?from=search&amp;seid=7664168149376911358">https://www.bilibili.com/video/BV1zJ411C7BJ?from=search&amp;seid=7664168149376911358</a></p>
</li>
<li><p><strong>百度AR开发系列教程</strong></p>
<p><a href="https://ai.baidu.com/support/video">https://ai.baidu.com/support/video</a></p>
</li>
</ol>
<hr>
<h2 id="开发书籍"><a href="#开发书籍" class="headerlink" title="开发书籍"></a>开发书籍</h2><h3 id="ARKit开发实战"><a href="#ARKit开发实战" class="headerlink" title="ARKit开发实战"></a>ARKit开发实战</h3><p>本书主要介绍ARKit的原生API，分别从世界跟踪、场景理解、几何渲染、人脸跟踪4个方面详细叙述ARKit的功能，以及在Unity中接入ARKit的方法。并且在开始部分添加了使用ARKit所必需的一些基础知识，为了减少接受难度，本书只会叙述用到的知识点。本书的最后一部分介绍了EasyAR和Vuforia这两款AR SDK的功能和使用方法。本书适合对ARKit感兴趣的iOS开发者，以及其他想要了解ARKit原生API的读者阅读。</p>
<h3 id="Unity-AR-增强现实完全自学教程"><a href="#Unity-AR-增强现实完全自学教程" class="headerlink" title="Unity AR 增强现实完全自学教程"></a>Unity AR 增强现实完全自学教程</h3><p>本书是初学者快速学习AR应用的全面教程，从基础理论到经典的AR案例都进行了详尽的讲解。保证即便是零基础的读者也可以通过本书学习并制作出常见的AR应用。本书共分10章，基础部分会介绍Unity的安装配置、基础操作、C#编程基础、坐标系统、UI系统以及AR应用在常用平台（PC、Android、iOS）的发布等。AR案例部分会以涂色类AR、多卡互动AR、恐龙博物馆AR大屏互动为例，在实际制作过程中教大家AR应用的通用设计方式，以及如何处理AR应用在制作过程中常见的问题。为了方便读者学习，本书随书提供课程中案例的所有资源及源文件，可以随时查阅对比。本书适合于想要进入AR行业的兴趣爱好者，传统行业转型AR的管理者、投资人，以及针对AR中特定案例有需求的从业人员。</p>
<h3 id="Unity-2018-Augmented-Reality-Projects"><a href="#Unity-2018-Augmented-Reality-Projects" class="headerlink" title="Unity 2018 Augmented Reality Projects"></a>Unity 2018 Augmented Reality Projects</h3><p>这本书教你如何使用Unity来开发AR应用程序，可以通过HoloLens和Daydream等设备来体验。在逐步实现基于传感器的AR应用程序之前，你将学习如何在你的相机上集成、动画和覆盖3D对象。</p>
<h3 id="沉浸感：不可错过的虚拟现实革命"><a href="#沉浸感：不可错过的虚拟现实革命" class="headerlink" title="沉浸感：不可错过的虚拟现实革命"></a>沉浸感：不可错过的虚拟现实革命</h3><p>本书是作者关于虚拟现实（VR）的长期思考，深入讨论了虚拟现实的本质、特点、应用前景，以及商业价值。通过虚拟现实这一个大趋势，作者也讲解了增强现实、混合现实、IP、模因、注意力经济等重要话题。</p>
]]></content>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>ARCore导入Unity，打包HelloAR</title>
    <url>/2020/04/03/ARCore%E5%AF%BC%E5%85%A5Unity%EF%BC%8C%E6%89%93%E5%8C%85HelloAR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录第一次使用ARCore的报错经历</p>
<a id="more"></a>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h4><p>硬件：<a href="https://developers.google.com/ar/discover/supported-devices">支持ARCore的手机</a></p>
<p>软件：</p>
<ul>
<li>Unity2017.4.9f1及以上版本</li>
<li>ARCore SDK for Unity 1.5.0 或更高版本</li>
<li>使用<a href="https://developer.android.com/studio">Android Studio</a> 中的 SDK 管理器安装的 Android SDK <strong>7.0（API 级别 24）或更高版本</strong></li>
</ul>
<h4 id="第一步：下载SDK包"><a href="#第一步：下载SDK包" class="headerlink" title="第一步：下载SDK包"></a>第一步：下载SDK包</h4><p>下载 <a href="https://github.com/google-ar/arcore-unity-sdk/releases">ARCore SDK for Unity <strong>1.5.0 或更高版本</strong></a>，下载的 SDK 文件名为 <code>arcore-unity-sdk-v1.5.0.unitypackage</code>。</p>
<h4 id="第二步：新建项目并导入SDK"><a href="#第二步：新建项目并导入SDK" class="headerlink" title="第二步：新建项目并导入SDK"></a>第二步：新建项目并导入SDK</h4><ol>
<li>打开 Unity 并新建一个 <strong>3D</strong> 项目。</li>
<li>选择 <strong>Assets &gt; Import Package &gt; Custom Package</strong>。</li>
<li>选择您上面下载的 <code>arcore-unity-sdk-v1.5.0.unitypackage</code> Unity 软件包。</li>
<li>在 <strong>Importing Package</strong> 对话框中，确保已选择所有软件包选项，并点击 <strong>Import</strong>。</li>
<li>出现提示时接受任何 <a href="https://docs.unity3d.com/Manual/APIUpdater.html">API 升级</a>。</li>
</ol>
<h4 id="第三步：配置"><a href="#第三步：配置" class="headerlink" title="第三步：配置"></a>第三步：配置</h4><ol>
<li><p>转到 <strong>File &gt; Build Settings</strong> 以打开 <strong><a href="https://docs.unity3d.com/Manual/BuildSettings.html">Build Settings</a></strong> 窗口。</p>
</li>
<li><p>选择 <strong>Android</strong> 并点击 <strong>Switch Platform</strong>。</p>
</li>
<li><p>在 <strong>Build Settings</strong> 窗口中，点击 <strong>Player Settings</strong>。</p>
</li>
<li><p>在Inspector窗口中，配置下列播放器设置：</p>
<p>| 设置                                                         | 值                                                           |<br>| :—————————————————————————————- | :—————————————————————————————- |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Package Name</strong>  | 创建一个 Java 软件包名称格式的唯一应用 ID。 例如，使用 <code>com.example.helloAR</code> |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Minimum API Level</strong> | Android 7.0 或更高版本                                       |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Target API Level</strong> | <del>Android 7.0 或更高版本</del> 直接自动最高版本                  |<br>| <strong>Player Settings</strong> &gt; <strong>XR Settings</strong> &gt; <strong>ARCore Supported</strong> | 启用                                                         |</p>
</li>
</ol>
<h4 id="第四步：解决报错"><a href="#第四步：解决报错" class="headerlink" title="第四步：解决报错"></a>第四步：解决报错</h4><p>导入SDK后，控制台报错如下：</p>
<blockquote>
<p>The type or namespace name ‘SpatialTracking’ does not exist in the namespace ‘UnityEngine’</p>
</blockquote>
<p>大概有17条错误</p>
<p><strong>解决方法：</strong></p>
<ol>
<li>打开windows -&gt; package manger</li>
<li>分别搜索 <strong>Multiplayer HLAPI </strong>和 <strong>XR Legacy Input Helper </strong>,安装即可</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://developers.google.com/ar/develop/unity/quickstart-android">https://developers.google.com/ar/develop/unity/quickstart-android</a></p>
<p><a href="https://forum.unity.com/threads/he-type-or-namespace-name-spatialtracking-does-not-exist-in-the-namespace-unityengine-are-you-m.650662/">https://forum.unity.com/threads/he-type-or-namespace-name-spatialtracking-does-not-exist-in-the-namespace-unityengine-are-you-m.650662/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>ARCore</tag>
        <tag>HelloAR</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuforia-在Unity2019.3.4中安装Vuforia</title>
    <url>/2020/04/02/Vuforia-%E5%9C%A8Unity2019-3-4%E4%B8%AD%E5%AE%89%E8%A3%85Vuforia/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装unity</p>
<a id="more"></a>
<h3 id="下载安装Unity2019-3-4-f1"><a href="#下载安装Unity2019-3-4-f1" class="headerlink" title="下载安装Unity2019.3.4.f1"></a>下载安装Unity2019.3.4.f1</h3><h4 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h4><ul>
<li>进入官方网站 <a href="https://unity.com/">https://unity.com/</a></li>
<li>在页面最下方找到 download unity</li>
<li>在页面最下方找到 older versions</li>
<li>下载安装在线版即可</li>
</ul>
<h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><ul>
<li>unityHub上直接下载</li>
</ul>
<p>PS：方式二有离线文档可供选择</p>
<h3 id="安装Vuforia"><a href="#安装Vuforia" class="headerlink" title="安装Vuforia"></a>安装Vuforia</h3><ul>
<li>windows -&gt; package manager -&gt; 搜索 Vuforia 即可</li>
</ul>
]]></content>
      <tags>
        <tag>Vuforia</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuforia-ImageTarget阶段Demo小总结</title>
    <url>/2020/04/02/Vuforia-%E9%98%B6%E6%AE%B5Demo%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/junlin49/VuforiaDemo">https://github.com/junlin49/VuforiaDemo</a></p>
<p>VuforiaImageDemo_1_Ashe</p>
<hr>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>实现如下效果：</p>
<ul>
<li>相机对准黑桃K后，出现人物</li>
<li>人物先从纸牌中出现，后跳舞，再奔跑，最后攻击</li>
<li>有特效要求</li>
<li>要有截屏，闪光灯，自动对焦功能</li>
<li>双击人物，人物消失</li>
<li>可以两指放大，缩小</li>
<li>可旋转</li>
</ul>
<hr>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol>
<li><p>自动对焦</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">var</span> vuforia = VuforiaARController.Instance;</span><br><span class="line">       vuforia.RegisterVuforiaStartedCallback(OnVuforiaStarted);<span class="comment">// Vuforia启动完成时的回调函数</span></span><br><span class="line">       vuforia.RegisterOnPauseCallback(OnVuforiaPaused);<span class="comment">//Vuforia暂停时的回调函数</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnVuforiaStarted</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="comment">//程序启动，自动对焦</span></span><br><span class="line">       CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_CONTINUOUSAUTO);<span class="comment">//连续自动对焦</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnVuforiaPaused</span>(<span class="params"><span class="built_in">bool</span> isPaused</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCameraFocus</span>(<span class="params"></span>)<span class="comment">//手动单次对焦</span></span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_TRIGGERAUTO);<span class="comment">//手动单次对焦</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>闪光灯</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFlash</span>(<span class="params"></span>)<span class="comment">//设置闪光灯</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CameraDevice.Instance.SetFlashTorchMode(openFlash);</span><br><span class="line">        openFlash = !openFlash;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>双击消失</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> touchTime;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">bool</span> touchNew = <span class="literal">false</span>;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))<span class="comment">//有触屏</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//从点击位置发射射线</span></span><br><span class="line">           Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">          <span class="comment">//接受返回信息</span></span><br><span class="line">           RaycastHit hitInfor;</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">if</span> (Physics.Raycast(ray,<span class="keyword">out</span> hitInfor))<span class="comment">//如果接受到信息</span></span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">//  if(Input.touchCount == 1 &amp;&amp; Input.GetTouch(0).phase == TouchPhase.Began)//1根手指点击，且刚刚点击</span></span><br><span class="line">              <span class="comment">// &#123;</span></span><br><span class="line">                   <span class="comment">//双击</span></span><br><span class="line">                   <span class="comment">//if(Input.GetTouch(0).tapCount == 2)//双击</span></span><br><span class="line">                   <span class="comment">//&#123;</span></span><br><span class="line">                   <span class="comment">//    Destroy(hitInfor.collider.gameObject);//射线射到的collider所属的游戏物体，销毁</span></span><br><span class="line">                   <span class="comment">//&#125;</span></span><br><span class="line">   </span><br><span class="line">                   <span class="comment">//长按aixi，销毁</span></span><br><span class="line">                   <span class="keyword">if</span> (Input.touchCount == <span class="number">1</span>)<span class="comment">//1根手指按</span></span><br><span class="line">                   &#123;</span><br><span class="line">                       Touch touch = Input.GetTouch(<span class="number">0</span>);<span class="comment">//第一根触摸的手指</span></span><br><span class="line">                       <span class="keyword">if</span> (touch.phase == TouchPhase.Began)<span class="comment">//刚按，A finger touched the screen.</span></span><br><span class="line">                   &#123;</span><br><span class="line">                           touchNew = <span class="literal">true</span>;</span><br><span class="line">                           touchTime = Time.time;<span class="comment">//记录开始按的时候的时间</span></span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (touch.phase == TouchPhase.Stationary)<span class="comment">//按住静止不动；A finger is touching the screen but hasn&#x27;t moved.</span></span><br><span class="line">                   &#123;</span><br><span class="line">                         <span class="keyword">if</span> (touchNew == <span class="literal">true</span> &amp;&amp; Time.time-touchTime&gt;<span class="number">1</span>)<span class="comment">//长按1s后</span></span><br><span class="line">                           &#123;</span><br><span class="line">                               touchNew = <span class="literal">false</span>;</span><br><span class="line">                               Destroy(hitInfor.collider.gameObject);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                       &#123;</span><br><span class="line">                           touchNew = <span class="literal">false</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">              <span class="comment">// &#125;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>旋转放缩</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))<span class="comment">//触屏了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Input.touchCount == <span class="number">1</span>)<span class="comment">//一个手指头</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Input.GetTouch(<span class="number">0</span>).phase == TouchPhase.Moved)<span class="comment">//状态移动</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.transform.Rotate(<span class="number">0</span>, -xRotationSpeed * Time.deltaTime * Input.GetAxis (<span class="string">&quot;Mouse X&quot;</span>),<span class="number">0</span>,Space.World);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Input.touchCount == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Input.GetTouch(<span class="number">0</span>).phase == TouchPhase.Moved || Input.GetTouch(<span class="number">1</span>).phase == TouchPhase.Moved)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector2 temPositon1 = Input.GetTouch(<span class="number">0</span>).position;</span><br><span class="line">                    Vector2 temPositon2 = Input.GetTouch(<span class="number">1</span>).position;</span><br><span class="line">                    <span class="keyword">if</span> (IsLarge(oldPositon1,oldPositon2,temPositon1,temPositon2))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//arCamera.fieldOfView -= arCamera.fieldOfView*0.01*</span></span><br><span class="line">                        <span class="keyword">this</span>.transform.localScale = <span class="keyword">new</span> Vector3(</span><br><span class="line">                            <span class="keyword">this</span>.transform.localScale.x * scaleOut, <span class="keyword">this</span>.transform.localScale.y * scaleOut, <span class="keyword">this</span>.transform.localScale.z * scaleOut);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.transform.localScale = <span class="keyword">new</span> Vector3(</span><br><span class="line">                           <span class="keyword">this</span>.transform.localScale.x * scaleIn, <span class="keyword">this</span>.transform.localScale.y * scaleIn, <span class="keyword">this</span>.transform.localScale.z * scaleIn);</span><br><span class="line">                    &#125;</span><br><span class="line">                    oldPositon1 = temPositon1;</span><br><span class="line">                    oldPositon2 = temPositon2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsLarge</span>(<span class="params">Vector2 oldPoint1, Vector2 oldPoint2 , Vector2 newPoint1 , Vector2 newPoint2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Vector2.Distance(oldPoint1, oldPoint2) &lt; Vector2.Distance(newPoint1,newPoint2))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></h2><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><a href="https://imgchr.com/i/8OLECj"><img src="https://s1.ax1x.com/2020/03/25/8OLECj.jpg" alt="8OLECj.jpg"></a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Vuforia</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-场景切换</title>
    <url>/2020/04/02/Unity-%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录如何在Unity中实现场景切换</p>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void Click()</span><br><span class="line">&#123;</span><br><span class="line">      Invoke(&quot;ChangeScene&quot;, 1);  # 1s后切换场景，延时作用</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void ChangeScene()</span><br><span class="line">&#123;</span><br><span class="line">      SceneManager.LoadScene(&quot;场景名字&quot;);  &#x2F;&#x2F; 登陆成功则切换到游戏界面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载当前场景"><a href="#加载当前场景" class="headerlink" title="加载当前场景"></a>加载当前场景</h3><p>比如点击重新开始按钮后，重新开始游戏。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SceneManager.LoadScene(SceneManager.GetActiveScene().name);</span><br></pre></td></tr></table></figure>
<p>注意该语句执行的时候，仍会执行<code>update</code>函数。因此在<code>update</code>中置位标志位要多加留意。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://www.jianshu.com/p/fb688b80986b?tdsourcetag=s_pcqq_aiomsg">https://www.jianshu.com/p/fb688b80986b?tdsourcetag=s_pcqq_aiomsg</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Vuforia更新错误:Failed to resolve packages</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E6%9B%B4%E6%96%B0%E9%94%99%E8%AF%AF-Failed-to-resolve-packages/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>新冠期间总是不开学，最近Vuforia更新了9.0版本，所以尝试下</p>
<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>错误提示：</p>
<p>Failed to resolve packages: Cannot read property ‘scopedRegistries’ of undefined. No packages loaded.</p>
<p>如果使用 Unity 2019及以上版本，可以发现 AR camera 的输入密钥页面，已经提示有新版本可用，如下：</p>
<p><a href="https://imgchr.com/i/G3Lmzn"><img src="https://s1.ax1x.com/2020/04/01/G3Lmzn.png" alt="G3Lmzn.png"></a></p>
<p><a href="https://imgchr.com/i/G3LZGj"><img src="https://s1.ax1x.com/2020/04/01/G3LZGj.png" alt="G3LZGj.png"></a></p>
<p>点击后，直接跳转到此界面：</p>
<p> <a href="https://library.vuforia.com/content/vuforia-library/en/articles/Solution/vuforia-engine-package-hosting-for-unity.html">https://library.vuforia.com/content/vuforia-library/en/articles/Solution/vuforia-engine-package-hosting-for-unity.html</a></p>
<p>第一种方式最简单，直接下载 SDK 升级即可，但是博主下载导入到 Unity 后，发现不仅没有升级，还出现了很多错误，而且在package manager 界面上，完全没有内容，似乎有文件找不到</p>
<p><a href="https://imgchr.com/i/G3LViQ"><img src="https://s1.ax1x.com/2020/04/01/G3LViQ.png" alt="G3LViQ.png"></a></p>
<p>错误提示：</p>
<p>Failed to resolve packages: Cannot read property ‘scopedRegistries’ of undefined. No packages loaded.</p>
<p>Cannot perform upm operation: Cannot read property ‘scopedRegistries’ of undefined [NotFound]<br>UnityEditor.EditorApplication:Internal_CallUpdateFunctions()</p>
<p>Error fetching package list.<br>UnityEditor.EditorApplication:Internal_CallUpdateFunctions()</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>按照官方链接的最后一个方法，下载 Vuforia Engine软件包，解压后将原名为<em>package</em>的文件夹，改名为<em>com.ptc.vuforia.engine</em>，放进项目对应的 package 目录，即可发现 Unity 界面已经开始导入。</p>
<p><a href="https://imgchr.com/i/G3L5TS"><img src="https://s1.ax1x.com/2020/04/01/G3L5TS.png" alt="G3L5TS.png"></a></p>
<h2 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h2><p><del>发现不能直接拖拽 .unitypackage 文件进行导入，只能通过右键菜单里的导入进行操作</del></p>
]]></content>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Vuforia错误：Failed-load-data-set-xxx</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E9%94%99%E8%AF%AF%EF%BC%9AFailed-load-data-set-xxx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vuforia运行问题</p>
<a id="more"></a>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>按照常规套路，布置好AR Camera , 2个model target 之后，运行会报错。提示 failed-load-data-set-xxx </p>
<!-- more -->
<p>错误提示：</p>
<blockquote>
<p>Failed to load data set all.<br>UnityEngine.Debug:LogError(Object)<br>Vuforia.DatabaseLoadARController:LoadDatasets()<br>Vuforia.VuforiaARController:StartAfterInitializationCompleted()<br>Vuforia.VuforiaARController:Start()<br>System.Delegate:DynamicInvoke(Object[])<br>Vuforia.DelegateHelper:InvokeDelegate(Delegate, Object[])<br>Vuforia.DelegateHelper:InvokeWithExceptionHandling(Action)<br>Vuforia.VuforiaBehaviour:Start()</p>
</blockquote>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>推荐 Vuforia 官方论坛搜索，此问题已经有人反映过，链接：<a href="https://developer.vuforia.com/forum/model-targets/failed-load-data-set-xxx">https://developer.vuforia.com/forum/model-targets/failed-load-data-set-xxx</a> ；</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>尝试换Key，但是没啥用；</p>
<p>亲测解决方法：Unity 版本2019及以上，Vuforia 9.0 即可，就没有报错了</p>
<p>Vuforia 更新可以看我的另一篇文章：<a href="https://junlu.club/2020/04/02/问题-Vuforia更新错误-Failed-to-resolve-packages/">https://junlu.club/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E6%9B%B4%E6%96%B0%E9%94%99%E8%AF%AF-Failed-to-resolve-packages/</a></p>
]]></content>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Unity移动不连续</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Unity%E7%A7%BB%E5%8A%A8%E4%B8%8D%E8%BF%9E%E7%BB%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>初学Unity的问题</p>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>刚刚装了Unity2019.3.4.f1 ，在scene页面移动cube时，发现移动不连续，即按照网格移动，类似于建模软件中的情况</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>so easy</p>
<p><a href="https://imgchr.com/i/GKKNGt"><img src="https://s1.ax1x.com/2020/03/31/GKKNGt.png" alt="GKKNGt.png"></a></p>
<p>点击一下就行了</p>
]]></content>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-机械工程图纸设计</title>
    <url>/2020/04/02/%E7%AC%94%E8%AE%B0-%E6%9C%BA%E6%A2%B0%E5%B7%A5%E7%A8%8B%E5%9B%BE%E7%BA%B8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录关于工程制图的事项，此文用于毕业设计</p>
<a id="more"></a>
<h3 id="工程图纸的作用"><a href="#工程图纸的作用" class="headerlink" title="工程图纸的作用"></a>工程图纸的作用</h3><ul>
<li>工程师的语言</li>
<li>传递设计思路</li>
<li>定义产品</li>
<li>产品制造依据</li>
<li>产品装配依据</li>
<li>施工的依据</li>
<li>产品检验，维修依据</li>
<li>描述产品性能</li>
</ul>
<h3 id="如何掌握"><a href="#如何掌握" class="headerlink" title="如何掌握"></a>如何掌握</h3><ul>
<li>态度端正</li>
<li>有意识</li>
<li>主动学习，勤于思考</li>
<li>领会加领悟</li>
<li>多锻炼</li>
<li>接受实际项目的训练</li>
<li>举一反三</li>
<li>善于总结</li>
</ul>
<h3 id="图纸设计手段的发展"><a href="#图纸设计手段的发展" class="headerlink" title="图纸设计手段的发展"></a>图纸设计手段的发展</h3><ul>
<li>手绘</li>
<li>描图</li>
<li>晒图</li>
<li>甩图版 - AutoCAD</li>
<li>3D -&gt; 2D：<ul>
<li>三维建模后，数模投影生成二维工程图纸视图，手工添加标注</li>
</ul>
</li>
<li>MBD：带标注的三维数模</li>
</ul>
<h3 id="装配图"><a href="#装配图" class="headerlink" title="装配图"></a>装配图</h3><p>机器工作原理，性能要求，部件之间零件关系，反应设计意图</p>
<p>设计，装配，调整，检验，安装，使用和维护时，使用；</p>
<p><strong>装配图是绘制零件图的技术依据，自顶向下的设计思想</strong></p>
<h4 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h4><ul>
<li>一组视图<ul>
<li>正确表达<strong>装配关系</strong></li>
<li>正确表达零件<strong>主要的结构形状</strong></li>
</ul>
</li>
<li>必要的尺寸（主要）<ul>
<li><strong>总体尺寸（长宽高）</strong></li>
<li>主要包括机器<strong>性能，规格（中心距），安装，零件之间的相对位置，配合要求（基孔制？间隙？）</strong></li>
<li>外形尺寸，特征尺寸（中心距），安装尺寸，配合尺寸</li>
</ul>
</li>
<li>技术要求<ul>
<li>使用<strong>文字与符号</strong>表达<strong>视图上无法表达</strong>的内容</li>
<li>装配，调整，检查，维护等方面的内容</li>
</ul>
</li>
<li>标题栏，零件编号，明细表<ul>
<li>横平竖直，相对集中，按顺序</li>
<li>美观</li>
</ul>
</li>
<li>明细表</li>
</ul>
<h4 id="装配图的视图选取"><a href="#装配图的视图选取" class="headerlink" title="装配图的视图选取"></a>装配图的视图选取</h4><ul>
<li>主视图：一般按照机器的工作位置</li>
<li>尽量集中表达工作原理，主要装配关系</li>
</ul>
<h4 id="装配图的配合尺寸"><a href="#装配图的配合尺寸" class="headerlink" title="装配图的配合尺寸"></a>装配图的配合尺寸</h4><ul>
<li>配合：参考机械设计手册，要标准化</li>
<li>配合制：<ul>
<li>基孔制</li>
<li>基轴制</li>
</ul>
</li>
</ul>
<h3 id="零件图"><a href="#零件图" class="headerlink" title="零件图"></a>零件图</h3><p>零件设计意图，制造检测要求；正确，完整，清晰，简洁，合理，符合国标，方便阅读</p>
<p>零件图应包括制造，检验所需要的全部内容</p>
<h4 id="具体内容-1"><a href="#具体内容-1" class="headerlink" title="具体内容"></a>具体内容</h4><ul>
<li>一组视图<ul>
<li>完整清晰简洁表达结构形状</li>
</ul>
</li>
<li>尺寸<ul>
<li>完整，清晰，合理标注结构尺寸</li>
</ul>
</li>
<li>技术要求<ul>
<li>表面结构要求</li>
<li>尺寸公差</li>
<li>集合工程</li>
<li>表面处理</li>
<li>热处理工艺</li>
</ul>
</li>
<li>标题栏</li>
</ul>
<h3 id="零件结构设计"><a href="#零件结构设计" class="headerlink" title="零件结构设计"></a>零件结构设计</h3><h4 id="零件结构设计-1"><a href="#零件结构设计-1" class="headerlink" title="零件结构设计"></a>零件结构设计</h4><ul>
<li>确定零件载荷</li>
<li>选择材料</li>
<li><p>确定主要零件尺寸</p>
<ul>
<li>失效分析-&gt;</li>
<li>工作能力准则-&gt;</li>
<li>零件主要尺寸（标准化）</li>
</ul>
</li>
<li><p>结构设计</p>
</li>
<li>绘图</li>
</ul>
<h4 id="零件图视图选择"><a href="#零件图视图选择" class="headerlink" title="零件图视图选择"></a>零件图视图选择</h4><ul>
<li>轴套图<ul>
<li>主视图+断面图</li>
</ul>
</li>
<li>轮盘类<ul>
<li>两个主要视图</li>
</ul>
</li>
<li>结构复杂：多个视图</li>
</ul>
<h4 id="零件图尺寸标注"><a href="#零件图尺寸标注" class="headerlink" title="零件图尺寸标注"></a>零件图尺寸标注</h4><ul>
<li>主要尺寸<ul>
<li>直接标注</li>
</ul>
</li>
<li>非主要尺寸<ul>
<li>一般不标准公差</li>
<li>外形轮廓，非配合要求</li>
</ul>
</li>
<li>尺寸基准<ul>
<li>设计基准（考虑设计要求）<ul>
<li>主要尺寸直接标注</li>
<li>不要形成封闭尺寸链</li>
</ul>
</li>
<li>工艺基准（考虑工艺要求，加工顺序，测量方便）<ul>
<li>按加工顺序标注</li>
<li>考虑测量</li>
</ul>
</li>
</ul>
</li>
<li><p>几何公差（跳动之类）</p>
<ul>
<li>需要基准</li>
</ul>
</li>
<li><p>表面粗糙度</p>
<ul>
<li>装配图中不需要表面粗糙度</li>
</ul>
</li>
<li>技术要求<ul>
<li>去毛刺</li>
<li>。。。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>工程图</tag>
      </tags>
  </entry>
  <entry>
    <title>网易有道词典纯净VIP版</title>
    <url>/2020/04/02/%E7%BD%91%E6%98%93%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8%E7%BA%AF%E5%87%80VIP%E7%89%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网易有道的使用</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>网易有道词典是一款免费的全能翻译软件。它结合了桌面词典及互联网在线词典的优势，支持英汉、法汉、日汉、韩汉互译以及汉语词典和全文翻译的功能，还收录了各类词汇的网络释义、例句和百科知识。除此之外，有道词典的取词划词还融合了「指点」释义，除了提供常规的翻译外，还会同时提供给用户更多资讯，包括新闻、影视资讯、百科、人物等。</p>
<p>本纯净版由飞扬时空基于网易有道词典官方版本制作，它安装不弹窗、使用无广告、卸载不留痕，完美保留软件所有功能，优化软件设置，集成多部英汉语词典，离线使用更方便。</p>
<p><a href="https://imgchr.com/i/GAG2SU"><img src="https://s1.ax1x.com/2020/03/28/GAG2SU.png" alt="GAG2SU.png"></a></p>
<h2 id="修改特点"><a href="#修改特点" class="headerlink" title="修改特点"></a>修改特点</h2><ul>
<li>去除主窗口底部横幅广告</li>
<li>去除取词窗口及查询结果中的广告内容</li>
<li>去除翻译页面及结果「人工翻译」按钮</li>
<li>去除主窗口左侧「人工翻译」、「精品课」、「满意度调查」等标签</li>
<li>优化程序设置：默认关闭开机启动、自动更新、每日推荐、网易精选等选项</li>
<li>安装程序采用官方界面风格，并具备程序运行检测、现有版本检测及卸载等功能</li>
</ul>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>360安全卫士等存在误报。</p>
<p>城通网盘：<a href="https://tc5.us/dir/11269771-36907488-9a5cf0">https://tc5.us/dir/11269771-36907488-9a5cf0</a></p>
<p>百度网盘：<a href="https://pan.baidu.com/s/1ODzM3YycSKfKrmoe-IDtwg">https://pan.baidu.com/s/1ODzM3YycSKfKrmoe-IDtwg</a></p>
<p><strong>PS：</strong></p>
<ul>
<li><p><strong>请选择默认安装位置，否则安装失败</strong></p>
</li>
<li><p><strong>安装完成后直接打开，登录自己的账号即可</strong></p>
</li>
<li><strong>文档翻译经过测试不能使用</strong></li>
</ul>
<hr>
<blockquote>
<p>转载自 <a href="http://www.carrotchou.blog/">http://www.carrotchou.blog/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>VIP</tag>
        <tag>有道</tag>
      </tags>
  </entry>
  <entry>
    <title>下载YouTuBe字幕</title>
    <url>/2020/04/02/%E4%B8%8B%E8%BD%BDYouTuBe%E5%AD%97%E5%B9%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>字幕下载方法</p>
<a id="more"></a>
<h3 id="1-Keepvid"><a href="#1-Keepvid" class="headerlink" title="1. Keepvid"></a>1. Keepvid</h3><p><a href="https://keepvid.com/">https://keepvid.com/</a></p>
<h3 id="2-Dbxdb"><a href="#2-Dbxdb" class="headerlink" title="2.Dbxdb"></a>2.Dbxdb</h3><p><a href="http://mo.dbxdb.com/setting.html">http://mo.dbxdb.com/setting.html</a></p>
<h3 id="3-Zhuwei"><a href="#3-Zhuwei" class="headerlink" title="3. Zhuwei"></a>3. Zhuwei</h3><p><a href="https://zhuwei.me/y2b/">https://zhuwei.me/y2b/</a></p>
<h3 id="4-FindYoutube"><a href="#4-FindYoutube" class="headerlink" title="4. FindYoutube"></a>4. FindYoutube</h3><p><a href="https://www.findyoutube.net/">https://www.findyoutube.net/</a></p>
]]></content>
      <tags>
        <tag>YouTuBe</tag>
      </tags>
  </entry>
  <entry>
    <title>相机标定原理解析-2</title>
    <url>/2020/04/02/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我又来啦</p>
<a id="more"></a>
<p>由上次记录<a href="[https://junlu.club/2020/04/02/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-1/](https://junlu.club/2020/04/02/相机标定原理解析-1/">相机标定原理解析-1</a>)可知：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}u \\v \\1 \\\end{bmatrix}=s\begin{bmatrix}f_x & 0 & u_0 \\0 & f_x & v_0 \\0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}r_1 & r_2 & t \\\end{bmatrix}\begin{bmatrix}x_w \\y_w \\1 \\\end{bmatrix}</script><p>$f_x = \frac{f}{d_x}$</p>
<p>$f_y = \frac{f}{d_y}$</p>
<p>定义<code>单应性矩阵（从物体平面到成像平面）:</code></p>
<script type="math/tex; mode=display">
H=s\begin{bmatrix}f_x & 0 & u_0 \\0 & f_x & v_0 \\0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}r_1 & r_2 & t \\\end{bmatrix}=sM\begin{bmatrix}r_1 & r_2 & t \\\end{bmatrix}\tag {公式1}</script><p>$s$为比例系数</p>
<h3 id="在不考虑畸变情况下，求解内参和外参"><a href="#在不考虑畸变情况下，求解内参和外参" class="headerlink" title="在不考虑畸变情况下，求解内参和外参"></a>在不考虑畸变情况下，求解内参和外参</h3><p>简化：$H = \begin{bmatrix} h_1 &amp; h_2 &amp; h_3 \\ \end{bmatrix}$</p>
<script type="math/tex; mode=display">
h_1 = sMr_1 \\h_2 = sMr_2 \\\tag {公式2}h_3 = sMr_3 \\</script><p><code>旋转向量的性质</code>：$r_1$和$r_2$正交 -&gt; 点积为0 </p>
<script type="math/tex; mode=display">
r_1^Tr_2 = 0\tag {公式3}</script><p>将上述 <code>公式2</code> 替换 <code>公式3</code>并化简：</p>
<script type="math/tex; mode=display">
h_1^T(M^{-1})^TM^{-1}h_2 = 0\tag {公式4}</script><p><code>旋转向量性质</code>：旋转向量长度相等</p>
<script type="math/tex; mode=display">
|r_1|=|r_2|=1 \\r_1^T r_1 = r_2^T r_2\tag {公式5}</script><p><code>公式2</code>替换<code>公式5</code> 可得：</p>
<script type="math/tex; mode=display">
h_1^T(M^{-1})^TM^{-1}h_1 = h_2^T(M^{-1})^TM^{-1}h_2\tag {公式6}</script><p>假设：</p>
<script type="math/tex; mode=display">
B=(M^{-1})^TM^{-1} =\begin{bmatrix}\frac{1}{f_x^2} & 0 & \frac{-c_x}{f_x^2} \\0 & \frac{1}{f_y^2} & \frac{-c_y}{f_y^2} \\\frac{-c_x}{f_X^2} & \frac{-c_y}{f_y^2} & \frac{c_x^2}{f_x^2}+\frac{c_y^2}{f_y^2}+1\end{bmatrix}=\begin{bmatrix}B_{11} & B_{12} & B_{13} \\B_{21} & B_{22} & B_{23} \\B_{31} & B_{32} & B_{33} \\\end{bmatrix}\tag{公式7}</script><p>将<code>公式7</code>代入 <code>公式4</code>和<code>公式6</code>中：</p>
<script type="math/tex; mode=display">
h_1^TBh_2 = 0 \\h_1^TBh_1 = h_2^TBh_2 \\\tag{公式8}</script><p>$B$为对称矩阵</p>
<script type="math/tex; mode=display">
h_i^TBh_j = \begin{bmatrix}h_{i1}h_{j1} \\h_{i1}h_{j2}+h_{i2}h_{j1} \\h_{i2}h_{j2} \\h_{i3}h_{j1}+h_{i1}h_{j3} \\h_{i3}h_{j2}+h_{i2}h_{j3} \\h_{i3}h_{j3} \\\end{bmatrix}\begin{bmatrix}B_{11} \\B_{12} \\B_{22} \\B_{13} \\B_{23} \\B_{33} \\\end{bmatrix}\tag {公式9}</script><p>定义：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}h_{i1}h_{j1} \\h_{i1}h_{j2}+h_{i2}h_{j1} \\h_{i2}h_{j2} \\h_{i3}h_{j1}+h_{i1}h_{j3} \\h_{i3}h_{j2}+h_{i2}h_{j3} \\h_{i3}h_{j3} \\\end{bmatrix}\begin{bmatrix}B_{11} \\B_{12} \\B_{22} \\B_{13} \\B_{23} \\B_{33} \\\end{bmatrix}=v_{ij}^Tb\tag{公式10}</script><p>将<code>公式9</code> <code>公式10</code>分别带入<code>公式8</code>，得约束条件：</p>
<script type="math/tex; mode=display">
v_{12}^Tb = 0 \\v_{11}^Tb = v_{22}^Tb</script><p>化简得：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}v_{12}^T \\v_{11}^T - v_{22}^T\end{bmatrix}b=0</script><p>由内参数B的封闭解和b的对应关系即可求解出内参数矩阵中的各个元素？？？？</p>
<p>拍摄了n张不同角度的标定图片，因为每张图片我们都可以得到一组（2个）上述的等式。</p>
<p>其中，$v_{11},v_{12},v_{22}$已知（可以通过计算好的单应矩阵得到）？？？</p>
<p>$b$中6个元素是待求的未知数。因此，至少需要保证图片数 $n&gt;=3$，我们才能解出$b$ ？？？？</p>
]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>相机标定</tag>
      </tags>
  </entry>
  <entry>
    <title>相机标定原理解析-1</title>
    <url>/2020/04/02/%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录相机标定基础</p>
<a id="more"></a>
<h3 id="相机标定的目的"><a href="#相机标定的目的" class="headerlink" title="相机标定的目的"></a>相机标定的目的</h3><ul>
<li><p>建立相机成像几何模型，矫正透镜畸变</p>
<p>（得到物体从三维世界信息到成像平面信息之间的映射关系）</p>
<ul>
<li>得到相机的内参和外参</li>
<li>利用畸变系数矫正畸变</li>
</ul>
</li>
</ul>
<h3 id="相机标定的原理"><a href="#相机标定的原理" class="headerlink" title="相机标定的原理"></a>相机标定的原理</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><ul>
<li>世界坐标系</li>
<li>相机坐标系</li>
<li>图像坐标系</li>
<li>像素坐标系</li>
</ul>
<p><a href="https://imgchr.com/i/8BXWjJ"><img src="https://s1.ax1x.com/2020/03/18/8BXWjJ.png" alt="8BXWjJ.png"></a></p>
<h3 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h3><h4 id="世界坐标系-gt-相机坐标系"><a href="#世界坐标系-gt-相机坐标系" class="headerlink" title="世界坐标系 -&gt; 相机坐标系"></a>世界坐标系 -&gt; 相机坐标系</h4><script type="math/tex; mode=display">
\begin{bmatrix}x_c \\y_c \\z_c \\1 \\\end{bmatrix}= \begin{bmatrix}R^3_3 & &&t^1_3 \\0 & 0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}x_w \\y_w \\z_w \\1 \\\end {bmatrix}=\begin {bmatrix}r_1 & r_2 & r_3 & t^4_1 \\\end {bmatrix}\begin{bmatrix}x_w \\y_w \\0 \\1 \\\end{bmatrix}=\begin{bmatrix}r_1 & r_2 & 1 \\\end{bmatrix}\begin{bmatrix}x_w \\y_w \\1 \\\end{bmatrix}\tag {公式1}</script><p>前提假设：$z_w = 0$，即物体在世界坐标系的 $x_w$ 与 $y_w$ 组成的平面上</p>
<p><strong>外参矩阵</strong>为：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}R^3_3 & &&t^1_3 \\0 & 0 & 0 & 1 \\\end{bmatrix}</script><h4 id="相机坐标系-gt-理想图像坐标系（不考虑畸变）"><a href="#相机坐标系-gt-理想图像坐标系（不考虑畸变）" class="headerlink" title="相机坐标系-&gt;理想图像坐标系（不考虑畸变）"></a>相机坐标系-&gt;理想图像坐标系（不考虑畸变）</h4><p><a href="https://imgchr.com/i/8BX4BR"><img src="https://s1.ax1x.com/2020/03/18/8BX4BR.md.png" alt="8BX4BR.md.png"></a></p>
<p>化为齐次坐标表示：</p>
<script type="math/tex; mode=display">
z_{Mc}\begin{bmatrix}x_{p} \\y_{p} \\1 \\\end{bmatrix}=\begin{bmatrix}f & 0 & 0 & 0 \\0 & f & 0 & 0 \\0 & 0 & 1 & 0 \\ \end{bmatrix}\begin{bmatrix}x_{Mc} \\y_{Mc} \\z_{Mc} \\1 \\\end{bmatrix}=\begin{bmatrix}f & 0 & 0 \\0 & f & 0 \\0 & 0 & 1 \\\end {bmatrix}\begin{bmatrix}1 & 0 & 0 & 0 \\0 & 1 & 0 & 0 \\0 & 0 & 1 & 0 \\\end{bmatrix}\begin{bmatrix}x_{Mc} \\y_{Mc} \\z_{Mc} \\1 \\\end{bmatrix}\tag {公式2}</script><h3 id="理想图像坐标系-gt-实际图像坐标系（考虑畸变）"><a href="#理想图像坐标系-gt-实际图像坐标系（考虑畸变）" class="headerlink" title="理想图像坐标系-&gt;实际图像坐标系（考虑畸变）"></a>理想图像坐标系-&gt;实际图像坐标系（考虑畸变）</h3><p>只考虑纵向畸变和切向畸变</p>
<h3 id="实际图像坐标系-gt-像素坐标系"><a href="#实际图像坐标系-gt-像素坐标系" class="headerlink" title="实际图像坐标系-&gt;像素坐标系"></a>实际图像坐标系-&gt;像素坐标系</h3><p>假设<code>像素坐标系原点</code>在图像坐标系下的坐标为 $(u_0,v_0)$，每个像素点在$x$轴，$y$轴方向的尺寸为$dx , dy$。</p>
<p>假设<code>像点</code>在实际图像坐标系下的坐标为$(x_c,y_c)$，则像点在像素坐标系下的坐标为：</p>
<p>$u = \frac {x_c}{d_x}+u_0$</p>
<p>$v=\frac {y_c} {d_y} +v_0$</p>
<p>化为齐次坐标为：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}u \\v \\1 \\\end{bmatrix}=\begin{bmatrix}\frac{1}{d_x} & 0 & u_0 \\0 & \frac{1}{d_y} & v_0 \\0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}x_C \\y_c \\1 \\\end{bmatrix}\tag{公式5}</script><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>暂时不考虑透镜畸变，则将<code>公式2</code>与<code>公式5</code>相乘得<code>内参矩阵M</code>：</p>
<script type="math/tex; mode=display">
z_{Mc}
\begin{bmatrix}
\frac{1}{d_x} & 0 & u_0 \\
0 & \frac{1}{d_y} & v_0 \\
0 & 0 & 1 \\
\end{bmatrix}
^{-1}
\begin{bmatrix}
u & v & 1 \\
\end{bmatrix}
=
\begin{bmatrix}
f & 0 & 0 \\
0 & f & 0 \\
0 & 0 & 1 \\
\end {bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
x_{Mc} \\
y_{Mc} \\
z_{Mc} \\
1 \\
\end{bmatrix}
\\
=
\begin{bmatrix}
f & 0 & 0 \\
0 & f & 0 \\
0 & 0 & 1 \\
\end {bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
r_1 & r2 & 1 \\
\end{bmatrix}
\begin{bmatrix}
x_w \\
y_w \\
1 \\
\end{bmatrix}</script><script type="math/tex; mode=display">
\begin{bmatrix}u \\v \\1 \\\end{bmatrix}=s\begin{bmatrix}f_x & 0 & u_0 \\0 & f_x & v_0 \\0 & 0 & 1 \\\end{bmatrix}\begin{bmatrix}r_1 & r_2 & t \\\end{bmatrix}\begin{bmatrix}x_w \\y_w \\1 \\\end{bmatrix}</script><script type="math/tex; mode=display">
M=\begin{bmatrix}\frac{f}{d_x} & 0 & u_0 \\0 & \frac{f}{d_y} & v_0 \\0 & 0 & 1 \\\end{bmatrix}=\begin{bmatrix}f_x & 0 & u_0 \\0 & f_y & v_0 \\0 & 0 & 1 \\\end{bmatrix}</script>]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>相机标定</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv-VS2019环境配置</title>
    <url>/2020/04/02/Opencv-VS2019%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录Win10操作系统下，Opencv+VS2019的环境配置，具体Opencv版本为4.1.0</p>
<a id="more"></a>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>Opencv 官网下载链接：<a href="https://opencv.org/releases/">传送门</a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol>
<li><p>下载好的文件解压到合适的目录下，本文以<code>D:\OpenCV</code>目录放置解压文件，如下图</p>
<p><a href="https://imgchr.com/i/8sQycT"><img src="https://s1.ax1x.com/2020/03/19/8sQycT.md.png" alt="8sQycT.md.png"></a></p>
</li>
<li><p>打开资源管理器窗口，在<code>此电脑</code>上右击，点击<code>属性</code>，弹出<code>控制面板中的系统窗口</code>，点击<code>高级系统设置</code>，弹出<code>系统属性窗口</code>，点击<code>环境变量</code></p>
</li>
<li><p>在窗口上方的<code>用户变量</code>中，选中Path变量，点击下方编辑，在编辑系统变量窗口中，新增以下变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\x64\vc15\bin</span><br></pre></td></tr></table></figure></li>
<li>连续点击3个确定，关闭系统窗口</li>
</ol>
<h3 id="配置VS"><a href="#配置VS" class="headerlink" title="配置VS"></a>配置VS</h3><ol>
<li><p>打开VS2019，选择创建新项目</p>
<p><a href="https://imgchr.com/i/8slUxK"><img src="https://s1.ax1x.com/2020/03/19/8slUxK.md.png" alt="8slUxK.md.png"></a></p>
</li>
<li><p>在弹出的创建新项目面板中，选择C++语言的空项目，点击右下方的下一步</p>
<p><a href="https://imgchr.com/i/8sQs3V"><img src="https://s1.ax1x.com/2020/03/19/8sQs3V.md.png" alt="8sQs3V.md.png"></a></p>
</li>
<li><p>结合自身情况，选择储存位置，点击创建</p>
</li>
<li><p>在新打开的VS界面中，找到右侧<code>解决方案资源管理器</code>，右键单击【源文件】-&gt;【添加】-&gt;【新建项】，新建一个命名为“main”的<code>C++文件</code></p>
</li>
<li><p>点开【视图】-&gt;【其他窗口】-&gt;【属性管理器】，打开属性管理器面板</p>
</li>
<li><p>调试模式改为<code>Debug x64</code>模式。</p>
</li>
<li><p>找到Opencv的安装目录<code>D:\OpenCV\opencv\build\x64\vc15\bin</code>，将如下图所示的三个文件（dll文件），复制粘贴到系统路径<code>C:\Windows\System32</code>文件夹内。</p>
<p><a href="https://imgchr.com/i/8sQ0Nn"><img src="https://s1.ax1x.com/2020/03/19/8sQ0Nn.md.png" alt="8sQ0Nn.md.png"></a></p>
</li>
<li><p>接下来，开始为软件配置目录和附加项。右键点击【属性管理器】中的【Debug | x64】选项，选择【添加新的项目属性表】</p>
</li>
<li><p>将新建的项目属性表重命名为<code>Opencv410Debugx64</code>，之后双击打开，选中【VC++ 目录】-&gt;【包含目录】，新增以下路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\include</span><br><span class="line">D:\OpenCV\opencv\build\include\opencv2</span><br></pre></td></tr></table></figure></li>
<li><p>在【库目录】中添加以下路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\x64\vc15\lib</span><br></pre></td></tr></table></figure></li>
<li><p>打开【链接器】-&gt;【输入】-&gt;【附加依赖项】，添加以下名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv_world410d.lib</span><br></pre></td></tr></table></figure>
<p>PS：opencv_world410d.lib 是指 Debug 编辑模式，opencv_world410.lib 是指Relsase 编辑模式。</p>
</li>
</ol>
<h3 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h3><p>在main.cpp中粘贴以下程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;opencv.hpp&quot; &#x2F;&#x2F;opencv 的头文件</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv; &#x2F;&#x2F;opencv 的命名空间</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;Hello Open CV!&quot;);</span><br><span class="line">	Mat srcImage &#x3D; imread(&quot;1.jpg&quot;);	&#x2F;&#x2F;图片需要在工程目录下</span><br><span class="line">	Mat temImage, dstImage1;</span><br><span class="line">	temImage &#x3D; srcImage;</span><br><span class="line">	&#x2F;&#x2F;尺寸调整</span><br><span class="line">	resize(temImage, dstImage1, Size(0, 0), 0.25, 0.25, INTER_LINEAR);     &#x2F;&#x2F;长宽缩小1&#x2F;4</span><br><span class="line">	imshow(&quot;缩小&quot;, dstImage1);</span><br><span class="line">	waitKey();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后续工作"><a href="#后续工作" class="headerlink" title="后续工作"></a>后续工作</h3><p>调试时如果在下方出现 <code>xxx符号在加载</code>，并且很久都没有出现图片，需要做以下工作：</p>
<p>进入【工具】-&gt;【选项】-&gt;【调试】-&gt;【符号】，看右边有个<code>Microsoft符号服务器</code>，将前面的勾去掉</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://blog.csdn.net/qingzai_/article/details/73838709">https://blog.csdn.net/qingzai_/article/details/73838709</a></p>
<p><a href="https://blog.csdn.net/qq_24912401/article/details/90475290?utm_source=app">https://blog.csdn.net/qq_24912401/article/details/90475290?utm_source=app</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>OpenCV</tag>
        <tag>VS2019</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题优化记录</title>
    <url>/2020/04/02/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经典主题！</p>
<a id="more"></a>
<h3 id="名词说明"><a href="#名词说明" class="headerlink" title="名词说明"></a>名词说明</h3><ul>
<li>站点配置文件：指文件所在路径为：根目录\_config.yml </li>
<li>主题配置文件：指文件所在路径为：根目录\themes\next\_config.yml </li>
</ul>
<h3 id="配置1：语言与基本信息更改"><a href="#配置1：语言与基本信息更改" class="headerlink" title="配置1：语言与基本信息更改"></a>配置1：语言与基本信息更改</h3><p>改变博客的语言为中文，博客标题，博客作者</p>
<ul>
<li>打开站点配置文件</li>
<li>找到代码并修改如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: JunLuBlog #要修改的内容区域</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: JunLu #要修改的内容区域</span><br><span class="line">language: zh-Hans #要修改的内容区域</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure>
<h3 id="配置2：主题样式修改"><a href="#配置2：主题样式修改" class="headerlink" title="配置2：主题样式修改"></a>配置2：主题样式修改</h3><p>Next主题提供了多种样式以供选择</p>
<ul>
<li>打开主题配置文件</li>
<li>修改代码如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces 若选择此样式，将其前面的#去掉即可</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<h3 id="配置3：菜单设置"><a href="#配置3：菜单设置" class="headerlink" title="配置3：菜单设置"></a>配置3：菜单设置</h3><p>在博客顶端需要有标签，分类，关于等菜单栏</p>
<ul>
<li>在根目录开启 <code>Git Bash Here</code></li>
<li>命令：<code>hexo new page &quot;tags&quot;</code></li>
<li>命令：<code>hexo new page &quot;categories&quot;</code></li>
<li>命令：<code>hexo new page &quot;about&quot;</code></li>
<li>进入路径：根目录\\source，可以看到新建了分类，标签，关于的文件夹</li>
<li>打开主题配置文件，修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;|| home</span><br><span class="line">  about: &#x2F;about&#x2F;|| user</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br><span class="line">  archives: &#x2F;archives&#x2F;|| archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br></pre></td></tr></table></figure>
<p>PS：一丁点空格也不许错</p>
<h3 id="配置3-：侧边栏"><a href="#配置3-：侧边栏" class="headerlink" title="配置3 ：侧边栏"></a>配置3 ：侧边栏</h3><p>Next主题提供了侧边栏的左右放置方向</p>
<ul>
<li>打开主题配置文件</li>
<li>修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  #position: left</span><br><span class="line">  position: right</span><br></pre></td></tr></table></figure>
<h3 id="配置4：-开启动态背景"><a href="#配置4：-开启动态背景" class="headerlink" title="配置4： 开启动态背景"></a>配置4： 开启动态背景</h3><ul>
<li>打开主题配置文件</li>
<li>修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next-支持数学公式输入配置</title>
    <url>/2020/04/02/Hexo-Next-%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>忘记是哪个版本适用来着</p>
<a id="more"></a>
<h3 id="1-使用Kramed-代替-Marked"><a href="#1-使用Kramed-代替-Marked" class="headerlink" title="1. 使用Kramed 代替 Marked"></a>1. 使用Kramed 代替 Marked</h3><p>渲染引擎kramed支持mathjax</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>打开:博客根目录<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code><br>将下面这几句进行更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">  &#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">  return text.replace(&#x2F;&#96;\$(.*?)\$&#96;&#x2F;g, &#39;$$$$$1$$$$&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">  &#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-使用hexo-renderer-mathjax-代替-hexo-math"><a href="#2-使用hexo-renderer-mathjax-代替-hexo-math" class="headerlink" title="2. 使用hexo-renderer-mathjax 代替 hexo-math"></a>2. 使用hexo-renderer-mathjax 代替 hexo-math</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>
<h3 id="3-更新-Mathjax-的-CDN-链接"><a href="#3-更新-Mathjax-的-CDN-链接" class="headerlink" title="3. 更新 Mathjax 的 CDN 链接"></a>3. 更新 Mathjax 的 CDN 链接</h3><p>打开:<code>博客根目录/node_modules/hexo-renderer-mathjax/mathjax.html</code><br>将最下面&lt;script src=后的url改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-MML-AM_CHTML</span><br></pre></td></tr></table></figure>
<h3 id="4-更改默认转义规则"><a href="#4-更改默认转义规则" class="headerlink" title="4. 更改默认转义规则"></a>4. 更改默认转义规则</h3><p>打开:<code>博客根目录/node_modules/kramed/lib/rules/inline.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;escape: &#x2F;^\\([\\&#96;*&#123;&#125;\[\]()#$+\-.!_&gt;])&#x2F;,      第11行，将其修改为</span><br><span class="line">escape: &#x2F;^\\([&#96;*\[\]()#$+\-.!_&gt;])&#x2F;,</span><br><span class="line">&#x2F;&#x2F;em: &#x2F;^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,    第20行，将其修改为</span><br><span class="line">em: &#x2F;^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure>
<h3 id="5-开启mathjax"><a href="#5-开启mathjax" class="headerlink" title="5. 开启mathjax"></a>5. 开启mathjax</h3><p>在主题的配置文件中,我用的是next主题,那么在其_config.yml中找到mathjax并设置为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: &#x2F;&#x2F;cdn.bootcss.com&#x2F;mathjax&#x2F;2.7.1&#x2F;latest.js?config&#x3D;TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>
<p>之后再写文章时,加上mathjax: true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date: 2017&#x2F;8&#x2F;3 18:20:00</span><br><span class="line">tags: hexo</span><br><span class="line">mathjax: true</span><br><span class="line">title: hexo博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://blog.csdn.net/littlehaes/article/details/84370393">https://blog.csdn.net/littlehaes/article/details/84370393</a></p>
<p><a href="https://andyvj.coding.me/2019/02/26/190226-02/">https://andyvj.coding.me/2019/02/26/190226-02/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo静态博客配置</title>
    <url>/2020/04/02/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>博客搭建第一步！</p>
<a id="more"></a>
<h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><ol>
<li><p>github 账号。</p>
</li>
<li><p><del>购买一个域名的钱</del></p>
<p><a href="https://www.freenom.com/zh/index.html?lang=zh">免费域名传送门</a></p>
</li>
</ol>
<hr>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="github-创建仓库"><a href="#github-创建仓库" class="headerlink" title="github 创建仓库"></a>github 创建仓库</h4><ul>
<li><p>登录 github 账号，<a href="https://github.com/">传送门</a></p>
</li>
<li><p>Start Project</p>
<p><a href="https://imgchr.com/i/G0YxHI"><img src="https://s1.ax1x.com/2020/04/04/G0YxHI.png" alt="G0YxHI.png"></a></p>
</li>
<li><p>在Repository name中输入新建仓库的名称，yourname.github.io，点击Create Repository</p>
<p><a href="https://imgchr.com/i/G0YvDA"><img src="https://s1.ax1x.com/2020/04/04/G0YvDA.png" alt="G0YvDA.png"></a></p>
</li>
</ul>
<hr>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><ul>
<li>下载安装地址：<ul>
<li>官网：<a href="https://gitforwindows.org/">传送门</a></li>
<li>蓝奏云：<a href="https://www.lanzous.com/iazxt2j">传送门</a></li>
</ul>
</li>
<li>一路默认安装即可</li>
</ul>
<hr>
<h4 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h4><blockquote>
<p>为了把本地的仓库中的内容传输到GitHub上，需要配置ssh key，无论是上传自己的博客还是上传其他的仓库都需要连接Github，ssh key是一个token，作用是身份验证。</p>
</blockquote>
<ul>
<li><p><strong>打开Git Bash，输入命令：</strong>（email是注册Github时使用的邮箱）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>输入上面的命令后<strong>按Enter键</strong>，Git Bash会提示: </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase &lt;empty for no passphrase&gt;:_</span><br></pre></td></tr></table></figure></li>
<li><p><strong>直接按 Enter</strong>，Git Bash会在默认路径C:\users\用户名.ssh下生成几个文件。然后Git Bash又给出提示：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase &lt;empty for no passphrase&gt;:_</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是在提示我们输入密码，直接回车表示不设置密码</p>
</blockquote>
</li>
<li><p><strong>直接回车</strong>，然后Git Bash要求我们重复密码，也<strong>直接回车</strong>，然后就会提示ssh key已经生成。</p>
</li>
<li><p><strong>进入到默认的地址</strong>中查看ssh key文件</p>
<p><a href="https://imgchr.com/i/G0YOjH"><img src="https://s1.ax1x.com/2020/04/04/G0YOjH.png" alt="G0YOjH.png"></a></p>
</li>
<li><p>使用记事本或者其他软件<strong>打开 id_rsa.pub 文件，复制全部内容</strong></p>
</li>
<li><p>浏览器<strong>进入 github ，进入博客仓库</strong></p>
<p><a href="https://imgchr.com/i/G0YLge"><img src="https://s1.ax1x.com/2020/04/04/G0YLge.png" alt="G0YLge.png"></a></p>
</li>
</ul>
<p>​        <a href="https://imgchr.com/i/G0tpUP"><img src="https://s1.ax1x.com/2020/04/04/G0tpUP.png" alt="G0tpUP.png"></a></p>
<ul>
<li><p><strong>点击设置</strong></p>
<p><a href="https://imgchr.com/i/G0t94f"><img src="https://s1.ax1x.com/2020/04/04/G0t94f.png" alt="G0t94f.png"></a></p>
</li>
<li><p>在页面左侧<strong>找到Deploy keys并点击</strong></p>
<p><a href="https://imgchr.com/i/G0tPC8"><img src="https://s1.ax1x.com/2020/04/04/G0tPC8.png" alt="G0tPC8.png"></a></p>
</li>
<li><p>点击右侧的<strong>Add deploy key</strong>按钮，title填什么都可以，Key中<strong>粘贴</strong>我们刚刚在ssh key文件中复制的key；点击Add Key，<strong>保存ssh key</strong></p>
<p><a href="https://imgchr.com/i/G0tFgg"><img src="https://s1.ax1x.com/2020/04/04/G0tFgg.png" alt="G0tFgg.png"></a></p>
<p>​        <a href="https://imgchr.com/i/G0tSEt"><img src="https://s1.ax1x.com/2020/04/04/G0tSEt.png" alt="G0tSEt.png"></a></p>
</li>
<li><p>在本地验证ssh key设置是否成功，<strong>打开Git Bash，输入命令</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><strong>回车</strong>后，如果看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;You’ve successfully authenticated, but GitHub does not provide shell access&#96;</span><br></pre></td></tr></table></figure>
<p>表示当前已经成功地连接上了自己的GitHub账户。</p>
</li>
<li><p>接下来，设置一下自己的用户名和邮箱，<strong>输入以下命令：</strong>（name 和 email 每个人不同）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;my name&quot;</span><br><span class="line">git config --global user.email &quot;my email&quot;</span><br></pre></td></tr></table></figure></li>
<li>到此为止，我们已经成功地将个人电脑和Github账号连接。</li>
</ul>
<hr>
<h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><ul>
<li><p>下载</p>
<ul>
<li>官网： <a href="https://nodejs.org/en/">传送门</a></li>
<li>城通（win）：<a href="https://474b.com/file/14976410-435186222">传送门</a></li>
</ul>
</li>
<li><p>按照需要选择不同的版本，下载到本地之后，<strong>直接双击安装，一路默认</strong></p>
</li>
<li><p>检验是否安装成功：</p>
<p>打开windows的控制台，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li>
<li>电脑若显示当前安装的node.js的版本，则安装成功</li>
</ul>
<hr>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul>
<li><p>在电脑的磁盘里<strong>新建一个空文件夹</strong>，如E:\HexoB，用于存放本地仓库</p>
</li>
<li><p>在<strong>windows控制台中输入命令</strong>，跳转至D:\GIT\hexotext；代码如下：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd E:\HexoB</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Hexo，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></li>
<li><p>检查Hexo是否安装成功，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><ul>
<li><p>初始化 E:\HexoB 这个文件夹，打开Git Bash进入此目录，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li>
<li><p>安装Hexo所需要的组件，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li><p>产生webapp文件，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>开启服务器，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li><p>此时控制台提示：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO Start processing</span><br><span class="line">INFO Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>浏览器输入</strong>地址：localhost:4000 预览</p>
</li>
<li><p><strong>新建markdown文件</strong>，保存为.md文件到本地，并移至E:\HexoB\source\_posts中</p>
</li>
<li><p>和上次一样，打开的Git Bash，<strong>执行以下命令</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li>打开浏览器，访问：localhost:4000，此时可以看到刚刚发布的内容</li>
</ul>
<hr>
<h4 id="连接Hexo和Github-Pages及部署博客"><a href="#连接Hexo和Github-Pages及部署博客" class="headerlink" title="连接Hexo和Github Pages及部署博客"></a>连接Hexo和Github Pages及部署博客</h4><ul>
<li>打开 E:\HexoB 中的<strong>_config.yml文件</strong>，找到deploy字段，改为如下内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@github.com:someurl&#x2F;someurl.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p> git@github.com:someurl/someurl.github.io.git 是博客仓库的地址，获取方式是登录GitHub，找到自己的博客的仓库</p>
<p><a href="https://imgchr.com/i/GBEbB4"><img src="https://s1.ax1x.com/2020/04/05/GBEbB4.png" alt="GBEbB4.png"></a></p>
</blockquote>
<ul>
<li><p>现在将Hexo部署到GitHub的仓库里</p>
</li>
<li><p>在仓库中点击<strong>Settings，往下拉，找到GitHub Pages</strong></p>
<p><a href="https://imgchr.com/i/GBETjU"><img src="https://s1.ax1x.com/2020/04/05/GBETjU.png" alt="GBETjU.png"></a></p>
</li>
<li><p>Source选择 <strong>master branch</strong></p>
</li>
<li><p>在 E:\HexoB 中打开Git Bash，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p><strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li>
<li>部署完成之后，在浏览器中输入地址 www.yourname.github.io，这个地址就是在repository的Setting页面中看到的那个，就可以访问自己的博客啦，以后写了新的博客，保存成md文件放到source_post文件夹中，执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<ul>
<li>就可以发布到GitHub上啦</li>
</ul>
<hr>
<h3 id="购买域名并解析"><a href="#购买域名并解析" class="headerlink" title="购买域名并解析"></a>购买域名并解析</h3><ul>
<li>已腾讯云为例，<a href="https://cloud.tencent.com/">传送门</a></li>
</ul>
<p><a href="https://imgchr.com/i/834tYj"><img src="https://s1.ax1x.com/2020/03/15/834tYj.png" alt="834tYj.png"></a></p>
<ul>
<li>点击 产品-&gt;域名注册</li>
</ul>
<p><a href="https://imgchr.com/i/835CNQ"><img src="https://s1.ax1x.com/2020/03/15/835CNQ.png" alt="835CNQ.png"></a></p>
<ul>
<li>选择一个域名进行购买</li>
<li>购买后进入 控制台</li>
<li>进入域名管理界面</li>
<li>首先，实名认证</li>
<li>成功后，解析</li>
</ul>
<p><a href="https://imgchr.com/i/83ozB6"><img src="https://s1.ax1x.com/2020/03/15/83ozB6.png" alt="83ozB6.png"></a></p>
<ul>
<li>记录值的获取方式：<ul>
<li>打开windows控制台，ping www.yourname.github.io</li>
<li>将IP地址填写进入记录值</li>
</ul>
</li>
<li>在本地的D:\GIT\hexotext\source中新建一个名为CNAME的文件，内容则是刚刚申请的域名，然后重新发布</li>
<li>到此成功</li>
</ul>
<h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><ul>
<li><p>对于nmp工具</p>
<ul>
<li>更换淘宝源<code>npm install --registry=https://registry.npm.taobao.org</code></li>
<li>安装cnmp <code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/zyupupup/article/details/85098366">https://blog.csdn.net/zyupupup/article/details/85098366</a></p>
</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://blog.csdn.net/qq_34229391/article/details/82251852">https://blog.csdn.net/qq_34229391/article/details/82251852</a></li>
<li><a href="https://blog.csdn.net/zyupupup/article/details/85098366">https://blog.csdn.net/zyupupup/article/details/85098366</a></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>chorme插件记录</title>
    <url>/2020/04/02/chorme%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>小小插件小记录</p>
<a id="more"></a>
<h2 id="chorme-插件"><a href="#chorme-插件" class="headerlink" title="chorme 插件"></a>chorme 插件</h2><hr>
<p>chorme 浏览器成功的地方在于，其强大的扩展能力。在chorme 网上商店强大的加持下，chorme浏览器成为市面上最好用的浏览器，通过安装不同的插件，达到其他浏览器无法达到的效果</p>
<hr>
<h3 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h3><hr>
<ol>
<li><p>GHelpera</p>
<p>对于大陆用户，此插件的目的在于链接上chorme官方的网上商店，以获取更多的其他插件。</p>
<p>除此之外，GHelper 可以用于科研，访问谷歌学术等</p>
</li>
<li><p>Adblock</p>
<p>作用：拦截广告</p>
</li>
<li><p>stylus</p>
<p>作用：美化界面</p>
</li>
<li><p>IDM</p>
<p>作用：强大的下载功能，装机必备</p>
</li>
<li><p>SimpleExtManger</p>
<p>作用：管理所有插件，不需要的可以随时关闭，加快浏览器速度</p>
</li>
<li><p>Toby</p>
<p>作用：保存标签页，工作必备</p>
</li>
<li><p>chorme better history</p>
<p>作用：历史记录，更好的历史记录</p>
</li>
<li><p>whatFont</p>
<p>作用：查询网页字体</p>
</li>
<li><p>Picture in Picture for every website</p>
<p>作用：对于视频网站，达到画中画的效果播放</p>
</li>
<li><p>Global Rank</p>
<p>作用：发现相似网站</p>
</li>
<li><p>微信同步助手</p>
<p>作用：将微信文章同步到简书，知乎等平台</p>
</li>
<li><p>open write助手</p>
<p>作用：分发文章，在各个平台</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>chorme插件</tag>
      </tags>
  </entry>
</search>
