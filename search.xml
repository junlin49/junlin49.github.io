<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MarkerlessARDemo_1</title>
    <url>/2021/04/20/MarkerlessARDemo-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="93d73ec87c09512811c18839491bd6bd0d855fab83be4e8efbb963c85759bf9b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AR</category>
      </categories>
  </entry>
  <entry>
    <title>MarkerDemo_1</title>
    <url>/2021/04/20/MarkerDemo-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="36b6ec1631a804cb27a2bc2988f8363810695b2763d4c08c390ae74d2a553cae"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AR</category>
      </categories>
  </entry>
  <entry>
    <title>ARDemo_2</title>
    <url>/2021/04/20/ARDemo-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e808c43f9d5fa38b37378005f4a02a9941a7b04cac23b9a0e65924fe3d6a9ad3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AR</category>
      </categories>
  </entry>
  <entry>
    <title>ARDemo_1</title>
    <url>/2021/04/20/ARDemo-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3491d357bfeb7ffd2b275cbb2adc756042560c19b57cce81e8597a7f26a1edd8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AR</category>
      </categories>
  </entry>
  <entry>
    <title>Calibration</title>
    <url>/2021/04/20/Calibration/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e8ea23c8f39c3b448c1797d15e739246f5965adfb7f7ea38aa99c9fae225e378"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AR</category>
      </categories>
  </entry>
  <entry>
    <title>DetectMarker</title>
    <url>/2021/04/20/DetectMarker/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="753a6f45e964fa1883a6ecf4eee990bf396be77808953cef761377aae15f5e83"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AR</category>
      </categories>
  </entry>
  <entry>
    <title>SFM-2</title>
    <url>/2021/04/17/SFM-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="800858500b765cba9c96b0ed9afd810a9ef4b8d7f4a4749d8a2fb048c59f497c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SFM</category>
      </categories>
      <tags>
        <tag>SFM</tag>
      </tags>
  </entry>
  <entry>
    <title>error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory</title>
    <url>/2021/04/11/error-while-loading-shared-libraries-libvtkFiltersExtraction-9-0-so-1-cannot-open-shared-object-file-No-such-file-or-directory/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="error-while-loading-shared-libraries-libvtkFiltersExtraction-9-0-so-1-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#error-while-loading-shared-libraries-libvtkFiltersExtraction-9-0-so-1-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory"></a>error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory</h1><p>出现错误：</p>
<p>error while loading shared libraries: libvtkFiltersExtraction-9.0.so.1: cannot open shared object file: No such file or directory</p>
<p>解决方法：</p>
<p>由于是手动安装VTK的，所以需要在build目录运行命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考链接：<a href="https://discourse.vtk.org/t/vtk-error-linking-shared-libraries/4393">https://discourse.vtk.org/t/vtk-error-linking-shared-libraries/4393</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ubuntu configure errors</category>
      </categories>
      <tags>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>常用cmake configure</title>
    <url>/2021/04/11/%E5%B8%B8%E7%94%A8cmake-configure/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用cmake-configure"><a href="#常用cmake-configure" class="headerlink" title="常用cmake configure"></a>常用cmake configure</h1><h2 id="PCL"><a href="#PCL" class="headerlink" title="PCL"></a>PCL</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake -DCMAKE_BUILD_TYPE=Build -DBUILD_visualization=<span class="keyword">ON</span> ..</span><br></pre></td></tr></table></figure>
<h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_ENABLE_NONFREE=<span class="keyword">ON</span> -D OPENCV_EXTRA_MODULES_PATH=~/Configure/opencv_contrib/modules/ ..</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cmake</category>
      </categories>
      <tags>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)</title>
    <url>/2021/04/11/%E8%BF%9B%E7%A8%8B%E5%B7%B2%E7%BB%93%E6%9D%9F%EF%BC%8C%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81%E4%B8%BA139-interrupted-by-signal-11-SIGSEGV/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="进程已结束，退出代码为139-interrupted-by-signal-11-SIGSEGV"><a href="#进程已结束，退出代码为139-interrupted-by-signal-11-SIGSEGV" class="headerlink" title="进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)"></a>进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)</h1><h2 id="出现错误："><a href="#出现错误：" class="headerlink" title="出现错误："></a>出现错误：</h2><p>进程已结束，退出代码为139(interrupted by signal 11: SIGSEGV)</p>
<h2 id="错误出现位置："><a href="#错误出现位置：" class="headerlink" title="错误出现位置："></a>错误出现位置：</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/image-20210412092517507.png" alt="image-20210412092517507"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>PCL安装不成功，重新安装PCL</p>
]]></content>
      <categories>
        <category>ubuntu configure errors</category>
      </categories>
      <tags>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-OpenCV基本操作</title>
    <url>/2021/04/10/SLAM-OpenCV%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-OpenCV基本操作"><a href="#SLAM-OpenCV基本操作" class="headerlink" title="SLAM-OpenCV基本操作"></a>SLAM-OpenCV基本操作</h1><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat image;</span><br><span class="line">    <span class="built_in">string</span> fileName = <span class="string">&quot;1.jpg&quot;</span>;</span><br><span class="line">    image = cv::imread(fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1. 判断读取是否正确*/</span></span><br><span class="line">    <span class="keyword">if</span> (image.data == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">&quot;文件&quot;</span>&lt;&lt;fileName&lt;&lt;<span class="string">&quot;不存在&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;图像宽为：&quot;</span>&lt;&lt;image.cols&lt;&lt;<span class="string">&quot;，高为：&quot;</span>&lt;&lt;image.rows&lt;&lt;<span class="string">&quot;，图像通道数为：&quot;</span>&lt;&lt;image.channels()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    cv::imshow(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">    <span class="comment">//等待任意按键按下,程序在此暂停</span></span><br><span class="line">    cv::waitKey(<span class="number">0</span>);<span class="comment">//delay单位为ms，0意味着forever</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2. 判断图片格式是否符合要求*/</span></span><br><span class="line">    <span class="comment">// – CV_&lt;bit_depth&gt;(S|U|F)C&lt;number_of_channels&gt;</span></span><br><span class="line">    <span class="comment">//S = 符号整型 U = 无符号整型 F = 浮点型</span></span><br><span class="line">    <span class="comment">//CV_8UC1:8位无符号整型1通道；</span></span><br><span class="line">    <span class="comment">//CV_8UC3：8位无符号整形3通道</span></span><br><span class="line">    <span class="keyword">if</span> (image.type() != CV_8UC1 &amp;&amp; image.type() != CV_8UC3)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;图片类型不符合要求，要求图片类型彩色图或灰度图&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*3. 计时与像素访问*/</span></span><br><span class="line">    <span class="comment">//计时</span></span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point t1 = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; image.rows; i++)<span class="comment">//行遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取图像行指针</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *row_ptr = image.ptr&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; image.cols; j++)<span class="comment">//列遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//访问位于j,i处的像素</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> *data_ptr = &amp;row_ptr[j *image.channels()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != image.channels(); k++)<span class="comment">//通道遍历</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">char</span> data = data_ptr[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计时</span></span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point t2 = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line">    <span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt; time_used = <span class="built_in">std</span>::chrono::duration_cast&lt;<span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt;&gt;(t2-t1);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;遍历图像用时&quot;</span>&lt;&lt;time_used.count()&lt;&lt;<span class="string">&quot;s&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*4. 深浅拷贝*/</span></span><br><span class="line">    <span class="comment">//浅拷贝，指向同一个图像</span></span><br><span class="line">    cv::Mat image_another = image;</span><br><span class="line">    <span class="comment">//将左上角100*100的块置零</span></span><br><span class="line">    image_another(cv::Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)).setTo(<span class="number">0</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line">    cv::Mat image_clone = image.clone();</span><br><span class="line">    image_clone(cv::Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)).setTo(<span class="number">255</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;image&quot;</span>,image);</span><br><span class="line">    cv::imshow(<span class="string">&quot;image_clone&quot;</span>,image_clone);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeList-txt"><a href="#CMakeList-txt" class="headerlink" title="CMakeList.txt"></a>CMakeList.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(ShenLanSLAM_4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(ShenLanSLAM_4 main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(ShenLanSLAM_4 <span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-HW1 简答</title>
    <url>/2021/04/10/SLAM-HW1-%E7%AE%80%E7%AD%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-HW1-简答"><a href="#SLAM-HW1-简答" class="headerlink" title="SLAM-HW1 简答"></a>SLAM-HW1 简答</h1><ol>
<li><p>如何在 Ubuntu 中安装软件(命令行界面)?它们通常被安装在什么地方?</p>
<p>sudo apt-get install xxx</p>
<p>sudo dpkg -i package_file.deb</p>
<p>apt-get：apt-get 下载后，软件所在路径是/var/cache/apt/archives；ubuntu 默认的PATH为</p>
<p>PATH=/home/brightman/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</p>
<p>apt-get install安装目录是包的维护者确定的，不是用户</p>
<p>dpkg：系统安装软件一般在/usr/share，可执行的文件在/usr/bin，配置文件可能安装到了/etc下等；文档一般在 /usr/share</p>
<p>可执行文件 /usr/bin；配置文件 /etc；lib文件 /usr/lib</p>
</li>
<li><p>linux 的环境变量是什么?我如何定义新的环境变量?</p>
<p>export xxx=</p>
</li>
<li><p>linux 根目录下面的目录结构是什么样的?至少说出 3 个目录的用途。</p>
<p>Linux 和 Unix 文件系统被组织成一个有层次的树形结构。文件系统的最上层是 /，或称为 根目录。在 Unix 和 Linux 的设计理念中，一切皆为文件——包括硬盘、分区和可插拔介质。这就意味着所有其它文件和目录（包括其它硬盘和分区）都位于根目录中。 例如：/home/jebediah/cheeses.odt 给出了正确的完整路径，它指向 cheeses.odt 文件，而该文件位于 jebediah 目录下，该目录又位于 home 目录，最后，home 目录又位于根(/) 目录下。 在根 (/) 目录下，有一组重要的系统目录，在大部分 Linux 发行版里都通用。直接位于根 (/) 目录下的常见目录列表如下：</p>
<ul>
<li>/bin - 重要的二进制 (binary) 应用程序</li>
<li>/boot - 启动 (boot) 配置文件</li>
<li>/dev - 设备 (device) 文件</li>
<li>/etc - 配置文件、启动脚本等 (etc)</li>
<li>/home - 本地用户主 (home) 目录</li>
<li>/lib - 系统库 (libraries) 文件</li>
<li>/lost+found - 在根 (/) 目录下提供一个遗失+查找(lost+found) 系统</li>
<li>/media - 挂载可移动介质 (media)，诸如 CD、数码相机等</li>
<li>/mnt - 挂载 (mounted) 文件系统</li>
<li>/opt - 提供一个供可选的 (optional) 应用程序安装目录</li>
<li>/proc - 特殊的动态目录，用以维护系统信息和状态，包括当前运行中进程 (processes) 信息。</li>
<li>/root - root (root) 用户主文件夹，读作“slash-root”</li>
<li>/sbin - 重要的系统二进制 (system binaries) 文件</li>
<li>/sys - 系统 (system) 文件</li>
<li>/tmp - 临时(temporary)文件</li>
<li>/usr - 包含绝大部分所有用户(users)都能访问的应用程序和文件</li>
<li>/var - 经常变化的(variable)文件，诸如日志或数据库等</li>
</ul>
</li>
<li><p>假设我要给 a.sh 加上可执行权限,该输入什么命令?</p>
<p>chmod x.sh</p>
</li>
<li><p>假设我要将 a.sh 文件的所有者改成 xiang:xiang,该输入什么命令?</p>
<p>sudo chown -c xiang:xiang a.sh</p>
</li>
<li><p>SLAM 会在哪些场合中用到?至少列举三个方向。</p>
<p>AR，自动驾驶，导航</p>
</li>
<li><p>SLAM 中定位与建图是什么关系?为什么在定位的同时需要建图?</p>
<p>相互依赖</p>
<p>要在环境中精准的定位，需要精确地地图；精确的地图过程中，需要精准的定位</p>
</li>
<li><p>SLAM 发展历史如何?我们可以将它划分成哪几个阶段?</p>
<p>1986-2004，classical age</p>
<p>2004-2015，algorithmic-analysis age</p>
<p>2015-now;</p>
</li>
</ol>
<ol>
<li>列举三篇在 SLAM 领域的经典文献。</li>
</ol>
]]></content>
      <categories>
        <category>SLAM-HomeWork</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-HW3 简答</title>
    <url>/2021/04/10/SLAM-HW3-%E7%AE%80%E7%AD%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-HW3-简答"><a href="#SLAM-HW3-简答" class="headerlink" title="SLAM-HW3 简答"></a>SLAM-HW3 简答</h1><h2 id="2-群的性质"><a href="#2-群的性质" class="headerlink" title="2.群的性质"></a>2.群的性质</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><ul>
<li><p>封闭性验证：</p>
<p>$\forall a_1,a_2 \in Z,a_1+a_2 \in Z$</p>
</li>
<li><p>结合律验证</p>
<p>$\forall a_1,a_2,a_3\in Z,(a_1+a_2)+a_3 = a_1+(a_2+a_3)$</p>
</li>
<li><p>幺元验证</p>
<p>$a_0=0, a_0 \in Z,s.t. \forall a \in Z,0+a = a+0 = a$</p>
</li>
<li><p>逆元验证</p>
<p>$\forall a \in Z,a^{-1} = -a \in Z,s.t. a+(-a) = 0$</p>
</li>
</ul>
<p>综上，{$Z,+$}是群。</p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><ul>
<li><p>封闭性验证</p>
<p>$\forall a_1,a_2 \in N,a_1+a_2 \in Z$</p>
</li>
<li><p>结合律验证</p>
<p>$\forall a_1,a_2,a_3\in Z,(a_1+a_2)+a_3 = a_1+(a_2+a_3)$</p>
</li>
<li><p>幺元验证</p>
<p>$\not\exist a_0 \in N,s.t. \forall a \in N,a_0+a = a+a_0 = a$</p>
</li>
</ul>
<p>综上，{$N,+$}不是群。</p>
<h2 id="3-验证向量叉乘的李代数性质"><a href="#3-验证向量叉乘的李代数性质" class="headerlink" title="3.验证向量叉乘的李代数性质"></a>3.验证向量叉乘的李代数性质</h2><p>$V = R^3,F=R,[a,b]=a\times b,验证g = (R^3,R,\times)构成李代数$</p>
<ul>
<li><p>封闭性验证</p>
<p>$\forall X,Y \in R^3,[X,Y] = X \times Y \in R^3$</p>
</li>
<li><p>双线性验证</p>
<p>$\forall X,Y,Z \in V,a,b \in R$：</p>
<p>$[aX+bY,Z] = (aX+bY)\times Z=aX \times Z + bY\times Z=a[X,Z]+b[Y,Z]$</p>
<p>$[Z,aX+bY] =Z\times(aX +bY)=Z\times aX+Z \times bY = a[Z,X]+b[Z,Y]$</p>
</li>
<li><p>自反性验证</p>
<p>$\forall X \in R^3,[X,X]=X \times X = 0$</p>
</li>
<li><p>雅克比等价验证</p>
<p>$\forall X,Y,Z \in R^3$，</p>
<script type="math/tex; mode=display">[X,[Y,Z]]+[Y,[Z,X]]+[Z,[X,Y]] = [X,Y \times Z]+[Y,Z \times X]+[Z,X \times Y]=0</script></li>
</ul>
]]></content>
      <categories>
        <category>SLAM-HomeWork</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-HW3 code:读取轨迹画图</title>
    <url>/2021/04/10/SLAM-HW3-code-%E8%AF%BB%E5%8F%96%E8%BD%A8%E8%BF%B9%E7%94%BB%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-HW3-code-读取轨迹画图"><a href="#SLAM-HW3-code-读取轨迹画图" class="headerlink" title="SLAM-HW3 code:读取轨迹画图"></a>SLAM-HW3 code:读取轨迹画图</h1><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pangolin/pangolin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sophus/se3.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trajectory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> t;</span><br><span class="line">    <span class="keyword">float</span> tx;</span><br><span class="line">    <span class="keyword">float</span> ty;</span><br><span class="line">    <span class="keyword">float</span> tz;</span><br><span class="line">    <span class="keyword">float</span> qx;</span><br><span class="line">    <span class="keyword">float</span> qy;</span><br><span class="line">    <span class="keyword">float</span> qz;</span><br><span class="line">    <span class="keyword">float</span> qw;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; tokens,<span class="built_in">std</span>::<span class="built_in">string</span> delim)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountLines</span><span class="params">(<span class="keyword">char</span> *filename)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawTrajectory</span><span class="params">(<span class="built_in">vector</span>&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;, aligned_allocator&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;&gt;&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream ifs ;</span><br><span class="line">    <span class="built_in">string</span> fileName = <span class="string">&quot;trajectory.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//计算txt的行数</span></span><br><span class="line">    <span class="keyword">int</span> lines = CountLines(<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(fileName.c_str()));</span><br><span class="line">    trajectory traPoints[lines];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line">    ifs.open(fileName,ios_base::in);</span><br><span class="line">    <span class="keyword">if</span>(ifs.fail())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;文件打开失败&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">while</span> (!ifs.eof())</span><br><span class="line">        &#123;</span><br><span class="line">            ifs.getline(buffer,<span class="number">256</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="built_in">string</span> str = buffer;</span><br><span class="line">            split(str,strs,<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">float</span> lineNum[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                lineNum[i] = stof(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            traPoints[index].t = lineNum[<span class="number">0</span>];</span><br><span class="line">            traPoints[index].tx = lineNum[<span class="number">1</span>];</span><br><span class="line">            traPoints[index].ty = lineNum[<span class="number">2</span>];</span><br><span class="line">            traPoints[index].tz = lineNum[<span class="number">3</span>];</span><br><span class="line">            traPoints[index].qx = lineNum[<span class="number">4</span>];</span><br><span class="line">            traPoints[index].qy = lineNum[<span class="number">5</span>];</span><br><span class="line">            traPoints[index].qz = lineNum[<span class="number">6</span>];</span><br><span class="line">            traPoints[index].qw = lineNum[<span class="number">7</span>];</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;traPoints.tx:&quot;</span>&lt;&lt; traPoints[index].tx&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*画图*/</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;, Eigen::aligned_allocator&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;&gt;&gt; poses;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">Quaterniond <span class="title">q</span><span class="params">(traPoints[i].qx,traPoints[i].qy,traPoints[i].qz,traPoints[i].qw)</span></span>;</span><br><span class="line">            <span class="function">Vector3d <span class="title">t</span><span class="params">(traPoints[i].tx,traPoints[i].ty,traPoints[i].tz)</span></span>;</span><br><span class="line">            <span class="function">Sophus::SE3d <span class="title">SE3_Rt</span><span class="params">(q,t)</span></span>;</span><br><span class="line">            poses.push_back(SE3_Rt);</span><br><span class="line">        &#125;</span><br><span class="line">        DrawTrajectory(poses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 得到读入文件的行数</span></span><br><span class="line"><span class="comment">/// \param filename</span></span><br><span class="line"><span class="comment">/// \return</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountLines</span><span class="params">(<span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream ReadFile;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> tmp;</span><br><span class="line">    ReadFile.open(filename,ios::in);<span class="comment">//ios::in 表示以只读的方式读取文件</span></span><br><span class="line">    <span class="keyword">if</span>(ReadFile.fail())<span class="comment">//文件打开失败:返回0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;读取文件行数中，文件打开失败&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//文件存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(getline(ReadFile,tmp,<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        ReadFile.close();</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 字符串分割函数</span></span><br><span class="line"><span class="comment">/// \param str 要分割的字符串</span></span><br><span class="line"><span class="comment">/// \param tokens 保存分割结果的字符串数组</span></span><br><span class="line"><span class="comment">/// \param delim 分隔字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; tokens,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> delim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tokens.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* buffer = <span class="keyword">new</span> <span class="keyword">char</span>[str.size() + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">strcpy</span>(buffer, str.c_str());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* tmp;</span><br><span class="line">    <span class="keyword">char</span>* p = strtok_r(buffer, delim.c_str(), &amp;tmp); <span class="comment">// 第一次分割</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        tokens.push_back(p); <span class="comment">// 如果 p 为 nullptr，则将整个字符串作为结果</span></span><br><span class="line">    &#125; <span class="keyword">while</span> ((p = strtok_r(<span class="literal">nullptr</span>, delim.c_str(), &amp;tmp)) != <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">// strtok_r 为 strtok 的线程安全版本。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 画图</span></span><br><span class="line"><span class="comment">/// \param poses</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawTrajectory</span><span class="params">(<span class="built_in">vector</span>&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;, Eigen::aligned_allocator&lt;Sophus::SE3&lt;<span class="keyword">double</span>&gt;&gt;&gt; poses)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (poses.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;轨迹为空!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create pangolin window and plot the trajectory</span></span><br><span class="line">    pangolin::CreateWindowAndBind(<span class="string">&quot;Trajectory Viewer&quot;</span>, <span class="number">1024</span>, <span class="number">768</span>);</span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">    glEnable(GL_BLEND);</span><br><span class="line">    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</span><br><span class="line"></span><br><span class="line">    <span class="function">pangolin::OpenGlRenderState <span class="title">s_cam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            pangolin::ProjectionMatrix(<span class="number">1024</span>, <span class="number">768</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">512</span>, <span class="number">389</span>, <span class="number">0.1</span>, <span class="number">1000</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">            pangolin::ModelViewLookAt(<span class="number">0</span>, <span class="number">-0.1</span>, <span class="number">-1.8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line">    pangolin::View &amp;d_cam = pangolin::CreateDisplay()</span><br><span class="line">            .SetBounds(<span class="number">0.0</span>, <span class="number">1.0</span>, pangolin::Attach::Pix(<span class="number">175</span>), <span class="number">1.0</span>, <span class="number">-1024.0f</span> / <span class="number">768.0f</span>)</span><br><span class="line">            .SetHandler(<span class="keyword">new</span> pangolin::Handler3D(s_cam));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!pangolin::ShouldQuit())</span><br><span class="line">    &#123;</span><br><span class="line">        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        d_cam.Activate(s_cam);</span><br><span class="line">        glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">        glLineWidth(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; poses.size() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            glColor3f(<span class="number">1</span> - (<span class="keyword">float</span>) i / poses.size(), <span class="number">0.0f</span>, (<span class="keyword">float</span>) i / poses.size());</span><br><span class="line">            glBegin(GL_LINES);</span><br><span class="line">            <span class="keyword">auto</span> p1 = poses[i], p2 = poses[i + <span class="number">1</span>];</span><br><span class="line">            glVertex3d(p1.translation()[<span class="number">0</span>], p1.translation()[<span class="number">1</span>], p1.translation()[<span class="number">2</span>]);</span><br><span class="line">            glVertex3d(p2.translation()[<span class="number">0</span>], p2.translation()[<span class="number">1</span>], p2.translation()[<span class="number">2</span>]);</span><br><span class="line">            glEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        pangolin::FinishFrame();</span><br><span class="line">        usleep(<span class="number">5000</span>);   <span class="comment">// sleep 5 ms</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(ShenLanSLAM_3)</span><br><span class="line"><span class="comment">#set(CMAKE_CXX_STANDARD 14)</span></span><br><span class="line"><span class="keyword">find_package</span>(Sophus REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Pangolin REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        /usr/local/<span class="keyword">include</span>/eigen3</span><br><span class="line">        <span class="variable">$&#123;Pangolin_INCLUDE_DIRS&#125;</span></span><br><span class="line">        <span class="variable">$&#123;Sophus_INCLUDE_DIRS&#125;</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">add_executable</span>(ShenLanSLAM3 main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(ShenLanSLAM3</span><br><span class="line">        <span class="variable">$&#123;Sophus_LIBRARIES&#125;</span></span><br><span class="line">        <span class="variable">$&#123;Pangolin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/image-20210410085530351.png" alt="image-20210410085530351"></p>
]]></content>
      <categories>
        <category>SLAM-HomeWork</category>
      </categories>
      <tags>
        <tag>SLAM-HW</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖NAS部署AWTRIX2</title>
    <url>/2021/04/05/%E7%BE%A4%E6%99%96NAS%E9%83%A8%E7%BD%B2AWTRIX2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="群晖NAS部署AWTRIX2记录"><a href="#群晖NAS部署AWTRIX2记录" class="headerlink" title="群晖NAS部署AWTRIX2记录"></a>群晖NAS部署AWTRIX2记录</h1><blockquote>
<p>参考资料：</p>
<p><a href="https://www.ioiox.com/archives/76.html/comment-page-2">https://www.ioiox.com/archives/76.html/comment-page-2</a></p>
<p><a href="https://www.youtube.com/playlist?list=PL_qtbZN0T8POao-hO-b5ja_jh8mRY7nHE">https://www.youtube.com/playlist?list=PL_qtbZN0T8POao-hO-b5ja_jh8mRY7nHE</a></p>
</blockquote>
<h2 id="群晖-docker-部署"><a href="#群晖-docker-部署" class="headerlink" title="群晖 docker 部署"></a>群晖 docker 部署</h2><h3 id="创建配置文件夹"><a href="#创建配置文件夹" class="headerlink" title="创建配置文件夹"></a>创建配置文件夹</h3><p>群晖 NAS 中新建<code>awtrix2</code>用于存放配置文件,本文以<code>/docker/awtrix2</code>为例。</p>
<p>通过挂载该目录,可以使你所有的配置文件,插件等数据都安全的存放在群晖 NAS 本机,后期无论是迁移,升级容器,再次运行 docker 服务都可以直接读取配置,不需要重新再次配置。<br><a href="https://static.ioiox.com/usr/uploads/2020/06/657707119.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/657707119.jpg" alt="img"></a></p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p><strong>docker - 注册表</strong><br>搜索<code>awtrix2</code>找到<code>whyet/awtrix2</code>下载<code>latest</code>最新版.<br><a href="https://static.ioiox.com/usr/uploads/2020/06/3367138513.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/3367138513.jpg" alt="img"></a></p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p><strong>映像 - 选择下载好的<code>whyet/awtrix2</code> - 启动</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/2500600041.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/2500600041.jpg" alt="img"></a><br><strong>高级设置</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/1941751929.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/1941751929.jpg" alt="img"></a><br><strong>卷</strong><br>添加文件夹,文件夹选择刚才创建的<code>awtrix2</code>,装载路径只能填写<code>/data</code>,<strong>请不要更改!!!</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/2649693401.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/2649693401.jpg" alt="img"></a></p>
<p><strong>以上目录装载表示:</strong>容器启动时直接使用群晖 NAS 的<code>/docker/awtrix2</code>内的配置文件,替换容器内的<code>/data</code>的文件夹,在使用过程中所有的配置都会保存在本地群晖 NAS 的<code>/docker/awtrix2</code>中,即使容器损坏,容器被删除,都不会丢失配置文件,下次迁移或者重新创建容器,依旧可以直接装载该目录来恢复配置.</p>
<p><strong>网络</strong><br>勾选<code>使用与 Docker Host 相同的网络</code><br><a href="https://static.ioiox.com/usr/uploads/2020/06/415684945.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/415684945.jpg" alt="img"></a></p>
<p><strong>应用完成配置</strong><br><a href="https://static.ioiox.com/usr/uploads/2020/06/2399904913.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/2399904913.jpg" alt="img"></a></p>
<h3 id="Web-访问"><a href="#Web-访问" class="headerlink" title="Web 访问"></a>Web 访问</h3><p>输入群晖内网 IP 加端口号即可访问<code>http://群晖内网IP:7000</code><br><a href="https://static.ioiox.com/usr/uploads/2020/06/1008782268.jpg"><img src="https://static.ioiox.com/usr/uploads/2020/06/1008782268.jpg" alt="img"></a></p>
<h2 id="问题集合"><a href="#问题集合" class="headerlink" title="问题集合"></a>问题集合</h2><ol>
<li><p>时间问题</p>
<p><img src="http://i.imgur.com/8NoQNhl.png" alt="img"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>AWTRIX2</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Sophus</title>
    <url>/2021/03/10/SLAM-Sophus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Sophus"><a href="#SLAM-Sophus" class="headerlink" title="SLAM-Sophus"></a>SLAM-Sophus</h1><h2 id="useSophus-cpp"><a href="#useSophus-cpp" class="headerlink" title="useSophus.cpp"></a>useSophus.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sophus/se3.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本程序演示Sophus的基本用法</span></span><br><span class="line"><span class="comment"> * @param argc</span></span><br><span class="line"><span class="comment"> * @param argv</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 1.定义沿Z轴转90度的SO3d*/</span></span><br><span class="line">    Matrix3d R = AngleAxisd(M_PI/<span class="number">2</span>,Vector3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)).toRotationMatrix();</span><br><span class="line">    <span class="function">Quaterniond <span class="title">q</span><span class="params">(R)</span></span>;</span><br><span class="line">    <span class="comment">//SO3d 可直接从旋转矩阵构造，也可以通过四元数构造，两者等价</span></span><br><span class="line">    <span class="function">Sophus::SO3d  <span class="title">SO3_R</span><span class="params">(R)</span></span>;</span><br><span class="line">    <span class="function">Sophus::SO3d <span class="title">SO3_q</span><span class="params">(q)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SO(3) from matrix:\n&quot;</span>&lt;&lt;SO3_R.matrix() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SO(3) from quaternion:\n&quot;</span>&lt;&lt;SO3_q.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;They are equal&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用对数映射获取李代数</span></span><br><span class="line">    Vector3d so3 = SO3_R.<span class="built_in">log</span>();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;so3 = &quot;</span>&lt;&lt;so3.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//hat为向量到反对称矩阵</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;so3 hat =\n&quot;</span>&lt;&lt;Sophus::SO3d::hat(so3)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//vee为反对城矩阵到向量</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;so3 hat vee = \n&quot;</span>&lt;&lt;Sophus::SO3d::vee(Sophus::SO3d::hat(so3)).transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.增量扰动模型的更新*/</span></span><br><span class="line">    <span class="comment">//假设更新量</span></span><br><span class="line">    <span class="function">Vector3d <span class="title">update_so3</span><span class="params">(<span class="number">1e-4</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    Sophus::SO3d SO3_updated = Sophus::SO3d::<span class="built_in">exp</span>(update_so3)*SO3_R;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SO3 updated = \n&quot;</span>&lt;&lt;SO3_updated.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;*************************&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//对SE(3)操作大同小异</span></span><br><span class="line">    <span class="comment">//沿x轴平移1</span></span><br><span class="line">    <span class="function">Vector3d <span class="title">t</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//从R,t构造SE3</span></span><br><span class="line">    <span class="function">Sophus::SE3d <span class="title">SE3_Rt</span><span class="params">(R,t)</span></span>;</span><br><span class="line">    <span class="comment">//从q,t构造SE3</span></span><br><span class="line">    <span class="function">Sophus::SE3d <span class="title">SE3_qt</span><span class="params">(q,t)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SE3 from R,t = \n&quot;</span>&lt;&lt;SE3_Rt.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SE3 from q,t = \n&quot;</span>&lt;&lt;SE3_qt.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//李代数se(3)是一个6维向量，方便起见线typedef一下</span></span><br><span class="line">    <span class="keyword">typedef</span> Eigen::Matrix&lt;<span class="keyword">double</span>,<span class="number">6</span>,<span class="number">1</span>&gt; Vector6d;</span><br><span class="line">    Vector6d se3 = SE3_Rt.<span class="built_in">log</span>();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;se3 = &quot;</span>&lt;&lt;se3.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//观察输出，会发现在Sophus中，se(3)的平移在前，旋转在后</span></span><br><span class="line">    <span class="comment">//同样地，有hat和vee两个算符</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;se3 hat = \n&quot;</span>&lt;&lt;Sophus::SE3d::hat(se3) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;se3 hat vee = &quot;</span>&lt;&lt;Sophus::SE3d::vee(Sophus::SE3d::hat(se3)).transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后演示更新</span></span><br><span class="line">    <span class="comment">//更新量</span></span><br><span class="line">    Vector6d update_se3;</span><br><span class="line">    update_se3.setZero();</span><br><span class="line">    update_se3(<span class="number">0</span>,<span class="number">0</span>) = <span class="number">1e-4</span>d;</span><br><span class="line">    Sophus::SE3d SE3_updated = Sophus::SE3d::<span class="built_in">exp</span>(update_se3)*SE3_Rt;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SE3 updated = &quot;</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;SE3_updated.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(Sophus)</span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Sophus REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        /usr/local/<span class="keyword">include</span>/eigen3</span><br><span class="line">        Sophus_INCLUDE_DIRS</span><br><span class="line">)</span><br><span class="line"><span class="keyword">add_executable</span>(sophus useSophus.cpp)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
  </entry>
  <entry>
    <title>Terraria服务器搭建记录</title>
    <url>/2021/03/10/Terraria%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Terraria-服务器搭建记录"><a href="#Terraria-服务器搭建记录" class="headerlink" title="Terraria 服务器搭建记录"></a>Terraria 服务器搭建记录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上搜索了一些教程，发现大多数都是使用云主机搭建的，如ECS，VPS等，大多数从阿里云腾讯云购买，奈何钱包空空，价格太贵了，所以自己使用了物理机+端口映射+DDNS+动态公网IP的方法，价格低很多；</p>
<blockquote>
<p>物理机：退休的老笔记本电脑</p>
<p>公网IP：免费，向移动/联通/电信服务商要</p>
<p>端口 映射与DDNS：免费</p>
<p>域名：可以购买免费域名，博主购买的是一年8元的域名</p>
<p>合计投入：8RMB/YEAR</p>
</blockquote>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="1-网络架构"><a href="#1-网络架构" class="headerlink" title="1. 网络架构"></a>1. 网络架构</h3><p>整个网络必须是一层NAT的架构，即WAN -&gt; LAN只经过1次；博主设置的架构如下：</p>
<p> <img src="https://gitee.com/JunLuJun/up/raw/master/20210310144025.png" alt=""></p>
<p>软路由采用R2S，最便宜的软路由，在软路由中拨号上网；硬路由要求具备AP模式类似的功能，手头的路由器并不具备，但是只要在后台把DHCP关闭，网线插入LAN口也能达到相同的效果；光猫必须处于调制模式；</p>
<h3 id="2-申请公网IP"><a href="#2-申请公网IP" class="headerlink" title="2. 申请公网IP"></a>2. 申请公网IP</h3><p>这一部博主没有试验过，网上提供的做法是向运营商打电话，申请公网IP，理由可以称要在公司看家里的监控等等；如果没给申请，就可以投诉，最终都会给；当然者是网上提供的做法；博主在学校的宿舍里布置的服务器，学校的联通会提供公网IP，根本不用申请。</p>
<p>当然还有一点需要说明的是，申请的公网IP是动态的，以博主的为例，每次重新拨号，IP都会改变，但是依旧是公网IP；所以为了在进入服务器时能够保持一个固定的连接入口，就需要一个域名指向这个公网IP，并设置DDNS，作用是每隔固定时间，域名会始终指向动态的公网IP，我们只需要记住这个域名即可。</p>
<h3 id="3-购买域名"><a href="#3-购买域名" class="headerlink" title="3. 购买域名"></a>3. 购买域名</h3><p>域名可以从很多网站购买，如CloudFare，阿里云，腾讯云等，博主从阿里云购买的域名，并在其控制台内，将域名解析；</p>
<h3 id="4-设置域名解析与DDNS"><a href="#4-设置域名解析与DDNS" class="headerlink" title="4. 设置域名解析与DDNS"></a>4. 设置域名解析与DDNS</h3><p>这一步需要在软路由中设置，一般软路由中都会有DDNS这一个服务项，选择阿里云的类型，根据提示填写信息即可。</p>
<h3 id="5-设置端口转发"><a href="#5-设置端口转发" class="headerlink" title="5. 设置端口转发"></a>5. 设置端口转发</h3><p>做完以上步骤，还需要做端口转发，以便访问域名+端口时，能够进入Terraria的服务器；在软路由中填写对应的端口转发端口号，Terraria一般默认7777端口，外部端口随意填写即可。</p>
<h3 id="6-配置Terraria-server"><a href="#6-配置Terraria-server" class="headerlink" title="6. 配置Terraria server"></a>6. 配置Terraria server</h3><p>配置服务器共有两种方式，一种是采用官方的服务器文件，但是并没有很多人性化的功能，但是提供了Mac，Windows，Linux上的安装方式；另外一种是TShock，在GitHub上开源，有很多功能，查看官方文档安装即可。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>TShock指令详解</title>
    <url>/2021/03/09/TShock%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TShock指令详解"><a href="#TShock指令详解" class="headerlink" title="TShock指令详解"></a>TShock指令详解</h1><p>Tshock是一款terraria服务器出色的插件，其在原版服务器的基础上添加了一系列简单易上手且实用的指令，极大地丰富了服务器的可玩性。</p>
<h2 id="config-json配置文件详解"><a href="#config-json配置文件详解" class="headerlink" title="config.json配置文件详解"></a>config.json配置文件详解</h2><p>config配置文件位于Tshock文件夹下，使用记事本方式打开此文件，修改config可以达到丰富服务器人性化的特点。<br>以下是config配置↓↓↓【请修改冒号后面的数值】</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;InvasionMultiplier&quot;: 1，//入侵规模，计算公式：入侵怪物数量=100+（X*HP＞200的玩家）</span><br><span class="line">&quot;DefaultMaximumSpawns&quot;: 5，//怪物刷新最大数值（设置越高怪物越多）</span><br><span class="line">&quot;DefaultSpawnRate&quot;: 600，//刷新怪物时间间隔，数值越大刷新越慢</span><br><span class="line">&quot;ServerPort&quot;: 7777，//服务器端口【默认】</span><br><span class="line">&quot;EnableWhitelist&quot;: false，//是否开启白名单【true代表是，false代表否，以下都是】</span><br><span class="line">&quot;InfiniteInvasion&quot;: false，//是否无限制怪物入侵【开启后使用命令召唤的怪物入侵将达到200万只左右】</span><br><span class="line">&quot;PvPMode&quot;: &quot;normal&quot;，//PVP模式【normal表示可以正常使用PVP，always表示强制PVP，disabled表示强制PVE】</span><br><span class="line">&quot;SpawnProtection&quot;: false，//是否保护出生点【强烈建议设置】</span><br><span class="line">&quot;SpawnProtectionRadius&quot;: 10，//出生点保护范围【一格一个】</span><br><span class="line">&quot;MaxSlots&quot;: 6，//服务器人数上限</span><br><span class="line">&quot;RangeChecks&quot;: true，//不明</span><br><span class="line">&quot;DisableBuild&quot;: false，//是否禁止建筑【开启后将无法破坏地图里任何东西】</span><br><span class="line">&quot;SuperAdminChatRGB&quot;: [</span><br><span class="line">255.0，</span><br><span class="line">0.0，</span><br><span class="line"><span class="number">0.0</span></span><br><span class="line">]，//GameMaster发言颜色【设置与人物初始设置颜色数值相同】 &quot;SuperAdminChatPrefix&quot;: &quot;[GM]&quot;，//GameMaster发言前缀（位于名字之前）</span><br><span class="line">&quot;SuperAdminChatSuffix&quot;: &quot;~~&quot;，//GameMaster发言后缀（位于名字之后）</span><br><span class="line">&quot;BackupInterval&quot;: 0，//地图备份时间间隔/分钟</span><br><span class="line">&quot;BackupKeepFor&quot;: 60，//备份的地图保留时间</span><br><span class="line">&quot;RememberLeavePos&quot;: false，//记录离开位置，再次登录服务器将传送到上一次离开服务器的位置</span><br><span class="line">&quot;HardcoreOnly&quot;: false，//仅允许困难模式的玩家进入服务器</span><br><span class="line">&quot;MediumcoreOnly&quot;: false，//仅允许中等模式的玩家进入服务器</span><br><span class="line">&quot;KickOnMediumcoreDeath&quot;: false，//移除（kick）死亡的中等难度的玩家</span><br><span class="line">&quot;BanOnMediumcoreDeath&quot;: false，//封禁（ban）死亡的中等难度的玩家</span><br><span class="line">&quot;AutoSave&quot;: true，//是否自动保存地图，强烈建议开启</span><br><span class="line">&quot;AnnounceSave&quot;: true，//自动保存的时候是否进行提示</span><br><span class="line">&quot;MaximumLoginAttempts&quot;: 3，//登录次数尝试最大限制，尝试次数过多将被移除（kick）服务器</span><br><span class="line">&quot;RconPassword&quot;: &quot;&quot;，//没用就对了，建议不要改动</span><br><span class="line">&quot;RconPort&quot;: 7777，//同上</span><br><span class="line">&quot;ServerName&quot;: &quot;Terraria Small Team&quot;，//服务器名称</span><br><span class="line">&quot;UseServerName&quot;: true，//是否使用服务器名称</span><br><span class="line">&quot;MasterServer&quot;: &quot;127.0.0.1&quot;，//本机IP连接地址，改动后自己可能进不去服务器</span><br><span class="line">&quot;StorageType&quot;: &quot;sqlite&quot;，//数据库类型，建议不要改动</span><br><span class="line">&quot;MySqlHost&quot;: &quot;localhost:3306&quot;，//下面的都没用，建议不要改动</span><br><span class="line">&quot;MySqlDbName&quot;: &quot;&quot;，</span><br><span class="line">&quot;MySqlUsername&quot;: &quot;&quot;，</span><br><span class="line">&quot;MySqlPassword&quot;: &quot;&quot;， &quot;MediumcoreBanReason&quot;: &quot;Death results in a ban&quot;，//中等难度的玩家被封禁（ban）时的理由</span><br><span class="line">&quot;MediumcoreKickReason&quot;: &quot;Death results in a kick&quot;，//中等难度的玩家被移除（kick）时的理由</span><br><span class="line">&quot;EnableDNSHostResolution&quot;: false，//不明，大概和网络有关</span><br><span class="line">&quot;EnableIPBans&quot;: true，//是否可以封禁（ban）ip地址</span><br><span class="line">&quot;EnableUUIDBans&quot;: true，//是否开启封禁（ban）UUID</span><br><span class="line">&quot;EnableBanOnUsernames&quot;: false，//是否可以封禁（ban）用户名</span><br><span class="line">&quot;DefaultRegistrationGroupName&quot;: &quot;default&quot;，//注册用户的默认用户组【如不了解组的规划请暂时不要改动】</span><br><span class="line">&quot;DefaultGuestGroupName&quot;: &quot;guest&quot;，//未注册用户的默认用户组</span><br><span class="line">&quot;DisableSpewLogs&quot;: true，//禁止将服务器日志展示给玩家</span><br><span class="line">&quot;HashAlgorithm&quot;: &quot;sha512&quot;，//不明</span><br><span class="line">&quot;BufferPackets&quot;: true，//不明，大概和buff有关</span><br><span class="line">&quot;ServerFullReason&quot;: &quot;Sorry，you can`t into the server，because the Server is full&quot;，//因服务器人满而被拒绝进入服务器的提示</span><br><span class="line">&quot;WhitelistKickReason&quot;: &quot;You are not on the whitelist.&quot;，//因不在白名单而被拒绝进入服务器的提示</span><br><span class="line">&quot;ServerFullNoReservedReason&quot;: &quot;Server is full. No reserved slots open.&quot;，//因服务器人满并预留给管理员的位置也满的情况下被拒绝进入服务器的提示</span><br><span class="line">&quot;SaveWorldOnCrash&quot;: true，//服务器崩溃时是否及时保存地图</span><br><span class="line">&quot;EnableGeoIP&quot;: false，//显示玩家IP的所在地【有可能侵犯他人隐私，建议不要开启】</span><br><span class="line">&quot;EnableTokenEndpointAuthentication&quot;: false，//不明QAQ</span><br><span class="line">&quot;RestApiEnabled&quot;: false，//上同下</span><br><span class="line">&quot;RestApiPort&quot;: 7878，//呵呵</span><br><span class="line">&quot;DisableTombstones&quot;: true，//是否移除墓碑</span><br><span class="line">&quot;DisplayIPToAdmins&quot;: false，//是否将玩家的IP地址展示给管理员</span><br><span class="line">&quot;KickProxyUsers&quot;: true，//移除（kick）使用外挂的玩家</span><br><span class="line">&quot;DisableHardmode&quot;: false，//禁止让世界进入困难模式（即肉山后）</span><br><span class="line">&quot;DisableDungeonGuardian&quot;: false，//禁止攻打地牢守护者，与old man对话将会被立即传送到出生点</span><br><span class="line">&quot;ServerSideCharacter&quot;: false，//是否强制开荒模式（慎用）！开启后人物存档将保留在服务器但不影响单人游戏的存档。</span><br><span class="line">&quot;ServerSideCharacterSave&quot;: 5，//服务器人物存档保存时间间隔/分钟</span><br><span class="line">&quot;LogonDiscardThreshold&quot;: 250，//开启强制开荒后，检测到玩家背包里有违规物品时将提示</span><br><span class="line">&quot;DisableClownBombs&quot;: false，//禁止小丑往出生点扔炸弹【大概】</span><br><span class="line">&quot;DisableSnowBalls&quot;: false，//禁止使用雪球 &quot;ChatFormat&quot;: &quot;&#123;1&#125;&#123;2&#125;&#123;3&#125;: &#123;4&#125;&quot;，//聊天格式【&#123;1&#125;为前缀，&#123;2&#125;为玩家名称，&#123;3&#125;为后缀，&#123;4&#125;为聊天内容】</span><br><span class="line">&quot;ChatAboveHeadsFormat&quot;: &quot;&#123;2&#125;&quot;，//在玩家头顶显示的内容【参考上一条】</span><br><span class="line">&quot;ForceTime&quot;: &quot;normal&quot;，//THE WORLD！【normal表示昼夜正常交替，day表示出现极昼现象，night表示出现极夜现象】</span><br><span class="line">&quot;TileKillThreshold&quot;: 60，//一秒挖掘，破坏物块的上限，否则将被冻结【可以用来检测外挂，下同】</span><br><span class="line">&quot;TilePlaceThreshold&quot;: 20，//一秒摆放物块的上限</span><br><span class="line">&quot;TileLiquidThreshold&quot;: 2，//一秒释放液体的上限</span><br><span class="line">&quot;ProjectileThreshold&quot;: 50，//一秒使用弹药数量的上限【包括魔法攻击】</span><br><span class="line">&quot;ProjIgnoreShrapnel&quot;: true，//计算弹药使用上限是否忽略爆炸产生的碎片</span><br><span class="line">&quot;RequireLogin&quot;: false，//是否开启强制注册登录</span><br><span class="line">&quot;DisableInvisPvP&quot;: false，//PVP状态下是否使隐身药水失效</span><br><span class="line">&quot;MaxRangeForDisabled&quot;: 10，//被冻结后最大移动距离</span><br><span class="line">&quot;ServerPassword&quot;: &quot;&quot;，//服务器的密码，不设置表示无密码</span><br><span class="line">&quot;RegionProtectChests&quot;: true，//领地内的箱子是否受到保护，PVE服务器强烈建议设置成true</span><br><span class="line">&quot;DisableLoginBeforeJoin&quot;: false，//大概意思是踢出登录失败的玩家？</span><br><span class="line">&quot;DisableUUIDLogin&quot;: false，//是否禁止UUID登录</span><br><span class="line">&quot;KickEmptyUUID&quot;: false，//是否移除（kick）空UUID的玩家</span><br><span class="line">&quot;AllowRegisterAnyUsername&quot;: false，//是否允许注册任何用户名，PVE服务器强烈建议设置成false</span><br><span class="line">&quot;AllowLoginAnyUsername&quot;: true，//是否允许登录任何用户名</span><br><span class="line">&quot;MaxDamage&quot;: 175，//玩家所受到的最大伤害点数，超过这个数值会被冻结</span><br><span class="line">&quot;MaxProjDamage&quot;: 175，//玩家受到弹药的最大伤害点数，同上</span><br><span class="line">&quot;IgnoreProjUpdate&quot;: false，//不明，下同</span><br><span class="line">&quot;IgnoreProjKill&quot;: false，//下同</span><br><span class="line">&quot;IgnoreNoClip&quot;: false，//下不同</span><br><span class="line">&quot;AllowIce&quot;: true，//是否禁止冰的扩散【这啥？】</span><br><span class="line">&quot;AllowCrimsonCreep&quot;: false，//是否允许血腥之地扩散，PVE强烈建议设置成false，下同</span><br><span class="line">&quot;AllowCorruptionCreep&quot;: false，//是否允许腐化之地扩散</span><br><span class="line">&quot;AllowHallowCreep&quot;: false，//是否允许神圣之地扩散 &quot;StatueSpawn200&quot;: 3，//不明，但是可能和出生点有关，建议不要改动，下同</span><br><span class="line">&quot;StatueSpawn600&quot;: 6，//赞成上一条</span><br><span class="line">&quot;StatueSpawnWorld&quot;: 10，//雕像召唤物品的最高上限</span><br><span class="line">&quot;PreventBannedItemSpawn&quot;: false，//是否禁止用item指令和give指令获得被封禁（ban）掉的物品</span><br><span class="line">&quot;PreventDeadModification&quot;: true，//不明真相的吃瓜群众</span><br><span class="line">&quot;EnableChatAboveHeads&quot;: false，//楼上带我一个</span><br><span class="line">&quot;ForceXmas&quot;: false，//是否开启圣诞节</span><br><span class="line">&quot;AllowAllowedGroupsToSpawnBannedItems&quot;: false，//是否允许有权限使用被封禁（ban）物品的用户组使用被封禁（ban）的物品</span><br><span class="line">&quot;IgnoreChestStacksOnLoad&quot;: false，//加载地图的时候是否检测箱子里物品堆叠上线</span><br><span class="line">&quot;LogPath&quot;: &quot;tshock&quot;，//日志文件存放路径</span><br><span class="line">&quot;PreventInvalidPlaceStyle&quot;: true，//不明</span><br><span class="line">&quot;BroadcastRGB&quot;: [</span><br><span class="line">127.0，</span><br><span class="line">255.0，</span><br><span class="line"><span class="number">212.0</span></span><br><span class="line">]，//系统广播颜色，和上述GameMaster的设置颜色方式一样</span><br><span class="line">&quot;RestUseNewPermissionModel&quot;: true，//是否刷新的时候使用新的模特【？】</span><br><span class="line">&quot;ApplicationRestTokens&quot;: &#123;&#125;，//不明</span><br><span class="line">&quot;ReservedSlots&quot;: 3，//预留给管理员的通道数量</span><br><span class="line">&quot;LogRest&quot;: false，//日志是否刷新【？】</span><br><span class="line">&quot;RespawnSeconds&quot;: 3，//玩家死亡后复活时间/秒</span><br><span class="line">&quot;TilePaintThreshold&quot;: 15，//一秒刷漆上限</span><br><span class="line">&quot;EnableMaxBytesInBuffer&quot;: false，//不懂</span><br><span class="line">&quot;MaxBytesInBuffer&quot;: 5242880，//还是不懂</span><br><span class="line">&quot;ForceHalloween&quot;: false，//是否开启万圣节</span><br><span class="line">&quot;AllowCutTilesAndBreakables&quot;: false，</span><br><span class="line">&quot;CommandSpecifier&quot;: &quot;/&quot;//指令标志，在聊天框里首位输入该符号视为指令</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Tshock所有指令详细介绍"><a href="#Tshock所有指令详细介绍" class="headerlink" title="Tshock所有指令详细介绍"></a>Tshock所有指令详细介绍</h2><ul>
<li><p>指令：auth<br>介绍：开服后服主需要进入服务器，但是如何获得管理权限呢？开服后会发现服务器有一横黄色字体，其中/auth xxxxxxxx最为瞩目【一般都为八位数，可通过tshock的auth.txt文件夹修改密码】，在服务器里输入auth命令＋密码即可获得临时超级管理权限，如何获得永久管理权限呢？以后会说到。<br>auth xxxxxxxx —获取临时管理权限，退出服务器后权限重置</p>
</li>
<li><p>指令：auth-verify<br>介绍：服主获得临时超级管理权限之后建议马上输入此命令，这样以后就不能通过auth获得管理权限了，以防黑客获取权限【如果黑客真的来了…估计这命令也没用】，在这之前一定要获取永久管理权限，否则下次登录服务器就无法获取管理权限了。想要再次可以使用auth指令获取临时管理权限可以删掉tshock目录下的auth.lck文件解除。auth-verify —禁止使用auth指令</p>
</li>
<li><p>指令：user<br>介绍：管理玩家以及用户组</p>
<ul>
<li>子命令：<br>user add 玩家名字 密码 用户组 —添加玩家到某一个用户组<br>user del 玩家名字 —删除玩家信息<br>user password 玩家名字 新密码 —更改某一玩家的密码【这个真…】<br>user group 玩家名字 用户组 —更改某一玩家的用户组<br>备注：user命令可以更改玩家的信息，极为重要，如无特殊情况，请不要把该命令权限交给他人</li>
</ul>
</li>
<li><p>指令：login<br>介绍：一般服务器都会设置登录这个选项，进入服务器后输入以下子命令登录至服务器。</p>
<ul>
<li>子命令：<br>login —直接使用角色名称和UUID登录<br>login 密码 —使用游戏角色名称和密码登录<br>login 用户名 密码 —使用用户名和密码登录<br>备注：请牢记您的密码。</li>
</ul>
</li>
<li><p>指令：password<br>介绍：用于修改用户的登录密码。</p>
</li>
<li><p>password 旧密码 新密码 —修改登录密码<br>备注：请牢记您更改后的密码。</p>
</li>
<li><p>指令：register<br>介绍：用于注册服务器用户账号。</p>
<ul>
<li>子命令：<br>register 密码 —使用游戏玩家名称当做用户名和密码注册<br>register 用户名 密码 —使用自己设置的用户名和密码注册<br>备注：请牢记注册后的密码并尽量弄复杂。 </li>
</ul>
</li>
<li><p>指令：ban<br>介绍：封禁掉某玩家。</p>
<ul>
<li>子命令：（【】内内容选填）<br>ban add 玩家名称 【理由】 —永久封禁一个用户<br>ban addip IP地址 【理由】 —永久封禁一个IP地址，通过此IP地址进入的玩家将被禁止进服务器<br>ban addtemp 玩家名称 时间 【理由】 —限时性封禁一个用户<br>ban list 【页码】 —显示正在被封禁的用户列表，不输入页码默认显示第一页<br>ban listip 【页码】 —显示正在被封禁的IP地址列表</li>
<li>相关命令：<br>del 用户名 —解封一个用户<br>delip IP地址 —解封一个IP地址<br>备注：第三条子命令所涉及到的时间的格式为【1d1h1m1s】，其中d=day代表天，h=<br>hour代表小时，m代表分钟，s代表秒，如果想封禁玩家123长达一天三小时的时间那么格式为：<br>ban addtemp 123 1d3h 就是想封禁你你能把我咋滴，无视理由= =</li>
</ul>
</li>
<li><p>指令：broadcast<br>介绍：系统广播命令，但不知道能不能定时播放，貌似有个插件可以做到。<br>broadcast 内容 —播放广播</p>
<ul>
<li>相关命令：<br>bc 内容 —也是播放广播，只不过是broadcast的缩写<br>say 内容 —还是播放广播</li>
</ul>
</li>
<li><p>指令：displaylogs<br>介绍：是否保存服务器日志，不修改config的情况下默认目录为tshock<br>【如以后有些指令我没有给出用法，即直接输入生效】</p>
</li>
<li><p>指令：group<br>介绍：管理用户组。</p>
<ul>
<li>子命令：<br>group add 新的用户组名称 权限 —添加一个新的用户组并给其初始权限<br>group addperm 用户组 权限 —给某一用户组添加权限<br>group color 用户组 颜色 —改变某一用户组的聊天颜色【颜色为RGB值，具体度娘】<br>group del 用户组名称 —删除一个用户组<br>group delperm 用户组名称 权限 —删除某一用户组的某个权限<br>group list 【页码】—显示所有已设置的用户组<br>group listperm 用户组名称 【页码】 —显示某一用户组的所有权限<br>group parent 用户组名称 父亲用户组名称 —修改某一用户组的父亲组<br>group prefix 用户组名称 前缀 —设置某一用户组聊天前缀<br>group suffix 用户组名称 后缀 —设置某一用户组聊天后缀<br>备注：这里的父亲用户组值得一提，如果用户组123为456的父亲用户组，那么456将继承123的全部权限，在tshock默认的用户组中，guest是最没权限但是所有用户组的父亲组，故所有用户组都将继承他的权限。如果123和456都含有同一个权限，只删除456的那个权限的话是无法彻底删去的，因为他还有123这个父亲撑腰。所以要完全撤掉这个权限需要撤销掉123的这个权限、如果123还有父亲用户组的话那就要继续找继续找，知道找到最年长的一辈才能彻底删掉这个权限。<br>备注2：【*】代表所有权限，可以?豆芾碓敝挥幸桓鋈ㄏ蓿蔷褪恰?】</li>
</ul>
</li>
<li><p>指令：itemban<br>介绍：封禁掉某一物品。</p>
<ul>
<li>子命令：<br>itemban add 物品英文名称或物品ID—封禁掉某一物品<br>itemban allow 物品英文名称或物品IP 用户组名称—允许某一用户组使用该被封禁的物品<br>itemban del 物品英文名称或物品ID—将某一物品解除封禁<br>itemban disallow 物品英文名称或物品ID 用户组名称—取消某一用户组对该封禁物品的使用权限<br>itemban list 【页码】—列出所有被封禁掉的物品<br>备注：没有权限使用该物品的用户组会被冻结。</li>
</ul>
</li>
<li><p>指令：region<br>介绍：设置领地，极为重要！</p>
<ul>
<li>子命令：<br>region set 1/2 —设置临时边界点。<br>region clear —清除设置的临时边界点<br>region define 名字 —给刚才设置的临时边界起名，将其变成私有领地。<br>region delete 领地名称 —删除某一个私有领地<br>region name -显示当前位置的领地名称<br>region list 【页码】 —显示当前所有领地<br>region resize 领地名称 —重新设置领地大小<br>region allow 玩家名称 领地名称 —将某一领地分享给另一位玩家<br>region remove 玩家名称 领地名称 —取消将某一领地分享给某位玩家<br>region allowg 用户组名称 领地名称 —将某一领地分享给某一个用户组<br>region removeg 用户组名称 领地名称 —将某一领地的分享权限取消至某个用户组<br>region info 领地名称 —显示领地信息<br>region protect 领地名称 true/false —是否开启保护某个领地<br>region z 领地名称 优先等级 —设置领地的优先权<br>备注：如何设置领地？<br>使用稿子在一个长方形的左上角敲一下，之后输入region set 1<br>使用稿子在同一个长方形的右下角敲一下，之后输入region set 2<br>输入region define 名称 设置成自己的私有领地吧！<br>私有领地不可被除领主之外的人破坏或建筑，除肺淦鞑享给某个玩家。</li>
</ul>
</li>
<li><p>指令：kick<br>介绍：将玩家移除服务器，克熊孩子专用【其实ban更好…】。<br>kick 玩家名称 【理由】</p>
</li>
<li><p>指令：projban<br>介绍：在服务器里封禁某种弹药使用权限。</p>
<ul>
<li>子命令：<br>projban add 弹药ID —封禁某种弹药<br>projban allow 弹药ID 用户组名称 —允许某一用户组使用该被封禁的弹药<br>projban del 弹药ID —恢复某一个弹药的使用权限<br>projban disallow 弹药ID 用户组名称 —解除某一用户组使用某个弹药的权限<br>projban list —列出所有被封禁的弹药</li>
</ul>
</li>
<li><p>指令：mute<br>介绍：禁言某玩家，刷屏的你们惨咯~<br>mute 用户名 【理由】—禁言某位玩家</p>
<ul>
<li>相关命令：<br>unmute 用户名 —解除某位玩家的禁言</li>
</ul>
</li>
<li><p>指令：savessc<br>介绍：手动保存服务器的玩家存档。</p>
</li>
<li><p>指令：tempgroup<br>介绍：‘设置临时用户组，不明意义。</p>
</li>
<li><p>指令：userinfo<br>介绍：查询某一用户信息。<br>usernfo 玩家姓名</p>
<ul>
<li>相关命令：<br>ui 玩家姓名 —ui就是userinfo的简写</li>
</ul>
</li>
<li><p>指令：annoy<br>介绍：骚扰【shenmegui】一个玩家。<br>annoy 玩家名称 骚扰时间<br>备注：怎么骚扰的，可以亲自试验一下，23333</p>
</li>
<li><p>指令：confuse<br>介绍：让某个玩家不再受控制。【即，方向箭无法正确的控制角色移动】【这命令真NB】<br>confuse 玩家名称<br>备注：对同一个玩家输入两次该命令将解除不受控制状态。</p>
</li>
<li><p>指令：rocket<br>介绍：在某位玩家旁边发射一个火箭。<br>rocket 玩家名称</p>
</li>
<li><p>指令：firework<br>介绍：在某位玩家身边发射烟花。<br>firework 玩家名称 【red/green/blue/yellow】</p>
</li>
<li><p>指令：checkupdates<br>介绍：检查服务器【tshock】的更新状况。</p>
</li>
<li><p>指令：off<br>介绍：关闭服务器并且保存服务器数据。</p>
<ul>
<li>相关命令：<br>exit —同上</li>
</ul>
</li>
<li><p>指令：off-nosave<br>介绍：关闭服务器但不保存服务器数据。服务器被熊炸了之后立即使用该命令，不要犹豫。</p>
<ul>
<li>相关命令：<br>exit-nosave —真是没事闲着== 指令：reload<br>介绍：重新载入config文件，不必重新启动服务器去加载config文件了，但是部分配置还必须重启服务器才能生效。</li>
</ul>
</li>
<li><p>指令：restart<br>介绍：重启服务器。</p>
</li>
<li><p>指令：serverpassword<br>介绍：修改服务器的密码。</p>
</li>
<li><p>指令：version<br>介绍：显示当前tshock版本信息。</p>
</li>
<li><p>指令：whitelist<br>介绍：管理服务器白名单【需在config配置文件里把白名单打开】</p>
</li>
<li><p>指令：give<br>介绍：给予玩家一个物品。<br>give 物品英文名称或物品ID 玩家名称（可以是自己） 【数量】【英文前缀（武器用）】</p>
<ul>
<li>相关命令：<br>g 物品英文名称或物品ID 玩家名称（可以是自己） 【数量】【英文前缀（武器用）】 —即give的简写</li>
</ul>
</li>
<li><p>指令：item<br>介绍：给予自己一个物品。<br>item 物品英文名称或物品ID【数量】【英文前缀（武器用）】</p>
<ul>
<li>相关命令：<br>i 物品英文名称或物品ID【数量】【英文前缀（武器用）】—不解释</li>
</ul>
</li>
<li><p>指令：butcher<br>介绍：杀死当前服务器里的怪物或可爱的npc。<br>butcher 怪物id/npc<br>备注：不写ID将表示杀死所有除了玩家的生物。</p>
</li>
<li><p>指令：invade<br>介绍：开启军团入侵指令！<br>invade 入侵军团<br>备注：入侵军团的类型有：goblin【哥布林】，snowman【雪人军团】，pirate【海盗】。另外，南瓜月，血月，霜月有其他指令。</p>
</li>
<li><p>指令：maxspawn<br>介绍：设置怪物最大刷新量，但只是临时的。<br>备注：关闭服务器后失效，永久修改最大怪物刷新量请去修改config配置文件。</p>
</li>
<li><p>指令：spawnboss<br>介绍：嘛，稍微懂点英文的都知道是召唤boss的指令~<br>spawnboss BOSS名称 【数量】</p>
<ul>
<li>相关命令：<br>sb BOSS名称 【数量】 —简写不解释，但是这简写简直233<br>备注：boss类型主要有：eye-克苏鲁之眼/eater-世界吞噬者/wof-血肉之墙/queen-蜂后/brain-克苏鲁之脑/king-史莱姆王/twins-双子魔眼/prime-机械骷髅王/skeletron-骷髅王/golem-石巨人/plantera-世纪之花/destroyer-世界毁灭者/duke-猪鲨公爵/all-所有种类boss，若没有填数量一空则默认为一。</li>
</ul>
</li>
<li><p>指令：spawnmob<br>介绍：在你的身边召唤一个怪物或者NPC。<br>spawnmob 怪物ID或NPC的ID 【数量】</p>
<ul>
<li>相关命令：<br>sm 怪物ID或NPC的ID 【数量】 —如果召唤一堆NPC会发生什么？</li>
</ul>
</li>
<li><p>指令：spawnrate<br>介绍：设置怪物刷新时间间隔，同样是临时性的，需要通过config配置文件设置永久性的。</p>
</li>
<li><p>指令：pumpkin<br>介绍：召唤南瓜月！！！<br>备注：本人没有测试白天是否可以使用指令召唤南瓜月。</p>
</li>
<li><p>指令：home<br>介绍：回到自己设置的出生点【床】。</p>
</li>
<li><p>指令：spawn<br>介绍：回到地图【服务器】的出生点。</p>
</li>
<li><p>指令：tp<br>介绍：神の指令，可以传送到别人身边。</p>
<ul>
<li>子命令：<br>tp 玩家名称 —传送到某人身边。<br>tp x坐标 y坐标 —传送到特定的一个坐标，可以通过GPS查看坐标。</li>
</ul>
</li>
<li><p>指令：tpallow<br>介绍：设置别人是否可以传送到你身边。</p>
</li>
<li><p>指令：tphere<br>介绍：将别人传送到你身边，有可能侵犯他人隐私。<br>tphere 玩家名称<br>备注：如果玩家名称填写all或者【*】，则表示所有玩家。</p>
</li>
<li><p>指令：antibuild<br>介绍：是否开启禁止建筑【破坏】模式，开启后无法破坏地图上的任何东西，但也是临时性的。 指令：bloodmoon<br>介绍：开启血月！</p>
</li>
<li><p>指令：grow<br>介绍：在你的旁边生长一颗植株，可以达到无限资源的目的。【本来就可以无线资源吧..】<br>grow tree/epictree/mushroom/cactus/herb<br>备注：这几个英文单词指得分别是：树，棕桐树，蘑菇，仙人掌，草药。</p>
</li>
<li><p>指令：dropmeteor<br>介绍：使用该指令将会随机生成一个陨石！！！请在主城周围使用该命令否则后果自负。</p>
</li>
<li><p>指令：eclipse<br>介绍：开启日食，配合config配置修改成极昼模式可以达到永久日食的目的。</p>
</li>
<li><p>指令：forcexmas<br>介绍：是否开启圣诞模式，注意，有是否选项！<br>forcexmas true/false</p>
</li>
<li><p>指令：fullmoon<br>介绍：使用该指令开启满月！<br>这啥…</p>
</li>
<li><p>指令：hardmode<br>介绍：如当前地图处于简单模式【肉山前】，使用该指令立刻转至困难模式【肉山后】，反亦之。</p>
</li>
<li><p>指令：protectspawn<br>介绍；开启临时保护出生点模式，范围在config配置文件里修改，不过也只是临时性的。</p>
</li>
<li><p>指令：rain<br>介绍：是否开启或停止下雨。<br>rain stop/start —前者停止正在下的雨，后者则开始下雨</p>
</li>
<li><p>指令：setspawn<br>介绍：将你脚下踩得这块方块设置为地图的出生点，这个是永久的！但是仍然可以输入该指令改变地图出生点。</p>
</li>
<li><p>指令：settle<br>介绍：立刻强制所有液体平衡。</p>
</li>
<li><p>指令：wind<br>介绍：改变风速？<br>wind 数值</p>
</li>
<li><p>指令：time<br>介绍：设置地图的时间<br>time day/night/dusk/noon/midnight<br>备注：day代表白天，游戏时间为4:00整，这个时间点表示刚刚天亮。night表示傍晚，时间未知。dusk代表黄昏，表示刚刚步入夜晚。noon表示正午，太阳当空照~一天中最亮的时候。midnight代表午夜。</p>
</li>
<li><p>指令：world<br>介绍：显示当前地图信息 。</p>
</li>
<li><p>指令：buff<br>介绍：给予自己一种buff，可以自定义时间哦！<br>buff buff序号或者英文名称 【持续的时间】<br>备注：时间选项不添加默认为60秒。</p>
</li>
<li><p>指令：clear<br>介绍：清理以你为O点的半径中的怪物/物品/弹药。<br>clear item/npc/projectile 【半径】<br>备注：半径不填写大概默认为全部。npc代表怪物，第三者代表弹药，item代表掉落物品。<br>并且在minecraft里，clear指令是清空玩家背包的指令。 </p>
</li>
<li><p>指令：gbuff<br>介绍：给予某个玩家一种buff。<br>gbuff 玩家名称 buff名称或buffID 【时间】</p>
<ul>
<li>相关指令：<br>buffplayer 玩家名称 buff名称或buffID 【时间】<br>备注：时间一栏不填写默认为60秒。</li>
</ul>
</li>
<li><p>指令：godmode<br>介绍：这将会给一个人上帝的权限！！！<br>godmode —给予自己上帝的权利！<br>godmode 用户名 —给予一个玩家上帝的权利！<br>上帝的权利：当你收到任何伤害【这种伤害会减少你的体力】的时候，你马上恢复你血量上限的血量【比如你有200点血量上限，你收到伤害时，会立刻回满200点血。】。可是如果该伤害是致命的，仍然会死亡。【比如地牢守护者】</p>
</li>
<li><p>指令：heal<br>介绍：治疗一个玩家【包括hp和mp】<br>heal —治疗自己<br>heal 玩家名称 —治疗某一个玩家</p>
</li>
<li><p>指令：kill<br>介绍：干死某位玩家233。<br>kill 玩家名称 —杀掉玩家 自顶<br>……… 指令：me<br>介绍：跟自己卖萌=￣ω￣=。<br>me 聊天内容</p>
</li>
<li><p>指令：party<br>介绍：组队聊天内容。<br>party 聊天内容 —其中的组队是指pvp的队伍颜色。<br>相关指令：<br>p 聊天内容 —可以更加快捷的跟组队聊天</p>
</li>
<li><p>指令：reply<br>介绍：回复某人私聊给你的话【亦可给某人发送私信】。<br>reply 私信内容</p>
<ul>
<li>相关命令：<br>r 聊天内容</li>
</ul>
</li>
<li><p>指令：slap<br>介绍：扇别人一巴掌！并强制造成五点血量伤害，据说有击退效果。<br>slap 玩家姓名 指令：stats<br>介绍：显示当前服务器的信息。</p>
</li>
<li><p>指令：warp<br>介绍：管理当前服务器所开的地图的传送点，不同的地图有不同的传送点管理。</p>
<ul>
<li>子命令：<br>warp 传送点 —传送到该传送点，服务器的注册用户默认拥有该指令。<br>warp add 传送点名称 —在当前脚下设置一个传送点并命名，所有传送点都饰淦鳙共的。<br>warp del 传送点名称 —删除某一传送点。<br>warp list 【页数】 —显示当前服务器开的地图所设置的所有传送点。<br>warp send 玩家名称 传送点名称 —将某一用户立即强制传送到某一传送点。<br>warp hide 传送点名称 ture/false —设置传送点是否显示，ture为是，反之。<br>备注：warp可以在任意一个地方建立传送点，也可以用来设置服务器活动传送点，所以如无特殊情况，请不要授予注册玩家管理传送点的权限。</li>
</ul>
</li>
<li><p>指令：whisper<br>介绍：发送一种私聊信息给予某位玩家。<br>whisper 聊天内容 —私聊某位玩家。</p>
<ul>
<li>相关命令：<br>tell 聊天内容 —还是私聊某位玩家。<br>w 聊天内容 —whisper的简写。</li>
</ul>
</li>
<li><p>指令：aliases<br>介绍：查询某一命令的相同命令【比如上一条指令的whisper，就有两个相同命令，即tell和w】。</p>
</li>
<li><p>指令：help<br>介绍：查询当前用户组可供使用的命令。</p>
</li>
<li><p>指令：motd<br>介绍：显示服务器设置的欢迎信息。</p>
</li>
<li><p>指令：playing<br>介绍：显示当前服务器所有在线玩家。</p>
<ul>
<li>相关命令：<br>online<br>who</li>
</ul>
</li>
<li><p>指令：rule<br>介绍：显示服务器设置的规则！新手最好先看服规，否则后果自负。</p>
<h2 id="Tshock内置权限详解"><a href="#Tshock内置权限详解" class="headerlink" title="Tshock内置权限详解"></a>Tshock内置权限详解</h2><p>从此片开始，我将为大家介绍tshock原版权限详解，这些权限会用在group addperm 中使用，且特别重要。</p>
<h3 id="tshock-account系列权限"><a href="#tshock-account系列权限" class="headerlink" title="tshock.account系列权限"></a>tshock.account系列权限</h3><p>备注：所有原版tshock权限的第一个单词均有tshock，没有特例。</p>
</li>
<li><p>权限：tshock.account.register<br>介绍：允许用户组内的用户可以在服务器内注册账号。<br>备注：使用方法：group addperm 用户组名称 tshock.account.register，这样就给予了一个用户组可以注册的权限，但是不要忘记父亲用户组哦，子用户组可以继承父用户组的所有权限。</p>
</li>
<li><p>权限：tshock.account.login<br>介绍：允许用户组内的用户可以登录账号。<br>备注：这条和上面一条最好不要做任何改动。</p>
</li>
<li><p>权限：tshock.account.changepassword<br>介绍：允许用户组可以修改自己账号的密码。 权限：tshock.admin.warp<br>介绍：可以使用warp系列指令！</p>
</li>
<li><p>权限：tshock.admin.itemban<br>介绍：可以封禁某种物品的使用权限</p>
</li>
<li><p>权限：tshock.admin.projectileban<br>介绍：可以封禁某种弹药的使用权限</p>
</li>
<li><p>权限：tshock.admin.group<br>介绍：可以使用group系列命令</p>
</li>
<li><p>权限：tshock.admin.region<br>介绍：可以使用region【圈地】系列指令</p>
</li>
<li><p>权限：tshock.admin.mute<br>介绍：可以禁言某人 权限：tshock.admin.seeplayerids<br>介绍：可以查看当前服务器玩家的人物信息。</p>
</li>
<li><p>权限：tshock.admin.savessi<br>介绍：可以被服务器保存背包数据<br>备注：对于那些临时玩家和用大号进开荒服的玩家们，可以考虑单独弄一个用户组并将此权限删除。</p>
</li>
<li><p>权限： tshock.admin.tempgroup<br>介绍：可以使用tempgroup指令</p>
</li>
<li><p>权限：tshock.admin.broadcast<br>介绍：可以使用say等指令进行系统【服务器】广播</p>
</li>
<li><p>权限：tshock.admin.userinfo<br>介绍：可以获取当前在线的用户信息【可能包括IP地址】 【tshock.buff】系列权限</p>
</li>
<li><p>权限：tshock.buff.self<br>介绍：可以给自己加buff</p>
</li>
<li><p>权限：tshock.buff.others<br>介绍：可以给其他玩家加buff<br>备注：如果一个用户组同时拥有以上两条权限，那么就可以使用buff系列指令。 【tshock.cfg系列权限】</p>
</li>
<li><p>权限：tshock.cfg.maintenance<br>介绍：可以关闭或重新启动服务器<br>备注：任何时候，都不要把这条权限给除超级管理之外的任何用户组！！！任何时候，都不要把这条权限给除超级管理之外的任何用户组！！！任何时候，都不要把这条权限给除超级管理之外的任何用户组！！！【很重要所以说三遍】</p>
</li>
<li><p>权限：tshock.cfg.whitelist<br>介绍：可以管理白名单</p>
</li>
<li><p>权限：tshock.cfg.password<br>介绍：可以修改服务器密码</p>
</li>
<li><p>权限：tshock.cfg.reload<br>介绍：可以使用指令重新加载config配置文件</p>
</li>
<li><p>权限：tshock.cfg.updateplugins<br>介绍：可以使用指令更新tshock<br>备注：任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！任何时候，都不要把以上所有权限交给除超级管理之外的任何用户组！！！！！【特别重要所以说五遍】 【tshock.ignore系列权限】</p>
</li>
<li><p>权限：tshock.ignore.removetile<br>介绍：是否让该用户组免于受到挖掘物块速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.placetile<br>介绍：是否让该用户组免于受到物块摆放速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.liquid<br>介绍：是否让该用户组免于受到液体摆放速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.projectile<br>介绍：是否让该用户组免于受到弹药伤害上限的检测</p>
</li>
<li><p>权限：tshock.ignore.paint<br>介绍：是否让该用户组免于受到喷漆速度上限的检测</p>
</li>
<li><p>权限：tshock.ignore.noclip<br>介绍：是否让该用户组免于受到锤击物块上限的检测</p>
</li>
<li><p>权限：tshock.ignore.itemstack<br>介绍：是否让该用户组免于受到物品堆叠上限的检测</p>
</li>
<li><p>权限：tshock.ignore.damage<br>介绍：是否让该用户组免于受到伤害上限的检测</p>
</li>
<li><p>权限：tshock.ignore.ssi<br>介绍：是否让该用户组免于受到背包的检测</p>
</li>
<li><p>权限：tshock.ignore.dropbanneditem<br>介绍：是否让该用户可以丢弃服务器封禁的物品并不消失 【tshock.item系列权限】</p>
</li>
<li><p>权限：tshock.item.spawn<br>介绍：该用户组是否可以使用item指令。</p>
</li>
<li><p>权限：tshock.item.usebanned<br>介绍：该用户组是否可以使用被服务器封禁的物品。</p>
</li>
</ul>
<h3 id="tshock-npc系列权限"><a href="#tshock-npc系列权限" class="headerlink" title="tshock.npc系列权限"></a>tshock.npc系列权限</h3><ul>
<li><p>权限：tshock.npc.maxspawns<br>介绍：是否可以使用指令控制最大刷怪数量</p>
</li>
<li><p>权限：tshock.npc.spawnrate<br>介绍：是否可以使用指令控制怪物刷新时间间隔</p>
</li>
<li><p>权限：tshock.npc.invade<br>介绍：是否可以开启怪物入侵【比如雪人军团之类的…】</p>
</li>
<li><p>权限：tshock.npc.spawnboss<br>介绍：是否可以使用指令召唤boss</p>
</li>
<li><p>权限：tshock.npc.rename<br>介绍：是否可以重新命名NpC</p>
</li>
<li><p>权限：tshock.npc.spawnmob<br>介绍：是否可以使用指令召唤怪物</p>
</li>
<li><p>权限：tshock.npc.summonboss<br>介绍：是否可以使用物品召唤boss</p>
</li>
<li><p>权限：tshock.npc.butcher<br>介绍：是否可以使用指令杀死怪物【butcher指令】</p>
</li>
<li><p>权限：tshock.npc.startinvasion<br>介绍：是否可以使用物品召唤军团入侵【比如雪人军团之类的…】</p>
</li>
</ul>
<h3 id="tshock-superadmin系列权限"><a href="#tshock-superadmin系列权限" class="headerlink" title="tshock.superadmin系列权限"></a>tshock.superadmin系列权限</h3><ul>
<li><p>权限：tshock.superadmin.authverify<br>介绍：用户组是否可以禁止使用auth指令获取临时管理员权限</p>
</li>
<li><p>权限：tshock.superadmin.user<br>介绍：用户组是否可以使用user指令管理用户组<br>【以上两条基本就可以操控整个服务器的权限了，如无特殊情况请不要以上两条权限给予给他人】<br>【tshock.tp系列权限】</p>
</li>
<li><p>权限：tshock.tp.self<br>介绍：用户组可以使用tp指令【注意，不是系列，仅限tp】</p>
</li>
<li><p>权限：tshock.tp.others<br>介绍：用户组可以使用tphere指令</p>
</li>
<li><p>权限：tshock.tp.block<br>介绍：使当前用户组的成员成为tp指令的目标时可以阻止他。</p>
</li>
<li><p>权限：tshock.tp.toall<br>介绍：可以使用tp指令传送到任何人身边【但是没有测试过是否和tshock.tp.block权限相矛盾】</p>
</li>
<li><p>权限：tshock.tp.silent<br>介绍：可以传送到别人身边但没有提示【然并卵】</p>
</li>
<li><p>权限：tshock.tp.home<br>介绍：可以使用home指令</p>
</li>
<li><p>权限：tshock.tp.spawn<br>介绍：可以使用spawn命令</p>
</li>
</ul>
<h3 id="tshock-world系列权限"><a href="#tshock-world系列权限" class="headerlink" title="tshock.world系列权限"></a>tshock.world系列权限</h3><ul>
<li><p>权限：tshock.world.editspawn<br>介绍：使当前用户组是否可以设置临时出生点保护</p>
</li>
<li><p>权限：tshock.world.editregion<br>介绍：可以使用编辑region指令【并不是改变这个指令的内容，而是使用】</p>
</li>
<li><p>权限：tshock.world.time.bloodmoon<br>介绍：是否可以使用指令开启血月</p>
</li>
<li><p>权限：tshock.world.time.pumpkinmoon<br>介绍：同上，血月变成南瓜月</p>
</li>
<li><p>权限：tshock.world.time.snowmoon<br>介绍：霜月【我越来越懒了哈哈哈哈哈哈哈哈哈】</p>
</li>
<li><p>权限：tshock.world.grow<br>介绍：是否可以使用grow指令</p>
</li>
<li><p>权限：tshock.world.hardmode<br>介绍：是否可以使用指令改变当前地图的难度【即困难模式和简单模式】</p>
</li>
<li><p>权限：tshock.world.movenpc<br>介绍：是否可以移动npc房间【开荒服务器建议给予普通玩家此权限】</p>
</li>
<li><p>权限：tshock.world.converthardmode<br>介绍：是否可以转换神圣之地和腐化之地之间的联系？【实验结果不明显，只能人工翻译…】</p>
</li>
<li><p>权限：tshock.world.setxmas<br>介绍：是否可以使用指令开启圣诞节</p>
</li>
<li><p>权限：tshock.world.save<br>介绍：是否可以使用save指令【注，其中不包括off】</p>
</li>
<li><p>权限：tshock.world.settleliquids<br>介绍：是否可以使用指令平衡液体</p>
</li>
<li><p>权限：tshock.world.info<br>介绍：是否可以获取服务器当前开启的地图信息</p>
</li>
<li><p>权限：tshock.world.setspawn<br>介绍：是否可以重新设置系统出生点</p>
</li>
<li><p>权限：tshock.world.time.dropmeteor<br>介绍：是否可以使用指令刷新陨石…</p>
</li>
<li><p>权限：tshock.world.time.eclipse<br>介绍：是否可以使用指令开启日食</p>
</li>
<li><p>权限：tshock.world.time.fullmoon<br>介绍：是否可以使用指令开启满月模式</p>
</li>
<li><p>权限：tshock.world.modify<br>介绍：不受禁止破坏指令的影响</p>
</li>
<li><p>权限：tshock.world.paint<br>介绍：是否可以使用油漆</p>
</li>
<li><p>权限：tshock.world.rain<br>介绍：是否可以使用指令下雨</p>
</li>
<li><p>权限：tshock.world.wind<br>介绍：是否可以改变风速？ 【Tshock原版剩余权限（没有分类）】</p>
</li>
<li><p>权限：tshock.clear<br>介绍：是否可以使用clear指令【注意是clear不是clean】</p>
</li>
<li><p>权限：tshock.kill<br>介绍：是否可以使用指令干掉某人</p>
</li>
<li><p>权限：tshock.reservedslot<br>介绍：该用户组的成员进入服务器时，不受最大人数的限制【服务器满员了照样进来，可以用在vip用户组上】</p>
</li>
<li><p>权限：tshock.warp<br>介绍：是否可以使用warp进行传送【注意，这和tshock.admin.warp权限有所不同，该权限只能利用warp指令进行传送而tshock.admin.warp则是可以使用warp系列的指令，即管理warp传送点】</p>
</li>
<li><p>权限：tshock.slap<br>介绍：是否可以扇别人一巴掌</p>
</li>
<li><p>权限：tshock.whisper<br>介绍：是否可以查看当前服务器人物信息</p>
</li>
<li><p>权限：tshock.annoy<br>介绍：是否可以骚扰别人</p>
</li>
<li><p>权限：tshock.heal<br>介绍：是否可以通过指令治愈自己</p>
</li>
<li><p>权限：tshock.partychat<br>介绍：是否可以进行队内聊天【即party和p】</p>
</li>
<li><p>权限：tshock.info<br>介绍：是否可以看到服务器信息</p>
</li>
<li><p>权限：tshock.thirdperson<br>介绍：是否可以跟自己卖萌</p>
</li>
<li><p>权限：tshock.godmode<br>介绍：是否可以使用godmode指令</p>
</li>
<li><p>权限：tshock.canchat<br>介绍：是否可以聊天【这条权限碉堡了】</p>
</li>
<li><p>权限：tshock.projectiles.usebanned【因为projectiles类别的权限就这么一条，我就放在其余权限里了】<br>介绍：是否可以使用被封禁【ban】掉的弹药。</p>
<p>region划领地的方法是先输入region set 1，之后敲击你需要设置区域的左上角！<br>下一步同理，输入region set 2之后再敲击设置区域的右下角！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>AZURE KINECT生成点云</title>
    <url>/2021/03/06/AZURE-KINECT%E7%94%9F%E6%88%90%E7%82%B9%E4%BA%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Azure-Kinect-生成点云"><a href="#Azure-Kinect-生成点云" class="headerlink" title="Azure Kinect 生成点云"></a>Azure Kinect 生成点云</h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/denkywu/article/details/103305714">https://blog.csdn.net/denkywu/article/details/103305714</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20210306211927.png" alt=""></p>
<h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="comment">// 方便控制是否 std::cout 信息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG_std_cout 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将Mat转换为pcl的xyz格式</span></span><br><span class="line"><span class="comment"> * @param xyzDepth 输入的Mat</span></span><br><span class="line"><span class="comment"> * @param cloud 输入cloud</span></span><br><span class="line"><span class="comment"> * @return 是否转换成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">convertMatToPcl</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; xyzDepth, pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr &amp;cloud)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cv::Mat矩阵的数据类型必须是 CV_32FC3</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">21</span> != xyzDepth.type())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Error in convertMatToPcl().&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;The type of input data(cv::Mat) must be CV_32FC3.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cv::Mat数据大小</span></span><br><span class="line">    <span class="keyword">int</span> depthWidth = xyzDepth.cols;</span><br><span class="line">    <span class="keyword">int</span> depthHeight = xyzDepth.rows;</span><br><span class="line">    cloud-&gt;width = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(depthWidth);</span><br><span class="line">    cloud-&gt;height = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(depthHeight);</span><br><span class="line">    cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">    cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">    pcl::PointXYZ* pt = &amp;cloud-&gt;points[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> iRows = <span class="number">0</span>; iRows &lt; depthHeight; iRows++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> iCols = <span class="number">0</span>; iCols &lt; depthWidth; iCols++, pt++)</span><br><span class="line">        &#123;</span><br><span class="line">            pt-&gt;x = xyzDepth.at&lt;cv::Vec3f&gt;(iRows, iCols)[<span class="number">0</span>];</span><br><span class="line">            pt-&gt;y = xyzDepth.at&lt;cv::Vec3f&gt;(iRows, iCols)[<span class="number">1</span>];</span><br><span class="line">            pt-&gt;z = xyzDepth.at&lt;cv::Vec3f&gt;(iRows, iCols)[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.找到并打开 Azure Kinect 设备*/</span></span><br><span class="line">    <span class="comment">// 发现已连接的设备数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> device_count = k4a::device::get_installed_count();</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == device_count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Error: no K4A devices found. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Found &quot;</span> &lt;&lt; device_count &lt;&lt; <span class="string">&quot; connected devices. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> != device_count)<span class="comment">// 超过1个设备，也输出错误信息。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Error: more than one K4A devices found. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">// 该示例代码仅限对1个设备操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: found 1 K4A device. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打开（默认）设备</span></span><br><span class="line">    k4a::device device = k4a::device::open(K4A_DEVICE_DEFAULT);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: open device. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.配置并启动设备*/</span></span><br><span class="line">    <span class="keyword">k4a_device_configuration_t</span> config = K4A_DEVICE_CONFIG_INIT_DISABLE_ALL;</span><br><span class="line">    config.camera_fps = K4A_FRAMES_PER_SECOND_30;</span><br><span class="line">    config.color_format = K4A_IMAGE_FORMAT_COLOR_BGRA32;</span><br><span class="line">    config.color_resolution = K4A_COLOR_RESOLUTION_1080P;</span><br><span class="line">    <span class="comment">// config.depth_mode = K4A_DEPTH_MODE_NFOV_UNBINNED;</span></span><br><span class="line">    config.depth_mode = K4A_DEPTH_MODE_WFOV_2X2BINNED;</span><br><span class="line">    config.synchronized_images_only = <span class="literal">true</span>;<span class="comment">// ensures that depth and color images are both available in the capture</span></span><br><span class="line">    device.start_cameras(&amp;config);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: start camera.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.稳定化*/</span></span><br><span class="line">    k4a::capture capture;</span><br><span class="line">    <span class="keyword">int</span> iAuto = <span class="number">0</span>;<span class="comment">//用来稳定，类似自动曝光</span></span><br><span class="line">    <span class="keyword">int</span> iAutoError = <span class="number">0</span>;<span class="comment">// 统计自动曝光的失败次数</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (device.get_capture(&amp;capture))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; iAuto &lt;&lt; <span class="string">&quot;. Capture several frames to give auto-exposure&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">// 跳过前 n 个（成功的数据采集）循环，用来稳定</span></span><br><span class="line">            <span class="keyword">if</span> (iAuto != <span class="number">30</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                iAuto++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Done: auto-exposure&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// 跳出该循环，完成相机的稳定过程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; iAutoError &lt;&lt; <span class="string">&quot;. K4A_WAIT_RESULT_TIMEOUT.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span> (iAutoError != <span class="number">30</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                iAutoError++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Error: failed to give auto-exposure. &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----- Have Started Kinect DK. -----&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4.从设备获取捕获*/</span></span><br><span class="line">    k4a::image rgbImage;</span><br><span class="line">    k4a::image depthImage;</span><br><span class="line">    k4a::image irImage;</span><br><span class="line"></span><br><span class="line">    cv::Mat cv_rgbImage_with_alpha;</span><br><span class="line">    cv::Mat cv_rgbImage_no_alpha;</span><br><span class="line">    cv::Mat cv_depth;</span><br><span class="line">    cv::Mat cv_depth_8U;</span><br><span class="line">    cv::Mat cv_irImage;</span><br><span class="line">    cv::Mat cv_irImage_8U;</span><br><span class="line">    k4a::calibration k4aCalibration = device.get_calibration(config.depth_mode, config.color_resolution);<span class="comment">// Get the camera calibration for the entire K4A device, which is used for all transformation functions.</span></span><br><span class="line">    k4a::transformation k4aTransformation = k4a::transformation(k4aCalibration);</span><br><span class="line">    k4a::image xyzImage;</span><br><span class="line">    cv::Mat cv_xyzImage;<span class="comment">// 16位有符号</span></span><br><span class="line">    cv::Mat cv_xyzImage_32F;<span class="comment">// 32位float</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (device.get_capture(&amp;capture))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//RGB</span></span><br><span class="line">            rgbImage = capture.get_color_image();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_std_cout == 1</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[rgb] &quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;format: &quot;</span> &lt;&lt; rgbImage.get_format() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;device_timestamp: &quot;</span> &lt;&lt; rgbImage.get_device_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;system_timestamp: &quot;</span> &lt;&lt; rgbImage.get_system_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;height*width: &quot;</span> &lt;&lt; rgbImage.get_height_pixels() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rgbImage.get_width_pixels() </span><br><span class="line">				&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            cv_rgbImage_with_alpha = cv::Mat(rgbImage.get_height_pixels(), rgbImage.get_width_pixels(), CV_8UC4, (<span class="keyword">void</span> *)rgbImage.get_buffer());</span><br><span class="line">            cv::cvtColor(cv_rgbImage_with_alpha, cv_rgbImage_no_alpha, cv::COLOR_BGRA2BGR);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// depth</span></span><br><span class="line">            depthImage = capture.get_depth_image();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_std_cout == 1</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[depth] &quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;format: &quot;</span> &lt;&lt; depthImage.get_format() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;device_timestamp: &quot;</span> &lt;&lt; depthImage.get_device_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;system_timestamp: &quot;</span> &lt;&lt; depthImage.get_system_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;height*width: &quot;</span> &lt;&lt; depthImage.get_height_pixels() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; depthImage.get_width_pixels() </span><br><span class="line">				&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            cv_depth = cv::Mat(depthImage.get_height_pixels(), depthImage.get_width_pixels(), CV_16U, (<span class="keyword">void</span> *)depthImage.get_buffer(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(depthImage.get_stride_bytes()));</span><br><span class="line">            cv_depth.convertTo(cv_depth_8U, CV_8U, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ir</span></span><br><span class="line">            irImage = capture.get_ir_image();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG_std_cout == 1</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[ir] &quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;format: &quot;</span> &lt;&lt; irImage.get_format() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;device_timestamp: &quot;</span> &lt;&lt; irImage.get_device_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;system_timestamp: &quot;</span> &lt;&lt; irImage.get_system_timestamp().count() &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">				&lt;&lt; <span class="string">&quot;height*width: &quot;</span> &lt;&lt; irImage.get_height_pixels() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; irImage.get_width_pixels() </span><br><span class="line">				&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            cv_irImage = cv::Mat(irImage.get_height_pixels(), irImage.get_width_pixels(), CV_16U, (<span class="keyword">void</span> *)irImage.get_buffer(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(irImage.get_stride_bytes()));</span><br><span class="line">            cv_irImage.convertTo(cv_irImage_8U, CV_8U, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 点云</span></span><br><span class="line">            xyzImage = k4aTransformation.depth_image_to_point_cloud(depthImage, K4A_CALIBRATION_TYPE_DEPTH);</span><br><span class="line">            cv_xyzImage = cv::Mat(xyzImage.get_height_pixels(), xyzImage.get_width_pixels(), CV_16SC3, (<span class="keyword">void</span> *)xyzImage.get_buffer(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(xyzImage.get_stride_bytes()));</span><br><span class="line">            cv_xyzImage.convertTo(cv_xyzImage_32F, CV_32FC3, <span class="number">1.0</span>/<span class="number">1000</span>, <span class="number">0</span>);<span class="comment">// 转为float，同时将单位从 mm 转换为 m.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// show image</span></span><br><span class="line">            cv::imshow(<span class="string">&quot;color&quot;</span>, cv_rgbImage_no_alpha);</span><br><span class="line">            cv::imshow(<span class="string">&quot;depth&quot;</span>, cv_depth_8U);</span><br><span class="line">            cv::imshow(<span class="string">&quot;ir&quot;</span>, cv_irImage_8U);</span><br><span class="line">            cv::waitKey(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--- test ---&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">//10s后跳出循环</span></span><br><span class="line">            cv::waitKey(<span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;false: K4A_WAIT_RESULT_TIMEOUT.&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5.PCL可视化点云*/</span></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span> </span>;</span><br><span class="line">    <span class="keyword">if</span> (convertMatToPcl(cv_xyzImage_32F,cloud))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; <span class="title">viewer</span> <span class="params">(<span class="keyword">new</span> pcl::visualization::PCLVisualizer (<span class="string">&quot;3D Viewer&quot;</span>))</span></span>;</span><br><span class="line">        viewer-&gt;setBackgroundColor (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        pcl::<span class="function">visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt; <span class="title">single_color</span> <span class="params">(cloud, <span class="number">135</span>,<span class="number">206</span>,<span class="number">250</span>)</span></span>;<span class="comment">//淡蓝色点云</span></span><br><span class="line">        viewer-&gt;addPointCloud&lt;pcl::PointXYZ&gt;(cloud,single_color,<span class="string">&quot;点云&quot;</span>);</span><br><span class="line">        <span class="comment">//viewer-&gt;setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE,1,&quot;sdf&quot;);</span></span><br><span class="line">        viewer-&gt;addCoordinateSystem(<span class="number">0.1</span>);</span><br><span class="line">        viewer-&gt;initCameraParameters();</span><br><span class="line">        <span class="keyword">while</span>(!viewer-&gt;wasStopped())</span><br><span class="line">        &#123;</span><br><span class="line">            viewer-&gt;spinOnce(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">//boost::this_thread::sleep(boost::posix_time::microseconds(100000));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6.清场*/</span></span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    k4aTransformation.destroy();</span><br><span class="line">    rgbImage.reset();</span><br><span class="line">    depthImage.reset();</span><br><span class="line">    irImage.reset();</span><br><span class="line">    capture.reset();</span><br><span class="line">    device.close();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------- closed -------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(AzureKinect_01)</span><br><span class="line"><span class="keyword">add_definitions</span>(-std=c++<span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(k4a REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(PCL REQUIRED)</span><br><span class="line"><span class="keyword">if</span> (OpenCV_FOUND <span class="keyword">AND</span> k4a_FOUND <span class="keyword">AND</span> PCL_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;opencv library has found\n&quot;</span>)</span><br><span class="line">    <span class="keyword">include_directories</span>(</span><br><span class="line">            <span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span></span><br><span class="line">            <span class="variable">$&#123;k4a_INCLUDE_DIRS&#125;</span></span><br><span class="line">            <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">    <span class="keyword">add_executable</span>(AK main.cpp)</span><br><span class="line">    <span class="keyword">target_link_libraries</span>(AK</span><br><span class="line">            <span class="variable">$&#123;PCL_LIBRARIES&#125;</span></span><br><span class="line">            k4a::k4a</span><br><span class="line">            <span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>(OpenCV_FOUND <span class="keyword">AND</span> k4a_FOUND <span class="keyword">AND</span> PCL_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;opencv library didn&#x27;t find\n&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span> (OpenCV_FOUND <span class="keyword">AND</span> k4a_FOUND <span class="keyword">AND</span> PCL_FOUND)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>clion输入中文最新解决方法</title>
    <url>/2021/03/01/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E6%9C%80%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CLion-输入中文失效问题解决方法-最新"><a href="#CLion-输入中文失效问题解决方法-最新" class="headerlink" title="CLion 输入中文失效问题解决方法-最新"></a>CLion 输入中文失效问题解决方法-最新</h1><blockquote>
<p>此处参考链接为：</p>
<p><a href="https://blog.csdn.net/u011166277/article/details/106287587">https://blog.csdn.net/u011166277/article/details/106287587</a></p>
<p><a href="https://bbs.archlinuxcn.org/viewtopic.php?id=10529&amp;p=1">https://bbs.archlinuxcn.org/viewtopic.php?id=10529&amp;p=1</a></p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Linux系统上，使用JetBrains的IDE，会出现输入中文的时候，搜狗输入法的候选词框一直停留在左下角，不会跟随光标移动</p>
<h2 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h2><p>具体问题官方其实七年前就有了（参考<a href="https://youtrack.jetbrains.com/issue/JBR-2460），但是比较坑的是官方也一直没有解决这个问题；">https://youtrack.jetbrains.com/issue/JBR-2460），但是比较坑的是官方也一直没有解决这个问题；</a></p>
<p>简单来说就是<code>Idea</code>的<code>jre</code>运行环境一个bug，导致输入法无法定位到鼠标位置。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>由于其问题根源在于源码，所以需要重新编译才能获得比较好的使用体验；其中解决方法1能够较好的解决问题，但是特别费事，困难重重；解决方法2比较简单，但是使用体验并不是很好。</p>
<p>解决方案1的成品链接：</p>
<p>链接: <a href="https://pan.baidu.com/s/1KGRDCcFa0gLw-xQAa8cvaw">https://pan.baidu.com/s/1KGRDCcFa0gLw-xQAa8cvaw</a>  密码: rm38</p>
<h3 id="1-重新编译JetBRainsRuntime"><a href="#1-重新编译JetBRainsRuntime" class="headerlink" title="1.重新编译JetBRainsRuntime"></a>1.重新编译<code>JetBRainsRuntime</code></h3><ol>
<li><p>下载JetBainsRuntime</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;JetBrainsRuntime.git</span><br></pre></td></tr></table></figure></li>
<li><p>下载patch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;prehonor&#x2F;myJetBrainsRuntime.git</span><br></pre></td></tr></table></figure></li>
<li><p>应用patch</p>
<p>将下载的idea.patch文件，复制到JetBrainsRuntime目录下；</p>
<p>之后输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout cfc3e87f2ac27a0b8c78c729c113aa52535feff6</span><br><span class="line">git apply idea.patch</span><br></pre></td></tr></table></figure></li>
<li><p>编译</p>
<p>以Ubuntu为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autoconf make build-essential libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev libxrandr-dev libcups2-dev libfontconfig1-dev libasound2-dev</span><br><span class="line">cd JetBrainsRuntime</span><br><span class="line">sh .&#x2F;configure --disable-warnings-as-errors</span><br><span class="line"> make images</span><br></pre></td></tr></table></figure></li>
<li><p>更改IDE的启动环境</p>
<p>此处与其他教程有个别不同，以上面的参考教程为例，此处给出的步骤为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 文件: home&#x2F;idea-2020.1&#x2F;bin&#x2F;idea.sh (找到你自己的idea的安装路径)</span><br><span class="line">在文件开头添加</span><br><span class="line">export IDEA_JDK&#x3D;&#x2F;home&#x2F;prehonor&#x2F;gitproject&#x2F;JetBrainsRuntime&#x2F;build&#x2F;linux-x86_64-normal-server-release&#x2F;images&#x2F;jdk (改成你自己的编译的jdk所在目录)</span><br></pre></td></tr></table></figure>
<p>我使用的方法是在clion中安装插件choose runtime；将路径设置为编译好的JDK；详细使用步骤参考另一篇文章，链接如下：<a href="https://junlu.club/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/">https://junlu.club/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</a></p>
</li>
</ol>
<h3 id="2-修改搜狗输入法设置，使其不跟随光标移动"><a href="#2-修改搜狗输入法设置，使其不跟随光标移动" class="headerlink" title="2.修改搜狗输入法设置，使其不跟随光标移动"></a>2.修改搜狗输入法设置，使其不跟随光标移动</h3><p>这个解决方案特别简单，只需要在设置界面取消勾选跟随光标移动即可，将搜索候选词框放置在屏幕中间，能够解决部分问题；个人更推荐第一种解决方法。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-JDK版本问题"><a href="#1-JDK版本问题" class="headerlink" title="1. JDK版本问题"></a>1. JDK版本问题</h3><p>编译过程中，需要我使用jdk11的版本，安装命令如下：（参考链接：<a href="https://wxnacy.com/2018/12/26/ubuntu-install-jdk11/）">https://wxnacy.com/2018/12/26/ubuntu-install-jdk11/）</a></p>
<p>首先我们使用 <code>apt</code> 进行搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt search openjdk</span><br></pre></td></tr></table></figure>
<p>如果你的系统版本足够新，比如 18.04 LTS，那么很有可能搜索出这样的条目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openjdk-11-jdk&#x2F;bionic-updates,bionic-security,now 10.0.2+13-1ubuntu0.18.04.4 amd64 [installed,automatic]</span><br><span class="line">  OpenJDK Development Kit (JDK)</span><br></pre></td></tr></table></figure>
<p>这代表软件源已经更新了 Java 11，这样直接安装默认版本即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install -y default-jdk</span><br></pre></td></tr></table></figure>
<h3 id="2-dpkg处理软件包的问题"><a href="#2-dpkg处理软件包的问题" class="headerlink" title="2. dpkg处理软件包的问题"></a>2. dpkg处理软件包的问题</h3><p>参考链接：<a href="https://www.qingsword.com/qing/ubuntu-dpkg-configure-error.html">https://www.qingsword.com/qing/ubuntu-dpkg-configure-error.html</a></p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1.重命名dpkg目录下的info目录</span><br><span class="line"> sudo mv &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info_qingsword</span><br><span class="line">#2.创建一个新的info文件夹</span><br><span class="line">sudo mkdir &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info</span><br><span class="line">#3.执行更新操作</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get -f install</span><br><span class="line">#4.将更新操作产生的文件，全部复制到重命名的info_qingsword文件夹下</span><br><span class="line">sudo mv &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info&#x2F;* &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info_qingsword</span><br><span class="line">#5.删除创建的info文件夹</span><br><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info</span><br><span class="line">#6.将重命名的info_qingsword文件夹重新重命名为info</span><br><span class="line">sudo mv &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info_qingsword &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info</span><br><span class="line">#7.再次执行更新操作，问题解决</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>clion</tag>
        <tag>搜狗输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>工业机器人课程大作业</title>
    <url>/2021/01/28/%E5%B7%A5%E4%B8%9A%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工业机器人技术与应用课程报告"><a href="#工业机器人技术与应用课程报告" class="headerlink" title="工业机器人技术与应用课程报告"></a>工业机器人技术与应用课程报告</h1><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h2><p><strong>作业要求</strong>：对KUKA KR210型工业机器人进行运动学（包括DH参数及挠度参数）校准，并测试校准后机器人位姿精度。</p>
<p><strong>编程环境：</strong>MATLAB R2019a</p>
<p><strong>章节安排：</strong>第二节至第四节为实现过程</p>
<h2 id="2-获取末端实际位姿"><a href="#2-获取末端实际位姿" class="headerlink" title="2. 获取末端实际位姿"></a>2. 获取末端实际位姿</h2><p>由于条件原因缺少真实的KUKA210进行实际实验，因此需要采用仿真的方法获取机器人末端的实际位姿，实现思路是建立机器人运动学正解，将真实误差参数补偿进理论运动学模型，通过随机采样获取多组机器人末端实际位姿数据。</p>
<h3 id="2-1-机器人正解"><a href="#2-1-机器人正解" class="headerlink" title="2.1 机器人正解"></a>2.1 机器人正解</h3><p>建立机器人正解的过程如下：</p>
<p>首先，建立理论DH参数表与真实误差参数表，代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line"><span class="comment">%% 建立DH与误差表</span></span><br><span class="line">DH = [<span class="built_in">pi</span>,   <span class="number">0.675</span>,  <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pi</span>/<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0.35</span>,       <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">1.15</span>,       <span class="number">0</span>;</span><br><span class="line">    -<span class="built_in">pi</span>/<span class="number">2</span>,  <span class="number">0</span>,      <span class="built_in">pi</span>/<span class="number">2</span>,   <span class="number">0.041</span>,      <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pi</span>/<span class="number">2</span>,   <span class="number">-1.2</span>    <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span>;</span><br><span class="line">    -<span class="built_in">pi</span>/<span class="number">2</span>,  <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pi</span>,     <span class="number">-0.215</span>, <span class="number">0</span>,      <span class="number">0</span>,          <span class="number">0</span></span><br><span class="line">    ];</span><br><span class="line"><span class="comment">%alpha d theta a beta</span></span><br><span class="line">delta = [    <span class="number">0.00003</span>*<span class="built_in">pi</span>/<span class="number">180</span>,     <span class="number">-1.03</span>*<span class="number">0.001</span>,        <span class="number">-0.02</span>*<span class="built_in">pi</span>/<span class="number">180</span>,  <span class="number">-0.7</span>*<span class="number">0.001</span>,   <span class="number">0</span>;</span><br><span class="line">             <span class="number">0.002</span>*<span class="built_in">pi</span>/<span class="number">180</span>,       <span class="number">-0.15</span>*<span class="number">0.001</span>,        <span class="number">0</span>,             <span class="number">-0.4</span>*<span class="number">0.001</span>, <span class="number">0.3</span>*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">              <span class="number">0.08</span>*<span class="built_in">pi</span>/<span class="number">180</span>,        <span class="number">-0.006</span>*<span class="number">0.001</span>,       <span class="number">0</span>,            <span class="number">0.5</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">              <span class="number">-0.08</span>*<span class="built_in">pi</span>/<span class="number">180</span>,       <span class="number">-0.1</span>*<span class="number">0.001</span>,         <span class="number">0.3</span>*<span class="built_in">pi</span>/<span class="number">180</span>,   <span class="number">0.5</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">             <span class="number">0.05</span>*<span class="built_in">pi</span>/<span class="number">180</span>,        <span class="number">0.0003</span>*<span class="number">0.001</span>,       <span class="number">0.02</span>*<span class="built_in">pi</span>/<span class="number">180</span>,  <span class="number">-0.1</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">             <span class="number">-0.06</span>*<span class="built_in">pi</span>/<span class="number">180</span>,       <span class="number">0.05</span>*<span class="number">0.001</span>,         <span class="number">-0.6</span>*<span class="built_in">pi</span>/<span class="number">180</span>,  <span class="number">-0.2</span>*<span class="number">0.001</span>,  <span class="number">0</span>;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>其次，按照==公式1==，分别建立6个连杆之间的转换关系</p>
<script type="math/tex; mode=display">
\begin{aligned}
T_{i} &=\operatorname{Rot}\left(z, \theta_{i}\right) \cdot \operatorname{Trans}\left(0,0, d_{i}\right) \cdot \operatorname{Trans}\left(a_{i}, 0,0\right) \cdot \operatorname{Rot}\left(x, \alpha_{i}\right) \cdot \operatorname{Rot}\left(y, \beta_{i}\right) \\
&=\left[\begin{array}{cccc}
\mathrm{c} \theta_{i} \mathrm{c} \beta_{i}-\mathrm{s} \theta_{i} \mathrm{~s} \alpha_{i} \mathrm{~s} \beta_{i} & -\mathrm{s} \theta_{i} \mathrm{c} \alpha_{i} & \mathrm{c} \theta_{i} \mathrm{~s} \beta_{i}+\mathrm{s} \theta_{i} \mathrm{~s} \alpha_{i} \mathrm{c} \beta_{i} & a_{i} \mathrm{c} \theta_{i} \\
\mathrm{~s} \theta_{i} \mathrm{c} \beta_{i}+\mathrm{s} \alpha_{i} \mathrm{c} \theta_{i} \mathrm{~s} \beta_{i} & \mathrm{c} \theta_{i} \mathrm{c} \alpha_{i} & \mathrm{~s} \theta_{i} \mathrm{~s} \beta_{i}-\mathrm{s} \alpha_{i} \mathrm{c} \theta_{i} \mathrm{c} \beta_{i} & a_{i} \mathrm{~s} \theta_{i} \\
-\mathrm{c} \alpha_{i} \mathrm{~s} \beta_{i} & \mathrm{~s} \alpha_{i} & \mathrm{c} \alpha_{i} \mathrm{c} \beta_{i} & d_{i} \\
0 & 0 & 0 & 1
\end{array}\right]
\end{aligned}
\tag{公式1}</script><p>代码实现如下所示：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[T]</span> = <span class="title">T_itoiplus1</span><span class="params">(alpha,d,theta,a,beta)</span></span></span><br><span class="line"><span class="comment">%连杆转换关系实现函数</span></span><br><span class="line">T = [</span><br><span class="line"><span class="built_in">cos</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>) - <span class="built_in">sin</span>(alpha)*<span class="built_in">sin</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>),     -<span class="built_in">cos</span>(alpha)*<span class="built_in">sin</span>(theta),     <span class="built_in">cos</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>)+<span class="built_in">sin</span>(alpha)*<span class="built_in">sin</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>),       a*<span class="built_in">cos</span>(theta);</span><br><span class="line"><span class="built_in">sin</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>) + <span class="built_in">sin</span>(alpha)*<span class="built_in">cos</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>),     <span class="built_in">cos</span>(alpha)*<span class="built_in">cos</span>(theta),      <span class="built_in">sin</span>(theta)*<span class="built_in">sin</span>(<span class="built_in">beta</span>)-<span class="built_in">sin</span>(alpha)*<span class="built_in">cos</span>(theta)*<span class="built_in">cos</span>(<span class="built_in">beta</span>),       a*<span class="built_in">sin</span>(theta);</span><br><span class="line">-<span class="built_in">cos</span>(alpha)*<span class="built_in">sin</span>(<span class="built_in">beta</span>),  <span class="built_in">sin</span>(alpha), <span class="built_in">cos</span>(alpha)*<span class="built_in">cos</span>(<span class="built_in">beta</span>), d;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>之后，将理论DH参数表代入==公式1==中，并将转换矩阵连乘，得到机器人末端相对于机器人基坐标系的转换关系，根据此转换关系，在分别指定6个关节角度的前提下，可以得到当机器人末端相对于基坐标系的位姿。代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[pos]</span> = <span class="title">Positive</span><span class="params">(theta,dh)</span></span></span><br><span class="line"><span class="comment">%正解</span></span><br><span class="line">T1 = T_itoiplus1(dh(<span class="number">1</span>,<span class="number">1</span>),dh(<span class="number">1</span>,<span class="number">2</span>),theta(<span class="number">1</span>)+dh(<span class="number">1</span>,<span class="number">3</span>),dh(<span class="number">1</span>,<span class="number">4</span>),dh(<span class="number">1</span>,<span class="number">5</span>));</span><br><span class="line">T2 = T_itoiplus1(dh(<span class="number">2</span>,<span class="number">1</span>),dh(<span class="number">2</span>,<span class="number">2</span>),theta(<span class="number">2</span>)+dh(<span class="number">2</span>,<span class="number">3</span>),dh(<span class="number">2</span>,<span class="number">4</span>),dh(<span class="number">2</span>,<span class="number">5</span>));</span><br><span class="line">T3 = T_itoiplus1(dh(<span class="number">3</span>,<span class="number">1</span>),dh(<span class="number">3</span>,<span class="number">2</span>),theta(<span class="number">3</span>)+dh(<span class="number">3</span>,<span class="number">3</span>),dh(<span class="number">3</span>,<span class="number">4</span>),dh(<span class="number">3</span>,<span class="number">5</span>));</span><br><span class="line">T4 = T_itoiplus1(dh(<span class="number">4</span>,<span class="number">1</span>),dh(<span class="number">4</span>,<span class="number">2</span>),theta(<span class="number">4</span>)+dh(<span class="number">4</span>,<span class="number">3</span>),dh(<span class="number">4</span>,<span class="number">4</span>),dh(<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">T5 = T_itoiplus1(dh(<span class="number">5</span>,<span class="number">1</span>),dh(<span class="number">5</span>,<span class="number">2</span>),theta(<span class="number">5</span>)+dh(<span class="number">5</span>,<span class="number">3</span>),dh(<span class="number">5</span>,<span class="number">4</span>),dh(<span class="number">5</span>,<span class="number">5</span>));</span><br><span class="line">T6 = T_itoiplus1(dh(<span class="number">6</span>,<span class="number">1</span>),dh(<span class="number">6</span>,<span class="number">2</span>),theta(<span class="number">6</span>)+dh(<span class="number">6</span>,<span class="number">3</span>),dh(<span class="number">6</span>,<span class="number">4</span>),dh(<span class="number">6</span>,<span class="number">5</span>));</span><br><span class="line">T7 = T_itoiplus1(dh(<span class="number">7</span>,<span class="number">1</span>),dh(<span class="number">7</span>,<span class="number">2</span>),dh(<span class="number">7</span>,<span class="number">3</span>),dh(<span class="number">7</span>,<span class="number">4</span>),dh(<span class="number">7</span>,<span class="number">5</span>));</span><br><span class="line">T = T1*T2*T3*T4*T5*T6*T7;</span><br><span class="line">pos(<span class="number">1</span>) = T(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">pos(<span class="number">2</span>) = T(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">pos(<span class="number">3</span>) = T(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">pos(<span class="number">4</span>) = <span class="built_in">atan2</span>(T(<span class="number">2</span>,<span class="number">1</span>),T(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">pos(<span class="number">5</span>) = <span class="built_in">atan2</span>(-T(<span class="number">3</span>,<span class="number">1</span>),<span class="built_in">sqrt</span>(T(<span class="number">1</span>,<span class="number">1</span>)*T(<span class="number">1</span>,<span class="number">1</span>)+T(<span class="number">2</span>,<span class="number">1</span>)*T(<span class="number">2</span>,<span class="number">1</span>)));</span><br><span class="line">pos(<span class="number">6</span>) = <span class="built_in">atan2</span>(T(<span class="number">3</span>,<span class="number">2</span>),T(<span class="number">3</span>,<span class="number">3</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(pos(<span class="number">5</span>)*<span class="number">180</span>/<span class="built_in">pi</span><span class="number">-90</span>)&lt;<span class="number">0.01</span>)</span><br><span class="line">    pos(<span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">    pos(<span class="number">5</span>) = <span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line">    pos(<span class="number">6</span>) = <span class="built_in">atan2</span>(T(<span class="number">1</span>,<span class="number">2</span>),T(<span class="number">2</span>,<span class="number">2</span>));   </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(pos(<span class="number">5</span>)*<span class="number">180</span>/<span class="built_in">pi</span>+<span class="number">90</span>)&lt;<span class="number">0.01</span>)</span><br><span class="line">    pos(<span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">    pos(<span class="number">5</span>) = -<span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line">    pos(<span class="number">6</span>) = -<span class="built_in">atan2</span>(T(<span class="number">1</span>,<span class="number">2</span>),T(<span class="number">2</span>,<span class="number">2</span>)); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>为验证上述过程的正确性，将6个分别为0;0;-pi/2;pi/2;0;0关节角度代入上述过程，与机器人理论外形对比，经过验证后发现，正解模型正确；求解出的末端位姿与机器人实际外形数据如下所示：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128112817.png" alt=""></p>
<p>图1：根据正解模型求解出的末端位姿</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128112906.png" alt=""></p>
<p>图2：真实的KUKA210参数</p>
<h3 id="2-2-采样获取实际位姿"><a href="#2-2-采样获取实际位姿" class="headerlink" title="2.2 采样获取实际位姿"></a>2.2 采样获取实际位姿</h3><p>在正解模型正确的前提下，为获取实际机器人的末端位姿，采用仿真的手段，将误差参数补偿进DH参数中，并随机采样100个点，得到100组机器人末端位姿数据，为后续的参数辨识及绝对定位误差比较环节提供数据基础。</p>
<p>与2.1节过程同理，将误差参数表与理论DH表相加，得到新的DH表，并代入正解模型中，得到的机器人末端位姿数据可以看做是由实际的机器人的实验数据；</p>
<p>其次，利用随机数生成6*100组随机数据，分布在0-30度之间，代表了100组不同的关节角度集合，输入实际正解模型中得到100组不同的末端位姿数据；</p>
<p>然后，将100组随机数也同样输入理论正解模型中，得到100组末端位姿的理论值；</p>
<p>最后，将理论值与实际值比较，可以得出下图所示的绝对定位误差图</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128114533.png" alt=""></p>
<p>此图为实际的末端位姿与理论的末端位姿之间的误差图，此图将作为判断后续参数辨识环节是否正确的主要依据，如将辨识后的参数输入正解模型，与理论值之间产生的误差与此图不符，则可以判断出参数辨识出错，若完全重合，则说明误差参数辨识正确。</p>
<p>此环节代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 100组数据随机走</span></span><br><span class="line">theta =[<span class="number">0</span>;<span class="number">0</span>;-<span class="built_in">pi</span>/<span class="number">2</span>;<span class="built_in">pi</span>/<span class="number">2</span>;<span class="number">0</span>;<span class="number">0</span>];</span><br><span class="line">DHpos = Positive(theta,DH);</span><br><span class="line">newDH = DH+[delta;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">newPos = Positive(theta,newDH);</span><br><span class="line">err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">x_err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">y_err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">z_err = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">delta_p = <span class="built_in">zeros</span>(<span class="number">300</span>,<span class="number">1</span>);</span><br><span class="line">r = randi(<span class="number">30</span>,<span class="number">100</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">100</span></span><br><span class="line">    theta = r(<span class="built_in">i</span>,:);</span><br><span class="line">    pos = Positive(theta,DH);</span><br><span class="line">    newPos = Positive(theta,newDH);</span><br><span class="line">    err(<span class="number">1</span>,<span class="built_in">i</span>) = <span class="built_in">sqrt</span>(power(newPos(<span class="number">1</span>,<span class="number">1</span>)-pos(<span class="number">1</span>,<span class="number">1</span>),<span class="number">2</span>)+power(newPos(<span class="number">1</span>,<span class="number">2</span>)-pos(<span class="number">1</span>,<span class="number">2</span>),<span class="number">2</span>)+power(newPos(<span class="number">1</span>,<span class="number">3</span>)-pos(<span class="number">1</span>,<span class="number">3</span>),<span class="number">2</span>));</span><br><span class="line">    delta_p((<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">3</span>+<span class="number">1</span>,<span class="number">1</span>) = newPos(<span class="number">1</span>,<span class="number">1</span>)-pos(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    delta_p((<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">3</span>+<span class="number">2</span>,<span class="number">1</span>) = newPos(<span class="number">1</span>,<span class="number">2</span>)-pos(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    delta_p((<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">3</span>+<span class="number">3</span>,<span class="number">1</span>) = newPos(<span class="number">1</span>,<span class="number">3</span>)-pos(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    x_err(<span class="number">1</span>,<span class="built_in">i</span>) = newPos(<span class="number">1</span>,<span class="number">1</span>)-pos(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    y_err(<span class="number">1</span>,<span class="built_in">i</span>) = newPos(<span class="number">1</span>,<span class="number">2</span>)-pos(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    z_err(<span class="number">1</span>,<span class="built_in">i</span>) = newPos(<span class="number">1</span>,<span class="number">3</span>)-pos(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="3-参数辨识"><a href="#3-参数辨识" class="headerlink" title="3. 参数辨识"></a>3. 参数辨识</h2><p>误差参数辨识的主要任务在于，根据机器人的定位误差，迭代求解机器人各个连杆的参数误差，实现机器人实际运动学参数的标定。</p>
<p>考虑使用机器人的位置误差进行机器人运动学参数的标定，设机器人末端的理论位置是$p$，其位置误差记为$Δp$，有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta \boldsymbol{p} &=\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{\theta}} \Delta \boldsymbol{\theta}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{d}} \Delta \boldsymbol{d}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{a}} \Delta \boldsymbol{a}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{\alpha}} \Delta \boldsymbol{\alpha}+\frac{\partial \boldsymbol{p}}{\partial \boldsymbol{\beta}} \Delta \boldsymbol{\beta} \\
&=\boldsymbol{J}_{\theta} \Delta \boldsymbol{\theta}+\boldsymbol{J}_{d} \Delta \boldsymbol{d}+\boldsymbol{J}_{a} \Delta \boldsymbol{a}+\boldsymbol{J}_{\alpha} \Delta \boldsymbol{\alpha}+\boldsymbol{J}_{\beta} \Delta \boldsymbol{\beta}
\end{aligned}
\tag{公式2}</script><p>式中，$J<em>{\theta}$、$Jd$、$Ja$、$J</em>{\alpha}$和$J_{\beta}$ 是由机器人理论运动学参数构成的$3 * n$ 矩阵：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{J}_{\theta} &=\left[\begin{array}{llll}
\partial \boldsymbol{p}_{/ \partial \theta_{1}} & \partial \boldsymbol{p}_{/ \partial \theta_{2}} & \cdots & \partial \boldsymbol{p}_{/ \partial \theta_{n}}
\end{array}\right] \\
\boldsymbol{J}_{d} &=\left[\begin{array}{lll}
\partial \boldsymbol{p}_{/ \partial d_{1}} & \partial \boldsymbol{p}_{/ \partial d_{2}} & \cdots & \partial \boldsymbol{p} / \partial d_{n}
\end{array}\right] \\
\boldsymbol{J}_{a} &=\left[\begin{array}{lll}
\partial \boldsymbol{p} / \partial a_{1} & \partial \boldsymbol{p}_{/ \partial a_{2}} & \cdots & \partial \boldsymbol{p} / \partial a_{n}
\end{array}\right] \\
\boldsymbol{J}_{\alpha} &=\left[\begin{array}{lll}
\partial \boldsymbol{p} / \partial \alpha_{1} & \partial \boldsymbol{p} / \partial \alpha_{2} & \cdots & \partial \boldsymbol{p} / \partial \alpha_{n}
\end{array}\right] \\
\boldsymbol{J}_{\beta} &=\left[\begin{array}{ll}
\partial \boldsymbol{p}_{/ \partial \beta_{1}} & \partial \boldsymbol{p}_{/ \partial \beta_{2}} & \cdots & \partial \boldsymbol{p}_{/ \partial \beta_{n}}
\end{array}\right]
\end{aligned}</script><p>若测量了$m$ 组机器人的定位误差，由==公式2==可以得到：</p>
<script type="math/tex; mode=display">
\left[\begin{array}{c}
\Delta \boldsymbol{p}^{(1)} \\
\Delta \boldsymbol{p}^{(2)} \\
\vdots \\
\Delta \boldsymbol{p}^{(m)}
\end{array}\right]=\left[\begin{array}{ccccc}
\boldsymbol{J}_{\theta}^{(1)} & \boldsymbol{J}_{d}^{(1)} & \boldsymbol{J}_{a}^{(1)} & \boldsymbol{J}_{\alpha}^{(1)} & \boldsymbol{J}_{\beta}^{(1)} \\
\boldsymbol{J}_{\theta}^{(2)} & \boldsymbol{J}_{d}^{(2)} & \boldsymbol{J}_{a}^{(2)} & \boldsymbol{J}_{\alpha}^{(2)} & \boldsymbol{J}_{\beta}^{(2)} \\
\vdots & \vdots & \vdots & \vdots & \vdots \\
\boldsymbol{J}_{\theta}^{(m)} & \boldsymbol{J}_{d}^{(m)} & \boldsymbol{J}_{a}^{(m)} & \boldsymbol{J}_{\alpha}^{(m)} & \boldsymbol{J}_{\beta}^{(m)}
\end{array}\right]\left[\begin{array}{c}
\Delta \boldsymbol{\theta} \\
\Delta \boldsymbol{d} \\
\Delta \boldsymbol{a} \\
\Delta \boldsymbol{\alpha} \\
\Delta \boldsymbol{\beta}
\end{array}\right]</script><p>上式可以写成：$\Delta \boldsymbol{P}=\boldsymbol{J} \cdot \Delta \boldsymbol{\rho}$</p>
<p>其中，$Δ\rho$ 是由机器人各连杆参数误差所构成的列向量。</p>
<p>这样，机器人运动学参数误差辨识问题就被化为形如$Ax = b$ 的线性方程组的求解问题；</p>
<p>使用Levenberg-Marquardt 算法进行迭代求解，其第k 步迭代过程如下：</p>
<ul>
<li>根据机器人各连杆参数计算矩阵$J({\rho}_k)$；</li>
<li>根据下式计算机器人各连杆参数误差$Δ\rho_k$：</li>
</ul>
<script type="math/tex; mode=display">
\Delta \boldsymbol{\rho}_{k}=-\left[\boldsymbol{J}\left(\boldsymbol{\rho}_{k}\right)^{\top} \boldsymbol{J}\left(\boldsymbol{\rho}_{k}\right)+\mu_{k} \boldsymbol{I}\right]^{-1} \boldsymbol{J}\left(\boldsymbol{\rho}_{k}\right)^{\top} \Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k}\right)</script><p>其中，$\mu_k$ 是阻尼系数，可以根据下式进行计算：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{l}
\mu_{0}=0.001 \\
\mu_{k+1}=\left\{\begin{array}{ll}
0.001 \lambda & \left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k+1}\right)\right\| \geq\left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k}\right)\right\| \\
0.001 / \lambda & \left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k+1}\right)\right\|<\left\|\Delta \boldsymbol{P}\left(\boldsymbol{\rho}_{k}\right)\right\|
\end{array}\right. \\
2.5<\lambda<10
\end{array}\right.</script><ul>
<li><p>利用$\rho<em>{k+1}=\rho</em>{k}+\Delta \rho_{k}$更新机器人各连杆参数。</p>
</li>
<li><p>重复上述步骤，即可得到机器人各连杆参数的误差。</p>
</li>
</ul>
<p>代码实现如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 求解方程系数</span></span><br><span class="line">syms theta1 theta2 theta3 theta4 theta5 theta6;</span><br><span class="line">syms d1 d2 d3 d4 d5 d6;</span><br><span class="line">syms a1 a2 a3 a4 a5 a6;</span><br><span class="line">syms alpha1 alpha2 alpha3 alpha4 alpha5 alpha6;</span><br><span class="line">syms beta1 beta2 beta3 beta4 beta5 beta6;</span><br><span class="line">symstheta = [theta1 theta2 theta3 theta4 theta5 theta6];</span><br><span class="line">symsd = [d1 d2 d3 d4 d5 d6;];</span><br><span class="line">symsa = [a1 a2 a3 a4 a5 a6];</span><br><span class="line">symsalpha = [alpha1 alpha2 alpha3 alpha4 alpha5 alpha6];</span><br><span class="line">symsbeta = [beta1 beta2 beta3 beta4 beta5 beta6];</span><br><span class="line">J = <span class="built_in">zeros</span>(<span class="number">300</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">3</span>:<span class="number">300</span></span><br><span class="line">    theta = r((<span class="built_in">i</span><span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>,:);</span><br><span class="line">    item = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">     <span class="comment">%求出j_theta_i</span></span><br><span class="line">    pos_theta = symPostive(symstheta,item,item,item,item,DH);</span><br><span class="line">    a_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta1&#x27;</span>),symstheta,theta));</span><br><span class="line">    b_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta2&#x27;</span>),symstheta,theta));</span><br><span class="line">    c_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta3&#x27;</span>),symstheta,theta));</span><br><span class="line">    d_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta4&#x27;</span>),symstheta,theta));</span><br><span class="line">    e_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta5&#x27;</span>),symstheta,theta));</span><br><span class="line">    f_theta = transpose(subs(diff(pos_theta,<span class="string">&#x27;theta6&#x27;</span>),symstheta,theta));</span><br><span class="line">    j_theta_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_theta_i(:,<span class="number">1</span>) = a_theta;</span><br><span class="line">    j_theta_i(:,<span class="number">2</span>) = b_theta;</span><br><span class="line">    j_theta_i(:,<span class="number">3</span>) = c_theta;</span><br><span class="line">    j_theta_i(:,<span class="number">4</span>) = d_theta;    </span><br><span class="line">    j_theta_i(:,<span class="number">5</span>) = e_theta;    </span><br><span class="line">    j_theta_i(:,<span class="number">6</span>) = f_theta;    </span><br><span class="line">    <span class="comment">%求j_d_i</span></span><br><span class="line">    pos_d = symPostive(theta,symsd,item,item,item,DH);</span><br><span class="line">    a_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d1&#x27;</span>),symsd,item));</span><br><span class="line">    b_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d2&#x27;</span>),symsd,item));</span><br><span class="line">    c_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d3&#x27;</span>),symsd,item));</span><br><span class="line">    d_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d4&#x27;</span>),symsd,item));</span><br><span class="line">    e_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d5&#x27;</span>),symsd,item));</span><br><span class="line">    f_d = transpose(subs(diff(pos_d,<span class="string">&#x27;d6&#x27;</span>),symsd,item));</span><br><span class="line">    j_d_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_d_i(:,<span class="number">1</span>) = a_d;</span><br><span class="line">    j_d_i(:,<span class="number">2</span>) = b_d;</span><br><span class="line">    j_d_i(:,<span class="number">3</span>) = c_d;</span><br><span class="line">    j_d_i(:,<span class="number">4</span>) = d_d;    </span><br><span class="line">    j_d_i(:,<span class="number">5</span>) = e_d;    </span><br><span class="line">    j_d_i(:,<span class="number">6</span>) = f_d;</span><br><span class="line">    <span class="comment">%求j_a_i</span></span><br><span class="line">    pos_a = symPostive(theta,item,symsa,item,item,DH);</span><br><span class="line">    a_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a1&#x27;</span>),symsa,item));</span><br><span class="line">    b_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a2&#x27;</span>),symsa,item));</span><br><span class="line">    c_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a3&#x27;</span>),symsa,item));</span><br><span class="line">    d_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a4&#x27;</span>),symsa,item));</span><br><span class="line">    e_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a5&#x27;</span>),symsa,item));</span><br><span class="line">    f_a = transpose(subs(diff(pos_a,<span class="string">&#x27;a6&#x27;</span>),symsa,item));</span><br><span class="line">    j_a_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_a_i(:,<span class="number">1</span>) = a_a;</span><br><span class="line">    j_a_i(:,<span class="number">2</span>) = b_a;</span><br><span class="line">    j_a_i(:,<span class="number">3</span>) = c_a;</span><br><span class="line">    j_a_i(:,<span class="number">4</span>) = d_a;    </span><br><span class="line">    j_a_i(:,<span class="number">5</span>) = e_a;    </span><br><span class="line">    j_a_i(:,<span class="number">6</span>) = f_a;</span><br><span class="line">    <span class="comment">%求j_alpha_i</span></span><br><span class="line">    pos_alpha = symPostive(theta,item,item,symsalpha,item,DH);</span><br><span class="line">    a_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha1&#x27;</span>),symsalpha,item));</span><br><span class="line">    b_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha2&#x27;</span>),symsalpha,item));</span><br><span class="line">    c_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha3&#x27;</span>),symsalpha,item));</span><br><span class="line">    d_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha4&#x27;</span>),symsalpha,item));</span><br><span class="line">    e_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha5&#x27;</span>),symsalpha,item));</span><br><span class="line">    f_alpha = transpose(subs(diff(pos_alpha,<span class="string">&#x27;alpha6&#x27;</span>),symsalpha,item));</span><br><span class="line">    j_alpha_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_alpha_i(:,<span class="number">1</span>) = a_alpha;</span><br><span class="line">    j_alpha_i(:,<span class="number">2</span>) = b_alpha;</span><br><span class="line">    j_alpha_i(:,<span class="number">3</span>) = c_alpha;</span><br><span class="line">    j_alpha_i(:,<span class="number">4</span>) = d_alpha;    </span><br><span class="line">    j_alpha_i(:,<span class="number">5</span>) = e_alpha;    </span><br><span class="line">    j_alpha_i(:,<span class="number">6</span>) = f_alpha;</span><br><span class="line">    <span class="comment">%求j_beta_i</span></span><br><span class="line">    pos_beta = symPostive(theta,item,item,item,symsbeta,DH);</span><br><span class="line">    a_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta1&#x27;</span>),symsbeta,item));</span><br><span class="line">    b_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta2&#x27;</span>),symsbeta,item));</span><br><span class="line">    c_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta3&#x27;</span>),symsbeta,item));</span><br><span class="line">    d_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta4&#x27;</span>),symsbeta,item));</span><br><span class="line">    e_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta5&#x27;</span>),symsbeta,item));</span><br><span class="line">    f_beta = transpose(subs(diff(pos_beta,<span class="string">&#x27;beta6&#x27;</span>),symsbeta,item));</span><br><span class="line">    j_beta_i = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    j_beta_i(:,<span class="number">1</span>) = a_beta;</span><br><span class="line">    j_beta_i(:,<span class="number">2</span>) = b_beta;</span><br><span class="line">    j_beta_i(:,<span class="number">3</span>) = c_beta;</span><br><span class="line">    j_beta_i(:,<span class="number">4</span>) = d_beta;    </span><br><span class="line">    j_beta_i(:,<span class="number">5</span>) = e_beta;    </span><br><span class="line">    j_beta_i(:,<span class="number">6</span>) = f_beta;</span><br><span class="line">    <span class="comment">%放到J中</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_theta_i(<span class="number">1</span>,<span class="built_in">j</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_theta_i(<span class="number">2</span>,<span class="built_in">j</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_theta_i(<span class="number">3</span>,<span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">7</span>:<span class="number">12</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_d_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">1</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_d_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">1</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_d_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">13</span>:<span class="number">18</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_a_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">2</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_a_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">2</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_a_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">19</span>:<span class="number">24</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_alpha_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">3</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_alpha_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">3</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_alpha_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">25</span>:<span class="number">30</span></span><br><span class="line">        J(<span class="built_in">i</span>,<span class="built_in">j</span>) = j_beta_i(<span class="number">1</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">4</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>) = j_beta_i(<span class="number">2</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">4</span>);</span><br><span class="line">        J(<span class="built_in">i</span>+<span class="number">2</span>,<span class="built_in">j</span>) = j_beta_i(<span class="number">3</span>,<span class="built_in">j</span><span class="number">-6</span>*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 求解线性方程组</span></span><br><span class="line">delta_pk = -inv(transpose(J)*J+<span class="number">0.001</span>*<span class="built_in">eye</span>(<span class="number">30</span>,<span class="number">30</span>))*transpose(J)*delta_p;</span><br><span class="line"><span class="comment">%delta_p = J\delta_p;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-绝对定位误差比较"><a href="#4-绝对定位误差比较" class="headerlink" title="4. 绝对定位误差比较"></a>4. 绝对定位误差比较</h2><p>将得到的辨识出的误差参数，代入正解模型中，并走100组随机关节角度集合，将理论位姿与实际位姿作比较，得出绝对定位误差；将题目给的真实误差参数代入正解模型中，走同样的100组数据，得出另外一组绝对定位误差，将两组绝对定位误差放在一起比较，如下图所示，可以看出两组绝对定位误差折线完全重合，说明参数辨识正确。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210128114105.png" alt=""></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>xml操作</title>
    <url>/2021/01/14/xml%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="XML操作"><a href="#XML操作" class="headerlink" title="XML操作"></a>XML操作</h1><h2 id="XML文本"><a href="#XML文本" class="headerlink" title="XML文本"></a>XML文本</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">skills</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">skill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">lang</span> =<span class="string">&quot;cn&quot;</span>&gt;</span>天下无敌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">damage</span>&gt;</span>123<span class="tag">&lt;/<span class="name">damage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">skill</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">skill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>4<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">lang</span> =<span class="string">&quot;cn&quot;</span>&gt;</span>宇宙无敌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">damage</span>&gt;</span>1231<span class="tag">&lt;/<span class="name">damage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">skill</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">skill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>5<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">lang</span> =<span class="string">&quot;cn&quot;</span>&gt;</span>多个平行宇宙无敌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">damage</span>&gt;</span>12331<span class="tag">&lt;/<span class="name">damage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">skill</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">skills</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="对应的解析代码"><a href="#对应的解析代码" class="headerlink" title="对应的解析代码"></a>对应的解析代码</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line">namespace xml操作</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//创建技能信息集合，用来存储所有集合</span></span><br><span class="line">            List&lt;skill&gt; skilllist = <span class="keyword">new</span> List&lt;skill&gt;();</span><br><span class="line">            <span class="comment">//XmlDocument 文档解析类</span></span><br><span class="line">            XmlDocument xmldoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//xmldoc.Load(&quot;TextFile1.txt&quot;);//选择要加载解析的xml文档</span></span><br><span class="line">            xmldoc.LoadXml(File.ReadAllText(<span class="string">&quot;TextFile1.txt&quot;</span>));<span class="comment">//同上</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到根节点</span></span><br><span class="line">            XmlNode rootNode = xmldoc.FirstChild;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到子节点</span></span><br><span class="line">            XmlNodeList childrenListNode = rootNode.ChildNodes;<span class="comment">//获取根节点下的所有子节点集合</span></span><br><span class="line">            <span class="keyword">foreach</span> (XmlNode skillNode <span class="keyword">in</span> childrenListNode)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//创建skill对象</span></span><br><span class="line">                skill skill = <span class="keyword">new</span> skill();</span><br><span class="line">                XmlNodeList childchildNodeList = skillNode.ChildNodes;<span class="comment">//获取所有的子节点下的子节点</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//遍历子节点的子节点</span></span><br><span class="line">                <span class="keyword">foreach</span> (XmlNode childchildNode <span class="keyword">in</span> childchildNodeList)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//通过name属性可以获取节点属性</span></span><br><span class="line">                    <span class="keyword">if</span> (childchildNode.Name == <span class="string">&quot;id&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        skill.id = <span class="built_in">int</span>.Parse(childchildNode.InnerText);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (childchildNode.Name == <span class="string">&quot;name&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        skill.name = childchildNode.InnerText;</span><br><span class="line">                        skill.lang = childchildNode.Attributes[<span class="number">0</span>].Value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (childchildNode.Name == <span class="string">&quot;damage&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        skill.damage = <span class="built_in">int</span>.Parse(childchildNode.InnerText);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                skill.printSkillValues();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab学习笔记</title>
    <url>/2021/01/11/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Matlab学习笔记"><a href="#Matlab学习笔记" class="headerlink" title="Matlab学习笔记"></a>Matlab学习笔记</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">矩阵格式</span><br><span class="line">x=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">x*y</span><br><span class="line">x.*y</span><br><span class="line">对于矩阵来说是不同的</span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">y = <span class="number">7</span>;</span><br><span class="line">x + y</span><br><span class="line">加分号的话，matlab的命令区不会显示（屏蔽）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C = input(<span class="string">&#x27;please enter a temporary .c :&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fprintf(<span class="string">&#x27;华氏度=%f\n&#x27;</span>,F);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fprintf(<span class="string">&#x27;%g + %g = %g\n&#x27;</span>,x,y,x+y);</span><br><span class="line">&gt;&gt; tutorial2_1</span><br><span class="line">please enter x :<span class="number">8</span></span><br><span class="line">please enter y :<span class="number">9</span></span><br><span class="line"><span class="number">8</span> + <span class="number">9</span> = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% if 格式</span></span><br><span class="line">x=input(<span class="string">&#x27;please enter x :&#x27;</span>);</span><br><span class="line">y=input(<span class="string">&#x27;please enter y :&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">10</span>)</span><br><span class="line">    fprintf(<span class="string">&#x27;%g + %g = %g\n&#x27;</span>,x,y,x+y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    fprintf(<span class="string">&#x27;gg\n&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%取余</span></span><br><span class="line"><span class="built_in">mod</span>(<span class="number">19</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%求最大公约数</span></span><br><span class="line">a= input(<span class="string">&#x27;请输入数字1：&#x27;</span>);</span><br><span class="line">b= input(<span class="string">&#x27;请输入数字2：&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">mod</span>(a,b)~= <span class="number">0</span>)</span><br><span class="line">    a =b;</span><br><span class="line">    b = <span class="built_in">mod</span>(a,b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%矩阵元素遍历</span></span><br><span class="line">v =[<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line">s =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = v</span><br><span class="line">    <span class="built_in">disp</span>(<span class="built_in">i</span>);</span><br><span class="line">    s =s +<span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(s);</span><br><span class="line"><span class="built_in">disp</span>(sum(v));<span class="comment">%matlab自带求和</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">%s是返回值，x,y是传入的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> = <span class="title">Hanshu1</span><span class="params">( x ,y )</span></span></span><br><span class="line">    v =[<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,x,y];</span><br><span class="line">    s =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = v</span><br><span class="line">        <span class="built_in">disp</span>(<span class="built_in">i</span>);</span><br><span class="line">        s =s +<span class="built_in">i</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="built_in">disp</span>(s);</span><br><span class="line">    <span class="built_in">disp</span>(sum(v));<span class="comment">%matlab自带求和</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;blue-o&#x27;</span>,x,y,<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">axis equal</span><br><span class="line"></span><br><span class="line"><span class="comment">%将窗口划分为2*3，在第1个里面画图</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x1 = <span class="number">0</span>:<span class="number">1</span>:<span class="number">10</span>;</span><br><span class="line">x2 = <span class="number">0</span>:<span class="number">1</span>:<span class="number">10</span>;</span><br><span class="line">y1 = x1.*x1;</span><br><span class="line">y2 = <span class="number">10</span>:<span class="number">1</span>:<span class="number">20</span>;</span><br><span class="line"><span class="built_in">plot</span>(x1,y1,<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x2,y2,<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="comment">%添加网格</span></span><br><span class="line">grid on;</span><br><span class="line"><span class="comment">%添加标题</span></span><br><span class="line">title(<span class="string">&#x27;sdfsdfsdf&#x27;</span>);</span><br><span class="line"><span class="comment">%添加标签</span></span><br><span class="line">xlabel(<span class="string">&#x27;sdfsdfsdfsdfs&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;sdfsdddddddddddd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="number">-1</span>:<span class="number">0.1</span>:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">y1 = <span class="built_in">sin</span>(x);</span><br><span class="line">y2 = <span class="built_in">sin</span>(<span class="number">2</span>*x);</span><br><span class="line">y3 = <span class="built_in">sin</span>(<span class="number">3</span>*x);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y1);</span><br><span class="line">title(<span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y2);</span><br><span class="line">title(<span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">plot</span>(x,y3);</span><br><span class="line">title(<span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=<span class="number">-3</span>:<span class="number">0.1</span>:<span class="number">3</span>;</span><br><span class="line">y=<span class="number">-3</span>:<span class="number">0.1</span>:<span class="number">3</span>;</span><br><span class="line">[X,Y] = <span class="built_in">meshgrid</span>(x,y);</span><br><span class="line">Z=X.^<span class="number">2</span>+Y.^<span class="number">2</span>;</span><br><span class="line"><span class="comment">%画曲面</span></span><br><span class="line">surf(X,Y,Z);</span><br></pre></td></tr></table></figure>
<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%eye(3)---&gt;3x3单位矩阵</span></span><br><span class="line"><span class="comment">%ones(3)---&gt;3x3全一矩阵</span></span><br><span class="line">&gt;&gt; <span class="built_in">eye</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">&gt;&gt; <span class="built_in">ones</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 产生行向量</span></span><br><span class="line"><span class="comment">%linspace(a,b,n)</span></span><br><span class="line"><span class="comment">%n缺省时，默认产生100个元素</span></span><br><span class="line"><span class="built_in">linspace</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  <span class="number">1</span> 至 <span class="number">11</span> 列</span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">1.0404</span>    <span class="number">1.0808</span>    <span class="number">1.1212</span>    <span class="number">1.1616</span>    <span class="number">1.2020</span>    <span class="number">1.2424</span>    <span class="number">1.2828</span>    <span class="number">1.3232</span>    <span class="number">1.3636</span>    <span class="number">1.4040</span></span><br><span class="line">  <span class="number">12</span> 至 <span class="number">22</span> 列</span><br><span class="line">    <span class="number">1.4444</span>    <span class="number">1.4848</span>    <span class="number">1.5253</span>    <span class="number">1.5657</span>    <span class="number">1.6061</span>    <span class="number">1.6465</span>    <span class="number">1.6869</span>    <span class="number">1.7273</span>    <span class="number">1.7677</span>    <span class="number">1.8081</span>    <span class="number">1.8485</span></span><br><span class="line">  <span class="number">23</span> 至 <span class="number">33</span> 列</span><br><span class="line">    <span class="number">1.8889</span>    <span class="number">1.9293</span>    <span class="number">1.9697</span>    <span class="number">2.0101</span>    <span class="number">2.0505</span>    <span class="number">2.0909</span>    <span class="number">2.1313</span>    <span class="number">2.1717</span>    <span class="number">2.2121</span>    <span class="number">2.2525</span>    <span class="number">2.2929</span></span><br><span class="line">  <span class="number">34</span> 至 <span class="number">44</span> 列</span><br><span class="line">    <span class="number">2.3333</span>    <span class="number">2.3737</span>    <span class="number">2.4141</span>    <span class="number">2.4545</span>    <span class="number">2.4949</span>    <span class="number">2.5354</span>    <span class="number">2.5758</span>    <span class="number">2.6162</span>    <span class="number">2.6566</span>    <span class="number">2.6970</span>    <span class="number">2.7374</span></span><br><span class="line">  <span class="number">45</span> 至 <span class="number">55</span> 列</span><br><span class="line">    <span class="number">2.7778</span>    <span class="number">2.8182</span>    <span class="number">2.8586</span>    <span class="number">2.8990</span>    <span class="number">2.9394</span>    <span class="number">2.9798</span>    <span class="number">3.0202</span>    <span class="number">3.0606</span>    <span class="number">3.1010</span>    <span class="number">3.1414</span>    <span class="number">3.1818</span></span><br><span class="line">  <span class="number">56</span> 至 <span class="number">66</span> 列</span><br><span class="line">    <span class="number">3.2222</span>    <span class="number">3.2626</span>    <span class="number">3.3030</span>    <span class="number">3.3434</span>    <span class="number">3.3838</span>    <span class="number">3.4242</span>    <span class="number">3.4646</span>    <span class="number">3.5051</span>    <span class="number">3.5455</span>    <span class="number">3.5859</span>    <span class="number">3.6263</span></span><br><span class="line">  <span class="number">67</span> 至 <span class="number">77</span> 列</span><br><span class="line">    <span class="number">3.6667</span>    <span class="number">3.7071</span>    <span class="number">3.7475</span>    <span class="number">3.7879</span>    <span class="number">3.8283</span>    <span class="number">3.8687</span>    <span class="number">3.9091</span>    <span class="number">3.9495</span>    <span class="number">3.9899</span>    <span class="number">4.0303</span>    <span class="number">4.0707</span></span><br><span class="line">  <span class="number">78</span> 至 <span class="number">88</span> 列</span><br><span class="line">    <span class="number">4.1111</span>    <span class="number">4.1515</span>    <span class="number">4.1919</span>    <span class="number">4.2323</span>    <span class="number">4.2727</span>    <span class="number">4.3131</span>    <span class="number">4.3535</span>    <span class="number">4.3939</span>    <span class="number">4.4343</span>    <span class="number">4.4747</span>    <span class="number">4.5152</span></span><br><span class="line">  <span class="number">89</span> 至 <span class="number">99</span> 列</span><br><span class="line">    <span class="number">4.5556</span>    <span class="number">4.5960</span>    <span class="number">4.6364</span>    <span class="number">4.6768</span>    <span class="number">4.7172</span>    <span class="number">4.7576</span>    <span class="number">4.7980</span>    <span class="number">4.8384</span>    <span class="number">4.8788</span>    <span class="number">4.9192</span>    <span class="number">4.9596</span></span><br><span class="line">  <span class="number">100</span> 列</span><br><span class="line">    <span class="number">5.0000</span></span><br></pre></td></tr></table></figure>
<p>matlab矩阵元素的存储顺序按<strong>列</strong>存储；</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%在矩阵总元素保持不变的前提下，将矩阵A重新排列为m*n的二维矩阵</span></span><br><span class="line"><span class="built_in">reshape</span>(A,m,n)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A(:,<span class="built_in">j</span>)</span><br><span class="line"><span class="comment">%取A矩阵的第j列全部元素</span></span><br><span class="line">A(<span class="built_in">i</span>,:)</span><br><span class="line"><span class="comment">%取A矩阵的第i行全部元素</span></span><br><span class="line">A(<span class="built_in">i</span>,<span class="built_in">j</span>)</span><br><span class="line"><span class="comment">%取A矩阵的第i行,第j列的元素</span></span><br><span class="line">A(<span class="built_in">i</span>:<span class="built_in">i</span>+m,;)</span><br><span class="line"><span class="comment">%取A矩阵的第i-i+m行的全部元素</span></span><br><span class="line">A(:,k:k+m)</span><br><span class="line"><span class="comment">%取A矩阵的第k-k+m列的全部元素</span></span><br><span class="line">A(<span class="built_in">i</span>:<span class="built_in">i</span>+m,k:k+m)</span><br><span class="line"><span class="comment">%取A矩阵的第i-i+m行,第k-k+m列的全部元素</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>C#进程与线程</title>
    <url>/2021/01/11/C-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="501-进程与线程"><a href="#501-进程与线程" class="headerlink" title="501 进程与线程"></a>501 进程与线程</h2><ol>
<li><p>一般情况下，一个应用程序开启一个进程，开启多个线程</p>
</li>
<li><p>应用程序 —&gt; 进程1（车间）</p>
<p>​                  —&gt;线程1，2，3，。。（多个工人）</p>
</li>
<li><p>单个CPU只能开启并运行一个进程；</p>
</li>
<li><p>线程之中，某些内存区域在同一时间只能由一个线程访问；（互斥锁）</p>
</li>
</ol>
<p>​                                某些内存区域可以容纳固定数目的线程访问；（信号量）</p>
<ol>
<li>线程中语句的执行是从上到下的</li>
<li>多线程（异步多线程），同时执行</li>
</ol>
<h2 id="502-开启线程"><a href="#502-开启线程" class="headerlink" title="502 开启线程"></a>502 开启线程</h2><ol>
<li>委托开启（有一个参数）</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.通过委托，开启一个线程</span></span><br><span class="line">            Action&lt;<span class="built_in">int</span>&gt; a = Test;</span><br><span class="line">            <span class="comment">//开启一个新线程，执行a中引用的方法</span></span><br><span class="line">            a.BeginInvoke(<span class="number">100</span>,<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//可以认为线程是同时执行的（异步执行）</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有两个参数：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span> i,<span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.通过委托，开启一个线程</span></span><br><span class="line">            Action&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt; a = Test;</span><br><span class="line">            <span class="comment">//开启一个新线程，执行a中引用的方法</span></span><br><span class="line">            a.BeginInvoke(<span class="number">100</span>,<span class="string">&quot;s&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//可以认为线程是同时执行的（异步执行）</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有返回值：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//为比较耗时的操作开启单独的线程，如下载</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span> i,<span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">            <span class="comment">//当前线程休眠100ms，即暂停0.1s</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.通过委托，开启一个线程</span></span><br><span class="line">            Func&lt;<span class="built_in">int</span>,<span class="built_in">string</span>,<span class="built_in">int</span>&gt; a = Test;</span><br><span class="line">            <span class="comment">//开启一个新线程，执行a中引用的方法</span></span><br><span class="line">            <span class="comment">//IAsyncResult---取得线程状态</span></span><br><span class="line">            IAsyncResult ar = a.BeginInvoke(<span class="number">100</span>,<span class="string">&quot;s&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//可以认为线程是同时执行的（异步执行）</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            <span class="comment">//判断当前线程状态</span></span><br><span class="line">            <span class="keyword">while</span>(ar.IsCompleted == <span class="literal">false</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="comment">//控制检测频率</span></span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取得异步线程的返回值</span></span><br><span class="line">            <span class="built_in">int</span> result = a.EndInvoke(ar);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="601-socket编程"><a href="#601-socket编程" class="headerlink" title="601 socket编程"></a>601 socket编程</h2><ol>
<li>通信协议：TCP ; UDP</li>
<li>服务器端创建Socket；客户端创建Socket；</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/01/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式语言是一种专门用于字符串处理的语言</p>
<ul>
<li><p>检索：通过正则表达式，从字符串中获取我们想要的部分</p>
</li>
<li><p>匹配：判断给定的字符串是否符合正则表达式的过滤逻辑</p>
</li>
</ul>
<p>正则表达式表述了一个字符串的书写规则</p>
<hr>
<p>正则表达式就是由普通字符以及特殊字符（成为元字符）组成的文字模式。</p>
<hr>
<p>常用元字符：</p>
<p>^  匹配必须出现在字符串的开头或行的开头</p>
<p>$  匹配必须出现在以下位置：字符串结尾、字符串结尾处的 \n 之前或行的结尾。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正则表达式（字符串处理语言）</span></span><br><span class="line">        <span class="comment">//检索 + 匹配</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;sdfsdfsdfsdfsdfsdfdsfasdf发士大夫士大夫&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> ss = Regex.Replace(s, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;被替换成的字符串&quot;</span>);<span class="comment">//匹配字符串的开头，并替换成&quot;被替换成的字符串&quot;</span></span><br><span class="line">            Console.WriteLine(ss);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正则表达式（字符串处理语言）</span></span><br><span class="line">        <span class="comment">//检索 + 匹配</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;sdfsdfsdfsdfsdfsdfdsfasdf发士大夫士大夫&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> ss = Regex.Replace(s, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;结尾被替换成的字符串&quot;</span>);<span class="comment">//匹配字符串的开头，并替换成&quot;被替换成的字符串&quot;</span></span><br><span class="line">            Console.WriteLine(ss);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本语法元字符：</p>
<blockquote>
<p>.                           匹配除换行符以外的任意字符</p>
<p>\w                       匹配字母、数字、下划线、汉字 (指大小写字母、0-9的数字、下划线_)</p>
<p>\W                       \w的补集 （ 除“大小写字母、0-9的数字、下划线_”之外）</p>
<p>\s                        匹配任意空白符 (包括换行符/n、回车符/r、制表符/t、垂直制表符/v、换页符/f)</p>
<p>\S                        \s的补集 (除\s定义的字符之外)</p>
<p>\d                        匹配数字 (0-9数字)</p>
<p>\D                        表示\d的补集 (除0-9数字之外)</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只输入数字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = Console.ReadLine();</span><br><span class="line">            <span class="built_in">bool</span> isMatch = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i =<span class="number">0</span>;i&lt;s.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] &lt; <span class="string">&#x27;0&#x27;</span> || s[i] &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    isMatch = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;密码&quot;</span> + isMatch);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只输入数字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = Console.ReadLine();</span><br><span class="line"> <span class="comment">//           string pattern = @&quot;^\d*$&quot;;//以数字结尾的一个或多个(*:一个或多个)</span></span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;\d*&quot;</span>;<span class="comment">//以数字结尾的一个或多个(*:一个或多个)（空字符串也是符合规则的）</span></span><br><span class="line">            <span class="built_in">bool</span> isMatch = Regex.IsMatch(s, pattern);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;结果&quot;</span> + isMatch);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只允许输入除大小写字母、0-9的数字、下划线_以外的任何字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = Console.ReadLine();</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;^\W*$&quot;</span>;<span class="comment">//以数字结尾的一个或多个(*:一个或多个)（空字符串也是符合规则的）</span></span><br><span class="line">            <span class="built_in">bool</span> isMatch = Regex.IsMatch(s, pattern);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;结果&quot;</span> + isMatch);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>\W                 \w的补集 （ 除“大小写字母、0-9的数字、下划线_”之外）</p>
<p>\S                  \s的补集 (除\s定义的字符之外)</p>
<p>\D                  表示\d的补集 (除0-9数字之外)</p>
<p>\B                  匹配不是单词开头或结束的位置</p>
<p>[ab]               匹配中括号中的字符</p>
<p>[a-c]               a字符到c字符之间是字符（字母表）</p>
<p><sup><a href="#fn_x" id="reffn_x">x</a></sup>                匹配除了x以外的任意字符</p>
<p><sup><a href="#fn_adwz" id="reffn_adwz">adwz</a></sup>         匹配除了adwz这几个字符以外的任意字符</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验只允许输入除大小写字母、0-9的数字、下划线_以外的任何字</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;sdafsa&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;[^asd]&quot;</span>;<span class="comment">//除了asd之外的字符串</span></span><br><span class="line">            <span class="built_in">string</span> ss = Regex.Replace(str, pattern, <span class="string">&quot;#&quot;</span>);</span><br><span class="line">            Console.WriteLine(ss);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>{n}          匹配前面的字符n次</p>
<p>{n,}         匹配前面的字符n次或多于n次</p>
<p>{n,m}      匹配前面的字符n到m次</p>
<p>?              重复零次或一次</p>
<p>+             重复一次或更多次</p>
<p>*              重复零次或更多次</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//校验是否为QQ号（5-12位数字）</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;15151151515&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;^\d&#123;5,12&#125;$&quot;</span>;<span class="comment">//重复\d的5-12次</span></span><br><span class="line">            <span class="built_in">bool</span> ism = Regex.IsMatch(str, pattern);</span><br><span class="line">            Console.WriteLine(ism);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>择一匹配：</p>
<p>|                 将两个匹配条件进行逻辑“或”（Or）运算。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace 正则表达式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//择一匹配</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;15151151大师傅士大夫12【】【】‘515&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> pattern = <span class="string">@&quot;\d|[a-z]&quot;</span>;<span class="comment">// | 相当于或运算</span></span><br><span class="line">            MatchCollection o = Regex.Matches(str, pattern);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> itm <span class="keyword">in</span> o)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(itm);<span class="comment">//输出匹配出的字符串</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托是一个类型，这个类型可以赋值一个方法的引用</p>
<blockquote>
<p> 如：int 是一个类型，存储 整形数字；</p>
<p> 委托是一个类型，存储 方法的引用；</p>
</blockquote>
<ul>
<li>定义委托</li>
<li>创建委托实例</li>
</ul>
<h3 id="定义委托"><a href="#定义委托" class="headerlink" title="定义委托"></a>定义委托</h3>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo迁移</title>
    <url>/2021/01/10/hexo%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo博客迁移"><a href="#hexo博客迁移" class="headerlink" title="hexo博客迁移"></a>hexo博客迁移</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几次迁移都很顺利，但是最近2次迁移发生了错误，所以特定记录下来，以后迁移的时候傻瓜式操作就好些了</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>根据官网文档看步骤<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
</li>
<li><p>git安装</p>
</li>
<li><p>通过NodeSource安装Node.js</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20210110101009.png" alt=""></p>
</li>
<li><p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li>OK</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>博客迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>AR入门</title>
    <url>/2021/01/10/AR%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3cbe88ee5581a52df9ea738ae5b32fd29969763576237409ad8ff16fb396a65b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>指导入门</tag>
      </tags>
  </entry>
  <entry>
    <title>SFM-1</title>
    <url>/2021/01/05/%E8%BF%90%E5%8A%A8%E6%81%A2%E5%A4%8D%E7%BB%93%E6%9E%84-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0c1eb7bd53fbdc4a772698caf75905b5e128d2210aae823e20e8ab12037a14d1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SFM</category>
      </categories>
      <tags>
        <tag>SFM</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04内置输入法词库导入</title>
    <url>/2020/12/26/Ubuntu20-04%E5%86%85%E7%BD%AE%E8%BE%93%E5%85%A5%E6%B3%95%E8%AF%8D%E5%BA%93%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu20-04-内置输入法词库导入"><a href="#Ubuntu20-04-内置输入法词库导入" class="headerlink" title="Ubuntu20.04 内置输入法词库导入"></a>Ubuntu20.04 内置输入法词库导入</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于需要在Clion上写代码，但是它对中文的支持并不好，无法输入中文，为了解决这个问题，我尝试了搜狗输入法，虽然能输入中文，但是无法看到候选词框，体验依旧很难受，万般无奈之下，换回了IBUS，将搜狗输入法的词库导入后，体验还可以</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>IBUS架构，默认输入法</li>
<li>按照<a href="https://junlu.club/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/">此方法</a>配置Clion</li>
<li>安装深蓝词库转换，github上有，<a href="https://github.com/studyzy/imewlconverter">传送门</a></li>
<li>将搜狗输入法的词库导出文件转换为txt</li>
<li>导入默认输入法</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-开发库配置记录</title>
    <url>/2020/12/25/Ubuntu-%E5%BC%80%E5%8F%91%E5%BA%93%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-开发库配置记录"><a href="#Ubuntu-开发库配置记录" class="headerlink" title="Ubuntu-开发库配置记录"></a>Ubuntu-开发库配置记录</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>由于配置库的过程太过惨痛，所以将现在以及以后的开发库的配置过程记录一下，以供后续参考</p>
<h2 id="2-Eigen"><a href="#2-Eigen" class="headerlink" title="2. Eigen"></a>2. Eigen</h2><ol>
<li><p>简单命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure></li>
<li><p>源码编译安装</p>
<p>git clone</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;libeigen&#x2F;eigen.git</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake ..</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-Cmake"><a href="#3-Cmake" class="headerlink" title="3. Cmake"></a>3. Cmake</h2><ol>
<li><p>进入<a href="https://cmake.org/download/">官网</a>下载压缩包</p>
</li>
<li><p>解压后按照Github上的提示，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bootstrap</span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装系统以及花屏问题解决</title>
    <url>/2020/12/25/Ubuntu-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E8%8A%B1%E5%B1%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-安装系统以及花屏问题解决"><a href="#Ubuntu-安装系统以及花屏问题解决" class="headerlink" title="Ubuntu-安装系统以及花屏问题解决"></a>Ubuntu-安装系统以及花屏问题解决</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>马上就快寒假了，想到回家的时候家里没有这么好的科研条件，就打算买个笔记本作为主力机，教研室电脑作为Ubuntu的机子，然后使用向日葵连接使用；今年已经配置了号多次Ubuntu系统，今天记录一下，以后直接上就好了</p>
<h2 id="1-制作安装盘"><a href="#1-制作安装盘" class="headerlink" title="1. 制作安装盘"></a>1. 制作安装盘</h2><ol>
<li>从<a href="https://cn.ubuntu.com/download">官网</a>下载安装包，格式化U盘，然后将<strong>.iso</strong>文件全部解压到U盘中；</li>
<li>制作完成</li>
</ol>
<h2 id="2-花屏问题解决"><a href="#2-花屏问题解决" class="headerlink" title="2. 花屏问题解决"></a>2. 花屏问题解决</h2><ol>
<li><p>安装系统时，采用安全图形模式安装，最后安装重启阶段，一直按住e键不放，进入一大摞代码的界面；（或者不停的按Esc）</p>
</li>
<li><p>修改代码，在quite splash后面输入nomodeset；</p>
</li>
<li><p>快捷键 Ctrl+x启动系统</p>
</li>
<li><p>进入系统后，第一件事，并不是修改软件源，而是在终端执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;default&#x2F;grub</span><br></pre></td></tr></table></figure></li>
<li><p>同样，找到quite splash，在后面加入nomodeset</p>
</li>
<li><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>
<h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h2></li>
</ol>
<p>重新进入系统后，更换软件源，添加附加驱动等等，就不详细说了</p>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段总结</title>
    <url>/2020/12/19/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fb10728960d3be67be3e4401a38069f6a1eb0c79b1afc76c819617577f67286c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>ArRobot</tag>
      </tags>
  </entry>
  <entry>
    <title>大学生在线答题打开复制权限</title>
    <url>/2020/12/01/%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%9C%A8%E7%BA%BF%E7%AD%94%E9%A2%98%E6%89%93%E5%BC%80%E5%A4%8D%E5%88%B6%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于实现“大学生在线”答题页面开启复制题目权限的技巧"><a href="#关于实现“大学生在线”答题页面开启复制题目权限的技巧" class="headerlink" title="关于实现“大学生在线”答题页面开启复制题目权限的技巧"></a>关于实现“大学生在线”答题页面开启复制题目权限的技巧</h1><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ul>
<li>谷歌浏览器</li>
<li>油猴插件</li>
</ul>
<h2 id="正式行动"><a href="#正式行动" class="headerlink" title="正式行动"></a>正式行动</h2><ol>
<li><p>安装谷歌浏览器，<a href="https://www.google.cn/intl/zh-CN/chrome/">点我进下载页面</a></p>
</li>
<li><p>安装油猴插件</p>
<ol>
<li><p>打开谷歌浏览器，打开<strong>设置</strong>，点击<strong>更多工具</strong>，点击<strong>扩展程序</strong>，如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/30/iKardxQjqfvOVc1.png" alt=""></p>
</li>
<li><p>在右上角开启<strong>开发者模式</strong>，如下图</p>
<p><img src="https://i.loli.net/2020/11/30/9iLyc78JbROedsa.png" alt=""></p>
</li>
<li><p>下载油猴插件，<a href="https://wwe.lanzous.com/im2mPixnyng">点我下载</a>，下载完成后，是一个<strong>.crx</strong>文件，要做的是将其安装到浏览器中</p>
<ul>
<li><p>下载完成后，放在桌面上，将文件的<strong>后缀名.crx</strong>改掉，改为<strong>.zip</strong>，然后将其用解压软件<strong>解压</strong>到桌面</p>
</li>
<li><p>打开浏览器的扩展程序页面，选择<strong>加载已解压的扩展程序</strong>，选择桌面上的已经解压的文件夹，安装扩展程序</p>
<p><img src="https://i.loli.net/2020/11/30/3VTR9M7SHZoCN82.png" alt=""></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>安装网页限制解除脚本</p>
<p>打开<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits-modified">此网址</a>，点击<strong>安装</strong>按钮，如下图所示；</p>
<p><img src="https://i.loli.net/2020/11/30/mhzNHLXOpIkPUb3.png" alt=""></p>
<p>安装完成后，任意打开网页，如，百度主页，<strong>鼠标移动至左上角</strong>，如下图所示：</p>
<p><img src="https://i.loli.net/2020/11/30/w9k1FPehMJzsAVQ.png" alt=""></p>
<p>可以发现有解除限制的选项，点它！就可以在此网页有复制权限了，因此，<strong>在大学生在线答题之前，需要先点击此按钮，再答题</strong></p>
<p>至此配置结束</p>
</li>
</ol>
<h2 id="具体效果"><a href="#具体效果" class="headerlink" title="具体效果"></a>具体效果</h2><p><img src="https://i.loli.net/2020/11/30/gmns5GQjYivwUlA.png" alt=""></p>
<p><img src="https://i.loli.net/2020/12/01/rlnXqy8dzUIk976.png" alt=""></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>大学生在线</tag>
      </tags>
  </entry>
  <entry>
    <title>将ubuntu默认中文文件夹名称改为英文</title>
    <url>/2020/11/27/%E5%B0%86ubuntu%E9%BB%98%E8%AE%A4%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D%E7%A7%B0%E6%94%B9%E4%B8%BA%E8%8B%B1%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="将Ubuntu默认中文文件夹名称改为英文"><a href="#将Ubuntu默认中文文件夹名称改为英文" class="headerlink" title="将Ubuntu默认中文文件夹名称改为英文"></a>将Ubuntu默认中文文件夹名称改为英文</h1><blockquote>
<p>转载于<a href="https://blog.csdn.net/jeffrey_li/article/details/54947502">https://blog.csdn.net/jeffrey_li/article/details/54947502</a></p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li><p><strong>方法一：</strong><br>打开 系统设置-》语言支持 将“english”拖动到最上端，重启系统。<br>重启后，会提示更新文件名称，更新后在将语言”中文“拖动到顶部，重启系统 。</p>
</li>
<li><p><strong>方法二：</strong>编辑~/.config/user-dirs.dirs文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.config&#x2F;user-dirs.dirs1</span><br></pre></td></tr></table></figure>
<p>修改文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XDG_DESKTOP_DIR&#x3D;&quot;$HOME&#x2F;Desktop&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR&#x3D;&quot;$HOME&#x2F;Downloads&quot;</span><br><span class="line">XDG_TEMPLATES_DIR&#x3D;&quot;$HOME&#x2F;Templates&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR&#x3D;&quot;$HOME&#x2F;Public&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR&#x3D;&quot;$HOME&#x2F;Documents&quot;</span><br><span class="line">XDG_MUSIC_DIR&#x3D;&quot;$HOME&#x2F;Music&quot;</span><br><span class="line">XDG_PICTURES_DIR&#x3D;&quot;$HOME&#x2F;Pictures&quot;</span><br><span class="line">XDG_VIDEOS_DIR&#x3D;&quot;$HOME&#x2F;Videos&quot;12345678</span><br></pre></td></tr></table></figure></li>
<li><p><strong>方法三：</strong><br>打开终端，在终端中输入命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;en_US</span><br><span class="line">xdg-user-dirs-gtk-update12</span><br></pre></td></tr></table></figure>
<p>跳出对话框询问是否将目录转化为英文路径,同意并关闭。<br>在终端中输入命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;zh_CN1</span><br></pre></td></tr></table></figure>
<p>重新启动系统，系统会提示更新文件名称，选择不再提示,并取消修改。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>文件夹改名</tag>
      </tags>
  </entry>
  <entry>
    <title>clion输入中文</title>
    <url>/2020/11/27/clion%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu20-04下clion无法输入中文问题解决"><a href="#Ubuntu20-04下clion无法输入中文问题解决" class="headerlink" title="Ubuntu20.04下clion无法输入中文问题解决"></a>Ubuntu20.04下clion无法输入中文问题解决</h1><blockquote>
<p>转载于<a href="https://blog.csdn.net/dyg7777/article/details/108334293?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/dyg7777/article/details/108334293?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242</a></p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>设置输入法</p>
<p>将 Ubuntu 的输入法设置为 Ibus Pinyin</p>
<p><a href="https://blog.forgiveher.cn/2020/08/20/1597932898303/ibus.png"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLmZvcmdpdmVoZXIuY24vMjAyMC8wOC8yMC8xNTk3OTMyODk4MzAzL2lidXMucG5n?x-oss-process=image/format,png" alt="Ibus"></a></p>
</li>
<li><p>下载JBR</p>
<p>下载解压 <a href="https://confluence.jetbrains.com/pages/viewpage.action?pageId=173178989">JBR</a></p>
<p><a href="https://blog.forgiveher.cn/2020/08/20/1597932898303/jbr.png"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLmZvcmdpdmVoZXIuY24vMjAyMC8wOC8yMC8xNTk3OTMyODk4MzAzL2pici5wbmc?x-oss-process=image/format,png" alt="JBR"></a></p>
</li>
<li><p>安装runtime插件</p>
<p>打开 IDE，下载插件 <a href="https://www.jetbrains.com/help/idea/switching-boot-jdk.html">Choose Runtime</a></p>
</li>
<li><p>IDE在jbr下运行</p>
<p>在 CLion中按下 <code>Ctrl + Shift + A</code>， 随后输入 <code>Choose Runtime</code>，打开对话框，随后选择下载解压的 JBR，点击 <code>Install</code>，随后 IDE 会在自动重启</p>
<p>就此结束</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>clion</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04拨号上网</title>
    <url>/2020/11/27/ubuntu18-04%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu18-04-拨号上网方法"><a href="#Ubuntu18-04-拨号上网方法" class="headerlink" title="Ubuntu18.04 拨号上网方法"></a>Ubuntu18.04 拨号上网方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于20.04系统还没有成熟，博主使用的相关的开发工具还没有支持20系统，所以又重新格式化装了18.04；但是上网步骤这里卡住了，特此记录</p>
<p>网上的大多数方法，比如改正true之类的，对我都没有太大用处。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<p>转载于<a href="https://blog.csdn.net/qq_38649880/article/details/102651760">https://blog.csdn.net/qq_38649880/article/details/102651760</a></p>
</blockquote>
<ol>
<li><p>输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmcli con edit type pppoe con-name “YOUR_CONNECTION_NAME”</span><br></pre></td></tr></table></figure>
<p>把里面的<code>YOUR_CONNECTION_NAME</code>改成新建立的拨号上网的名字。<br>然后命令行界面会有所变化，接下来开始设置用户名和密码就行了.</p>
</li>
<li><p>依次输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set pppoe.username YOUR_DSL_ACCOUNT_USERNAME</span><br><span class="line">set pppoe.password YOUR_DSL_ACCOUNT_PASSWORD</span><br><span class="line">save</span><br></pre></td></tr></table></figure>
<p>把用户名和密码填成你自己的账号和密码就OK。<br>接下来回询问你是否想设置成自动连接，经常用的话输入<code>yes</code>就可以，开机就会自动连接，比较方便。<br>这就设置好了，然后输入<code>quit</code>退出即可。</p>
<p>就此结束</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>拨号上网</tag>
      </tags>
  </entry>
  <entry>
    <title>三维重建基础与极几何</title>
    <url>/2020/11/09/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E4%B8%8E%E6%9E%81%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="三维重建基础与极几何"><a href="#三维重建基础与极几何" class="headerlink" title="三维重建基础与极几何"></a>三维重建基础与极几何</h1><blockquote>
<p>学习记录</p>
</blockquote>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>多视图几何中的关键问题有：</p>
<ol>
<li><p>摄像机几何</p>
<blockquote>
<p>从一张或者多张图像中求解摄像机的内外参数</p>
</blockquote>
</li>
<li><p>场景几何</p>
<blockquote>
<p>通过多个图像求解3D场景坐标</p>
</blockquote>
</li>
<li><p>对应关系</p>
<blockquote>
<p>已知一个图像的p点，如何在另一张图像中找到p’点</p>
</blockquote>
</li>
</ol>
<p>1+3 =&gt; 2：三维重建</p>
<p>3 =&gt; 1 + 2：SFM（运动恢复结构）</p>
<h2 id="三维重建基础"><a href="#三维重建基础" class="headerlink" title="三维重建基础"></a>三维重建基础</h2><h3 id="从单幅视图恢复场景结构"><a href="#从单幅视图恢复场景结构" class="headerlink" title="从单幅视图恢复场景结构"></a>从单幅视图恢复场景结构</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164053.png" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164136.png" alt=""></p>
<p>一张照片缺乏深度信息，从上图看出，不止有P点一个点可以在成像平面上成像点p，红线上的场景点都满足；所以说，单张照片2D到3D的映射具有多义性。</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164617.png" alt=""></p>
<p>考虑两只眼睛观察空间，模型如下：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109164554.png" style="zoom:150%;" /></p>
<p>O1与O2分别代表两只眼睛，两个相机，p与p’所在平面分别为两个相机的成像平面，P点为空间点；</p>
<p>理想情况下，P点空间点的确定由以下公式确定：</p>
<script type="math/tex; mode=display">
P = l × l'</script><p>但是实际情况下，由于噪声的存在，或者由于计算机精度丢失的原因，导致两条直线通常不会相交，实际使用中此方法无法做到，作废</p>
<p>所以，求解空间点P的问题，可以描述为：</p>
<blockquote>
<p>已知p和p’，K与K’，R，T</p>
<p>求解：P的三维坐标</p>
</blockquote>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="线性解法"><a href="#线性解法" class="headerlink" title="线性解法"></a>线性解法</h4><p>线性解法参见《 Multiple View Geometry in Computer Vision》</p>
<h4 id="非线性解法"><a href="#非线性解法" class="headerlink" title="非线性解法"></a>非线性解法</h4><p>最优化问题，求点$P^<em>$，使得$MP^</em>$到$p$的距离，加上${M’P^*}$到$p’$的距离之和最小</p>
<p>即：</p>
<script type="math/tex; mode=display">
d\left(p, M P^{*}\right)+d\left(p^{\prime}, M^{\prime} P^{*}\right)</script><p>求解方法：牛顿法与列文伯格-马夸尔特法（L-M方法）</p>
<h2 id="极几何"><a href="#极几何" class="headerlink" title="极几何"></a>极几何</h2><h3 id="极几何解决的问题"><a href="#极几何解决的问题" class="headerlink" title="极几何解决的问题"></a>极几何解决的问题</h3><p>已知一个图像的p点，如何在另一张图像中找到p’点</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201109171145.png" alt=""></p>
<p>极平面：过点P，$O_1$与$O_2$的平面</p>
<p>基线：$O_1$与$O_2$的连线</p>
<p>极线：极平面与成像平面的交线</p>
<p>极点：基线与成像平面的交点</p>
<h3 id="本质矩阵"><a href="#本质矩阵" class="headerlink" title="本质矩阵"></a>本质矩阵</h3><p>定义：本质矩阵是对<code>规范化摄像机</code>拍摄的两个视点图像间的极几何关系进行代数描述</p>
<h3 id="规范化摄像机"><a href="#规范化摄像机" class="headerlink" title="规范化摄像机"></a>规范化摄像机</h3><p>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><p>规范化摄像机指的是K = 0的情况下。</p>
<h3 id="推导本质矩阵"><a href="#推导本质矩阵" class="headerlink" title="推导本质矩阵"></a>推导本质矩阵</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201127092425.png" alt=""></p>
<ol>
<li><p>三维点$p’$ 在$O_1$下的坐标是多少？</p>
<p>设$p’$在$O<em>2$下的坐标为$P</em>{O2}$，$p’$在$O<em>1$下的坐标为$P</em>{O1}$</p>
<script type="math/tex; mode=display">
P'_{O2} = RP'_{O1}+T</script><p>由上述公式可以推导出:</p>
<script type="math/tex; mode=display">
P'_{O1} = R^T(P'_{O2} - T) \\
= R^TP'_{O2} - R^TT</script></li>
<li><p>三维点$O_2$在$O_1$下的坐标是多少？</p>
<p>根据上面的公式，令$P’_{O2}$为0，即$P’$与$O_2$重合，可得三维点$O_2$在$O_1$下的坐标是$-R^TT$</p>
</li>
<li><p>两个向量叉乘，得到垂直于极平面的向量，与$p$点在$O_1$下的向量，点乘为0</p>
<script type="math/tex; mode=display">
\vec{a} =R^TT \times (R^TP'_{O2}-R^TT) \\
\vec{b}=P_{O1} \\
\vec{a} ^T\cdot \vec{b} = 0</script><p>最终得到：</p>
<script type="math/tex; mode=display">
[R^TT \times (R^TP'_{O2}-R^TT) ]^T \cdot P_{O1} = 0</script><p>最终化简得到：</p>
<script type="math/tex; mode=display">
p'^{T}[T \times R]p = 0</script><blockquote>
<p>p’：1x3，右边图像像素坐标系下的p’的齐次坐标</p>
<p>p： 3x1，左边图像像素坐标系下的p 的齐次坐标</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>叉乘变成矩阵乘法</p>
<p>若$\vec{a} =\begin{bmatrix}\ a_1 \ \ a_2 \ \ a_3 \end{bmatrix}$，$\vec{b} =\begin{bmatrix}\ b_1 \ \ b_2 \ \ b_3 \end{bmatrix}$</p>
<p>则$\vec{a} \times \vec{b} = \begin{bmatrix} \ 0 &amp;-a_3  &amp;a_2 \ \ a_3 &amp;0 &amp;-a_1 \ \ -a_2 &amp;a_1 &amp;0\end{bmatrix}\begin{bmatrix} \ b_1 \ \ b_2 \ \ b_3 \end{bmatrix}$</p>
</li>
<li><p>将3中的最终得到的公式，将叉乘变为矩阵运算</p>
<p>记 $E=T\times R$</p>
<script type="math/tex; mode=display">
p'^{T}Ep = 0</script><blockquote>
<p>E 称之为<strong>本质矩阵*</strong></p>
<p>p’：1x3，右边图像像素坐标系下的p’的齐次坐标</p>
<p>p： 3x1，左边图像像素坐标系下的p 的齐次坐标</p>
</blockquote>
<p>此公式反映了左右两个图像上的点之间的对应关系，也就是本质矩阵的内涵</p>
</li>
</ol>
<h3 id="基础矩阵"><a href="#基础矩阵" class="headerlink" title="基础矩阵"></a>基础矩阵</h3><p>基础矩阵是对<strong>一般的透视摄像机</strong>拍摄的两个视点之间图像之间的极几何关系的代数描述</p>
<h3 id="一般的透视摄像机"><a href="#一般的透视摄像机" class="headerlink" title="一般的透视摄像机"></a>一般的透视摄像机</h3><p>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换：</p>
<script type="math/tex; mode=display">
p=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><blockquote>
<p>$p$为像素坐标系的二维坐标</p>
<p>$P$为相机坐标系下的空间坐标</p>
</blockquote>
<h3 id="推导基础矩阵"><a href="#推导基础矩阵" class="headerlink" title="推导基础矩阵"></a>推导基础矩阵</h3><p>思路：将其变为规范化摄像机</p>
<script type="math/tex; mode=display">
p= K\begin{bmatrix} \ E & 0 \\ \end{bmatrix}P \\
K^{-1}p = K^{-1}K\begin{bmatrix} \ E & 0 \end{bmatrix} P 
= \begin{bmatrix}
\ 1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 &  0 & 1 & 0 \\
\end{bmatrix}
P</script><p>设 $P_c = K^{-1}p$，则上式可以写为：</p>
<script type="math/tex; mode=display">
P_c = \begin{bmatrix}
\ 1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 &  0 & 1 & 0 \\
\end{bmatrix}
P</script><p>由规范化相机模型可知：</p>
<script type="math/tex; mode=display">
P_c'^{T}EP_c = 0 \\
(K'^{-1}p')^{T}E(K^{-1}p)=0 \\
p'^{T}K'^{-T}EK^{-1}p = 0 \\</script><p>记$F = K’^{-T}EK^{-1}$，上式可以表达为：</p>
<script type="math/tex; mode=display">
p'^{T}Fp = 0</script><p>F即为<strong>基础矩阵</strong></p>
<p>由于$E = T \times R$，所以E与外部参数有关，又因为K是相机内部参数的矩阵，所以，基础矩阵F与内部参数，外部参数都有关；</p>
<h3 id="基础矩阵小结"><a href="#基础矩阵小结" class="headerlink" title="基础矩阵小结"></a>基础矩阵小结</h3><p>基础矩阵F刻画了两幅图像之间的极几何关系，即相同场景下，不同视图之间的对应关系</p>
<h3 id="估计基础矩阵"><a href="#估计基础矩阵" class="headerlink" title="估计基础矩阵"></a>估计基础矩阵</h3><p>已知$p’$与$p$，求解F</p>
<p>通常使用<strong>归一化八点算法</strong>对F进行估计</p>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>三维重建</tag>
      </tags>
  </entry>
  <entry>
    <title>C#-文件操作</title>
    <url>/2020/10/27/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-文件操作"><a href="#C-文件操作" class="headerlink" title="C#-文件操作"></a>C#-文件操作</h1><h2 id="查看文件属性"><a href="#查看文件属性" class="headerlink" title="查看文件属性"></a>查看文件属性</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----------------------------文件操作-查看文件或文件夹属性------------------------</span></span><br><span class="line">            FileInfo fileInfo = <span class="keyword">new</span> FileInfo(<span class="string">&quot;TextFile1.txt&quot;</span>);<span class="comment">//相对路径，只找当前程序输出路径内的文件</span></span><br><span class="line">            FileInfo fileInfo = <span class="keyword">new</span> FileInfo(<span class="string">@&quot;F:\VS_Area\sikiLearning\文件操作\bin\Debug\TextFile2.txt&quot;</span>);<span class="comment">//绝对路径</span></span><br><span class="line">            <span class="keyword">if</span> (fileInfo.Exists)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">                Console.WriteLine(fileInfo.Name);<span class="comment">//文件名称</span></span><br><span class="line">                Console.WriteLine(fileInfo.Directory);<span class="comment">//文件所在路径</span></span><br><span class="line">                Console.WriteLine(fileInfo.Length);<span class="comment">//文件大小，单位字节</span></span><br><span class="line">                Console.WriteLine(fileInfo.IsReadOnly);<span class="comment">//判断是否只读</span></span><br><span class="line">                <span class="comment">//fileInfo.Delete();//删除文件</span></span><br><span class="line">                <span class="comment">//fileInfo.CopyTo(&quot;copy.txt&quot;);//复制文件到当前目录，为copy.txt</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">                fileInfo.Create();<span class="comment">//创建文件</span></span><br><span class="line">                fileInfo.MoveTo(<span class="string">&quot;重命名.txt&quot;</span>);<span class="comment">//剪切，相当于重命名操作</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<h2 id="查看文件夹属性"><a href="#查看文件夹属性" class="headerlink" title="查看文件夹属性"></a>查看文件夹属性</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DirectoryInfo dirInfo = <span class="keyword">new</span> DirectoryInfo(<span class="string">@&quot;F:\VS_Area\sikiLearning\文件操作\bin\Debug&quot;</span>);<span class="comment">//绝对路径</span></span><br><span class="line"><span class="keyword">if</span> (dirInfo.Exists)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(dirInfo.CreationTime);<span class="comment">//获取创建时间</span></span><br><span class="line">    dirInfo.CreateSubdirectory(<span class="string">&quot;soki&quot;</span>);<span class="comment">//创建子目录</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------取得文件内容---------------------------------------------------- -</span><br><span class="line"><span class="built_in">string</span>[] line = File.ReadAllLines(<span class="string">&quot;TextFile1.txt&quot;</span>);<span class="comment">//读取行,文本文件</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> item <span class="keyword">in</span> line)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] image = File.ReadAllBytes(<span class="string">&quot;1.jpg&quot;</span>);<span class="comment">//对于非文本文件</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> image)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------写文件------------------------------</span></span><br><span class="line">File.WriteAllText(<span class="string">&quot;3.txt&quot;</span>, <span class="string">&quot;kjsafjnksdlajfksdajagsjdalkfjk\nskdjfksjdkafj&quot;</span>);<span class="comment">//写文本文件到相对目录</span></span><br><span class="line">File.WriteAllBytes(<span class="string">&quot;3.jpg&quot;</span>, image);<span class="comment">//写非文本文件到相对目录</span></span><br></pre></td></tr></table></figure>
<h2 id="FileStream，常用于读取二进制文件"><a href="#FileStream，常用于读取二进制文件" class="headerlink" title="FileStream，常用于读取二进制文件"></a>FileStream，常用于读取二进制文件</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">FileStream stream = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.txt&quot;</span>,FileMode.Open);</span><br><span class="line">            <span class="comment">//读取或者写入数据</span></span><br><span class="line">            <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//从0-最后读取数据，放到data里面，返回值为读取内容的大小</span></span><br><span class="line">            <span class="built_in">int</span> length = stream.Read(data, <span class="number">0</span>, data.Length);</span><br><span class="line">            <span class="comment">//输出读取的内容</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(data[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//另一种读取内容的方式</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//read命令，读取指针不断偏移</span></span><br><span class="line">                <span class="built_in">int</span> length = stream.Read(data, <span class="number">0</span>, data.Length);</span><br><span class="line">                <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;所有内容已经读取完成&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i&lt;length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(data[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后关闭流</span></span><br><span class="line">            stream.Close();</span><br></pre></td></tr></table></figure>
<h2 id="streamreader-streamwriter-常用于写入读取文本文件"><a href="#streamreader-streamwriter-常用于写入读取文本文件" class="headerlink" title="streamreader,streamwriter,常用于写入读取文本文件"></a>streamreader,streamwriter,常用于写入读取文本文件</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建文本文件读取流</span></span><br><span class="line">            StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">&quot;textfile1.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//读取方法1，一行一行的读取</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> text = sr.ReadLine();</span><br><span class="line">                <span class="keyword">if</span> (text == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//读取方法2；一次性全部读取完毕</span></span><br><span class="line">            <span class="built_in">string</span> allText = sr.ReadToEnd();</span><br><span class="line">            <span class="comment">//读取方法3,一次一个字母</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//读取的ASCLL码值，强制转换为char</span></span><br><span class="line">                <span class="built_in">char</span> letter = (<span class="built_in">char</span>)sr.Read();</span><br><span class="line">                <span class="keyword">if</span> (letter == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(letter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sr.Close();</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;c.txt&quot;</span>);<span class="comment">//如果文件已经存在，则会被覆盖</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> message = Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span> (message == <span class="string">&quot;q&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//会一直写，紧接着文档末尾接着写，不换行</span></span><br><span class="line">                    sw.Write(message);</span><br><span class="line">                    <span class="comment">//带换行的，同样接着末尾接着写</span></span><br><span class="line">                    sw.WriteLine(message);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sw.Close();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Eigen几何模块</title>
    <url>/2020/10/26/SLAM-Eigen%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Eigen几何模块"><a href="#SLAM-Eigen几何模块" class="headerlink" title="SLAM-Eigen几何模块"></a>SLAM-Eigen几何模块</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Geometry&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 本程序演示Eigen几何模块的使用方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//生成单位矩阵</span></span><br><span class="line">    Matrix3d rotation_matrix = Matrix3d::Identity();</span><br><span class="line">    <span class="comment">//旋转向量使用AngleAxisd，底层非Matrix，但是可以当做矩阵使用运算(重载运算符）</span></span><br><span class="line">    <span class="comment">//定义旋转向量，沿z轴旋转45度</span></span><br><span class="line">    <span class="function">AngleAxisd <span class="title">rotation_vector</span><span class="params">(M_PI/<span class="number">4</span>,Vector3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>))</span></span>;</span><br><span class="line">    <span class="comment">//格式控制，输出时保持小数点后3位</span></span><br><span class="line">    <span class="built_in">cout</span>.precision(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//将旋转向量转化为矩阵形式，AngleAxisd转为matrix</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;rotation matrix =\n&quot;</span>&lt;&lt;rotation_vector.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//将旋转向量转化为旋转矩阵，AngleAxisd转Matrix</span></span><br><span class="line">    rotation_matrix = rotation_vector.toRotationMatrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用AngleAxisd进行坐标转换</span></span><br><span class="line">    <span class="function">Vector3d <span class="title">v</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    Vector3d v_rotated = rotation_vector * v;<span class="comment">//方式1:使用旋转向量</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation (by angle axis) = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    v_rotated = rotation_matrix*v;<span class="comment">//方式2:使用旋转矩阵</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation (by matrix) = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//欧拉角:旋转矩阵-&gt;欧拉角</span></span><br><span class="line">    Vector3d euler_angles = rotation_matrix.eulerAngles(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//ZYX顺序</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;yaw pitch roll = &quot;</span>&lt;&lt;euler_angles.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//欧式变换矩阵</span></span><br><span class="line">    Isometry3d T =Isometry3d::Identity();</span><br><span class="line">    T.rotate(rotation_vector);<span class="comment">//设置变换矩阵的旋转向量</span></span><br><span class="line">    T.pretranslate(Vector3d(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//将平移向量设置为（1,3,4）</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Transform matrix = \n&quot;</span>&lt;&lt;T.matrix()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用欧式变换矩阵对v进行变换</span></span><br><span class="line">    Vector3d v_transformed = T*v;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;v transformed = &quot;</span>&lt;&lt;v_transformed.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//AngleAxisd转换为四元数</span></span><br><span class="line">    Quaterniond q = Quaterniond(rotation_vector);</span><br><span class="line">    <span class="comment">//输出四元数系数，(x,y,z,w)；w是实部，xyz是虚部</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;quaternion from rotation vector = &quot;</span>&lt;&lt;q.coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//matrix转换为四元数</span></span><br><span class="line">    q = Quaterniond(rotation_matrix);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;quaternion form roation matrix = &quot;</span>&lt;&lt;q.coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用四元数旋转向量</span></span><br><span class="line">    v_rotated = q*v;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(1,0,0) after rotation = &quot;</span>&lt;&lt;v_rotated.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;should be equal to &quot;</span>&lt;&lt;(q*Quaterniond(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)*q.inverse()).coeffs().transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>Eigen</tag>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hololens与六维力传感器通信</title>
    <url>/2020/10/25/Hololens%E4%B8%8E%E5%85%AD%E7%BB%B4%E5%8A%9B%E4%BC%A0%E6%84%9F%E5%99%A8%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cdab10b42c16ec9e39f9f5b115fb6bcdde9324bc0b84f75efc81145293bfc1bf"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>udp</tag>
        <tag>Hololens2</tag>
        <tag>传感器</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP-客户端无限次发送消息</title>
    <url>/2020/10/23/UDP-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E9%99%90%E6%AC%A1%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5fee387e35fee133ee5f7e6cde41cf485e9c1bcaf0b1c89ba3b72d39a27764fa"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP-简单通信</title>
    <url>/2020/10/23/UDP-%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="993f41efcde82678a1e43808a697c428b51129af38b84e86ad4d9e547cf2fe52"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>udp</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM-Eigen初识</title>
    <url>/2020/10/22/SLAM-Eigen%E5%88%9D%E5%A7%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SLAM-Eigen初识"><a href="#SLAM-Eigen初识" class="headerlink" title="SLAM-Eigen初识"></a>SLAM-Eigen初识</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************</span></span><br><span class="line"><span class="comment"> * 本程序演示了Eigen基本类型的使用</span></span><br><span class="line"><span class="comment"> * ************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">2</span>,<span class="number">3</span>&gt; matrix_23;</span><br><span class="line">    <span class="comment">//3维向量,3x1,与Matrix&lt;double,3,1&gt; v_3d相同</span></span><br><span class="line">    Vector3d v_3d;</span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">3</span>,<span class="number">1</span>&gt; vd_3d;</span><br><span class="line">    <span class="comment">//Matrix3d实质上是Matrix&lt;double,3,3&gt;</span></span><br><span class="line">    Matrix3d matrix_33 = Matrix3d::Zero();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不确定矩阵大小，使用动态大小的矩阵</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,Dynamic,Dynamic&gt; matrix_dynamic;</span><br><span class="line">    <span class="comment">//同上，动态大小</span></span><br><span class="line">    MatrixXd matrix_x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入数据（初始化）</span></span><br><span class="line">    matrix_23&lt;&lt;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;</span><br><span class="line">    <span class="comment">//输出各个元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;matrix 2x3 from 1 to 6:\n&quot;</span>&lt;&lt;matrix_23&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用（）访问矩阵中的元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;print matrix 2x3&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt;<span class="number">2</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;matrix_23(i,j)&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v_3d&lt;&lt;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>;</span><br><span class="line">    vd_3d&lt;&lt;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;</span><br><span class="line">    <span class="comment">//matrix_23里的元素是float类型</span></span><br><span class="line">    <span class="comment">//vd_3d里的元素是float类型</span></span><br><span class="line">    <span class="comment">//v_3d里的元素是double类型</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,<span class="number">2</span>,<span class="number">1</span>&gt; result = matrix_23.cast&lt;<span class="keyword">double</span>&gt;()*v_3d;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;[1,2,3;4,5,6]*[3,2,1]=&quot;</span>&lt;&lt;result.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Matrix&lt;<span class="keyword">float</span>,<span class="number">2</span>,<span class="number">1</span>&gt; result2 = matrix_23 * vd_3d;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;[1,2,3;4,5,6]*[4,5,6]&quot;</span>&lt;&lt;result2.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//矩阵运算</span></span><br><span class="line">    <span class="comment">//随机数矩阵</span></span><br><span class="line">    matrix_33 = Matrix3d::Random();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;random matrix ：\n&quot;</span>&lt;&lt;matrix_33&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;transpose:\n&quot;</span>&lt;&lt;matrix_33.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;the sum of all members:\n&quot;</span>&lt;&lt;matrix_33.sum()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;trace:\n&quot;</span>&lt;&lt;matrix_33.trace()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;数乘:\n&quot;</span>&lt;&lt;matrix_33*<span class="number">10</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;inverse:\n&quot;</span>&lt;&lt;matrix_33.inverse()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;det:\n&quot;</span>&lt;&lt;matrix_33.determinant()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特征值</span></span><br><span class="line">    <span class="comment">//实对称矩阵可以保证对角化成功</span></span><br><span class="line">    <span class="function">SelfAdjointEigenSolver&lt;Matrix3d&gt; <span class="title">eigen_solver</span><span class="params">(matrix_33.transpose() * matrix_33)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Eigen values = \n&quot;</span>&lt;&lt;eigen_solver.eigenvalues()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Eigen vectors = \n&quot;</span>&lt;&lt;eigen_solver.eigenvectors()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解方程</span></span><br><span class="line">    <span class="comment">//求解matrix_NN * x = v_Nd 方程</span></span><br><span class="line">    <span class="comment">//N的大小在前边的宏里定义，由随机数生成</span></span><br><span class="line">    <span class="comment">//直接求逆是最直接的，但是运算量大</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,MATRIX_SIZE&gt; matrix_NN = MatrixXd::Random(MATRIX_SIZE,MATRIX_SIZE);</span><br><span class="line">    matrix_NN = matrix_NN * matrix_NN.transpose();<span class="comment">//保证半正定</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,<span class="number">1</span>&gt; v_Nd = MatrixXd::Random(MATRIX_SIZE,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> time_stt = clock();<span class="comment">//计时</span></span><br><span class="line">    <span class="comment">//直接求逆</span></span><br><span class="line">    Matrix&lt;<span class="keyword">double</span>,MATRIX_SIZE,<span class="number">1</span>&gt; x = matrix_NN.inverse() * v_Nd;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of normal inverse is &quot;</span>&lt;&lt;<span class="number">1000</span> * (clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通常用矩阵分解来求解，例如QR分解，速度会快很多</span></span><br><span class="line">    time_stt = clock();</span><br><span class="line">    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of Qr decomposition is &quot;</span>&lt;&lt;<span class="number">1000</span>*(clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于正定矩阵，还可以用cholesky分解来分解方程</span></span><br><span class="line">    time_stt = clock();</span><br><span class="line">    x = matrix_NN.ldlt().solve(v_Nd);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time of ldlt decompisition is &quot;</span>&lt;&lt;<span class="number">1000</span> * (clock()-time_stt)/(<span class="keyword">double</span>)CLOCKS_PER_SEC&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x.transpose()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>Eigen</tag>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>融合NKeyBoard与滚动条的适用于Hololens2的通用Socket通信服务端与客户端</title>
    <url>/2020/10/21/%E8%9E%8D%E5%90%88NKeyBoard%E4%B8%8E%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E9%80%82%E7%94%A8%E4%BA%8EHololens2%E7%9A%84Socket%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="046b10d797dd0e32f5d4daf2b599cd7ff436bbb8e8715107076f37440dcbd9b6">2d058b368786be6af85840de2b870e3a8e0d65d8d41b6c86d759371d32e3a62070c385ccac7a240fd061091b8fe71e980e811cb1e708fdb93e3ccce966db820994fac143d30ef08f0bb32aefbcf9ce377fd35803db98d1f84d47abafbb37a946bcbd9e073adf671a49f558c26597568fb402655cfd17597fd2d21ce0a8ff2bf376281a38f8c37cedd4ee2a7052d77cbdd516edc319531206f9f47a4c8e8c538930acb62dc24948a116f879d96b4426b3742a607a4debc70e6347a4eccd1c6c5dba08707dacf3ccdc5b80d96d71e334b9486fdf3d101fb2e70b3a0ead6bfc48fc6df9b3c4c8b90754dfa212a93ca3b1e7b4c6ff1c1c8852997a8653a2f4b0c526a24f4cee14346fbeb0fc24cf09b3eff9c818bc103db249683b4ce0839a180cc8e18aec04fc6e0a4117c745a80de9db7684e0cc57b01cf4f7830ccfec8f4f214ee3c50596038c79ae8154f030e07b9a32f172ed114be345d41e1bcd497daf7a3bff8453920ac7aa331b8739cd93ffb66c58e82b4f4a2c48fb124605993983d1b6364d7c379eba7d5f35c0dfed769ee0aba9506715159a4cce5719bb6fc6be8dab5beb92315c7904f475bbc8a952cb0af9cecc0251b495217b08668ec905874698e29f0d759ab586c56abd2487f7ae7dc9837a44e19668a1cba00a9369092ff62be4be475fda4094f4a6aed3ead64f108538835503caadb8d106d6a54dfef87bd93cc116a58073cef6e1723cd5d633eed3082c01d10caa6c1e6ef986b63507fb0e7ab799e133d44a6bf7df67846cdffea22db325f1b73aef930c5bb67127b6b8aa34ee145208872b628978c31a7b52f764be00fa9664d363911eb63ceb596450d643245a2e10766e76e70b152aeacc2eeadb9942d267e47e72966bfced7e5310c9eebf950ffbe7a957bfda0bacd799beb75d079cb7169b5d403f5396c9eb8179ec8b5dc8f8639395e841c47b0971b474aa5c3ab0dab426c832da7a4a93285c09d51f7d36aa1d25b3230e5e43ce248696564d29fcc8e5dac0700eb7cb58908fd0dd658eb8d35fe659ba6387974a85ed1572b69caf64a6bcb66de55c8430911db2858165e50dae4eaa0e4715c9772257d57d65c4321327c20402111ee4f915296404efe15437410843d25c6049f07caf6e12be8c08093e4aebd9fd64ba4f3843adc025069a086448ad44cbf9283b65af6a592f49f41b2bfeee3d6778763073c684d78bf2a188c78c61038c6162b0bee0648a3aaab6e646e089333a0eb42cfa1b19c0666fa6c4d91259522bfa2089a31d813f35e672f8a453fa4c8f53f6eeefb9a155e9b436f13f1438cc90a4f24e8651dfe4db9b253c08457150a9f5b1ecef996fb9904733eae0e4fc71bc2bd140a697e272923cdde6aed844963c06d49e9ffd58fd8bace1a322cf0c05cf674a661c6c74a713beb86bf8a7d6b5b48f5dccc5701704c2a8979757f772acd5a7889e55c141369c80d5c85feb9a0539c941daaff7e3e5ad02611eaa89e3785d83767223369bfa690eb57d751499fe856395e3e0688a41e66ff291f2b0b05f70aec86ae186bfd4a7346d67d2429278199ac9b5c4f717a1233ef7bd04ce7baa025d3aa7340e7aa2577965c08e187515392ac0f4d9c1fcc58bd8bdd64d60dcb01274be9f1f97c2cfcb09a153e2d958a66179ef99feae2b82ff9f526d3bbf09bd6fbf3138a277d5af2d7e1f0d1acaa951849355edeb18bd186f4816a4fa8b63177265d486c78c4dc576b8d031e9818f2f62d00ac7d7519ea4b258cab50a53ee8afb4b44c5168ce3c9b2b901dbebda2ff0ef504068c37723d268cf1462fc543377334f276e9c0f42c42411d9882790d0ac4d2fd1e4ba9592bbf82cfee2263426da8545d881026aaa7867cb88e04ed940e4ca1273affbb57ae1e18cc7d79afb17db518aa97fc200af05f70da9201b98847f8642181f004c5539e8c06b7b5f9dd93626839e444dc5b6dbcf36a883c337805f8aa1cf7deb322e4a46aa6f948d4052a66005773c5a32d2db653a562ac41bf89024490821ec6dc863583182a074bb1b47228e393d744730492431dfb0a062fc3cc5e8bb66da5df52911d19ef01c7b2952a5dda1a73851e226a62f2da4151d99e810e4ef9bfea9441432b80f07f7b1efa641a4e83fbcc27229d54951bc71bc033d70d08a0d170f0df5d5508e1a0e6eacad0c3c3fcec216034782b2b91081525964c42c8eaaa04cff5bd3e2a113c676f3a980a2906c2a628b68245f61d653a2312d8d9bad0ed73905c9060174cee61014f1d07d876de95465fd4b54450441de4ac077186053f05e8982b435615268095957dd6c870667bf3ccdd99d8c7eca3afb84f16db19fbb09dc47f56f7df008d7b8a91b6c4b6bacf6ab6dd0455ba1507a5ad036c4a4e2a9d16e907048b90d7aa6294f7baa6399d2d127b346afb537acfe3cf1a4c6b4bad1ac8347c336a56a2ac8a0aa2be5ef6af5c051fe27184622bd6ea5290dfd1cda1971b622725bbd09f92c2c7dc9b13d1416181ee40c04576c7f13218c503aac3279fe57f3e6cd977ec19f604dfe9fe07ffcd9ea18f25dd5fe891526737b0a18c18da64e93a264c9bc133a5f3e1e689e17fa4b6ca1b0815c726a0b710a999a78fa61a712a7b36e954b733ae978b7d813ddb445b12ec7771c2e4b1c2566c7c04c9804d54478a6f311995607a1c71a1da4e9caaf41174dceb85c5adc7fb3d5ef9e1227ef71d269c4f2bd67ecdce38d9c9deead4e888822438196da46b8e750c29c8bf56863ca5294b7f5286888254fbea414f187ffdc4edac63e399be3da7f3a2c805c6c17e52db88361613d8bbd39740de52c2a7f5fba41f7a280e052ab2b78dfb6b1ce9d0cab9865b2c275bf9a08f079655a1ddc1a6b59a5f60dbe24a6dad019288524c547487f249f56bd987edb636f74a4b7b292dfdbcc03e0fa3353e2d2dde95f331c24018e3587d4b3cf1d91777ddd994d6828325889aac889698f03152d6ef30a6fc12d261a9fc58b42346af77e73c898579b167b9aa7664372df46e0305aa21555ba4413628d922196ae92640a6af86c0142776e9e10a2411e5acd2944d431a3b7b68781e4f0f8b7e43a6cbafdb42e44df5db949236117db280f44cc4c584c110a156a5f12e9a44f05a279980a19b887a1b1defc4ceb86b94562564105dfd6cacef4c0f525eff41ab64d66c0aa5ea1cf3e5518c39b92ca4ae34b54af49ffe060051faee089b9e7a51cbf1d084fb03670b3d52ba23ac8610ae765aaad61f7add42fc7a0ba8d881a578cee8a6bafbb8af01fb48526c0e1561855ea9a53a35cc73031ba0475fc7fc55b91e6989ee6cdc59438143ff2e89855939e4c923dfdbaf1ce54c69f3f37d5939bae46af64a052c1b2aac75af7684b0842677ca4fe3b324adb77003e01372848fab59e100842c84094d18dbf0e1e2b62f07d2a256f338f17766d4947737a30cc9c54bbbc260070c9555cc2aa6cf3cd4691a8b1935b348df057de9aca0e2ccee7f554c62b907e1335866afaf5ee3442a743c0bebc33022fd5fab9c483af915be60098b10b68f69d33e8e2856667c6b75d97165a90dc7f22a79c240ffa1468850465e6f847544abc0be6128ae9e05f18945178e8dd705e0dccd33b0855671cd77547c6cf183d4484afa26d7b456b93dcf8f4a2dc08a46fa1f8b1f8eb61125c54d4fc7b3bd35fd80ebb8ff750a226ac4452ebc4bbe61e955854ba15cf1e8c3a6e03dc3161e2fd8eb931946c7fc722cc74db8c3f2c6c4cadd02733afc4da1f45d872864c355b9306415920f6036a6c1e0ea15f2f552fdf79bbf402da8ed38edd3f71c69e25ee8680ca9a73a22a90949cace3a4dd99d381fd731fd2a4115078951eb0907b0bfb1581633d410214891c9e310cb81c7ccae1457534c8c468ae6f2dde89daae42bd8ec470c0f3175c781917e9fa150bfba9bd9fd918ef50697ecd1071cd25070bc04c90bbb86ecaf1f329995dbccfe7d9c336ddcbfb3504ea067659d2ce9425b939ffc20edb72f00f85beddcae0ce43f42a04f32ec901240db2dcaff6be20a64a9d0ba1a294b17bcd0e96940c8bdc5a677a9aeccd28e4dd30dd04283d7c78e5877a21a08470d77262309f7987b46291790a4ad4b13604d20d8601f0f55cf7c70838d2c968e57fe409fd752d4f630df6548463f01b2dc463dc60f5e424c37a89c7211b237b4bbe7bb3eb0dcb1eb5f0de0543d2345c33d48062e97c6af27791c8ef1432143b52fff7272b393d267c0ee2d7548729936d0b2ff71e4e48113cd1a6cf282b2de92c9013aead57ce0a200f3e98c849c9611ee6e2e46e82dacf85ef7a456f58a6b6e50c5952c53baf140689c06fd9a171765eadc9890827a5200767d7402d39319e02bf42dc049c4198420956cde3a8fe5cfdc41be318b6157193fed7ecb9352ed88a9f1864a0a706960fe342d32734c87f4d5de17047017a552af462b03c9ea76da7e1ae40ddabb8704d0f110203a7c234695f8e1906ef842ac48d08cce125e0188a7a2bf048823aecf7856a1591bfdc9c52a6e13f73292be89ba17097b0b1dd4ecc306a27474f8d8ba17cf13d552f14068de80dfac2931865ae2bb523939f5ccc4bcbd69a6fb8c13bb69aaac403ba7c61be1a6be414768c117692f3bfe92b944eda6bcda02104d9f037dcbdecf9f1a66c4c8649f6e2b55a4e3e10d07ca88f6ce08fe087b93d23ad1ce7c54e07b67d46dadf72aff1c4b7b3b593c9e2f853c26fd7ca439d9db37d88312e6982240ebb7417476825f879bd4f7e672cf9ab9fb06cdb5583165d50d2c8662c9beca71c84406fddfa12aee7afdb5af477aed9fe30ecf8f7857c7306ffca070e728fb153516064b3d251691ad1a163fdff8239b765a47e704777c3bd44d2aa7475cebf258e88d75d7b8e2d829577cda399b13a833d97c2b05a24532ec5d1e3975e1b4e7930ee6fd6a8eab84d7bd891c0e11228fdd8acb9d6cf319b2034bbe557dcb1c201d1c0651299341d845386ea27b5707511a625f7e7b2d81c7d678dca089b06ef33f31c2d1e5e249b9993d43cd9a83c75434f9229cdf55ba28978f18ac5db20573647fbf2e5f6fa0436102479fee0fbc78ec50615d1bef01e201727fcf7caa74e04a4eb81b21ae5df6a9d8059b58522047c41df17f08a229639d2e7ffdad7d87b906c2f9bec787d83c84d108af84b10561474e3fceb6eb5dc18ad9ae0fd6a196b491bbbbf0195e4562e03bd6b9e49d8b1fcfe900c4e96964e817e95cb61c0dcadb6241288a7ef92c4ea503b9c4b2fe5d655c2656b80b6c28914fd7b215b06dd0373164ec252f696c613d77bfdd814dc1eff3e53328e4c7760cf44787a27f6431edf7aa6a22aab2a215ecbb86dfeacd21bd095af2d1129fa2b97bb651644eaff9185530cf112d39415f7f67e545e417624735441da95868fbdda55be8dd347a9e4ac867861b718c74666a45260254b6c148b330acafe559bdfc02743dc6d819a0ae1504b8a9837af690bc69d96c1f6776fc495b3e0adcfec89066c36d852042844f4ea2ecc3721b8b062fb08b1e5a614907f48f5a39b192eb8f2dd2f1fe5e2eb87fb1a4520be5b68cc58ca6c397d14546c76685d0c12230e85e6336bc24182d8b5b309daf34d7e24048ff57dbaf7d91ef47ac3abec65165e2ed36c8c5aa4f9773a9755ca8ba3472aba51ffc40c19f05d6679dd3a7491e45e5bbee0148a4cb19ba72de75cd010daefa6950c738b45c1fab0a13b19d8c8726e19639948b148b3ce3d2e9acf5c0ee3f87119739527495b601d538c75c854dda7ead543bf15579a8c4f3b7bf9a6f5e7b2aee28d4770b9edf7bd3906cb56883a6b5afd64ef5ac45761b2387f03cfc72cc57e86c4cbf3dddf1858db416f52d59372e5f57918b14060b846e69426823dae42eb4fd103838a5438d82c8a6e2fd7268f9df6fd8bc4bcbdef693f5a14b838d44041412e291c2c1168cab5b63cd8a829314f3b4ad645b07006f93e2da3894fe777a1464bf89aa8fc79cd51b8ef5a627f80a28dff7917af17e68de9700acebf565b110ad9da169fc629508b2c3efcd8123197cda6a73164d3ff45758aaa4d59c7433c48a6e0e76078c153f1946035dac48152892004bf14edabb26012340e6ff972b111fc639c15e03a861fc9d0dee5ebe8770108641293299e4fe42ef7e7d1685fea6bdeb84c9a5462e2df9054753abf6f49a785d8c61706c6fd15621eb222425c1c9ca464dfb5bb1694c759b94a46f6ab77d618c3548e3c5ce270b79dde178c76c4677bf39ccbc07f608c6c0d58569d107c98cb8d3a086d109ed340869ee868db945f84d68db0cb4a8b9b678f1859fe38d63250918f9a99befa012b142bbd6340012f26aa152ae079247ad6043c7e56821022816709bbeea1360d54b49a1f2e030b35acdb73124fd65b4cf9d724f4ba34a6860b846fec380923e2827c2d8f206a13aaf5b3f25e2e31bdf83eeab8aa02eb5d0c5f9c81d74b54e0f6a150a670c218e3e8a159c56437bf917cb4ed7b632ba87c31264e9b2e26c6bf75d7603b6587cf752df8456e21d75db0120b3fce6d7736f48e33a40ff0595602a8fb1a0ae0d0668f45168bc0707c3a2b05b13babda87b626b86d74589bd63ef478771c8c8013fbe8da67052ff678a5b9ea0acb62d3c47e61b3ae824178c96070154b86b8604bdde3f459f97f899eead92de0236d47d626155df24d2a341e3a0f3f73633f1335ca42376811499359fbd0e30f44f3b2c7cc7c2c83b2696c2b80694b6c350b1fb4fde3465e571645b13ed6da45894b3570c15b4fc6a5faa728df9549e47af45108be37cff3b4a6fb7c6b430ba583913e93e13a646200af43ae2d1042823680ea23b3eb8cad8cb09fb099217a95693c6b8676db0aca9c2082c0d29cb478bcced87b32414e0e968da3c4f7de96601ac53d1cf24df6aebd4c18f9c8962f56b49596ca4d7789e0214dd5c4e1af28b0a5605024a6ae385db4b5700b743a935d524613e1d56c2d9eba61e5c978ae3600de8e217086df0a2d0da843a273d2e4dab05441b377a62db37e53cd573a2d3c97480d7a7a68d527a4b92157395cfaf5633c6b97dc3c7e424756f8d4fca15508dd5f83b5277ebd6bba73391409d316c82850ba7c7782ecc0511c13602906e23deaa3a2c80634d373d1eb26bc72224589e49800abcf7196531ac5ce956b4eee1fbb955a130951313a47c9747c4097bf4b1f59ad9b355e600c30f8740886d08804102b6c78fb60790baf8c005441b78e259dc444a9283239533eee78d3f05e2f39b059b8e488e53409985fb541655b2887c4e16af14a18556b7a737506874a4e5ce0205547dd438ee0f8fc9f8ae5fe4604d660523f6bdf1e94f3d307829336bdbf2313e13476923f2cb29943909f1568ede291734f9b79bae9b1064201a9f8f7336740e9d2e33d2f33c5a762359f9b6b968a3c5192c99c24dd6ac2e8c392604eef4c615f2bc457eda477eeb6ad0af0666ebf3483598347d74cf434b02d8cc26bb3f10b2692ca177ac0a6981471ddff3f3a6e9912ed3e8ed672e1db339406382a042c2f2d2338aebec65cc7cbd0b0cd258465598914aa7553fd964444d996712a2c38db9c09fa3d2fce18eb098c0f11a14810ee7709c48cd462ec0da1ee0203bd53705b265d5ed1f6ee3fe4722096f1693d3704595ad45d27d8fa19b0e28732d3e0fd3bb7f22ef4fdf7c80d1b57d46bae105c166d9bd42ec40393922b49b6caa40f18d8f56fc420a346793e8f17abdccc4adba6593db9adb66cf15757a9e885982401d47a1e0faadbb180be274947b40c8b637f805c76b1339877fffccb1a75b5682c290883db8f18625e2e31b63665bf5f7cc7bf3f8fd6b28cb79a43816aa373c1b54cca568b13b8d50e48c9f76006783d30c9755828ae0c3bc69fc2b4b5cde9c3c3ce85e6cbe2ab79b9a02ca1ceb0f72255f705f5dec47ba50a8925da4861e18933d443ce82ee74343af3dc92d3a258b0d186025c09bdaa3a89416ca58d122427da31caaeaae09e3a2c4b369e78515cab666065a5ebe8e1c72c820deea9cdb3691a431eef51a7752668e673529e5d9791dd2cbe1ca3a949bf1c9692a994eccf9c24289977510c37158a276bd7467f26f93f4adb389aab7fb07d6ea984669b05f89e6bf186c2a6bf0ba41e1ac3cf52d5e30c231db2b9167f2c59bbb714d5ded057188848c62b66c2d6c845a3a5204f45c8e534fac1b00a088a7a119fa37b6d69e6aeb48adec14836dd8e66c68eb02280f785c042f6c9d271e1e8fe71f3c27b0ea7f83cffcdc73a17d22740b67f06da5e64a3b1d38e4e7ed52cb1197e5da888fe6bc9588ea29c3947aa5a1613bb0de9931c02a9f937622756bf73c052ce305a7ae0691d396e3c30281a00df31eea7ae4dac068529dbe299ab060c4cac323d67e8927b583bebf0bd1f87bcf7c6b634845137186af6f88a98932604f5217ee213e7900e55d7e57bd8fa8104d1591108425cc5fa992d6e3fe58ea8d5656582f1dc460cc6d99b72a39610cddae3a6f5fdd06929a3658e666f62cd1f0a6a2ba6b2a76d6c37459246af01a5c4c3c4b676c102d2258e98f9895c568c5cbfde178dcf8ace418d894a6505eb8b2a220f1b4c815fc2b70839babd711701775f13a7a2cf6f37f6861c21dc59b886309b4488d8728810ed715b5046d1bb3c5491f801ed9c372dd13b1de2c51581adf7ec15642168129169b2b853600668846806dd4ce555464617b1f03a99a4559b7712aa5ca206d089cbbcfb1bf5526cffc0adc8950714652fc5ee3327a040100f16f174a16a192bfa06cdb2d63b6ac0f788295b5c140b0909cf0199c07e2cda19be43361c564e78d4f5a0a8c7375b9fbfc5c831b9040034a401c4f58f51e772ac80aae4f7a7b6262313522810e5ec20393a79db3a0e7c9e2c3ea01e291f7a3fa05179e26c6fdf1874e1fb9540636497437f59bc6c237fceb71ba73c818a5ea8f53b8b2432b5ca5a510cddadc919761a6b6511538b75dd7e5e4ac9e84288c31dc42929d8d2045521e840fb713f54daf68073cd46ab1a07a14f3c677f24e671d8e014b5a6a293516313be0edec7f12cf90a3e0904e12f0fa5f91c2bdfb07a68a28bda9d5ab1e7975f22e41bed5ba45424e013f3a8bd7f82d1cc6671839ea6d524bc50ff979d8fd70b445f20f710dbb44872a98f10d4ddbadb545ef0fad76045ffd6f55c4ebbeeb89054869f39f51a752e9b9dec68d488cdf1c7f4c903bb6f0fd151c5639ed4a572d3568ce473eab8984165e9bc9b858e17d31bad877efc5c54733e62f39d9e6d0b214349d85a112734a79c79ef64356565f7081086164884f442c503bd24814851f497a7384d850f555ab6c38b24e09724aaa615f7fc1233dd399df1366b9bccbd8edac674faf6822bbb62ddf359fc86f50caf5ede96f75ef950bd2d95c27b5e61a661b5e03fced198a5156829da72f64628e337b4dd8b1a4c6c37993db62f831ec8b4eb08316a946a89dbc7ff0bb037587f58ac8d1ebe5786de46c59ab94898ed849c0305edba41305c408d2e6debea7ba66f538406ed5b7746e2fedf7b285f84542f2a74286832a5c4d8fa8eed8464dd0962d350d782f794852d12fc1973daf611b43ec8b0229fa5101c61c7e19718d28b5d258fa702eb7299222c95ab44c1ac3643c2f44f15abc01501fc73bbeab8a0f6eb1025fe5b7426ebc08f0fa0daa7f5d36356d59bd916adad01d1b4583db4bd97559da9e95d6281dab2c77663ab98733a1780eaa5c3d029263814a2805fc817a6f4b6609b201950709a1d23e2e4a0c99e9cfe56233ac1c14d32c651f32fa4de543ff2d284e0f9d821baa28ae506e3f9a3dfc500ab01b322481fc6caa8869e4da87570dafe6d37cf14644d5dc569fc114d56eea41b084cc5503cc5e2e243a36898321c360bdb1bf4996cffd6a8f32f9d290fae4e34aa970ab4ebc9ef8ed5deaeece425f1691cab3acaf994c503a7ba1913f8ba2ff5922d5402d0c9fa51dc81279dbdf915ee181dd5dd86a9e198636f486b5650ef498ac689a3516ad06cf805d6d584ed1532a30347df6514b0bebefa2bc0b8efd37375eb29b01fe7e040a2f85e9a481ff1664dc92440c875e30e12d7a541a5232ab8b9ecb935bb6a0e3ad054fed5d92e4ea4aaaa08ab82ab4c2d5a30d7b613d0e99790f22205a140caf72c46b23280be155e174a3ebc429569063f2145f647404cfd3748e2652a67ff87850dec343076fd994eff5f44167aeec7cf87cbb6ecf1f64a016792b098cf4e7ed81475b628b79b8dbd4345b7ae6a512f3c7621d449a8d91d5e52715ccd1d7230e6488bbd9a83b666afba4a62fc656bbf35347fcf802a6c15aba3c512db8d931215a94b682c325220b01493757f6054b7432f7c7d2f206c26d68cc0104248704076f4da687875e69811e06407800aa453714461e9b38af5e1ffa384e560d96eac2c24b995bad013dde7f1d8b4126c2653f94604328ad060fb4815b5ee15284c32f00a09ab73f344eec1e4394b820ce9f4ba7ae885522549aaee605d17869ee0334bb77eedc1ce4e6b92ae8bb0a119719e3695d5303ce5bacfc83f9a4315562bfb887f80eb7369276605ca239ee4755145d86c1ebd60046476e8b91005f362f725ad95d846a4b52c811bf3e965351e1d65f6088763350097b61314951e5bd979b715ad07cbb3d3d0f2adf8fac4f7ba4086a9056df95f6d54f85984cf8dd768b4fb863b7ff1b4a4e578fc8f05735ddfdddeea0fe044131a7d997df3d2247051c285e4b79b3d06bb74763e8395301917affb811db0cdf1bc3000f67de6feafacb3a9bc372e11ee37e79924790efe4300998557cb3f0b77d5ee453210f880f92b926523178addf48622e2253c921faf29914c2750b27fec3c55a9da67a6ef7779d20571c3ee22d76c154b7350c99c2efd2281e5543b9e3a9f2983f5c475af8c2e61e096f257e6e171f34b2902c8305b50ebe38edfbce0c0c67b6df3eac2bea95e2ba7ed75400c688032b5745802b2a4e9147638a9be8f227d6c310266ebcb278e355e602728d8d664709c0bab8383ae5c15d643d0d6baef2af8c298157943063783d6ac3724312f5de31220b2538cecd08ac21540c7eee40589cedc1f10bcfc84bcd3bcdee596a4c3b97130b743091e222e36b3eeb4f893a41f208add49f8e53cbcdd07dac3e5458aeab3637167d090e64a4c5d767f5f1eb788c343134449110deb60fe2c7a717ae08647c258251361b00a762bc4cce4fd53654818cf18bcee854a0d05f80e786d2b8467e6e141dc39ae7be5ea303e06f8172b9266fec8a73f52c66c720b42566f43858a885c17fa627d0b654f39fa8db3fd459244429979b5c5dbf5d35f2282cb0eb43f5e8831a480fcb08efaa47da6c8d9ca7f7a998893606054aba8c3b5d53e89a85be8840234f12b12c9369f1656a6a4a4a0112435b16550c3a347375446b1ac046f4abf0c2bf0bd67a8a513fb3b20c85f31eafdcc7871d05cc6574f45c0db9176e7db81ef9efdba567bae5f10b4a419ae1b690206d7b6178cf6b00162be1400007f4d764463fac6f5a19f13a84378c27a060ea6c0580d37f3d2a7a79b4964c3eb4d62ed25c3fe67265d853e1475f35e27b0f8c885a2891d06b4ffc2c81a69fcf1caae28d477f6d09b0b4343fd237dc20dc615670da021b38a8cb47d38e603923b2dd40e8b08fc6fe0ff20d39ef85e2b73058c1ad38066b062ae8767d74ada1fc705643759faa362c6fc76437e0f59024310dd02d24d99fe43fed8aab9ad9c89bad689561321c033b9b9b09801fdb59f4ac7dc608281e5a0a3d1e7f30e7908473ce44659ca6634ee33736bbdb56a6193275a9fee02f57e5fb389bc3cb2c0b5c1d4d8a221aed3f4b4b02afbcab97c706643e8341a63708e0bbcdc521b4082b322193b5313bf8ef759a36d062e5e701752bdcc5fb3ffcda2ff9ca17fd74ea32f700a70d1cda5cbce8aaf4695be7286d6f234d075b5357235df4f5efd2ba943c86184d5efa91ca8fc24405f15e8d8f212021f410b3f85e7807f914915a0d20831c21f2ff2355d68e9090df07e93909a5980cb3757036df0f63bb9e2ed5eb06601c154135711f847dd1f17bd06747c0fdad1f29defaf668c1d6dac0e46a6a84bc3c632b0c9e3e548e121c50740b35acb9406d347123ceb08a8be8f35a465713a3a7fac55edbdc3bb925733c07cb0ef49b2f333d26ff9666c30004b224c7ed332ca55a957a4f1d7e6261300eb5e73044ac08b2efc17a2e854483326b3c7ab37ebb67fb5072d9301a78d0f2d92ee428aae5b0fdc687798cd01a931df9c121c9cf50438c6c2a425ccf1f733b0329621484c85ac1ec5fc95dd7843c00d9611f57d710c9e2b955c3e7b1e1fd761cc003f187385d17f3393742c282aaad7733d2b299ca196411ae2bf50687da2fd03b722f2d02e61a7c58b13fac7d629c5b90781bf1b8cf3d2d647f0adf088c75495871c2ec6b9c19e8a8d5e9f4a6f83b524485fd30238fcd7cdfc90231cf68af315e041055fbc38d1764fc43813849a98f6141f4d3e2ac7ca8d62ffbef13b07c9b2bc9ad1fb27ee1979555342e6da01df448896e558d4883f22cbe0ebe43b662af8906cc0fa1fa3ef32120960f3ad4f0f96a4fca0165dd1cf22339e8ee13a5166ae6847873f2acbe979e7e19715690381932b20bfbf6b6e3fe69502ea3d755d2e66882ee85f8cd49a0fd14d7b968299f31a4d068808bcee54541547fff5c9505624d4507544c49e7b746d8414bcdb25e15f185fc7037eea8914d80521eba62a344fd2d897df1c7e6ba19579ee158961f8bf102343ea800b4c4390f3be5499545f8fabf27714ba485f1cc39d27155545bb8463e63be0fa566596a2cdbbba6d233ae2e440f4bbcd4f9068df1360435cc77eddb67df7eadddae0fee1bc6de74df7a294a5a033a40991d84923437e910a82d8caf9e3daca0bce7f196df3f3fc6e7c421f99af2f1f36b8f1e4a31aadb4831e948fa6817c8ff1945e1475386e16a732196f613a4999ed42397b9650d6cd0d70f4148524cb19aeaee53f27ffadb34837263e01ca15649f4fa051b89c9c25760f08a90df0a8d93d3a8b628dda1adcc53b93bb57412495c0ab8b858e2a38c1551d68099ec5eb5cccee2f93593f3255e3bd9459a5caa4c46b521649687e4489b4223b68ab4fd9621b19a16c1beaaa23e0b32b95b7b93b0380110c9847d5bbdd595fbaaed99b8f49f7d7f636cb846cf538c31d5d9e1fe75a03240d448e8752ff245fabf107e4bb9c09e23c915ba31acffde1565f35699303ae692821f38923f76238ee88d454eaeb9c9926834eb7cae2572f409b63ee95e17ac975ac9a2ba76b9c95101333c697cafb71cee4ef89751fbf8691a479d75f767079e824e905d2516ef6939073f3ca872fc3bef9bc28b87587a0e5518582e9136aabe5b1d687c590fb88569659b7546f909d52c582944d957e85db01455071a6057ab13aeb2256b7459c8357d677622f620eae3abcb817362d46e0d7399192a2ee5c457b0b223ea263fe43412d0a3d0409ba4b23bebcb11941375e03414c0bb944ec8aa8473637f8fef126a59e7edc413651588b16669b37b17df969d45bd0239063bfb84fe0d55949b73e302f99cf7161cfda906dadad5b9e33b225ebae8806e8ec7a15637ea69cde8116ebcddb7ba3d0f241f20b5d5b805febf3bc7d3ff266a24731e05aee56d2f3fe5386a993ce6e94845b0b2cf7e8defd8812260edd73c70a0012cbb7d8e910c0cb8e6f6de5edf33a46e55383e91765a51e3b6122462723d6f25626c10125c555286a6f4b51ee917b59332277ad25cf89776a8185fe720b88ef54247af1485f5964c66bd611b74872faac090a5cd6681580a683a9e63143673c40ef7ead6d49843607f148ce66b9b0aea3910b8f57b565b4d6a0e014fb5e82f0c219fa613787f0ef5df33b0b5a4f804286027313d0aec4936b701e140764ea7a6761b7ea40b5c113e1e9ae6ccb5601264bc1a865734c8c596daf9a78b7a1de5d25eebd8a40caaea36abfef432ef8898c105160abf02cf57e1b236be21afbd363d84ba67d1ea361662612d7b6ec257a78dcacf0f78a8c60ad20a237ca427078d8d6142929b352178714eb22e2f7ffdc024682e67ec066b3f0ea6c88daa605b57f6d88484a6c522127745640ec938355beda86a45a0148319168b8dd434f69d54eef43610762324df6767c0df6080479223fe20da7cb28d7609ad99957a3e7d013cb8c784b12ff811bd5db445d956e00e19741b0bfd42a03c3f5a29bf6515fa47d28880b5debcf43b9491c5269770822ea69c8192f105537182ef86ce983f397792f589e7bffdd1c00194f57df88407bb677d6c2575c4ddc1dc8b795c6732702bf114c6a097a3f3f5f6a210359dd81d2a1181cfb68daa18df951d8c9c9cb65a94c721c56f6b312315531be1c940bd126521ccb859eda49e2ac207dc1763c752b81b2be275199a8a828ae4933534c4c5876d1cfc8371e6e1847d2c85b461f2714f5a2acabb7a872c79ddb5b4ffd4d74a0ff715f4113c2c09de4181e86ea102cba63b966d8e01a72d2907b1ebc908158e42840b11b168abcf199b5433b1acc3053712dd4bc059ee853e93938600a36c454692752b93c08d77be0d62d696857204fef60d47e753c5e21e61e5d7fdb2879bb3b383fb22820805b0c8fba7367de82059e979ac0482bbdf316351ebe9cab325cf3da204772e525a527832b996614191a4fa09d65eaf948c89e17ec8236761345d13219db1dc37fe23894d256070eb25562a8b919a3b0bd3ee185db4f480cdf4ada804cca9619f8fe2cc69fa2d2aed445d139eeb96f43c835eee6e09e962ea78cc307b0b89b3f425c20a4e884273413ab33d4d75cf0674bcf1aea534004e236e1ae023ff546d53efc953c6cf8f22cd1ffa56056bb93e41ea0b3b46d982f0de42ca464a4f03e5dae16b0308a79bcca41add193f462bfc2a2753881fb00232e5103c34a248f781ccfd421ec7bf6275b9bea4d78c369c9fb25520d5ad12af5d87c36b5f9d738547b22d3ed83bdc4e91f4a1f0fd0228b283e6b57adf6fb24ef45a4aca88d7a118fb1429aaebc0b080c5c946592eb7f9aa079d94bb8e91b7abfbfb67aa3fcadcb33deba29a164f3841dbea75463fd1e26253439e970bf03dc270fceb2b86be7ab36640a2f7c9b8e7263d0acb11929281f28d270f62e553c046660937f88fff3d17b05a6096cb38a86437046261350f8ddb94d08828cd41da3c94b3b14b917c59293d57b34dfc859f0c7a4d815aac21bb7b802632c2d494e575f9de90b6dbf528acadbaab64b62e303f8357c3102db2befbad2ea0e27a5ecebe4687e22b2a763adb00a2e5a8644328ee9f7a16e0a5da1c579487db3d1817e615ab6e553b2cd5d11d3d2a83453e273cd15ea49c996b86b52eab601f7520cb88ef030e0ec72b68398963e9372d680d960184ee2f3b4ea7f614610be524770c578e4dba1e3c98788a33d23642a6ee8abb8dab84571371bdb0b9b1b1ca6fc15e6eba196fa5979af68d654d86c5ecb9bf86cd1878ac72d81c12b59de5dc1c6494503cde045700dfacf0ffee28a0a0d98101dde4dee34b02092bc014114845579cd2c28673a7ef846b82d09b76f20478930ef9aea0fa66a68be0041bbdc86e20269d0ffe716d8ec894e046827456501354087543d5849fba3a29b3936024fb0aec8314179ce6f0ec94624a5ed8697d633d522c80337516c6441a73e8227155ea2a8edf62888c1e313d0e32ee017efcc0ff4f934860d1b573dcd3f65c83d2562ee5f25e4823ce623672ffe6d0ef4e57b6373ae5499eb6432b8a6d700a6bac6e2eda82e59e5f385cea2d7f61a73ad8a6e60223938e5e3ce6284b899234a1e251dba4991df14b4eb7a48883b76554d866327cc5c99d7bfb5d63572b1a7017280098cd669422a0ea79a58947205d64b8675489e48c7847e8cd8fd0f84c1b0c29e918457256314ae59d06f80f9d4f4351232013978ff569f2831ecafff26da201e075af0eac6081113681b3e5ce875ebbef0fd6a9d0ead08796be93f8baf5d8c122f95520414c2dbe5fbbbc105876ed50c6d937e740b00389293472c4cd45dd4aea782238963eac54e42c9da0e7ded4fc8ca3cc4635c79a68f12397dcd04f6a83987f66b530bff25bf4917d90b073e0a735a2d3717cdf8987c13209539b1724911187b429a0d4d6670827e54fe12c194e226ed77e311d9e648ac6ee04df5081c5cc9d6750d48f4088a81e8b95c5ba785188bb601581695009c19725ad6e5e6374e026dcdca56d9afbe1fb5423867e81339b43699e36706d843299efe9c70f2724de1d416f36fdb05e1a5d53002526a272edb0269e65c660e6b779623df60cd11fab778f577c081d7f1112a553b6608e1f5e9688cd239b03e21fc36631935deaf7a857004bfda6a69de8d93b0da16217c03037fd3a197051ddf3faf32fb14c75ca3385a3e2c751adfdad036744961c86e59f0798be8fa65b3ed84cd69639273d58d126bbd228cd53208ac7972ffa61014e189fda5a8173991b13d985f988bac839fff3ca18942e7b3bc1aa961d12a612c2c0ef7f457161ff3df780b8c150d5965269df8079e98bc62d694a25807989c47266e096d3eefe04afcd16ba34aa201738bc2b139b541741c9c1fbf7f62ca4a169dc57b02e2c59f6de03774a3cdca25f458e56e3dfe10a484bcdde34b61a3db6f1fd59dc448f8ec672d9f3988d0643d2e1cb108ddf65a426f2e4132e38081dc4db9eb14cadac91f9b74e6a30e2c505b49bae0089c86ac3e6228d662d9afaf72d2492e739183e36e29d9008fb653b0ae5991a2b1e9c88f09cf4b347ee2222c596a5ad18a12547f1f0ccf3f3a298f6b77e22778b64f586c3a67cd7b844b899cf15989b9490b718187bc387975b49b2b6cfc37f9c20844bcb466d0530aef1d9feec601c6b11b3b40e5690a48ac6797b0c79b4b6059e345da981edaea3462791917fdb6c75a6c4f940bf757151a678c0f4bbbac9ed994839de29d34bbeb1159aca165cc79d38c5ba10388b070131d922e778db7fe24934bef9bf35ee0226e503a5213b14530759ec7923f6139baad7674c357d201264ab4cc66b5341229b723618a4cef829078af86fca1045074e19b4269069c1d6299d6854bee3c287b311c04eba885efd3cbfcc0375d88c383ec229bdef136a788a360917737fd7ba9ebaaf3ef90c1cb618ec44b196b442feabd930e4b2c3ace969c2c45d743f12861c77107442738adbcd95728255eceb8d0d115f982734a459f6bc45d4b5e0edfe23a6baf5bf7c06afc3d1483fa5fa7e2aa74c51e072bb1632a5a74167dff70e370e2651f5f20d8cca49236c306c30b8205e422c44fc48a87d05b4f84c49695eda1e9df0e3d7c6f10cc61caf836c2eb27e732c487b4997033288c6e2976158a8739569456ad1f72f84791c86e143c59933ba532b27f855dfc5d9bc5d7ad10b9f6894815226ab8c89c9e727cbc217456cd053079860ca9c2224a8495d2eff59949d830b76230dd82b7c9d9c90cf9110002257b7c9c31aea7e0886b0d68c309d346bc74195f09174026b5fdf7d40c902fdf8b77a294525a78c476a7e6e09f7078435ff50d9b0250d7517dee7a0e3b663b9df56bd0f96f8ba487b5c0de9af596592dc8b5a5f8f3ba3aef4adacd9ff90925e0fa764e75812e369b34819422757f588b91e7163a3ba7f26bc13629c1d99897eb3a0bd063df174ed9980160f9a5a79dc11c94a8c766a70c90c3ae447b981a7e3c745883b713a52ef3b53ec159632e97f043cb4a5ab3556fd8be93d4c9fc10a5aa7423cf41fa38ff3a6bf220bb566f8862a337358e05c2fc6da998a416b1120fb6c6f9117d7a3ce6b419287bc742a99424fd40d4aba705166e77f0c567f5c55c4c9e8eeb7cd381b533168e20b385685f986c6860fcd87b8e84d99cd65411f7ff521545b6945c01c15258b7ecb2b4c56a17db197594c537575dd173fc8b4efe4929f8818cf071845da48fe855f6a40561d4a946f88a3e6ae17bc6428dc58fc6475bf64f6c32c7fdea13b30428c837f9af3644bb72c169a7b4c3f3cf1ff7fd221a1d76f110cac507aee90076b4fb32acbcf2ecb3ea535c7194694f26c0db43a25b610c73e18ffce9bff5cd339883feef02fa8238095011718c180447682320a2984075e71fca8df964a1238e8451f7d840789f751643ce0faad55088edde5d37be2e4e186ea435191815c3fe9b3bbe2a373e5278f8389cccb22b57a99775376612effec474db8a4b7b435b0583a6d6bcb87d675bf9f07f324dfe3a95e66165dfeae08558b6ccd81c11ce7e86a8c13671a4adb791822eb3fea01464dada0718cb91bf6c63a0e372f6c8a46135ef4ae623ac5bab54511048155c320c8c29a8332fd67238f2e50b09218413857f594a7cb55dfaa5a476efc63fd03dc73787f2a82c98d661b6467111c12836b4049201a5cb89a863b8b0d8fb592ff19042c4dbb9b662770a9e993be306f79f51c70720350df44dbe26da0a932066872979056af7f9c5e5623f1ec19e24e98ff3b5aa163e0f47df26d67d08c84d6de059953ac04717d76a14e3e6950a13fc42486515b198c37c4104e21a9ec165712faa560c4f01e2f0746b4a548bb29d65a309451edbb7aff5d30cdb18a06af628d80203e87f83aa8bbc1ad3b0f8f720b5ef1fc18f69b6c8a342e9db6d98b1ad0fe355bdac7e62e01c76657d21734ff6a57c637fcb5e80f2b21f7b75103081cc077e0dc3f306edc66c6a91dd9fb2876dcd4092f987f6d31ecf3399bdd7a24f1b9644cd8f64d427f253c88e829af40d18ba7d8aaf0bf600c3c54540e4e348710b77bfd358cd6b63aad7f875794e9619d078744c2b3a17c4b1cf889fbfe225f1c16863275f4cf881c5b3b908921898dfcf9ea78c6d7b4bac6a13bfcbea01bf603de65814085b61b8f676d2f57f9b10505776e6593d22df5610d50b0d08df7e28222f91c5078afd484f042744557d40e81c6d999098ecede9729f3c08a2beab029f2941eca968d7dc98004becc01c0b08d4c4a72f9994b061099e77158acf1334e0da49ba7b1aeaea154d782e91f1fb95205686708fdf3be1ac33de60ad930134f358568cd0bf01bcbadac8cdeeeeeeeef41022be4b8390f7c7168e4d03ce979abb550f32588376c1f11a36973b759eb52d3c31ea4a9fd5bb06b68f3c4c5fe14c5c9fae471154064608140a9a50d5b51cc1abba648d80d9ed6d9624e2099347669f4b6d6915b0beeb8f5935f41a90d4e917dbff30e71bfdfb1730c4c5254db3ec2684ec85a917e4f643a291c0c7b0dc5888788243c44209ca8cfc625550fc3b2c3ec73e9eb95a729561a876e17ba5b7842d18e5a523783d21c5bd8fd8fe219c30fa6be30478cb577f2746b91b30e2216e397392fa06a78f51782ae317ff58719c11a40c298553ce977a0d62f669f152c4b65c8dc4d0c25c500809f105c770ef4b69ef724b468e2ea29e96a0fd7d8fc76dca91f5fa7eca0c88c7ee95cf2aa23bb69967ec1826bbd36c62e84b3b5fdb61162322f6f5205d6a198f82e63328652c6180dfb46f3c5c43dca666e4a0e320237072f72a686af48d751d6145bd17c62756e231735d8f8ee1564e78476f1e0de45b10fa0c12542e43eac93b8a2d0a0b9c63989f3d211aec54499529a6abc79eb50b0420b83ddd09a261b32771c99a5fa33068320478d160936fb6d40370b34f73f89953963ddc0a6f08f0c8d1fac27ad9a934fa15e9b331098b2e496d8eabfdcb214bfde946f31b4b901cabda7f55825cba8bf487779255a4237dcabc4e6d49215c58a47ff77d6589d3c7045fd358ef0e574110536dbf28cfae6dc1669973472b7dbbbf8ca8b6615ee1441cf49e79d38c2dbd398edc3958d609bdafdf0d7026af78f934dbaefacbae3cad18b7011de7dd7579c1d9a9deeac3b2ca3206fcd2ddd2c1a27fcabb26ebf02535364175cae13ced810fe2de30af14b5d70f6fc5a000aa9188ae6790fcefb0e2d0905194e0a03ba03b8b3cd541bd6646ba4bed9d290ad44c6769ae0ed73f32a44da4a2b6fa145654ebbcd2f5edef4edcef60a0b8eff6b67ec995e6f71911fcc96942af00ed3192c5bedcb5b184d007c18b22d13ba948739321f22b9ebd100122af6c7b9fb9c8ef28fe3a6f4c67b3e202eb865128c213cdbf22d886d05945c0bbb3c50d42a068dfcb609c194f59843a945790c36102f71fc3ce1b0b60d416a2a943169e98f62e3c33ef99cf58b711c55dc6ba9c9047a520c4e9f7ee7ea66cb13da0183bb2378a4ce256bbb26247fd30b1ccc3b8b0705d128c2323d310cb9c93e0bac8a4b1ebeb3bdf7c75f66474de7b1eac65b81e3803bfb4a96f1c5aa54dc5cef2e8eace84e39fe66b014d50ec485c58f9f14c3f688954ffd4539ac58aacf2d658757318f462cbb4309a8f300cf67cc483b14c52360daf2e129288baa2f4f049b07feecbf75033ffe02495ce81cb2da2303fb7370c52a422f992cd85be874b9b82f030abca4cffa6c5664cf51d8381a2760c619c1fae62ad444d0aa7147b294059a39fe0ce7cf45e87c8c99a25ea3ddcd79840024f507b9b4ad81183472a61e3fe7d55ead604583b76280f25b49942675b3885719bf6014a2b510396f88cbff13fc43c96d6df22809d0c2793761f1e7746ec39b9632431cd1b207f13daf35260562ef5a4e1c3349dc902babd3d779d4512652a27df7359ce5e8854b0ad7464aa0327b63289d25f7b45a405a5386f1594398bae16694ebbdf0021d6dcb91ceed48f58c10e47d18154a29f440efde3624343e450f4f6a8c34ce52d2b61893d1b4b8c27d906e4dd1ff2846cb02bff61f31eb58d7079e633cdef7605e85a0c3b28ac3cf24464d64e17c941ad92a8a1f297c06d651aa490b4f08d428c31330dffe9db20709089835a4c2464219b55ab5b8f6a4dd5c44e0e00240ccd07c814ae6bac863dee9dc776f72274f6c3bd20eedaa15ac923ea0ec5135028c8f7da9878edf2ce275abd86a7f4f64c4a5b20ee970c3e4325eb5918197cc7e3828eac1c130b0e4abfb7d8aa1e6dd487c16383776a3857db055083a6aa335d7c0bf7aa3bccde05b39661e50cf22f6f7612d0c2490c53f602dab20a5d4a6bf442dd52c7167860df804e0014276d7f48dd6eacbe26c66c199920b74a2be7fccaf30cba5805015ff4293334548804d3819542aab52ffa8e41319e27d52161dfe75f39767b2a594bf94182960e3a111cc0acb9ef6185342666d719f63d42550f8287393111df366cb652359fde36dcb944a7b287e77b533fa2effb404090e263f76bb8fb5ec39c7647c0dc461d4c72468b5429512af962997353af0eddf2b1fe2fbbc9e5bf2d8a47f516c45833bbba5f4a5582173294994b3fceb011694ec15172b0740c6d5f4adf9ac3fdbb54632d7d39b5d60641f4600f5956aa2d09c8165d7648d86d09e05d81b4f94a0327a8e3badc693175d20aaa982a66dd86a34aab667c72136c1946633dfb6fbcde3cb5f30f2c5d97f1cebec36e73c04115324d969708f2dc4f6d7a2da3ebfd91695d7fe5e99ae1d32077589821bee1bf21a9fd5038e587f991c852abbfb4b1936d2477aeb7543061c93d96017cdfebbfb5707872ffcc8f578883b4c845d05f53bb9b880439d78ff4922e616dc15b191237f7b1119e5f965ae28e123626ececb2383fac51337af8ad013314cdb4724ee5fe998075d1659351966a5d49bcecf5ea8b8a00011edcf3730df27cf06e30fc599c1c9e4d17ed18e9dd523247ffa67e1f5e741ea0cf6b546ef37ed6a1cd2fb7e6b605d0fd4f37ef26440f944e36b73c2bfeb87b63eb79371e7b3dbdddc4205574e00cbd2066d1f9832b3bb5363eec5ff60bf82c463141703f23bd7493f939d1f2bc9e2d8475f9bcc14325380678002c7ac37bd7557528fe02a63d41097a262929c1fbb3f0c3582781c9808f470410da0887211ab3c4e19eed975401ae0acfd7193da1748ba760e0a32c2d79271df8eb756908f874dd16a3c971837f63dd2e410efc3dc6bfbd59b1579a4ef46468556674c67426ce766753745c36903fbe23fdb2999e9666f04365ad80ec21cd5561a84e2271d768ad679b418db78c1553e5c6378ed345164cafeeb187d94cc2d23cab2dcf6872a8036613c1dd5b02e237188c4f62abd6d3168993c9d00a50924dab276cdcf0f6b01a57d337220ddcc3b475ff59d606c6d2f02ff0c20d05ff5f236228f09087b285e45b3d3fa5968d7a3038265342102aa7999da04988bae2fb5240d445e8db1e741e78c01aa688b17bbc3fcf080bda998b9059cb04bb0f42723b6c98cba6f2541254a4426c1a09c405de0fd4af28c0bbe3f12a2eee650d94b3a875cea8758dd62a84b9115e0bb9965a94513f90ff3a4bbe712213bc025492a9e72dbf142b6db146aa2aafbfdd258b5ea08bae3bf22ab9e9870cf796e603121a26c0def8b329d9167ffc29daa860b93b775f813bd4a8bb1d486c796c8c9ffe4f28237ca1aabcac8b42618078f3b0985b13184ec9a80a65998ad95d82ce4f3224fe2e7103c1697bba91f2a204648225835fccd4e1c0e86c593c834a68be568a090e2e86c6b6e259732f0f21c88697ea48187b22fc4ed6ca304b277527ddca4a0032b8431979cf2b5b294cb0bf1ab63ad27200145148459576cf046484969827c8d0120c1d8dda87d7774644e21eb185e9a4867816b385a524afaa5a675f74e2351795e76f3b084cc5e8cae30e96ff7e3b071f8420b8d9287effca362fd34253994a32dc5e2edba1f6925f01ccfacae6b067784f0c12f2e457ef043074d2857b7786ff166adbae7dc7b401e7e06af3427cf323197c5ebaabfd335b6bc58d5c0bcc4321b47969f8f2a44d10fdc86ab0064b5064875fa4f2d74d424cf4675d27b8255b626dc38dcdf82773ade4d1e9f7c37de132028cf032143eaed165972bd93e138df193d6c28452e0b57b794d8ad68403e3168c84046d17b1520ba5031def4d0a6d9e8769c89b25f9a07b433d449ac8b411349c8594219b00d8738f727bbbc53b9d04bec07d3923120fe53767eafd13d70d509221ca17401cd0af40ccab219d515009b7757bdc544c657aaace6d81041bebf0f79fe34ca035a2732c4f46d5053826633fd16090d6bb4a491a4868693ee289696090baba6e367bda97a2d37e750534c35d40bbde112961fc913dd383ed9036f4ce413239e42d5eedfc19252220ea736fb637ea85eca9ed67c93893c2f1dd768f049b163fdaeaac11685594d6a67858e942dc448b92cffb81757562f49eb2db4453be454fcf7e7fff1494f99efc48180cd8a78fe963a9fa7e0303af236467ee0508e6f9021cb3b3cb6eb5e8efb182df6de12ec6a6893d92f509cb226dc5d3788ea88ed417dc2dee52ff9b303ea6110ad3c07d0005df0cdd16bbc048998d8005de26fd0061d30e98f9d077d8f7bec366fc0f5248e2465e43131bce682f17ba1f1e616bbc257ecb11dac9c405c1a6785719662cf41b908d7a4920211743b42d111c4f5f4c9f9e60c1d3d2ce7fca7da10d1f710f0db22e73c5bb627d2b74ca249c11f554dc2511add05fb9a47714dde9185ae9f3777cb151bdb2dd88a4370db461ccd1f5ae486349644d57beeacb61ca52246ee0c6f5fea7e88cb85df2ea013c34cf3095c902778f10b0247e85494a5c27273cb70a85834f76c5c6319703f4f871fee78e594994242c783d4d4ad168f6b04dea785edd01f0aeb42f4b0d0ebb2038f291b4891b8c5308c804d3ffa8bb723363bd07cbbb9fd4546fb3460fc38c51cc8df4f92d9210ac4a332f992a130af7ce37b692defb237d40800323c1f1eb330996ef966aa6d6508b8a82a67fcbb2044ac48d79ef32bee33f918322f9cc63407d21103dec439d31815f43a3a2407446c712a1c44c0e0ce3fbabe72f5c26ddd1871ee114eed60acb6efe7b6aca5c8ec856e89f0a3b41849d127db341ee488a6e3e59b8214b3d25fee37adfff699d6f76d438e7b3c370bed44574887a090fe71135b28abb462c709d36d7a96932ffa7fdf6ffca0c174a9fce243de2985d7cfaf4461423a455a392222874c5c7771e88a428df56f5af3b49999f3c5606dd4a1f5b1cc47db7ca8d1deff0bc6a7065ffb80b88130e4d729c6ca05bdb54da0023ab15b4936acdafbb2d153a0017bc29fbe2e3a60ae4ff0f0aa86844fe4b0deade9c1d973ab834748c6a29e2b329c9a3d7efc0c5121ab4968ed25beb861a5dd82d3c752d94b75b2f864bac34624b893794d86250c6349c7487fac2641ef069bb2663193b285b1a7ed3c77f0bea720453294726474f12a00f7c28ddc5437b24e3018a4eb210e6fd54148d2deae76fb987b39bdbe6316bef907bcfbaa6d61749a0473408caaac03611d4a49cdec281602f17d29ccb5d97de400559df2d22285e43942258abddc50b0ebac8228ac6d9e7be4954cd88d47d3a654fcbf9b9292d4dd811a2803dfcca59100344eecbb1fbf6aa4379cbd844e91d044bf6d7cb0403f871baa7e859af21e570781e8849440f90efde2a0bcf020027394ed81253f66add4d32e5b2265b150e71aad0810cc61218d4bdca66838727fb4d721b2aff8401568fa6421c20d2410d22c2aba312c745552fa424a608541cc883af3c7128e1ce957a5936c372fb70115dcb05fd2e0d4eac818a97d3780edc417e9061c38ee3c72061a4f354778ceb4a45ebe06dbc1857112a349d7bba717313953e3304a4aeb98a0b3f4f4bb03f8e1688a4801a143e712d04546b999e598f712bcf47b81249aa5ef14ef4f9db4ccf8b4509d4275c1e7dd3b8e5a027ca4688d6762efea455b775194db3385bc246a06064ad0c5cdac4f6a1386c385c6c589d12a117bcafb58074d9034e8cb9a7508c0b25a2fcaf9fc88b49ced0e1d50ed1757763510485a81aa86ec717a8947f4778618c461fb79c8c1bde7c5b21228df4154a3f3ae82bb344b25cdc4fc3344c46ba95d307673892ad7f655a56574b1c7a3287a000e5e092cdedff7064781f70458a752dfc7423b94f53996e9424afa46bac1ea06ac958d31d35497c9131208016e2cfac09ae7052429b6aebec14ac433a016554e351540b46fde7d41049edef7a60c5778f44559a4fbe7ce24160b5596a82cb6ed5f7be3bf8454a3bc6ed0e7c011b7efe93a433756973cb9ab53e320db85db94e901c81a7def7dea5b1a3269570c026b233f80eece7fc88f80ea5d2388a49ef620939a2f6c6f3d9a3eee8cc42140993ab37b14068c982957480fef80d449b6a0526fb5ae7e41942d539f6932fb772620edb32badd5d8bfbb33d32317164beef97b19d5093f26f6282a7cc5b0f52d63021d2c930d8af04ddf506af74f1b121fd31dc041cab2113a92052088ecd12d6966a27b29254a999cfd356c83a4b87672a4c9401ff361f6bd17e02ec993ee2f08c16a5702701648d67e7ec648a9b2381665acd20cc126d3211b09555dc5039c9068600051e42565c8d8d126ea576d8fc900101409b934900d1339f84ffbaf77a05373c10d79956f42a67c90813c48d1e071865f10c898f72e9e53776c52e3d701489a31518b58bcd037ff3321eeb461892164c8bfd05fed4db2efdd6333e7b338af8099239bebffe76f72fd08c261a3528ead7d368e89c1cc20ce6cdabb7419cbbb74c669adee1f3ebb1284b769443504dd79a6b96b4aecc669884b2057ca4f8767d310de1ba0d4b96cb5dd1e829de07b91c349b6c8b717b819f63eea0c178f0fd659072fd161db0ddeff8b434de6218d6eba4f83622021cf96904aefc070f7764653ba369722ea82314e61b0dd35a5d2dec4ab3c22aa7f7a6f5dfdebd96832f503e33538a89240b42d0791688758f4eac77087b5751d1327c6c8d90eeff4055660c00cad8aba2ddfe9631eb18cc5419ca2793ceab120ed0a53820f346bc57036ddcce34640e9efbb1129e03605f26304470a606f6ef1d93e4865358b477934178057e0c28613ac32424b0a23cb3ae384e192f9effe94e87191daeb1e6eadf10d4d05752fff6b60a143fe4ec7736ee9c580b8ff6f5c5053eb2e830f68a51b3bbf7221eb0a2d5ec6f83871eda4dfb3c580955460cf0c6830b786479179b5b2c8308fd2f33084d035327d1341c109058981f2ceb1ce61f16fe13e4aec93dbd87600e81ba4eb4df14b3dccaf41ac5774afa8898f5abc0aab31a6bba6c64368854fd1d400b610711fcbe185aca69230f96dc91049fc2329794d25003f36d873619751dc956704eb58e4defb899132dd14e8374ecf7ebfaa83247a93af6ce771167a1753827e1e5f7581a28a0af0fa3abce916da5f8176ead6f99fe5f625a08303e852bb03d8aaf21641b4c0c8e616856eee6b1fcc72fb1703081a7555eb3495eddcc988489343e6e7658442d0da09d27bbd2af9661c8d07be7f7ac6605909cb92eaa2bf54c0e5d2ae3eb2eb67365f770c9f42bd55395c225a494771780b417a09b70d7f68c7a72f7c33a24a4b1a67e5a5b93ace79b9f81752f9e4f12440ffb5a80b66ddcf28e820e2702ebda5a53c9a53c670155d224c49a5b2387bce7ca66d78d578d33580678d832e8b8f024f27977f3c1766d165caf7639a085d131958715f362fe59a11ae7670a8f1510bb2ce7100350f07b38aad199b2b94084261d32047d9168674d06f55c0565d95399f36917506869ce6a99bd713c662ca3c344f61b8b235cc0e596893240b207cdd03aa770f66166d304ae9763500ee59943021d369d4a9bf15bddf1c85ee2bbdb561a1e2908cae3fd78d3075d2d3aa107d9a68a3e601741a7cb6f19476572bc9efe78414d1ec1de0b76d12b526587652723327b256445280151bc72d6fe72fda5e1c1867774d3375827bb7e6ed8f4d1bccc6746e33b70b69123c59256db6250fb3d0c0764a95ed324466b3dc0acddc152a178e4aa5a47eb772387570ac8e8dd7ac85cec9b01e29469b053da318d164def1748f1d904051f61934276bc1ea0843cb8d4c4db3c1571a71b746abf03f678d2d36a27946adaf56c35dbcee57d7bcd43773a6166b74fa1738c68f2468079ddab69d026b7a9b805b7c83ad78b04c9fee3d396fe48a036c7e53767ddcd550676e855a90d2555555809ebfc9c8715db5015ab9328bfa5f4ae774630fbe651b3ab3bd5f601f5b78f51e29a70e96a08e46b4ac3694325ea3d7e712006a8d20e17a72375388282204b2c7a3e49c472305587254289a7701acb847fc44705caec6173d2a410c963618ed34f564d791f82b6579716e11d8c8bd8dd1444dcf188473e88d9d3dfa00890e1af15f08f9789e9a2eff2d9da98b55462eb63024d06e6d1fd9364480cf12dc5d4278b92eb2ea225e4624843cfa6fb7eb8355e3d5817f5808cb6406774ca221a9fdf0cfba66cdbaa665a2b3ca910f7256628133fcf5b3ea818ed846abddca8c51d715f10f7815d0cd82f4878d2970b789bd4f542e238a7b4247772e336954832a67088d84260d5445630298a3adad2508ce82074d9aed23d4a3e3fee3be3ae8711eaf875a019777b3789b926ea604bcefaf42b4640014abb51b4f23a14565c21d05549972a6d9457134becfd8ce813003bbdb48f535c08e2d7e2cab53b3ec3556e0cc1f7ee9ecd3fb8c90140897341bd40023ebf37810d3eb9742433eed59eb7de035b21a074b76a8f2f11aaadb6ddf0f2c3827226f296b392f76660bbf9427328f584689e55347c61e3c3f9ff7971b9c52e6c1cb99a5fa2b07cf91799ef3cdd88a98cf1cbe1af085da162f4514c5f8e807243c4c57fb3252bbebd118e78bd64e19772814a4f0159b01a7b66b948d3ba827e3a97b5805a7b6f46c022f0177f7edcc0461ae596405bbb982a4ad561faa8c8a6a422c7928801d97e67f004fc9e182f11ec54487e23f24b2fec00449711f760de4bb53eb4cb432490f37c2a3c957fd262506fd87cb576538b01d7606aaa6032704c5c2e4f4bdbc99ed47faaddecc89749cf663533949b5fb36da4a9e18e80ae984b83ff992fce533be8888460460637baac794ef9e81af2fd9b617053b3fc1057a1aa2ba2da57b1d0dd5f6e59786e882015c7fbdb87c5ab3e9321549a1e72562d855cb8212aa21c8c18738f933209edb7139adf848fa6d44518b375e035eec5405b1c50e8619cef978b5f67e4b2d06a22a161aa69b6f3e16e9d56855e9f82b7ace0e259d64776c8aa233c6fedd1580e4cbc12485f10d6eb3e0067ee9a53e0a69666cad3f68711ef14451a385303587b62ad8fbd61fde8d4273bcac2bc2be377c59a3a414c98c8a62aa8b37a4d989bc061e14c04f0cbaa3ea84d7e328dbdebca684c7133a0a8fd10774076ec5bf28104f0bb8e4474f5c3d01d932fa5f29fe66842e6dca97e548b654c652683ce244b92509f791863fa991479d44b2cdd04300dcecbb5015fc3e7b8139584879ae9fc53b3c2e19e6cf550a4068432124f40b7bc65bc6d18a64935e7ad122e42c8af6479f6e22fe1d6f5a89d98b0469dc8479f9a511af4cb12a1baa0832edea21bc6ce062647d030be48002561544ecb96071be36123859fe4d8eaf9eb5d3266b40b0fcedb2a9943a0c0b69c60139a4839dce0bc7514875c5776774afbc454accd41b276c629b11de9c945a357f5b67e6bea4643eb8ee151e301dcf9d34b25dbed7f309eaad480adf55c070bd961ab5716bb51e44555addd6fb7fdcf54ec8d6c89ead35d04f8349f0d6dd32da6cd2894a10f855081fc64abdc7451af9c2402b0bd8832fbccc3268f8a0d2f783453cc4ade2c6826fe27a9b86e38bef553d31568af373c285736e3a308d8e335ae24931aeb3ccf564fd40f5fc9a0a0224591dc71421400e74ac8d79d5d0a03a44d62c6a1aaae86c067462f71e75e8346ae1a1596eb0f47f838efc46d2258ac755873f150c2570f7f9324b754786daa39d611d1f984732753ea33c32911f81c8ac885dc4bf33e4fad76191f6467b642e9b31c0dba643051efd8bfa552f67f64d4af678815ded4c67f87086c3120ff564fe6597994a9953c43c9572c7abb7d041366790615cd281e6686c6a98b73caa62ef755f6393b167cb738182d819f4fd6eaab04cd31f7342497f688947b7676590c5eab5129c109a56e8a31aaae21cabb3b1faf3432954325172a06a29dedd91d351299d81ee20e0ff80b91549152b69c93f68bdd2941e8e56f189e3156da52cf3b9a7b0c28a5285439999c2277118b98d4841245d93f98b7b5fc5e412f2f327f49a27747c9e07cbaf9142e5dba8905dfa0bf8f91335211d36bbbe35c5966182b266cb48c35fcb1b48f72d5aa2dc9d7eef52bf1e50f0b5bc544dfb4b998c00a2c1f4fc8589207e81a05792eaef11e2453e1edbfff537016d7db2f580daa96ad5325aea85f61d78a46ac119ac329f935182dc6b50664f3a01807594373b062342edd6a0c2bfe4ec64f1ee6a9c2e8c66c300909fa46ab39f9c807f2d9e836f5cdbd3906a02137dd5a4d2263295262236b806b7cb49ffc28f80fb7b9a0aff299a3697b2590ec106f6f2a9b0d86892105bd15f50c4bdcf11af86f655ccc077d9041db833f4da485eb4c6fee0528362ce342bcbec058d25d765c57fdba0da8926a4a90a5e71ab6260e45869f22122c44163411257d63e549bb5db5501c1c53b6c746bd9fe775dcfbe395ef0608eeda3e804f16013e1359d06a41946b1a6868e0cff4a3aedc25e6e07cd6a6180ab1e684cb1257e95a83a36e8ee55985eb23687a49f6195d6923f661d315a7215516a13e8deacd3ca65478fbb2814aae60c1f7d8cb242a0ea1ed004fc3b655269ed3fe431bfa538cfeb028dd71bcd70423ded8f7d51084d92324bd97ae224e5a07f7a5752b640a5d5bde332bd18a56bff2fafaf802efd3c447f6a3a4d47de25d055d31d342667ac987ddf38e9c416ba2d2e1b5ca8b7c2c93852b377bbac8cb699b8c5093a1575429b0c99ce03356d74838199641f987c239f24af937ec1a282e1b6fb4d4aea9c8ad2679d8b3b0854d9abda0b684891485da30c7c7c530842147dcf82d68015906864cf79449092e450c6df409713c6fb0dde0b868f570c89b6b8e68cd9d1442eaaa6317ef78311c6adff9324222d7c83c0d5dd4cfb88d16be457e81ad99e4c25ffab3554078b3049fa859eff3e90134b2287b2ca65a0cbed39a972a7f3d3db63c4a58ea17303e5d3a5962258aeece978d6a96fe2cb3394a061daec8c5a6baa08dbe9d6cf1b89aa1748bb854a2e5c9be0c91df31f45891e053b75573a67a548f222a9f5b33b50965428297cf74393f783896ada7a7c7d05238b7b284283675b8ab8e1af3894d20f655130be22b832ac46e6c84d2f9136a7dfcb79c760c1f49dfeb94bcc93db567170c38e819b1a83d15a68b4509b2148e4022736f0fcbf980c334cb9ff4f48d322ed6b465dcaf3e61fca95c14240c1bbf273b04d183aa9ddf678ecc50ce54afdcb0ad3f18b34d7d97b8e7bcd2d34d4b2069628a661e4635e1664d9fe0870e3e11a82cb77171f2ea94b74260fea01bda834995cfb7d2326139fb7a91c091b29e55eb41fc0a09f7df6d78f87242c08a0731f14ba3cfc9558c1467f473481d152be4c40908e017943918e0f05fc55c4d931565f539228102a61b8eb5ff59e98e27dbf2eb230fc2cbb63de102354ada078b5e2a655f896c6a8ee771d577c0fa14c875a465c11b8543f1a8e7e4569082b218789bfc55e16dfd6aced3fcedaac4333c3b04fcab0a22d635c1d46eeb451c8b1d6c27ad6c5d372e01a961324cd41737424d23d929673e0e14ad92748d09f187c0e9ecd963bfbd96435a23a35a993e3c2aa38bdbdf1db2d79d89c28aade0c2280e714d255c429c3fdee5d3ca9d360430df34c8554805569ee3fb8d44de992633392378368165f5e577e6e13edcabb8384f8d94d4233e8bbe7b382521e9f3a3db7da65ee1b67061b499c8ac5df8d8c1670b614a8b4621715f281ebaedde923a9c1fd43adb350a0c566de38daecf23e22ea763ac70b757a0cc2063aa51d0024cb2ddf8ce957a81356c0e8bf51b5a28d3774b07761dd304edaca1a9da21f98d564ffc3682ae0da79eb2326b3709639737f334d47c27a311efe368e769c7296330325be48fbe85b34e1cd2f58a6b5bfa78f4460c8348949630fd015ea8ccc6e7ba95ad0e4f81225643226c102954dc661fc709dca02ecec11da3340a0a55a1e55a399fdcd7a78575e78bdce03dc74cec3a6e709cf0991fd67359931c651a555fb5eac75572e6e2fee8de9ee132d252c5e91afabddc562fbd9189e1738417a86c7d49cc44c4eb9b908f074bd426988283f852a43e7605c8ccae3ce7c3743f9bd5cc0d1231c78d03b398da093e6e214bcebcb512bd86d80508fb5bc5347753b157349269ac784e822aa12c10e4392cbcf862892c755ce61e49e6d4eccbae5de0c041dc464402ec830820d0dae9fe2f86386f80abecd403d2c9997f0cc77862c372fb6640ffcaf17a3ae7186c56fb2e3f32d885299358e3e6efe085d2d30728374992aff6942b0183604eb1d51b83bfc8bd5caceb1bcb41b853288c1585851225978ae26c4fec7de4cb8820498df9cc78043d60f049c2e964e6f780b461bac87f4331d429b23e4eae300129fc5c62b1f4b64b947d6a8814f805304caa4dcc44a0a435e535f4c5c12a90064bd9699c7f8b619d246fe1daec47daf6cdfd3db9929685b8ac33c7e66fbea251f0124e5d133bc095eff3aeb5fb37786bcf4d3a220f786186eac1f3f6a64fa65b28ab552165abe6f792076b1df003ba49b95079f14c0ac95712b7e88133bb991d2d1da508472ace5bc363a5d5bf7a0b10f5e788aa745865cbf6e3446a93956f986fd03d1dd45902126c26d3d658af2b602b723df7ca82b1412a39adbe339a740bb28faebedf96a968115c527e511d1547196978cee774b370c512cc9c8b6e18f0b121b76ba458d8bb11b9ce6ce239e7e2ba375dacc9add6b06eef48db7228dde2cd97c0a68dbcbbb4d658cbfa66bc48bf35bcb710f77f4e8a8bf25f801547863290c74c226d0d5cbff65e1af3ac78e583e250cb2f813c23c1444f84241a4b3bec81ac94ae86b7823f62600edd318a80f064863a894c5cf286676b50ca4b3e4d4180a78fe0fcc7f6c5c2423746b6490f191ca2219d98275e158385c301ea883080980ab0ef72e7eb9adff2bdb394411929d7570e362c3c39ff564d6996295c03d5d74914e32baba023ec92be5e27e5c8e7d97d2c8bef148187eaccb35b4b41ea7f435393f32474189d3a757ad3704d9701e24b53079d02f8ab67afa3c8695286b210e4e3baa2793a2b809fba21f6f2d0cbb74beaf5a2b8af606801190d37b375fe4186b4952b2b7609e4ff4eed640fb94184e4c063e40043beafef24b7902235e68cc5a3c122d3e981cbfc31be616f1dfc6fef717ce578b922ede1ae1c6438e4084a2a09f24bedc8da255ce01586305855a0a18a8e689f1e9cae486d156966a1aed8039700ea409704c9185095446de80e37390c26250d38740c38dfb7664470b2f95bc070e6602e9cdeab0db04856677daeb0efdce05846bddbf9a92ad8b155e4fe0c7162b485035512bc24ec3f0c31383eacd9fc73e655d8a851f90e313af3fbed8d29a888f1f3e28571440c9a2da96679f4958ba479e4b86c32baa20429dfd81421f4274621fd524391b6a1b69436e4b7a582306058cc3043c300436d6814077ddd3fcdc48c9cf908457407a2e64601d479998a08bd99f10fd32303ae3cfb48277d29ae8097e0a870df276ad589dfa072bc2d67e58b36142ccef29afb871dc520280dc288e0a5cf78fc867efda466cd34d130aa49898c946cec8edc290ce3ab33abc7b274bcfa1124aa5e2f9f2f7e18f88b01e837e9a80632fc181076d5a85567608c62f221087274c981b402e0fd9df7cb8935df391b23948b005d17e90eec54bf0271b3ef40c2869f3d9d2e47c7843f068f2c5c4d05ce31c8f20bad79646c17718f9e41fab8065373737eafa0e91d8f3b2620cdd1bd2ae0f25517de70d66c34fa480ee180b25b746cf25a9fe9b1f78a10f57ae24f8dd13daded5bcbc04703c5f21cb03c1758916d3e37af719fd1055377a3c34468f7e3668c01baddeac2b95ef69fbee2b01c321e420d4684542489b7307f69e6bed1b5e31ed9f8bb7f423382022c805fd24e850abab5534fa5557ca5fc446cd2bc736ee3cf0b1f40cba71f6db2b18c8c3783edee166289130381e510486d7b1859564578dc5ea6bfaa44e93e9b9499b7bcd1df049b6d8d8d93485e6cdf8d992927fa5edbfacd023b936c466a8ac3a6a93994a198db38e472a771cb6d0b785524f2531a33873e6d83ba169846dfe19ee239dee3d3f6caff8d70174e735d23fdcd9723b0dc8e053c86ec2e0835ca7040300efa4d759dba5ea8e62e2080194544663ae026a269dc1d14b9dfc520b72a1877f892374834aee4a519be0ff72a06a53a2c18cf38edcec29ce97872c7e9da0f9bb310f58fe05108f280e06374619c1aef0aa2233af8e2f4fe18968a467c12d2e6eaa796be7e808e06c6df4e34a4accae8c8d92a927f31d5f6c2a09b974a72aa5bbd5be5ddd12ef7c91045575fafb58b7f8cd8ec68cd85478aac791901484c03ec45b777277b3c144baabc470d8e4ae79f77847202c85752b89af1eaeea2237b669a7c5b324e2c25238868972adec5a232baef203f08e120c6104a155a5357652afcb697babbd5c0f7da5c8690001595025a995fbbf974016052dbf9aaaf68a4a250f29047ddf4a4f7bb903c98c07becc88aace89b563ed08957c44e28167fe3d96e2d0f5b1184337b78d575030817f734b6f9089738245dd716a6469c084f45418f69bf60ff75df225eee5e1385f9380084f2cdaf09c42ef5a06feaf5bc386562f158ea7f2cc910eb7132641e9218c052b69c7a2ae21829092c3fe3633939f41134c2d8fdcf2b903b25253522c37345e0c73caa54ae4d5733e9cc35a6e6f4fb0f607023b991a7cacb08899fd001717a72415c401bab1be87106eaa4edce590b9a5206c73999ac7fe0519785f4950be3d4b0be2f3398eb1cf08493ed20663ec56947ae25690548c4d06cb486ef13578c72ae55307463c3964fc4aa0bd99542717c14335769a1c3683e0d0ea00c9e3ef33645c5442e6610039319acdcabd36315ab53f628ebc57787000a1db7cbb57127f703f5079f925bd6c10c06626d25204882948a887c019e40f402725740914bd7c56630b19f67dd585c5d688ba9f474e64b2d63959460a581d56a377473de25f7aae73df382c0e6ff9d04b470b2921ff4d18d59b090404396e884ce224d5d918aca632ac5a8ae7fdacd5bd36a28dfbeac2c892c94d1bcb09a86121ac89b3bc6d816f553a34a9aaa3b26a15ac1d7244182c01ef7d645da34a7570454567324bf311698cb0f5e414ab4bc094c26d27fd2877a57313108b5cab7d52e14a49ec3e89935f6066ed1e9a2b2da506ec01ed88adf17f50559920f448a611632118adcd2880e55515ca9d537bbd488be83948d865206016654cd8a2a76bd1ea0feb2177df3b0762872840cfe9be9ebec8031e38b6192489aba99af4bbb6629f2f0255419e898957fe2625eefe5d8abd166d2f1ea6105b2af03921a68630878b2c66f8a8898d2b586c3ee98891d584303833eb136465960b60082f3dbd317cfbc0d7a3555168b9553d7ebb8cc03c23bf214e73b92709cbfda1aeed839c0480624f676bdca100f57af6860163faa4276f3f05f5ef0b98f74f13eb909c7151b6087ea3fe629ea2a4f2ddae19e649929420b3bd27610902a4b16ea26261664f52f90a19ae90846c78f809fb2a7cb2a2090b736c9fcc1a1c314b349d65c2a5c84de868ff26787d35d537cda1027273bc672be52418e927ef88ea883c983f9825052202fc412edb3bea875a7105dc5eb4ea71e3e61f217ef95242e16d7cea371710f0f65c7ad5d36dc0d15392e69a071a4f73a2658acf4124b617252476f9f08edb6c2976c28621efa75e2496e67ae2813bd141913f318855232cfabc857fbafdb4e06db3a34f90535a92c8762bcebd66d5f23c6cdf8c322f55d473c4c189a4276ab2cfacff97b1285d7b4d1eadfd853fa65b918a568504d36b1446eb82eb9cc5c3d4c6958c1bec0d7d8003b61ee83b2417c4d96d9cf7aafca600eeedd9b40605b7b3eb86512b5d81e36bf2d0299682f27273e93865317906f20fee89110915042b875dc28d6f96190d9be3ec60c79f0e3afa8c947770dab388fb5daba514582673f885a9d0739fe2e95ee004cd3d6069eb8ac00b114ce97abad47fa35b0abdcab07b41eb1d60375fd23657b8eee0e3c4f4c9035515160de1b1fe43bfb6d322a726e7a8d5e3b517af0b7f80fb58d11de7f9f8a9848075e8f968efa12ddb8c6f6c96e80f03a889419bae858675f8573e2eb50c0156e1c96d87a063375a78a3b187dc8dd67425f023e0b74d19c65dbd6dc7f05a5eeacb404419f53da982a000be0f4ce1f3296c07402103006d26c8694873673cbdc801f81b0acf0750f4f7a4e93a0e98a8d1f403f1b0851ec7d76301b93c2d4de794af100ad64896b9c672352f3b3e361888c04643db10a64225169ba0b3ff0646c036fe1875039edde47becf956966b91c50e0c8820521ea367a49535dcd9759486cdd8a776b1a5f16ca7bb517a678550ef070e52e979b997b222c5b8f3ca223796da5e418389e182a328f305e51299f418127b94adff74cef55770639f45f4b496901c4e479879c0750e57a3eea666b8a7101d87e6a5b4898560f6339adc2c986fbf481fbcb3a52f54ca498c603c54119de0c5c7fdb4f4242eb15711f73fedb73902358028acbcfc80ba38599edc06c2c24061be528a864ca63e624e5bd5f92b766091d601f52bfc2f9b4d953fd678fc9e4a5088256726fb6fd2586280053bac3b19cc2995f39f648b429fdfca8091716bf89df3d71e3f812e8357443a62bdf67f40c70d94cbd9d6d003eaf5526346e6d00efc896899610c27b0175e20d0e2d230193c2c2dc85629422ce45eced70aeae2c757b1c758026a2a5c88224fe4c1ed33f6107e5d372bbd7c0415c736e0f2c05f555985bfc7a55af0cf0727f2ba563c2d0ae1188625b8af3852478a33594311b392fff7e04e192207d6de9d519eb24e2a5c53e71339f20414ee910e19d8e66801569dcb595424c5856e7e55153f8d23ebd154cb105e0f2d81cb38ca465da4380f68cef5a28c4533d6e34f10e0da1399ff9bfa35267eab7cf690671cca448ede10bf636c6c42d897b9076f02ff799994134eee4e5b70b2cf6257c8882f5dcb0494f720247476c3cb04ef12b90fc9b45969717dc28d2f80b0a6d1dc15707e9eab959293dd7336402d0eaff512786a17943a3c19392e3d5aec3c98abcfa423e18a1e29981baa3d3077486186c5519c64900fe7e5f4df54a26cca7b012a7245eff55af8d5a548ec9ae5a5031ed882b8b57d824ee3388f9d1932ea7ff7bc57227b24fcae07efb6e7f997fea82fb0343778beb0a03a7cb5f76efc1535848b178e3deaf158ea4300a0c07aa1d65f018b3701f52e5a08d2e1134e5da1fbf292eb615ff7c0f1f30d9c70b4fbb994e2fb7ccd5c83d4c5d552c281ffd76646927b6aee578470aea347bfd1966e34fe718a8987451805161441a532a5bad31b88f5d108323ebec2d0a387861d62480b98f84d0b0f8f5cd3b502e90ff0faf5ecc80dcbecd2d3d3d346026fbc16ee64395e01b1a964284641fcb7c2941026c30d00b09c2d22747d7e8be461d3f097678fac8f0976201fde185d0d0e2859c029b72d3b109123239501b421cf37380828440c8f3880fefe044b8d92f479cf343ca519d23332aba3cd8f6fd3e0c0d5748d900f914d5e7963c8a6a886e808103ad1deef7ba350002d10aade8dc3699a510f01c61cf3d2078583349603a781b96a9713b06a3ebe250f2c87e4d346f85e8b73acb435f720c6e694de03b198e60af4124aad6792cfc60a24f154c912f517b9fb58acc975debe53734d466757f7b71b29923b71c9c5dfccd1fae028894aa14d161cab8c6a0bf1a071671f76b32a07dbc1cb778b02ced288742b58a44f5b37944299808fc3429611b32a7fbef9f983d208da27741377f1c85834a32717ac741326f9092a0f7285a5d936996a1a08dfac1c479c89c8ba71f79d7a5385ac5a7ff2db2df193f79b60138cee6a8bc0aa5db96ca970b891c0dfbc2c7e91fbe2f1bae9118f3612a85fe0099b2b0be600c73fc920c6deed31ae22c382f2b65965fb318cc7228f6da767b851b614618bb2754b8bd49d3af524eb9752832b98c50565f87832bdf0c6bffe6b68db2da0a14a42296756222b3e35ced8a7dc4d267c2a8267d3d24c92ffb477cb9a9e9391b0dc1cc2fd77ce623f4dd10aa44d7cbd693dfb1afcc4df4dadabb6fb634fa101602daf01d33cd12ae5f121c3f2d341881070e4b81a450b5496e0128dd61dc5cee088085090f633089ed0d3c159a231b3c3c5e0342bd69ca15ab8efff549984625b0f437d2142ca5f584add0e84688523da687c1fb4f9813155e7865e11c2815088c29fd7269fa44fe74478689a9fbf0a6c6f01cb30b0f32c49463c652b3037bcc5b8440afc5cd7a820ab24369c375c809fbc1eb2810844af91be072d343c0b15208b7fb6455bdb5e73646991b30c8378016d7f2b085f50e2a0b3ae5be7e5e4422cf21d19ca48924d609d446fff9194bed8ce6f6fcb763570328b9cd34badb5f7fcd5456f5bb7a16bfbdc5b225ef4a572eab098a3d8002e423b1e4f9b9a817b8d47da59d55e5ef584c0fff7dc1f0cb5d4a009556e87def04af8112eb8567b1c5e2513b2713cd574f6e4691abc102811146faa5bfdcb74c796489e70e53576fcb2351cb95f70618e543bf3edecabf84fb1f2de31ac2dc75b7e5c9062cea378654ab13c1cf473ed533478f713f2b20ef9bf40dcb15ea054991ef144058d045d6dae16c5e82e63ba9da95955be1192d6d42ba5abffb0d938e4c6f49dd3d21bf9ded84e24fc42f0f8eac888ee9fb6823a9ffa4d61e8766505a4c617896b62761cb8da9bfbf37497a6833aa9cf9eb35204f7f46bfb219adad21ad1b01c719946c60686d165d2cb1507df4be1eb21c5dfc8acc86bb572d4fb102764631b474f06f2598233d9034a5d919102df5fb96fc0423942f87f626b984a405de2450c5a69c0e9d72a54bb9bd99936d6202cbb0bb21ed84a23c0a0df82e414454f261f5d2f793eaf79196b3ebc95b1d7f3a1825726420cd730573cf8df5a1f959b3e67b0c7c399d35142c18ab0e588b12a1f4eb21af43c70c0f85ceb712aa32a29b57d0d36079ac034878032ff95ffb178f73ff853c5569e3de1c7881144655417011232de11c51337011fcc25b06519c41f4bd819e98ec51d8c9f1884a8ce098783edba47ae705ad8f6bdc94a1b017d731bcc14064d54f19fa911e84ca126351796e23ea10b8833275499e0a3f1cb61900749986b888f5c99c91c3f610e208cda77bbff010a9afe9d2332576f12f875090eb3c22a837cda6c37ab12d61a83af3156331f26cac546ef23f75c8202f1eadfa3cfe9fa7371d7ec185fac2d7e708f5a9dac4f6468d8634ebe77c376144cf97c0298bcfd68057b7e6e81f6304c14674c4ecf290f7ac5f8857ce88fdb96dc2b87e6f346b9ea139d7a8378174363120487fd2fc9761efe0d9cf3ffa1219fa5f39a04f5d267a7969cc3da99c320a19405da8e68ff561eebb12d6552ecdedb8aede9d5a3eaf6bb7f4c77d38feb1b98124d4288f8ad0d9486805d2bcd1449a3d219ece8f158627a5572f50599ba9fb9c15f30dd8db32f67e96365a83d851a1fb2939480890c43c62511632d8e4d97f1a97e236a7b4d6256106631eaff772945fce98a3ae898fff3ddfe73b7dc458a8c9ca5da9b5e97d8be7d0b6d582c9b878bc0d85316d2a3cc439904b34c36e02709772d42a477840120b808c2ebaa8a1dd8f76fd003a006bb22f53b1a996571481298150a43a4df41246c3a6507d493e745ecea63baa88b14491c0030c4adb638c914da788eaa2da2e87d944475f6063842fc08f6a3ab36f496ee6962045b424b4f549c833973da25b9768e635ffe09eaec9326bbbbf8cec998a6ba28da025666d4f756031051466dc39ffa3ed683c8f6e87c21121467195303119c86d6efb60d6df50f574fd3eaf22a6ddb6a99c0cf84b26d3935849864a10e255d7b8089ad8d7ab13958288c10a4d82466bc2c92fbd3b1e5060bc2c44fa3d8cebed6d3c1f7218ce3c2a3fb2a6fb32d5358fafebdbd98ffab6865493e43bd807f30f2cdb918692ee1ba0eb13de87c19fa488fad37385b646edc77b5a138c9f9caa77eadeaeaf6054ea27a16e4c977ace446260aa3328652b2b8222d3c845b516c764e5bcce1a1a2f0642fc2d7dd1e0c98400ee63333d885570223fa8681289512b500b29c2587c300fe0720ed99eac08ee188faaa2348ed78ca9a9b5d0d291eed3119365c7fc7f15cb859e15dc2e6fd7eb889a35240babe0e73b8eb5f63c6087ec91e8aa153f9f596301b2c9addff5b98c73833afc66c4a48c6dc25be99d36c6337023fe75cfe2559893ed119b585cb1dfccc46cb2f34d3eb5bc76268083b119b4c14c0891dc0f35e4c6f2da7925c32a7572ea504ca2ced8be3f7f9bb2d69eb6c9100c88f58227a3de2981eef976e067b780731d8227e9dcff195961ca33bce9d8d9854930183627a732537f62d052d14b3b0729c6ebc95f74160ca6960c2a46b59afb316f4645061f16df8d4184b845ce306bb3753add3e4a5ed8dc48bc9a55ec6afaa15e86aa52c38246903953e19c95aab4df303f22d1f818969b6875776ee37ace70dac92b2b89a27c974c38098d20dab376a7c43e97c8b301275c80818c0d7d1ba3bf472293e5aa5cca60af37d6dc10e113ab4aa93209a4c94db7e302941391670fc15b7cdecc2fede4c4f75257bb942345b435c079f89ff7b13aa58b799aa7589a6dcfdb37700742b5d405d928c9ffc72068cc806909f56e90f602ab69f133493ba538bb0c2a233d1a2b215e1da8ee23312d7820fc1089007d17251a8f463a513355d93e1901759cc4833735067fd7050d214e32a3db21fa97945dcbd93cb131c59fdc6114650e6ec589b4fee720e9ee27a12995fdc9b99e081e19bc304815f641f8baac5cbc053511e88118f89cdd932c684c787916308dfd2d1a7c4c1d44d4ca155b6674446ee5b7baf3407ffaa17aab593f17040486a9b333bcc84c90b64c8d5a164bffdf8aec75d92065e4716e7f3101b32c709bd435a122f7d365487f45c1ec3c2bbe0146d20c143c5a9270e640706ad8ebe0ea3d8eb1ea0b82a47c39418eb186a5d2d8e75e2d53f52438f614474273b9e8dd3bfb3078ddd574b8f0062847becafb1999b7e48b73da10f3f76902bdca91bd208a7d3fe1adbfcf3569ac3686f5f9faec54eba158793740afa71e05032cbd822ed00c24896f686a12ef77d1520328ab205f3b91fec95fc250228dec0023ac568815594ecefa3dd1c18b3b94eecccf23bd72f062e345da8486f21aeeebbf4cce6708929c9567596203517d19a66f66dbfb4f78197bdb60e1f2e470e8bdb9b4c31b7c26bea0494e9b5b03014f3847b6604ca16226c57b4f48dc1d3c47729bcc0dcb55c3ca00e940c09604db6c6c068183d47d9c69ddbf45368906dd4ab7f4baca43caeb360a9d1c6daa016f80891505ee7ac82c01a36916ae54a58bf42ff0e09dab1c9d348d565168d4166b062e2f8dc62fcbe00adfe731783dfdf934aed5adac21db1aa50103471ff38851a65a5a222a7a09917466a67b224504b3eedd013785b69ddb7d10894284b1a96b13ebd4ea12</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>Hololens2</tag>
        <tag>NKeyBoard</tag>
      </tags>
  </entry>
  <entry>
    <title>Hololens-Socket服务端</title>
    <url>/2020/10/18/Hololens-Socket%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c8345ac8cb46de0a86aded054fb0b05afa0102cf78b58d8ce4eade3836718a20">861fa3301ca504d5f4d4ff9ce2916d05b432d1fc65432356a763819399384025ae47cad0859800784659c3fd6dce9dbd85b92ef127d936c211e47a2fd7d75be2d611d0d7e90c9ceef02306cc0035e2aaa058c96938a67f7dc558b733f94a811c359d9442dded77cad372cc7763425a04830a9d61e74931737e5c8cf85f0a10e3b21d70030e7245605e7266b880d5416954c2af5f925102ee074e44f54abf2b483fca840ab297b87c9904341bbb917589bbbece4b6ca4c693dda9f4a26f246e6904c161b71c81cc40096bc1145ab3665dca63234e636e919293a175ec255c494ad40a38d4c6a6084e755149e8b05c4913c9969ec88889160ec2d4f107df727a6da5db1ce9d0076c7373c102b970f56e1a941acc2ad6cc34ad9786d592f7b63a2dc69b053432d58f4942ff7fc11b552f80d0286f3bbb9498f113ee81e14de0d6041bea2ed7787fe2866633405adba5031d6f8e9123a97da67030f094b026e64abb89ef35e6bbc3dc040ea01552bc0086cc07651876449b6f1aef879889f8d1a88b0d1a3710a4671dff004b8e452a7f210e6db41cbc78e62a23419aed3d191609e484a08f6c875e4580b1e7805221f922bfc574e5dde575e44f99504824f192dbc1d6bd918bf8059915acea4e8790f73ed483742cbd5dd9fcf22063c9c55c61b03c1d4e84067603012bc9aadc5adcdd4af6fa867d9cce1eb18505e99ffbf7251c1d08d6816ff302a9736fbe97e0e944a9236ad9f4296a1d680777f0da7468b70c30dda09df879eb5dfe7b469b86eeeb3e4eab80c25bed472e3d9521f591795bcc7e6a57fa3f07fcf6bc5b01457d7633894a8d7c0eb962568112d6ac6d5c3a51f91e488302058e73469bd8d9e61e0826960dbb37e76be430560f9c032b5cd0b189963aac78fa99851a408e05a307975b5b945d4ed7f259ae345d12b545bb9fd41628ee5f0f3395e1f0e5f443f038761749a6d88c26ab859454a258185bdc77c09baa799596b5740545ec313704f329b889c2d821c16d30ad3cba397dc1b64ddc7f03a3bf864e0599f361f5086cbc6cc9c852debfac51ef64d8d05d896c34e31fa1f2c790bf64b431040ff688d4d0fc68c55c90b76240efec0923b5ac2d2dbceb03ba84a7c56410ccf0af2a194fc94c1c96550cc6bd343e4ae01072d06ed169ec4903b862f45029d6131ed462ae2012b9ba66941bca2c35acd214cf3a6b7c2f9e28939875af665049ba8123ca382b8b465d738963135cc2abfa33c13a75dd834372708dd96bf78f7e8bc5aced14ba5492ef2cf12c45af41ad9f4c64d1ef094b049d39bbe9726b75137276d3c40d7a5656409b4e907f4a4cd944d3749c7ee19d54b7f593f7041f1f19587257def99499b0637e95ea2df98790d7ee94008bad27590525feb294b12c568cacd8caa4c5bd029217740e54a6e30df5bb35dea0fea09ecaf84529bcb7fdaddfb7232ea19fe456b8958a33c750798d23176a60fa408364f5fffd6ac3fd4e193c99337b298ccc7f379d14064717a5944481a6fe9825b4c278947ba3968e1dab902930069159aa62159592e176bdbce306b8630c4a8f5389a0f34a60a77adbd050c6d0f4cbb371f4294342554483f15689a78b22bb61e68b20d7abdce765564c36bfa816642f7880d93ae191e8bd025ae70ba9cc08ec1caa209f651eb8e5914e3bfbf0b313a140e2c6054e80daa3dc50e0a540ce69b76166fc2f6416bd830ac01ca50cd58b39134fdad6de6712db14ff6d11bfc97df27709495b408c7af8ba09fd96e2093b06f56366a835f81372f0448913c73bfc52b163920361c12646064575fa56d1290e0d0cb2667fad2cf39e575d7ba34306df892d1c4f6e727e561e17474a489df10c177f467630c6cac85908a6fdc4f252089ded6ff9dee3e42772d5458a0000bce49d23cd32ca84eff5087425a42f3bd23e34baa407b564787eb51d6b04681d50b12c7caa96974d1b0a6b0407f8ee9ae1e95b4817e2ea147b035ac2f92638788303ef05750a87f90e4dbf39da52d44812b10adff073279fb44703c3b8c442a505f6876aec16f7a4e9b385b3c6077dba1e81ed3ef51611e24fc5a7fbb93d9273e9175eaf9ada0f3b0ad72cd3220a82ed9d894eee24dc94ad009227c66dc301974ae2f980cb8ce6cb8c7a1b18ec839d91305e4d97f6fde46cf8eb6c7eee2fd9da5883c626b0ef06a47949bb9d4da3f4a343d229eb87307d45b8950083d57634fcea124f993a929fa6ef2271f5f4a27a6e09dfb3562606bcf5b18ed1536504fc9890c9ebfd2f6f6e8cc352c036292a505bd74bb71e653a04ac085959b9b17dcd340c2e823302a5fd3a83b460fd3b7dcc570ff8bb95208a6eabac85800013fd0d709e060dcb7a9267f815f722b79c737830d63cf4e0cf99b86bb9568de2b740a73574f94a8b142b94a6f9e972ba377d6ef3b88cd4dee943ea98f17eb1ad7595c541f0768e698e75f1b1060682e2502bf48b2ed7891c3dc62f4a1ed694ed39c8e3dd05eafe154d3089ec7edcdd4185f86b6a1d05dea8c1b6d71298d6eb6d83937a87a37ad9d852002e1d778b4205f69e11c01e7fb16b05a59513a2e59047dfc0dd0ce766509243496e9b319efc9a7f98a8c2cfd1da1196e10eb0bd64897cf22815da772019477d42d5f33758e8379cf827c10f30755fc9eeb7fceb85cadd91f880e9d46de797b988337e8dd631ac1a3e9bb0658b5006322c48c74fcb5e855cf2746c05dedebfcb61aff0fbee9f6aa2420236209f5149201663d4e47fda22fe5593189a2a6fe069cca8894ff1bac5d5bff48c6c3bbf89be373d3e3cbaaf3910718761cc2dba3daeb772a045ebf9dbcab7b0d2ffb8fd8b3e8c3a1a936d8c280f1d55b3abd79402f31c3d10a0e24f11536b215019c441e37b441f3240323fbf971387bcb081286b7b3dc8bee22ef3bdbbac5712c18190b51eb450e3fc02ca89a5232bbf8a7e3e94e3022d73595cf43cd7bcbc16ca86442d86cbbc2154ccd676d3c9d93025cb88e167677f906f878c0f764f983ca2dc886007126f94fe40bc5ecf9a0a3255c432fd45097684ad2fc73355bfae6fa1fc164cd40d6afa2d9accc96afe298f8d973c3dc0aa455b2950ad790051a8af958497054b9b9e37dde5d2b8d3c51d1d5bb2058842de6f1a2a149cdcbb7cffd65b06d614d245c9f1fe1cc8da3f73b937345a9ecca477b8cda7a714e4c6a7e48fe8c9d575ca6a0685d75fdff74983fbfa72184d611ca9349bda21bb2d95bdbe93c6dc2f6ee1efca7fe07c2811aae4cfe6717d2c348a2228020ee17e929d6096b55c8830f6bf4136bca13c0c3006d5045d1e0937e357f629c1ffcaa7121edbfcfdee77fc3f1ae43027006a34b58e86cb43ce2928c93364eee884c5d9f849cf7a1239d5a170ede95457532cd79e30bcdc90c67ffd6cbd52d31a76180795b55a3b1991dbbee18d41ec27e2f7f6ad3ca89f6b0e49c8df1bab75edaa04082cfe591c6b9337dc575b160b6358fd074fda76357a9e77806249b16d5fa8a6afe4289b846c2edc46aafa07cb83914f5d92be29be0a7b08abc8d0600708b7dc1de8e44bcc848c6a8e63b4f969c6bafc18c71f58a44cbd22cc28e2d9d8820bcecba793c28e651d312a9c7927259e85880e2b1a1b803fdaead5a38d4868f59c34a40b1590a16a9ee88589be85ce67da59da4e412773b3384476fd28b5b552437cb232553c3cefc8c8c7b22ab40ac76ae0e5b150ac59a0e3f872d1713313527c6c4db0854dcbf06e4439f3a11e410a53d7ccc4228ba8b8320f1202088897acc8c89302bd867f8b608494d33a2b917a75ad697622bbabab665744739737cc4bfb029c1dec43c30a7d03c85c354f17c35917bc91272e30b65232b0b45a330374a299ffdaaeadbfeca8e72c3621ac42917df7dc5e9c590476b100d204ea46370f666aa1cea779e38e0b1ff5ddf02d91ece29ad16c45a8ef43c4fd0f6a406a0921b4bcce2db7127961d9becb335b5c1fdea41ccf4d78e3a641d1fb1aff5600612bdc06bbd9968f34a3dd3acadb09a14fc412336ab28776d9c293eaaf331356f61153d6a09017c75b28396a6c3d44917789c17fabfd474257c5e167293a6d8c8379201c65a51c7ab2d5071593953079159796b87c1bbaf89a5514ce0ea9cb3435267b46eb31cfae1eae2f2d6236098154105b515f76423a74f2326b92dd42b6be7fc88c16a25066aee02332bee6b3ea492cfb863d04410d55af46721455d7c43d52cbe50abad52c739d0c7853b2c6b5ff3b7776faf5ecb80e9d3c9811ab3c0d010146890769c990a7d4a2abbe9063cba0c9cf9d1fa7a0cac0ce4545bad955c5fc67c5fc7bbe70889c025168c63e8c5243f03cd557e25edce9d55233b91af16fa20a0d7d769a1d81ff7215e945d71c9bb1a785c7b0896e70ee6d8bf184d76719134519cbc426594192cbb4cede9241ca35e3b5ef8ef53408be769f0fbeb7afc014beb92a73606b289de5f3fd3ee29f4825be237a8416359301b2357f37a44aa73f583d41fc061a820444348a9ac72986e630e2052acec3a1256aba7ed9c195de4cfe40bfca590f88b14d3a5f566742ac58e7932c7e1446dc5963ba31f8250cea3db83a0d91083f974105aa9d5dc07c7e5fcc0bc9e516cfef1c62587cd5aaf6402d0eb0b30d8c9e4e18673fbdbf9206acec41f1c2581f3e4ea40ab00b52b1fbf01b964df55c50857a8db910f2e162f000e4b7f878da31cf66b268e41b747393095fedd12fb05e20095667e435e5a0c43e19e362c69e4a5a8e107706a8b57f65f39648b98450be1840b5ca7461012fce1bd1e4e04ee5718fdfd4db8f468e544f16ebfe30c935142a15af4fd5adb068fb95a6ba0775a03c8b765bf2c2a1d630af1a6c35ad6823adc0d2b067098211e0b153c8cd685290b21c572856a3aab0edace9e6d0b8e5afcec8a5799f889b0a792c68e2bb3de1bcf74b31ef1c9cc1e2a87817422b85870a3565e42315c71d4885b59479f50f33f1fa14adb6519c3df70b46b1aef93415c9ef826f29bf569a6d39205e888ced935f6bd8b141e476ef8cbe672e2f5d11825a98d64363eccd091f53738ecb6504321f19f6c0ba7d0e17e995bb1824291b7e774d21f6a7f837c9c50aa3f58da8f5203414cdd0b1fa283fe54793c78d28f100c5e3df83490a765a5a77fde71ed16cff6e5ce964617148c42bc91dbb7d1114012df4a1299ca10c52f4f56143c6420ca3a8e899dc60f4ee6ae0ebfa1b3bcc2720b9fefaa1c4554fd441ce860000cc437d389e25383e8fd66b3b0491a2d43959984fd9e5f459323713fc324d0d9bf6fe892473047a700aecbb4012c1147862aa3f039d35b863d49e2b8b224c537e655d305fe74b4a6be0f7e0e7037154dc938078a527932ef6542970f07411119e1d145992a57abca50aa5f84b1323c0ff46da52fa393cf58b4fad22aa7b5d285e9370248be4cf6bb97cdbd5875fe48b99a67646f6f7d03f25b6841e02089b60e19c1c85580d47b3121f19e46d1db7c2dc88c48d4c6ddb397129c4ca2d5256352446fdf8058a950384b564ffc555fe1a96b8bbd0777739448093984bd33d5e681941451b8c9737b7cf7d2b00b291c519834f6a01e1961eb2e64a8b56b72bbe7d1d744beff5a4850c665b8f41be28b7e98b29d28dadcc201c487071c00066800a58d70bdebc9fa7d990e18cae4d2649c89dd62b1637246eaf7c57ab4e88f2b211b074913a3ebd99589f41311b97d15d680e63b3eda3b991fa47394cae9a9173e6d7af094c5e2dcdbea9168a385687547bee2d539eede740ff1652eb9cac647f1461de750aa2f3bdf8d2b34a5a8d799d72539a27691c21bcd84d95ed00bdfa9c99b9db86f99368923b8936cace28cf120245102acbc7a3d03326b3c0a67b482512a5955a8ba9c6479608c3a2b376f554dd287c5c419c5da160d65d7b3bbac5b094fcc387559266a6b53443c2a45f433d815002db923e25099c0ae5bba928cb3854046504d069b5018f4aeb8df93eb5775f58e6aba06fff6c6c48d030a6e1497e902386f613fadbbe27c948962721fc2960b5faaddb6dbf6bfd8047f4e11853f9a0e45b8b6699b381170453c33dfd93619b82a6916c2742e414fe68263f47bc47b4444ddaeead1c7ff488b04d456251345c9d6425a09efa3dd792f9287ec297c3f97489fe1e697c412abb281a229d8d0a96b6788c618a98f275c39258632de8d40cf6c971ff788dbe08127a05be5d2ebc6089abd2b95b6648b896a01c1c2560eb3b86840ac65a2ca2e34d934b3573a6a8e6cee225e1ae083b49350576bdbfdc389b2a0e20402d41e3c1d039ec542e8ed860c78835c808642077c0ac9930fa26e0b4079bbc0519c0389ab633777428f73c915810ae8f961278ce0d0cf6e4ff28e9261a26ace88adb3958d88d3482647d89980a89c10416ef0551cb9261acf0ebc357522d6dc477a24798199863e4e37d3fe7c8d3d498cf7eba141f3091a6857fe4630e84b6c53d582f545220a8083b298afae841a1ee644250acbdf9668ff0cf1cfae67c75773371a886e250e00640f4d399d4a56cf99ec56b21cb02ff5b4d95a22b8fd509c1f9ccf1897034f8d94927fad6a57807114511112bd54e1c2ab822ae1181766951a631068f8b984e6944302c984342d93c65f028ee4416c70ff5d168f2566ddab1d7ac9f0bdc85f27d5c19b064e9c34c8dc54097ac40ba13146d581644d58cb6a47bdea59b3855559ed74f04e58c5c170137d6ae6187d5fd37a7a452fab54925b2fab1bcf8b28225fc0d528ed85d7186ed8381c25991a5a8d1d09fc4325b1adb915ac5004b6e3b0b8341f4bef7157e31a08da2a9e6e2686101a61b794aa0473f5193e1faa269e5362f7e61a80561f3dfe409d60286db1a59e9586a3d7a84ad847664702d415f0fe98b07cdc058ff0d7eca2f1e25dab832b68936514cfa5215b8e2c9197d2d5aeeeb141cd5a2f1acfc806692cb13b38ceddf9685e7beab0d2624f81264812f40ca06390ea098e99a9f07e3e1ba53df085f601bd528824441d2b980d8735f560ad2de5d64306b3e6fd5a0a2a165352bcf39b3cf1cef83a3742fbac4dc3c4f7c8f472b89d3ef54a29ecc9cd2695c836fa4d9d67d5412674d10073a3f30deb64f8b5c1982bd9d930740dc42c7903cede3aa6ac2d83a2fe46fdcadc997cf41495b536a5b4ac880fe2f0d3425867f658ce0395c91f6cd3af252c12eda0801d8b4a20f8d1b3669e5dec4e18147066844ac655b78f615c68e0d96bf41dc203dc6e616656e6bb11b6fafb5d174f5c5aa7c36dae341ae1e7c24d779bf95f5429f453b837added8aa51cfc9b402f6ef20531bd2248298eee97aa483ac7948023dddc45e90ad060e9185a69cf2aedaa14f44a6c31e597b1f821960206b00ebc664f1d3c77d1a3a1c7dccc7d26990fd7d5be9a3daac7cff0f740ce77ac4ebf8d0335824ba5c33078dd1c3e69969ebfae6ac7ed47129f416ac2ff51130f82346722f93536f648222e7058add85710e9d7fc7df9150c393142cb4b60b5610245129bfa54aea6b3167625b305d0022143e1aea9860a363785a90c8070b6267cf6b4739eebc895ade696fa037168e7a05563b6439fd3de28f41a63f71735c961679a93a9f6f64ffdde7eec944f77ae0ba12e558e22553aa35090a6ae1e1018d91b917748366df86547fd87907c7518ede92040ced9cf10981a80c255ea761d8fabce44f106468f26fe17e448f5140f7b15cf0a9fb3ced24ba2c93d317063d60ea02653c8f28bb022abe1e8c6cd40b3396277409ea1bbca6d7e331bede572755914e578aa8d4ea06c4ef81109ab19bc3025e8be7359bb772aa9bc60fe539bb93697a4ef385f78b47a307448e2b9145977d97c6a63ca8439488f1570574b5eff1cf65e0b92d4a8b0e76425bf273e712c33939697124ffb17980cc3bf99f07fd54030705f016195ce649f561bb263548de9c359f80341d260b828dc4d89cf584a24eb1543075898698e10fe89f2076fe36851959b0dd12cc65a1ab7c2fe67f365c72e6389a5b5a4c33bc87de5c4f657838abc71ec50c10da2504dbb7002f90c779ea5109ce42c88abf87c405f82ac8ade9b1527cab34a402491620605aa5472cb98ddaaf299ad0400846148290edf32a4cd97f715635a15bf11722723eb62769187ea011221620bbcedaa22d0fe39a512b0b587e545a765f03bd2881c223271b93dba3428487a4b1e50f728be1002c423e9c048de73be72a11074bc7e14c95e3d10fd96bce3dbe1d423fef9a41d3f2ad62becf3c89cace33b69d0f2996c4aded76df8044eeb8f47e44637b01aef7714ec7fd53aa945ee276291a2be32f1c2781b1aa5ad79fc9b2976b2fc3db900dedcdc5ebc931f3c7b247d771cdde20722c345554a73b823290906a11d57f09f0201b925e5d5f7a9840c8d33a130244e728b525031d92189f78907d67e445b92808fd1e372fa84164ca18cc9263bd74043e55bf1beee94971a81c442421ab435f70e3259c332749421c5f59d47a4ba8d3b031fa3b9a311ea071de5aae37d66df75a54278300744ebfc8d50048b38092eaf528de7501184846988897f5876615cc05d0440b13e1a1dcb357d834ed9f6541ce0803d36ac2a20929079e1bf00bdee32f037301cacb0583b9ff67aa3aa1d1bdd1e6c3d8712ecdf2f1a456739ae284db1519db1ce915b4115309aad6b6d16772ea50a9da34d758414a6fce32e589322eb846992c06110a2e90aab89f3f6634bef5e82d3c17362a4d2c1614f6064b9ad07546ab5ed498d3ddee6a62f850ec9e8cad1a591b005306ad085d49536596030944fdbd366f44234c111065f8e42d233862a9ba94beb50b07b870463433a23889b3bd9d66c7ce72e1cd736b6b522653bd07ca0ace210e51f1c9e74699811b71d44e437e91d6b809cceecc3c98bb4456d93d62fe30ea8c73b24c8b2b74f9e287f48710f174cd237ca1ed770ddd1dbdc9885594f17b7674ed47fd1670bc887ee35efe112a34a322da126f94b76b65475b77441a38e4efe2b166b702b9bd8e68f0340b088a4a23904e0043602580b71cf1ac9ded1d73ac3737241ba235267a9fd6c5a1e3afe4f02497731d5dc08f653f3bd3ed2d796b35e88c2fab49b5dda186be91c632c126f4fd2371180a02243c7fca2366b5afdaa1b89efd9b7e4cf12c236aad24cb3be17db057d6972f05e7e24f4662831280f01488b364979e568880b793d244d76a4bcd2e4182e3e15dca48bb7c4d2a7b743db8ecbcd288d7f3793bae82b651f3d5e22f61212677c1fbf4e61434fe3a5aeed283e46382ba535a6d6a196f42a63262ec774884a994a48a4da85b205b946b5b4780969c8eea5c239409055a26bb8130d17de2cf12ea1e7bac6b697c9986f89bbff475a0378bee3c304567f97d154bb78b738f7840ce84689f782410f3a35b057db85aeba297deebc8bf4ac510a743461e0acbd275d9bd09a77f13c220599e7be8a48e9f82a83509f86ff61bc5ad70ea973fc2c600eec2604d583f6bc3d06d58ef6a3d96fd835265e6a19398e5a8dcf5d904f92fed51105f937f2bd1a2b1dcdf54e6c4518a494b2268210d2e2c2f3f627ff7c28aa193c99f6643e3ee3c5c87b635b8708061d821fa15809c08ed259048f1dd450253356165423bcc1c87480be14562f38fce120ca8d8b7c8a252562bb9e415d78a55c3106bd4188dfb125950e71be2cc62cc8472b0e070e8ac6823d51adf08bb7670034f64a4d936383edfe4ed315887675f474125954868e0deea8a8a5bc18136c9772386c93f700dea3138a11596f63355112d44e97ae8589339167cc87fbe8118c871895f624e60736cb6b7b2c0162b52ad7af798ba12e4813f56e731f2be44d8154bc9f184b4ff2ba34c65999f003fbfb01331c92a371536af73c1db534bc0a4be88f5ffb992217c5ed0256e881c0484f65e206de7648b1a60427876d812420f7c2486fe43f7f1fe2a3175423c3366ac110cad1a30dd6863d13953c6bbecfe9024ee7a18f90b6e31695bd757dd444f90dfe258b237e71228874f6b87cb868baedfbf89cd5982ed36b8413c18ea6fdae501c6d4082cc5bf9b5dd41777683264f65ca4123783da54ffaca5aeeda8cbfffd59476fea7f8449cd4791404acb2743dff3baddfa3c71457af420b4a04f0d76a990224a1a549c03d37f941b2c3cab9a5a73b0fca61d332649d9fbf4d37519c76247dcb96c0c340facb9eedc512bf524f86603d85a7e893fc84dec62db3d8f1f65a597c1dfd162499d6df9c7092751f5022405330b13ec7e9f68253a0d5c8c99cb434299fce5b4e9e6c00171347b9cd11ad0a5778aeaea1387d68c78f5600c45e854cc5b878ac5c737eeedfc4b917da0cdb69ff23e5d86f6d7ad88fd5f61fdb2c5bf26d9261379651ede29ce87a513a93a1dd238a1ca793e8548a62d1a3397aa7e28b463c581e961559c7dc1d5a739b3a05ceab3931ec446822dee3ee733b6767bfe24307300e97c20233129622e866d4668104a7fa5ced500972bbf1c8400e33e07dc83139de180e92bba2cdc0ec3df20dbbf72c40a24d7d5089cfa711bb2e7ddd200083ee76fff1b2e5a0445147074ed114fe4e8000a3ea46c81d2c0e1b75f424c916d7e081bed072498a3ae846b4885d053590b3de4eda3d01f282e1d15e03f1ccffe6e1452f92858625abab526e3b5be3be4e90c4d932f203d0175b9a2822376aa44d856451de9783544526995bd23c8375221afd169088a94052c3fd3ad16f6d3eb5de9b791a84539c08d739701c282d72f238f3964dfd0ab3123406069debd36c994e06b73a6481cbeb36fa02daca8160add5abc45fbb248d889dcc7c59307e04298f193019e3abd71d6974b0d90cc7e57c5dc77cb3e10ca6a57553d9e1699806b67ada143848f26218db413af7925a712ae44bf826282598b15346aa300bde2d93c32c106d9ec14004b0d93a2902804eda1416688383d0e8e7019c03f41b84ab7c5b78dbfed0067ef7109262ed805fc3ef3c5067ba36a40c6dfd4f07a467b28b35b5379bb2556427f76c4d35b8a19dfe4849cb5324168281308ecfbb46a15ac50d3197410b72cd5814fa82531563d1df27e320164672db4ec623b84e2584a56016de8010eb5be0d72662f1c710a80c9c02a1b5ad3ad99a949ec0a5996b90789449aa65189c88796de3e84ff68aca75801ef0847a600d337c1f01c6a5ac293620431347ec0fae377a6331fb332187b3e7c871174d9bd688885764fecbc5dc9fde7ba2bbfd3965077827306b562d5679bceb6bb3464315560b18b3858f23afa63475bd8cae8f3acfb0464e8b29f2f02acbb063045c07b628943ab1f346457c464e8d3947a050e91e2e3356289275f37fb6165d89eacb2f007a38c58eb91aa9ead59366d2337ccc15462cec4f8ebcce639cee673e50629a8aabda9a675ddfcdb177d5388254f31a670b4d3e37c181617e2cd78a15a21c7be1b0b5c6c723002ffb0d3d17a2a25954f258b9b74c9d95bb6321717e81e04db34db9d9fc6378035c8076d0b727f99a829e054ec99c79b43f17fda217f459f90c5bdb4446b8f434dbf51f7f399cc5b871f8efdc2d11213f213e07ba359c332641c1d900ac25fe539735e6eb21335ea67d32e179169a07eb75c110ea263727483bc16bbeafa064e5c964d562e21480cdbf5b2eeacec3dc76bb92ef5e6c283ee19084df83f39a25b0000f8e6c304951b7e5ef4fb72b69027b96dfb3036520f239e08b16885aeee27271303105d8c516b86ec50ff2425d452f56fc1dd10ce767134e638857e0963dcf8a0e1232ea07a7391ae0629485792b6e41d877aec551b169a11255d41fd4711a73c42136bd6041b176288635cde6c9b8fde01c670baab3145650b765b68eb555709d2b08bbe9f473c8bb020bc564ad0e0259f69fb4b6046bc095b49be3379e3a3361c0a844be304d091d14547dc3cbd707c16e213655c75fada42be5ab05fd2ccac9fa492ac305e250983aa5abf0b52c904ad7bbf579359eaabfdc82ba0fa3c6db6304d7122cc8c7c600e5bfc9e43b45916ac473b0813b5cfd029c4ea404962b44ea2cf3670e66fa66f418ea3e0a3c6f0e5fdcc785c2d22dec3203898380160a5b61111cd0f884c08d3c10eb063fbb073834e82e1ff4c2013d6e106cd69f59e59178f2780864393de46a989218177309e41263e0fcb0fc97a97314274e646db94587f94bc295c0fbb444cc5def80dbf53d8d0a9db7e91b42598e887736184eb584e215b6a680446cb54bec986ce9b3c31cb906c2083317f0e39579bc5d3d120dcc6e54a42a0e33807853e9d681414dd5368f8cf14fb5080f2bbaf018f071ad0f8107841a0bb170e760d33d0eece73ae6a1f5e7aac3351f92ce6c9bf5c55411e1cfac49c45980da6396d9c59ecffb66d2d60fc4cd2671797bd5ace84ff1083e28ef0144353d76b32487bf17fd69611827ad96587f10144fe47a01086f5604de33853ea77cc8b5e34ceebcc682c01cabb93d382ab83c8f7f21c8925c003e47051978d6c492bf54df584566b4fcc059bcd963149452fc05c331b1cb08d9d7edffe97bfc933f6b2b2c452361dbdfc38f0f26a6be0c2c93789db65d113cb16d6d1e03667d8ca00e35a3fc5c9d67d0cf19e63a91d3036af61209859d2eb80687c587131a9219666db627249e20f843c6a6ff34a52bed494fbcae795115a8c44f5deed831f9a74176c89b6e2fd68b9028f778fbc03f745d0d33531ebb66fdb37d9efd22f9c526cf3c38b13e98d938a5cadffa7da641ca9c6b03f3b979c241fe51b436423b67fd7f7fe22fd378643d0f51d1861ddea2ccf551a2427ce1b7c99e3ba0fdafcf9c049482f42210d1a3040740581d0ffca4a21a9119da392cd49663fb9fbd68ed583e7d3244cc08746fa551e59652776954765acb10052e27cd250444d9f214860fe5771a1d4073ee4e755e69edce9c6cc8b2cac9bd02edc30ca9aadd4a06df9b64f9952fff62a277b1d0f278e7b6256c24beb243bc17c9865d303992048d42bbfafbc8992a55d4bf1c7ff24af65532bda698cdc211576396cc034e7901a443ca4fec5286f6092674a106519679b141d2d397b5ef4af661c34b5b8bdaef49463e1ca5a4269f1f969edec551357f8c4585c4d1b0bdaacbc7d5e3b61aac7fe3914ca9bdbab219cc22dc759c72af5f8f682d7bb64b384326f3275d538a4dbf2693f3e048dcba9aab01b127fc598831f6cf02bcf2d5317479b68625a3ce96bd1446e753c055b93202b3869279e40895e9b9aa50c5092f0c3e3ddd7f07074097b83c70462c209bf07551c294cec520bbc9bd789b917d0729278fdcfae858381bde7dec03e549b22f5a3042d0a28c22d3e14a82b606e7d071d17e3d19c26c28613ca6dbc13d3cbaaaa4ca16fc768f9af81ed00e4c81109b9a3a6f5f4bfd439b20af54b576e79228c93e719581ee00f375e84b1f899490fbf6b91a1d21eb8b2abbba255637350ca06b65df029d9074b31e6e512bd67cc49f99b0bc7c031a4daf3f1b8089084cf1213289284168f5ffe8e3a22a46e781364b67edf9b99554e1ad952cb86ad28c90cfb970d7284a6cbae6552185582437553f899c96917228affc942b561fa229ec548b9dcc0f759be9b3c8675c2a3aa900a3a4f1ccd6f3274160b445f096560d843dc339738157e0ec7935e09c876237114bcbb8adefea636dac5652eef56b11af25966f4465a1454c30abfa3b37ec60797d68422f4e6b188ec4ec62c0cd96196da0f81c62abe1853b74d676c7b9e6906e21cd82d67aac7ed1a75df652d3b0c0460f61d6c1a33ffa4b7c95c825a7e97e6551c5231c8852eec4de25a2e9815665a78a2831bf4db71cbbdf85114fec349f66983553a646bb331e8bcf7580297b44dff9cf9c99e63a0fc03239b8e17996238d7e204f132858f490127cd578b025c6b70fd7741070b8b52b95bfc31836acbd58488b219c0f72b48fe2e150b52342530be37062b7e2d9c207555c1f1404fa429fe855ff0253867485f57b6b9ec1952638fe5d2530339faa6a1bd9925c4e513b2281968b08ee0575387515bbc98dbcce0229c0ac4bc14adad92d3625dca38cb0a1fd50fa41e6eba0860b3b64d305d8aacf29b5fd55cd13bbbb7034b7e196e60e3b8226ba9cd9c118c540d148b91652eee154c412704516260afa5e835575d85fe0c9bb1067e56de41c9dd10a8067e0856459908426ff550c6d9f478164b289aece5936a1ceb4dfa282f8da309485fbf515aa24e1a543d02f7ee97f08dcd7775a357b87cbcb02c17024772091ea9b6f7da85ebf79b2f1d4ddb4bf1963314c5c13dea5255af485ef09b90b1d597dd553a27e3b3c6293ac12dcbcc0dbd2395b750c6b5019b470632bed2cb1e8023b258db369d652885c28fa799b910084443e92f991b1f9139c17471a0731f9248bad0d133417132c8c9bb96f4e68589f698ba85e6f9b9dce299dc083af4c187dbe3d47ca5f3ffa0398925a3d4b2a24adc4482a0b18239d6d96c355b179154b27790b3fb63fdf3e0ba98b1ce69b79eb69665c14327b3115c1802c19fe223b75e2df9f9c4ec0c8d714774438aa2eb46598356c9039256e03b6044d72dfdec94707368215cb035b0c9b8ab7331ac749b371ccadea8e11e776afd6364735ee68b57577e0dfe3aacf23c4ce09430047f6a5723d04e1f9d04a5e776eeaf75a2a148cca8ab435212119a5b87573de478452c0a34ff6cea1690ec311ca43e286c132389bd3940ebaabc3a877ccd5e7fff5974084b3c46146744055f48dbd8653212346a72ce376fce4314b1bfe6abf4648dfe34e66e75ae8c085ce90d223db587f92fa2ebe90d451982cb367d282f4a01afbd8c76f2816a328f094cd7fb354e7917e8432b07d1f1dc9af34ceea83366b72415abca8e928b120139fe923f68e35ec38d5cbfd939f3098848e286a73da9f89930da8d09c0c0f45b428dad5c011e9d932a2530787011e7ee27836ab23e931f158575bfcf290b314ac2a725eda01782b83de911133b61b8394e7685f138c0ac890115e615bc4bee021e15e4ca196f01e48892e36c3c9f409920146c0b946a43935a896be96f32f7784d3e8dce11c4d70019de8dcf24aa90e766f256cafdf0c7d18e207c63d6da60931fc37d6cdb62bba01c64159b888efaa508a97a5393047fe287d582623243e87ed76e4d9dc1da8dfbbf1bb3a3247abad1a83e7189d027c209043e1e088a588874a8dedafdc2ffa40bb11aa125808822e5563bbba4613f777287a80a61f9a6e2a39d193ecd8aaddebb7eec086787dde274d256040ae70d264e3aa8899d613434846378520ebbffa55c55d689ddea04446f0a3c50e529942f1cdb436c272ca7ce241f195dc06b0b53537e553358eff020aa3b2794e9804587c63b5d023689cb1eac06db44fdccdf000f88747142e8d9e9f7309d84b8588e3f7d62371cfc03f030eec9e3af375a59c586506bc2f5666d214729ce8f73989cd499e51c83422328abe145c4ba4b2b3b842ab6857fb9b199e996152ffa78f0f14eade78e65d95ec393c154e54413906caa5adc5c066b2dea5a4a036b68d6cf1762c11f678dcb318735d0210e4bd34d451644719aae9e8f6c62f3548ab305e6030d5cc71d4635b36e319bf672236cb553393e250f0975dcab7efada341735bea9d80f83ac3f4daa6269c0eb832c971f0a72a12cef78d0cd1a8060eece62c3d85898d3470c659b3e88060b7efe6fea5f20bd9d4fc4dccdb194078b207df16f2b40890ac575f306529b5b1ee5c1ce12e2bbaa8bb4f19f1795a48842a8cb3dc11c304c1e48c4423051c5737a395f11a301e1078b6b17636dcb727e6605c75fc277125bf536de5f9455f49666ac1e278261017f373bf61d4c71232808858c0e571cdeb264d981c24bc8e72f88fc3357e4345b5e69ff2cbfa70d5ee728b76a85cc713cab30c7c39536fd0e15b697df96c9266214743654ff8398c113959773b81692a6f9182fa0f7e398ca01cedcb887e2589898ec317a4c0c9867953e7f361338afb3ec14814c6a19c8a1454fff0490e50e2121206f58ca65e2f3d53ee6a992c08cba3853852b19bb6af85b91a8151200f61fead83d38a645e00b9e5bb669b443d670d8408a69813a87e533125eca79b9301b5a74c65c58f907851b74c2d1ceff42e30d1ed5aaaa3c73a7728fb8b6caeca17ac7ba6bfdf077ad3715aaa4b8a8bc9e201080b7359040e62fa36df5531de537bd34e8b224a3eaf853cccbc684eaf803a033f10940c0e4d370b3b8eb7cff91a426eafa4f6c874aae100e6f6ee08af82c4ae5472cc51f93331bec018ba98552a930d68bd4d98ffffbbc2618d0d2e5c9b1d465304b6ccb58b60825755cfe67f3fe9ac8d93612e22054ef6bf4dde05940ed3e4d9babb23b22a46034d7f46b9014b53e0068543e355c89f54a96d4f463ffe857bc18a7d927d9c9385757f74ee69594329de84cc146ce588ec7146c67d7be935937a6054823fd20e60f1f18b7ed45af8d17855ab4aaea3ed0e0a81d3773dafe9f663757d7a32adcc2ec39851c21fdab51db677babfbe8fb64b3973b628118ad2eba0af0be00548216c45213007d931aa370d11acdfc3cef1f7a634ea45a5225b6ffbf2cfda572ca656a54c77c629522f4855b6beb03a42908456c4722c05faf9ba06b8957056e29a28be0da0f40f5cb79722db877b51249f0b4906d7dc735d9f6d88b53151052e44c068c9622e5218b37236f1f9f193d134851fb18e7cd2d392680790976a1e930a70131cf504c08a0b3a3f8835fe4da5e5ea8ec82314a45550b6405c76e80e8f20db4abe49532d1da698843f4a9b3e51b3cb67eef54947655ce4c87b70e0d3fa5682d5c92aeea1e1cc79bc537fae983d57a1c9fc812c9c6a9a257a501b0ba4693eac7352bd5a6ebdded41ab0fe6929ffebcdddc0844064bff4c943ebf163b408181d3266919ab6c83d7abc00dfbdef398b70acb4dec7fc889ed4ab8c0c9bd1ecae97427fc84a42e10fdaa4c8a0c4b29735f480f60684a486f223659e7b4917f469caa95d082ae7b11e0189a93990129c5841c1e613f15f5fbdd9b36cd283a35caf92530a0f7b46bb46620a7b6820fbbaa1d48621e8e3e04708204f812dc5ae0abde03486913a6886efd349a60a5f0ee72f44d9cb0fd716137f56ddc1dcd6d9eca3943a7124ce251971c55a1f3685bc95d0d8de26b8d70a332f4f7d79ac0d25f0f7e3a3b53b9ef63f60a1c6d529cae0208038b6d422794e177e61b9617cd3bc8d8497d2189ad17f3ca48df56bda661f3c68d774850106c095c230c97bacc049a21c48520a91e4e23b3ca248cf023c15b93b8a709359711b216c784a01cca285684590f1f96524c3fd005772f1290de25eb0896229b5eeab8431275615c62d2d497a99dfefc5668f0a0898d295b1405e4bbd80155fb3bc4020a04a2567f805cfbca66b21dc9b17202b598b78cf18145e234a52a934a109f23fb80c872f5f48c790c11df336b8d792094a4e29b9c2a4778b8bbbb1969571825ca22e28fd53b866f20ce1a21c3062180ff384851d409eb66a11a5270592e2c4ecca4c89769b96e9b0f1749dffa48e841c06c045907bf1d403c4a6ad9b70229a694a4d02501c52c01ccbf9a2270da87acaade39ceeb6f0774779911f55b105775523d316bb73086af95e3ad26516b7204055087e382bdd092a290da50f7c544adf4f7dc2d8cb287ddfe3e91ac8dbde96d1645715fe8c41d9aa6f0d7de65dc17fb2addb6d967156f9598cf81164a65833d709ffdeb42493475364c4b3ddb6c6d0d94ee26bb8a8ebac986e5949a5e4c90a52fc0492d7296cb868c5032ac2fcb40e5d63955f7dbad47fa75a40070291b111f67f4ff6b863055b33faac38e1cca1c97edfc47192890b7b2ab41673fcecf11d14d25ce39773889032b3c4aa5cf2e5e9e3bddd95ca68ec079c3fe6522fe8f310da8c272842f42a51a11514c2097b037998dfbd7abed03b5045034ea07afb4b4724a96fabfcd848abed3179ec1968c1d5cee27f0ca878d1f6f9509d4f8fe8fe974794cfd530de1b3593c4c5893d9bea32668a0d148a129374d3ed44347da4cd9be6f61bb35dbe3164be84eb9f688e5b78a6eebd3e5b6df95add510dcc70eac4e9ffafafaf0a423ee9c60329ab6140728c579907d2def3b5027251de76284d3c1c4fd6d87506fe49b706b7e4526a60cd95f8efdc32ba43b686698756f5996ec92bfe42e1918ddff387005ab02c2d3b18b6deb5e7c2bae82a93c60731470327ae270b1ab340e62f23609550a57f20b647e2ee5ef3894a4c2d99bcda30355f1d5f2008aed5fd45e2fa473916d6c76eaf16b6287ac7ad1dbbaf1b2314ad598e040ac6b13b3a213060c4bb4ae02a44b73839fa57236394e6f796daa94051b74d7da19232a63a221a3e330878f1117767a94bc26b6442bef94165801738d4fcd37db6ad512de769d55093c6e848ca133fb9f83fb03a48ca737214680a13eb6a67ae88105c3787fdd6ae8d10ca962461d69a25762996bc3b90cef41a4986a87263e41bb66fba5562831b608fc9ce9706a91025ea40a52627404dd8b9e6556b15c2252bbb620c2c5d58e47fad4cbbef2e07f77b3ca0af8834c4d9bbe3d791343802476d3163dc13a7e2a24ce1b8911abcd374bc98476aef6fafef1a199ea7563837f58f95b7e2b7d3dc12d73a235eaf64eccec925b781d6d47ed4d1ed5e9c764deb6149d350841abb004baf2d891bb411742d1eb8499ae8b29e2de4dd67bcd8656e26ce7b4cc4e2358b0701504ad2fdc7bf26da987a67b5ce3663f8569212e92b86e3ec0156ffea2ff7d0f44e5b3a9c21f45f030d1f78493b09f099c6bba448e505e8ef69413415f55c89598fa06ea9ca81eedca4d8523ef138fab3c6f9773fa6713f4d356f60b972afa195ec0752522244bb5af4e41d4ab0d1b80fe40d18f03929c82ea14b03e9c2e6a38975661ecbc0a6d25bd4e4806bc1e90ef8a26e714b2cf703ad4d8ac4a4c75982696c9f07a983fd9d0a6ddea42a834f71318aefd6d88b008b72030cc4155d7b3e0ea2974a76525c898e71ec8549b6e58434d624e8903268b4bab7436301115764efdb20fda5f6eac8242687702a481c779cfc90b11cce6b917211577b0ab333b1b684dfd24b468dfe7850dceb75307ea74612e5f653d80449f2854df74c19a68c07faf96b31489a83160eaf0a2925e58282bb8878bb47ff357ed1940df92e3bfd5f0bc42e512b8ed6ba85a1e5c89972ec353e7cbdccc0331555b757d7293dfc096e8be3aa00fafd4ba824d56e4a59e071eb4848de62256d5333935c74ca5e2815a7395ab269b608133077b69aee68bf0015758dc47170a715c9b56c0864b8a6cdba2c28a709176326875df18a88353cad68428ce48d740fd14fa3a972e8729ba3cdeefeac2d8a38793a1b9b78b0db2eec337daa53f5bf8d3d1f2270648524580022a6e834268aa7e900288aba7fa13329eab4cbeedd06b042ff49ceabcb3c08d02e5463d0a453a976d6d2d9e58cb37c0020181dfc709a4b53c65b73a164bed8625c579b7864b8c0af2452f70ab5a5bdfe441e75a4d57d2554e7f9fe188d5d7df448a9661497a7f05dae4aacb4fef0c878fae92b9c5b16d78f7ce307fec18073adeb138ddf6fb5a0c529082412033f7196654e02f332346d5970c83a127508ba579850a0579903d90d4ceb971be221656d1d20fadf9c54326d2bbc5b811071cefd4b61d886454e6bbc2a6bdd400d8f8dcf9e40e1a93e4f77b66dd22ae21e77d7e4b5733f686c9c3de4ae0de9c3fd9fb02c35dc63b0cde3a09cb3d1b89c14253b0798374abbb0769b05000fbccdc55a4ce6fa7cab6923ad0e397d9c64fa57bb1287fd342f2bd62968d8141aadc6c03ad004a3be617e92ed783ceb4fa53f2eabada0cc04a333e58f73da61ec97797d1d06242b6becf89654d53d830d9d657c19fec3005e898c551e98624ddfb23855b583aa7088f624a5809fda35d004979bfc656db20e9058ad9a40a83306cf3c4d15b9690e37e6997d47f63992428059c8cee86fdc8377a329eafc64bbb4ccc8ac499caf9cd5adfed102209a78b41aa96887321246fc9ff12862a1a64c66d786a429ddcffd3c1319ddfb6b61f87f7dba7e8ccab75141b51b609f5a68358c3eb7ae5d11609e051b673ef1406ecf2cbfebb4a8c236da25d54aff1459fbb601b12a9c4b604caeae43d21bbc2de9afa6bc9820a9c9fb6ab6121944babc39d55acd11bb7924e1e7dcabfba7c3afe728e81a375e2fc52d00356f7eb272d0ef5d2ab7aae70988ef73bd1afbdf89b83393779cc197d901d89e2f6ee4a966eb67c8280ee36558d08282a0a1398d742fbabf22cd1ba9b3cac0aa1435d2527afc52008450da923c42d2d6270e84545b66038a56f744c50c6c281bccd067fdba94f288fce525e667d7d642565eb9330f4fe5a86125a51738c84d849ca141d48c01e2784d9f3404a819e586444a9352efec915f209526bb906ac304e7ea02558b6ee2fab25202692c2da24d5028fa70845feff2175493bb493bff4e262a860316c9423bdcc2cd588a56c59a8f783887a61474064891552387ca37599a1e64d78cb73260c2262952e7893b06c27312be60257303730903d4785dac9cb616eb962f2e6d5dd4a98e5ea259f2f5611f05c80e7db814e2836cae0dd0c243d29f8a1f957c6a662b071c9e4f70913ce30d27b818451596d94b2dc37f0c386d91e43662ea91ae8bad1485c8fed63f7c33090468f5175dcaeecb49939548bf362b47b5042eccbda089aa21fe30f83ca5d65a46d0f1cc6d6513d68345f7b710761a09a9c3c92cb40998cd32929a25e40af59288b391d2190b317668db3c11f77f57799f87746a649bda328d7cafcb6e1e3e7e0d2e8c46140d1e902ee2ec2a7d4ac12a46e2177bcc9c03f817fdf1dd2cf7e81b2eee24aeee17060d1d215bf796d5bbcd2673f5107c097cde23662007e8867b11248e560511d21a426111296951f48aadade680f13efab74b76e77363c6c5156ec5a933cbf9a6737878e4cec882198c9d479487f24ef9c2f8d83fb859797ed36520fb927261ec40e4c07a494900621155c0785b6840775e6266da0e83c5133d8e85113fca43ec1a4274f011eaa88a1dbf0444442861228b1e0732053aa79a8cc28406cdbaec3a3c7cd6f5d08a9a6a56442234db202301588b2b312315d013e0aac70c6c56b5eef8a4379facc6d4d789ce9fa2ba36453b7b14b4b5cf31742220b1501ffcebfc778882397a475f3b9838b91617c6596d6ba9afeea601dc4324e6a35393f606c599f77d87bebcd6341e570b100834322d9023c8838cc309b834d27f2b28c5d2ca84d2176c6068794afb4f285d7d4ca3efb2633c82227b3b71f33aedaa25ef8061ef1db263a83bc9e444c15aa5f3b3a9e6bab5564c4ec5b467c15cc0d612138f32bbd9f43cb82ba99cbdd816800bf5e58b6298155d9e653606dafafdfe6c2b3504e99d25fd5b77ec09b52a106a1aa4509ff800839f8663e697d915e96cee2f2b0a46ff2bb66f2729d52020cbb8a44757e23c8fefd0d757976ac379956d9467d1b40b5e564c87490ee3057cf61f4a32863e19b9f4ec0254ade2db357f0c59d1d1c975f0dba6d00e6734ba1527564b0efaa79163b179f8219f48d286803f8131a2ec7e54f54ee9cd97a996f9e2de1676b7af0b90bf0e6b9a55eedb5282a1e6e5df569021f4c74487a97e9c33ca6659113c10f8de291dc0a2c59431907dd92286b0a63850063dcf59c5f6dcb3c828e8929b2c740b5f6dc9ccda7c2df9f097d8819bd25973925f9c6db9f375addc4e9b76062ecf5c5f8b1d57438ba374ece17be0ba6ba1a81d331736ad3221322ff337dce0b4aa68a9fd4b4cde34a5136eb2ce3daaf0617701a66e6aac29613f0c6d219329433c97e23d60027e76084c6ff4cacec91991d1554d44fa815c966796356a20647d463bbfa0427fddc112273d850cb71c922f2eca8067ebe9287a76a0e6957cfb7ce0ebf7552d97dc4a7d045429c5190e7a5234cf569405ad0dda3a3101724b43bb61329c3c476022943ebcf032a9283fe1d9f13da1e456adfcc382298dfa1efe052589cb34c069b7864cfecf08b1fed4cfeafb679bc445ce1f234a50228037ff00faf1027bff77c14f3ee16f6ab0d7b90ba3571d080f354c917c0090a577013a8928604dfbce5db9b73454666c8edfd1f92af742827c44637c2c093f11e686ef5de8cd8305f48d9b4842e57906d7457e16e88f26a65d6d4970fe5331ef30c9e1afc705b397a018a7f5effbf82d16726eb9d7835fb2fa71566c68b1bae6f865b8e65ada26ee55c5a17562ab772435c3fd8d79afcf7820e682eafc0f1227d28451697a15c3c093029747deca689ff2aab464adb0cbdb5ca2b388c10157586a3e5366c3131bd3b0e05d791599bdb6aac989f2365414672a567d50c27fe6aaa918624d2e609c88580bc46d247b86856a70751e4c0c5bde4906165e8d918af3b53dc276b0a8df50b51bef17bb95ac8902b586466dd6537cd68c3027413d29833375375c4f055c08c73e71e8da35ec1257c315255001d13ecd6118f1d2a994f78767996a9533572176f4284e0ee5f70bfa180bb39d7a21cbd3aa6f05e27fe468961e8b367a5ef60734c63417789e022c4f57e3faf5f75d9c39ea9299c83ab6c7422067d83418cb612a7fce077ce575c8c80fccd86f31733bdab221fbf84c3e73b95c3dcf6a3a99ee85cce045f509f8e0043d12fe3fd9a75a824d141527025e90f75caca2fb37fe6790dfa3eafa67ea3ba7ee50257e755a28a9f104d92891247ded01892fab589fc04995031d9a5ea87b75e97479df25dbec910bde971427f5fecca951c7208184afcecd11820d0c0dbfccec2d15d7ae4dc5381cf614afb24992dce90f428459c3ceac80d5afda85371dd4e10c4d1f2c5a526e4309249eab602c65e4589a831433aabaeffde7c432639920834719ec1a4a2d9143729bbcc2a49743fb0aa307e7973bb5e74ac130595719614fa29c1647f89e78adc183a78de5d2d5e88bf255b8b30b72e98ef63666e5220e27b317d77e3939d92070b5ddddb54d4eecc46eeb4f8375c9f9357048336a133b6e480f560a33a59c1927c5765430749ed70f168a97f15005c2d0325776906bf36672332b665e7fb1bf9a5e01690a8a4fd3f8ea2c35f6056cf55abd5535197c6fc975bd0d265450404c6a13990e75d7ea707806059a592363782d3a50947c078da25e5ac1a72a06d84ad53e6b78cb4440f252db51b94e9848525b42039681af99223fc850e39f2889b860eb9c04b1abd5534a3b55779f3a33039fb7a7cc93321ad700725060c620ea4ade20cb61a9c4f1bff985b99af8c782c6108f1cd93742240f568d4a7c22d87fd12c49421689d93fe2cce4b51597d7d00e549d6554a49edafc5e84f0bd624812c02549bcfe9765741ec0f183b5f8da7a9c1fa33588f8cd595bb859351939a7ffae3af4fba8d02bf5850a6ffdb7b4db2b82ab9c1a7e1bfe2341b425663bd98fc7299bbd8eb9652fbccddcebcbbb2a3f73a5630c459b355494698fa6e10f7085ab438f82a35cb304483401f1483cb981c86bcab04bd1cdfa6cdb93d6403a8175a8ca956b719cc7c999ad704038bb215bb05ae13d68bd42b360d7d71a0b24098076ce511b929e891b9e105096aa5c8fcf3210590730643e535fd4444c228f1c75811328e079a9e65ba4df85d5cb0ad33507c7d9785b65a568d85d71c7c32f24e3b39251620a7b675201df19dc6477091090facfed85386a2b8af0bdccf5729758501ff63bd8a20bd29eb1a691f8b16ac204ed5da88bff6cfa3bd2a118e162d915dc1d8b385603120a5996fda6e20d25e8c10d91ef05cbfde302db81c15c67c6cef8be713c7b01da8c895c490c72f1d319f576cfdddd23814a43b5dd087caa3b687358b872459cea1ea0facbe65b80d116e697def33a1c46d415efdf574381e2e05e8cd9440fa84970577f3bc3e93a6039be9b605bc0e379b133fb5a3cc86ef00c259e77d3c881498844cfc491461c8fe3a4c3dcfb29fb879f3ea9b68c9b47ebe38094d0e062947f6d1a130d9e89b3ed772a7b050e283c1538f6033cde89e1e71d3877112ecf648d7ca887b3ee468d41bebdd8cc7283f78e1b35f67baf1d8997ddf3add1f8453124e816c4eccc497d30cb0be7a4d18dbc16aee995ac35d82a20a631f7458b19d208c2ba8c67beb3876ca38c72bf5a03ad9f08d0f4834d690a0e47c5741a34750e2e28af94d4d74bf7ea49becab8b3fd96af035c069cdcf2d177db9ff8827a0304dc401d1318d28c5ffed7abd919ff2dae7072a03f811feb378a41d90bee25a8317a069f84683a8b9910428f15d16d2a671a4ae94a24e8ec53a6ed688770fc7e02a96d6ce06dd5d4407126d87f44c659f214f8dfbc0b08170c37affc6f28e05258ec590be8a7ad90741e3c1d4640620ecbbb0cb221ba02fb088868222283637f49b7c1a83dc492320cbed604caa371ceb086c603e44045050b6133386f0254685462a572136f621983337e53d31509e24db76ed8cf23e7cc4903fb401d3654bd12c6c553c460c9528b70dac5034b21b33a7b048ed80c988603f5ebd20a12fca10233367d8263825f2b79eecc2810661d93637f4f4ee4802da5157b063c14bcdd8e256dee85498cb4637c9a1ff8436631277032a5f8da0dc63dc79d972b74ed7041296f35e699a2c35fb16a71feee27fe941f51f9f5c9e23ac61628c7d2b3057d1385ac42b35081152ac004eed6bb567c9fea3ac75d1a7a56744a7ec33cae09a04d953600a909ff8b20af8f49c4600e39f8e82781818511b6a1b4e8ebcf05df2f951667b9f6686d018b594ad87516d16a59595bb5a5baf2b7e8657fecddc3da4bafca0163e32d3eba89242698e42942fd11f6587e01ef7a454e0add3e458a006b0f203c154f2395f75bf376dc5fa991c84c9e2d16298048bf96aafafbebe999c60775036c82ea0c250513bc0d89fc2c39f59549bf68dbd190035ae38137aa3c44c5986a38e05ed596e2a88e9eb3a78d92a5cb4b80117f95457407eeb7d26b6d6b16e249740950c5577be09df3424d0d4a00547adfcdeea415d9002d8132f274d46d4bd5fcfd398d61d76cac00f765525f5ad938fb5c06ebb7ce6a9833fdb598c4b81f7da234bed0c519b11a1589ab2841477a853105b38ef70ee3643bc53f3b30f6791b3ab6b984458cea36950e6671e0cee8ced2bb257c29e3a57cf58995e268dcc66fa9e67e66d2a37bfcd846d773f5da51b3799aec4ca0a120846c3617270d8d5b532aa075a4eb5d0ca83f2a82a8c1ebdd05dd5801f2a32291a381839300fdf9e7bb18fcb34c73839585e5f232d506c790f34bc38b6af1454a141a0179596abc9eb80b6aad437e6063113996fc65dc124970cdc0684f12f7cf8d78d9ae8f349c2944440b9f264cc5141c806d57f15777284516b52f73b33bc5fd39a083bc0547a3f97a66a8130c0a422713cd1e986448e6b1742e83b001210d4cf8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>Hololens</tag>
      </tags>
  </entry>
  <entry>
    <title>C#编程-线程01</title>
    <url>/2020/10/14/C-%E7%BA%BF%E7%A8%8B01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-编程-线程01"><a href="#C-编程-线程01" class="headerlink" title="C#编程-线程01"></a>C#编程-线程01</h1><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p>
<p>如果工厂的电力有限一次只能供给一个车间使用。也就是说一个车间开工的时候，其他车间就必须停工。背后的含义就是。单个CPU一次只能运行一个任务。（多核CPU可以运行多个任务）</p>
<p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<p>一个车间里，可以有很多工人，他们协同完成一个任务。</p>
<p>线程就好比车间里的工人。一个进程可以包括多个线程。</p>
<p>车间的控件是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享空间。</p>
<p>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
<p>一个防止他人进入的简单方法，就是门口加一把锁（厕所）。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫<strong>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</strong>。</p>
<p>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p>
<p>1这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<strong>“信号量”（Semaphore），用来保证多个线程不会互相冲突</strong>。</p>
<p>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p>
<p>操作系统的设计，因此可以归结为三点：</p>
<ul>
<li>以多进程形式，允许多个任务同时运行；</li>
<li>以多线程形式，允许单个任务分成不同的部分运行；</li>
<li>提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</li>
</ul>
<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line">namespace 线程委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> c,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">test2</span>(<span class="params"><span class="built_in">float</span> c,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">            <span class="comment">//线程休眠100ms</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">test3</span>(<span class="params"><span class="built_in">float</span> c, <span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3&quot;</span>);</span><br><span class="line">            <span class="comment">//线程休眠100ms</span></span><br><span class="line">            Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onCallBack</span>(<span class="params">IAsyncResult acr</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3已经结束，我是回调函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//acr.AsyncState 是 c.BeginInvoke 的倒数第一个参数，c</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; c = acr.AsyncState <span class="keyword">as</span> Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> d = c.EndInvoke(acr);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程3结束后的输出结果为：&quot;</span>+d);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 一般为比较耗时的任务，开启线程</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;args&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//主线程</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 定义线程方式01</span></span><br><span class="line">            <span class="comment">//1. 使用委托定义线程</span></span><br><span class="line">            <span class="comment">//无返回值，有形参</span></span><br><span class="line">            Action&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; a = test;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启线程1</span></span><br><span class="line">            a.BeginInvoke(<span class="number">120</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 定义线程方式02</span></span><br><span class="line">            <span class="comment">//1. 使用委托定义线程</span></span><br><span class="line">            <span class="comment">//有返回值，有形参</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b = test2;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启线程2</span></span><br><span class="line">            <span class="comment">//取得当前线程的状态,ar</span></span><br><span class="line">            IAsyncResult ar = b.BeginInvoke(<span class="number">1.0f</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//检测线程是否运行完毕</span></span><br><span class="line">            <span class="comment">//method01(b,ar);</span></span><br><span class="line">            <span class="comment">//method02(b, ar);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//异步回调</span></span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; c = test3;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//倒数第二个参数，委托类型，表示回调函数，线程结束后，调用此方法</span></span><br><span class="line">            <span class="comment">//倒数第一个参数，用来给回调函数传递数据，可以是任意类型，现在把c传出去</span></span><br><span class="line">            IAsyncResult acr = c.BeginInvoke(<span class="number">1.0f</span>, <span class="string">&quot;&quot;</span>,onCallBack, c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span>(<span class="params">Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b, IAsyncResult ar</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">bool</span> isEnd = ar.AsyncWaitHandle.WaitOne(<span class="number">1000</span>);<span class="comment">//等待&lt;=1000ms，若线程结束，返回true，若线程未结束，返回false</span></span><br><span class="line">            <span class="keyword">if</span> (isEnd)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2已经完成&quot;</span>);</span><br><span class="line">                <span class="built_in">int</span> res2 = b.EndInvoke(ar);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2完成结果：&quot;</span> + res2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;线程2未在规定时间内完成&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span>(<span class="params">Func&lt;<span class="built_in">float</span>, <span class="built_in">string</span>, <span class="built_in">int</span>&gt; b, IAsyncResult ar</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//判断线程是否执行完成</span></span><br><span class="line">            <span class="keyword">while</span> (!ar.IsCompleted)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="comment">//主线程休眠10ms，控制检测频率</span></span><br><span class="line">                Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2已经完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取得线程执行完毕后的返回值</span></span><br><span class="line">            <span class="built_in">int</span> res = b.EndInvoke(ar);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;线程2完成结果为：&quot;</span> + res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//检测线程结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-Socket通信_3</title>
    <url>/2020/10/12/Unity-Socket%E9%80%9A%E4%BF%A1-3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c49b70192563001935fef6363bad572651f68997b2ba12580ee0b837586f2959"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
  </entry>
  <entry>
    <title>Idea</title>
    <url>/2020/10/12/Idea/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a6ae19096d92740120998060ec27748d6c4238840c00cc08f88060f8f91b6208">2d058b368786be6af85840de2b870e3a8e0d65d8d41b6c86d759371d32e3a62070c385ccac7a240fd061091b8fe71e980e811cb1e708fdb93e3ccce966db820994fac143d30ef08f0bb32aefbcf9ce377fd35803db98d1f84d47abafbb37a946bcbd9e073adf671a49f558c26597568fb402655cfd17597fd2d21ce0a8ff2bf376281a38f8c37cedd4ee2a7052d77cbdd516edc319531206f9f47a4c8e8c538930acb62dc24948a116f879d96b4426b3742a607a4debc70e6347a4eccd1c6c5dba08707dacf3ccdc5b80d96d71e334b965f992381544dd629fa5e288574c7dab69d7a2ba1c814e9bd753834ebed0de1ca46358a3460f1972d5cea8f199fd1451490cf3cddc8596212df407fda1b3c977421f29a9ab6112dba62c6d9d56acf590f3bb4e74ecf9430eca8e924f5e683c352b438d86679240ede3452122e0dcb23c2d0c9fbb4db116ef46747eb1a96c069c3ce8fbd29a7c0da3b16ceccbef8987e6f17cc949fbe5d0cc47c92f65b1b861187c17b51515e5f20e4ce9d981a94840115de0fe533bc28a16d4eec7a47fdfe346ef5bfa97130803ba820897661cb8e9abfaf03970be45d19bf6f101e7ffb2e5463ba9743e5d7d62133f651bedb34e2e8e03c4dc425e0f3d30b9f6b2105f3c081e0addb4e45617800fc5fc8e9b346a638266cce7b0a2eb394c7841624d0a05e30d985e76a9c5248010b8ee0ea763abeb7d0ba1e0c709327ae32c7e3e656343d34f6fe9070a8e2ed4e1fbfd0ab0c8fba2285e186cd98b89e745c92ace9dfb31e5ec88ddb5f69a45968f76a18bc1079908742a8137e0c85072301e47ab0f702d408b1e2afedbbfd2915a0b600b2f728365933006252dc2b2611e2422ea0ccfb1ed8bfda89e6d1be4c231982c981f6bad5a77aa30b99dc6091024565e956c393d558c394d11a84f8d180ae010152308bf48a0cdc8cc41f01b155f5e3b3560a96c4cf4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>C++核心编程</title>
    <url>/2020/10/09/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p>
<h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>
<ul>
<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>
<li>全局区：存放全局变量和静态变量以及常量</li>
<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>
<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>
</ul>
<p><strong>内存四区意义：</strong></p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>
<p>​    <strong>代码区：</strong></p>
<p>​        存放 CPU 执行的机器指令</p>
<p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p>​    <strong>全局区：</strong></p>
<p>​        全局变量和静态变量存放在此.</p>
<p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p>​        ==该区域的数据在程序结束后由操作系统释放==.</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204015.png" alt=""></p>
<p>总结：</p>
<ul>
<li>C++中在程序运行前分为全局区和代码区</li>
<li>代码区特点是共享和只读</li>
<li>全局区中存放全局变量、静态变量、常量</li>
<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>
</ul>
<h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​    <strong>栈区：</strong></p>
<p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    <strong>堆区：</strong></p>
<p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>​        在C++中主要利用new在堆区开辟内存</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用new关键字进行开辟内存</p>
<h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p>
<p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>
<p>​    语法：<code>new 数据类型</code></p>
<p>​    利用new创建的数据，会返回该数据对应的类型的指针</p>
<p><strong>示例1： 基本语法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用delete释放堆区数据</span></span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：开辟数组</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆区开辟数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[i] = i + <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放数组 delete 后加 []</span></span><br><span class="line">	<span class="keyword">delete</span>[] arr;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p><strong>作用： </strong>给变量起别名</p>
<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul>
<li>引用必须初始化</li>
<li>引用在初始化后，不可以改变</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="comment">//int &amp;c; //错误，引用必须初始化</span></span><br><span class="line">	<span class="keyword">int</span> &amp;c = a; <span class="comment">//一旦初始化后，就不可以更改</span></span><br><span class="line">	c = b; <span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>
<p><strong>优点：</strong>可以简化指针修改实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap02</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap03</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	mySwap01(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	mySwap02(&amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	mySwap03(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
</blockquote>
<h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：<strong>不要返回局部变量引用</strong></p>
<p>用法：函数调用作为左值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回局部变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回静态变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不能返回局部变量的引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = test01();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果函数做左值，那么必须返回引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref2 = test02();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	test02() = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    </p>
<h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>
<p>讲解示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ref)</span></span>&#123;</span><br><span class="line">	ref = <span class="number">100</span>; <span class="comment">// ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = a; </span><br><span class="line">	ref = <span class="number">20</span>; <span class="comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class="line">    </span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	func(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用使用的场景，通常用来修饰形参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//v += 10;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line">	<span class="comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//函数中利用常量引用防止误操作修改实参</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	showValue(a);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：<code>返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>, <span class="keyword">int</span> c = <span class="number">10</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class="line"><span class="comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">20</span>, <span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	func(<span class="number">10</span>,<span class="number">10</span>); <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p>
<p><strong>函数重载满足条件：</strong></p>
<ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>
</ul>
<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值不可以作为函数重载条件</span></span><br><span class="line"><span class="comment">//int func(double a, int b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	func();</span><br><span class="line">	func(<span class="number">10</span>);</span><br><span class="line">	func(<span class="number">3.14</span>);</span><br><span class="line">	func(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line">	func(<span class="number">3.14</span> , <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul>
<li>引用作为重载条件</li>
<li>函数重载碰到函数默认参数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载注意事项</span></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	func(a); <span class="comment">//调用无const</span></span><br><span class="line">	func(<span class="number">10</span>);<span class="comment">//调用有const</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p>
<p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p>
<p><strong>例如：</strong></p>
<p>​    人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>
<p>​    车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>
<p>​    具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p>
<h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<ul>
<li>将属性和行为作为一个整体，表现生活中的事物</li>
<li>将属性和行为加以权限控制</li>
</ul>
<p><strong>封装意义一：</strong></p>
<p>​    在设计类的时候，属性和行为写在一起，表现事物</p>
<p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>
<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、封装的意义</span></span><br><span class="line"><span class="comment">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个圆类，求圆的周长</span></span><br><span class="line"><span class="comment">//class代表设计一个类，后面跟着的是类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//访问权限  公共的权限</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//行为</span></span><br><span class="line">	<span class="comment">//获取到圆的周长</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//2 * pi  * r</span></span><br><span class="line">		<span class="comment">//获取圆的周长</span></span><br><span class="line">		<span class="keyword">return</span>  <span class="number">2</span> * PI * m_r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过圆类，创建圆的对象</span></span><br><span class="line">	<span class="comment">// c1就是一个具体的圆</span></span><br><span class="line">	Circle c1;</span><br><span class="line">	c1.m_r = <span class="number">10</span>; <span class="comment">//给圆对象的半径 进行赋值操作</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2 * pi * 10 = = 62.8</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p><strong>示例2代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">		m_name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		m_id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_name;</span><br><span class="line">	<span class="keyword">int</span> m_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Student stu;</span><br><span class="line">	stu.setName(<span class="string">&quot;德玛西亚&quot;</span>);</span><br><span class="line">	stu.setID(<span class="number">250</span>);</span><br><span class="line">	stu.showStudent();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>封装意义二：</strong></p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<ol>
<li>public        公共权限  </li>
<li>protected 保护权限</li>
<li>private      私有权限</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三种权限</span></span><br><span class="line"><span class="comment">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="comment">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//姓名  公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//汽车  保护权限</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Car;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//银行卡密码  私有权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">		m_Car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">		m_Password = <span class="number">123456</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	p.m_Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">	<span class="comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class="line">	<span class="comment">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>
<p>区别：</p>
<ul>
<li>struct 默认权限为公共</li>
<li>class   默认权限为私有</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span>  m_A; <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> m_A;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	C1 c1;</span><br><span class="line">	c1.m_A = <span class="number">10</span>; <span class="comment">//错误，访问权限是私有</span></span><br><span class="line"></span><br><span class="line">	C2 c2;</span><br><span class="line">	c2.m_A = <span class="number">10</span>; <span class="comment">//正确，访问权限是公共</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>
<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//姓名设置可读可写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123;</span><br><span class="line">		m_Name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取年龄 </span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置年龄</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你个老妖精!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置为只写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLover</span><span class="params">(<span class="built_in">string</span> lover)</span> </span>&#123;</span><br><span class="line">		m_Lover = lover;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_Name; <span class="comment">//可读可写  姓名</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> m_Age; <span class="comment">//只读  年龄</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Lover; <span class="comment">//只写  情人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	<span class="comment">//姓名设置</span></span><br><span class="line">	p.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄设置</span></span><br><span class="line">	p.setAge(<span class="number">50</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄： &quot;</span> &lt;&lt; p.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置</span></span><br><span class="line">	p.setLover(<span class="string">&quot;苍井&quot;</span>);</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例1：设计立方体类</strong></p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204054.png" alt=""></p>
<p><strong>练习案例2：点和圆的关系</strong></p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204105.png" alt=""></p>
<h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul>
<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>
<li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>
</ul>
<h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>
<p>​    一个对象或者变量没有初始状态，对其使用后果是未知</p>
<p>​    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>
<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>
<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>
<ul>
<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>
<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>
</ul>
<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>
<ol>
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>
</ol>
<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>
<ol>
<li>析构函数，没有返回值也不写void</li>
<li>函数名称与类名相同,在名称前加上符号  ~</li>
<li>析构函数不可以有参数，因此不可以发生重载</li>
<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p>
<p>​    按参数分为： 有参构造和无参构造</p>
<p>​    按类型分为： 普通构造和拷贝构造</p>
<p>三种调用方式：</p>
<p>​    括号法</p>
<p>​    显示法</p>
<p>​    隐式转换法</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、构造函数分类</span></span><br><span class="line"><span class="comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class="line"><span class="comment">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.1  括号法，常用</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line">	<span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.2 显式法</span></span><br><span class="line">	Person p2 = Person(<span class="number">10</span>); </span><br><span class="line">	Person p3 = Person(p2);</span><br><span class="line">	<span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.3 隐式转换法</span></span><br><span class="line">	Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10); </span></span><br><span class="line">	Person p5 = p4; <span class="comment">// Person p5 = Person(p4); </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line">	<span class="comment">//Person p5(p4);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p>
<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
<li>值传递的方式给函数参数传值</li>
<li>以值方式返回局部对象</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Person(<span class="keyword">int</span> age) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = age;</span><br><span class="line">	&#125;</span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		mAge = p.mAge;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数在释放内存之前调用</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">man</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">//p对象已经创建完毕</span></span><br><span class="line">	<span class="function">Person <span class="title">newman</span><span class="params">(man)</span></span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">	Person newman2 = man; <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person newman3;</span></span><br><span class="line">	<span class="comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//相当于Person p1 = p;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(Person p1)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//无参构造函数</span></span><br><span class="line">	doWork(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p1;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)&amp;p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p = doWork2();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)&amp;p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line">	test03();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<ul>
<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li>
</ul>
<ul>
<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class="line">	Person p1; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//用户提供的有参</span></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">	Person p4; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//此时如果用户自己没有提供有参，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p6</span><span class="params">(p5)</span></span>; <span class="comment">//用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	Person(<span class="keyword">int</span> age ,<span class="keyword">int</span> height) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		m_age = age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="keyword">int</span>(height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数  </span></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class="line">		m_age = p.m_age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~Person() &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (m_height != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_height;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_age;</span><br><span class="line">	<span class="keyword">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
</blockquote>
<h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">////传统方式初始化</span></span><br><span class="line">	<span class="comment">//Person(int a, int b, int c) &#123;</span></span><br><span class="line">	<span class="comment">//	m_A = a;</span></span><br><span class="line">	<span class="comment">//	m_B = b;</span></span><br><span class="line">	<span class="comment">//	m_C = c;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表方式初始化</span></span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) :m_A(a), m_B(b), m_C(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">	p.PrintPerson();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>B类中有对象A作为成员，A为对象成员</p>
<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Phone(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		m_PhoneName = name;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~Phone()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_PhoneName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class="line">	Person(<span class="built_in">string</span> name, <span class="built_in">string</span> pName) :m_Name(name), m_Phone(pName)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="string">&quot; 牌手机! &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line">	Phone m_Phone;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class="line">	<span class="comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line">	<span class="comment">//析构顺序与构造相反</span></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span> , <span class="string">&quot;苹果X&quot;</span>)</span></span>;</span><br><span class="line">	p.playGame();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>
<p>静态成员分为：</p>
<ul>
<li>静态成员变量<ul>
<li>所有对象共享同一份数据</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化</li>
</ul>
</li>
<li>静态成员函数<ul>
<li>所有对象共享同一个函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul>
</li>
</ul>
<p><strong>示例1 ：</strong>静态成员变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员变量特点：</span></span><br><span class="line">	<span class="comment">//1 在编译阶段分配内存</span></span><br><span class="line">	<span class="comment">//2 类内声明，类外初始化</span></span><br><span class="line">	<span class="comment">//3 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_B; <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.m_A = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	Person p2;</span><br><span class="line">	p2.m_A = <span class="number">200</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//共享同一份数据</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong>静态成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数特点：</span></span><br><span class="line">	<span class="comment">//1 程序共享一个函数</span></span><br><span class="line">	<span class="comment">//2 静态成员函数只能访问静态成员变量</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">		<span class="comment">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line">	<span class="keyword">int</span> m_B; <span class="comment">// </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.func();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	Person::func();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person::func2(); //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		mA = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//非静态成员变量占对象空间</span></span><br><span class="line">	<span class="keyword">int</span> mA;</span><br><span class="line">	<span class="comment">//静态成员变量不占对象空间</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> mB; </span><br><span class="line">	<span class="comment">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//静态成员函数也不占对象空间</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Person) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>
<p>this指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this指针不需要定义，直接使用即可</p>
<p>this指针的用途：</p>
<ul>
<li>当形参和成员变量同名时，可用this指针来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">		<span class="comment">//返回对象本身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>
<p>如果用到this指针，需要加以判断保证代码的健壮性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空指针访问成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我是Person类!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; mAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person * p = <span class="literal">NULL</span>;</span><br><span class="line">	p-&gt;ShowClassName(); <span class="comment">//空指针，可以调用成员函数</span></span><br><span class="line">	p-&gt;ShowPerson();  <span class="comment">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p>
<ul>
<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>
<li>常函数内不可以修改成员属性</li>
<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>
</ul>
<p><strong>常对象：</strong></p>
<ul>
<li>声明对象前加const称该对象为常对象</li>
<li>常对象只能调用常函数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;</span><br><span class="line">		m_A = <span class="number">0</span>;</span><br><span class="line">		m_B = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class="line">	<span class="comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//const Type* const pointer;</span></span><br><span class="line">		<span class="comment">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class="line">		<span class="comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MyFunc</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//mA = 10000;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="keyword">int</span> m_B; <span class="comment">//可修改 可变的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰对象  常对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> Person person; <span class="comment">//常量对象  </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; person.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class="line">	person.m_B = <span class="number">100</span>; <span class="comment">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//常对象访问成员函数</span></span><br><span class="line">	person.MyFunc(); <span class="comment">//常对象不能调用const的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为  ==friend==</p>
<p>友元的三种实现</p>
<ul>
<li>全局函数做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Building()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom; <span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Building b;</span><br><span class="line">	goodGay(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	goodGay();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">goodGay</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay gg;</span><br><span class="line">	gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	goodGay();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>; <span class="comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit2</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay  gg;</span><br><span class="line">	gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person() &#123;&#125;;</span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//成员函数实现 + 号运算符重载</span></span><br><span class="line">	Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		Person temp;</span><br><span class="line">		temp.m_A = <span class="keyword">this</span>-&gt;m_A + p.m_A;</span><br><span class="line">		temp.m_B = <span class="keyword">this</span>-&gt;m_B + p.m_B;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现 + 号运算符重载</span></span><br><span class="line"><span class="comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span></span><br><span class="line"><span class="comment">//	Person temp(0, 0);</span></span><br><span class="line"><span class="comment">//	temp.m_A = p1.m_A + p2.m_A;</span></span><br><span class="line"><span class="comment">//	temp.m_B = p1.m_B + p2.m_B;</span></span><br><span class="line"><span class="comment">//	return temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符重载 可以发生函数重载 </span></span><br><span class="line">Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p2, <span class="keyword">int</span> val)  </span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p2.m_A + val;</span><br><span class="line">	temp.m_B = p2.m_B + val;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数方式</span></span><br><span class="line">	Person p3 = p2 + p1;  <span class="comment">//相当于 p2.operaor+(p1)</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Person p4 = p3 + <span class="number">10</span>; <span class="comment">//相当于 operator+(p3,10)</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
<p>总结2：不要滥用运算符重载</p>
</blockquote>
<h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line">	<span class="comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//链式编程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
</blockquote>
<h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MyInteger() &#123;</span><br><span class="line">		m_Num = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前置++</span></span><br><span class="line">	MyInteger&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">		<span class="comment">//先++</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="comment">//再返回</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置++</span></span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">		<span class="comment">//先返回</span></span><br><span class="line">		MyInteger temp = *<span class="keyword">this</span>; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ++myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++ 先返回 再++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 前置递增返回引用，后置递增返回值</p>
</blockquote>
<h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p>
<ol>
<li>默认构造函数(无参，函数体为空)</li>
<li>默认析构函数(无参，函数体为空)</li>
<li>默认拷贝构造函数，对属性进行值拷贝</li>
<li>赋值运算符 operator=, 对属性进行值拷贝</li>
</ol>
<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//将年龄数据开辟到堆区</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载赋值运算符 </span></span><br><span class="line">	Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line">		<span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_Age);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回自身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄的指针</span></span><br><span class="line">	<span class="keyword">int</span> *m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int a = 10;</span></span><br><span class="line">	<span class="comment">//int b = 20;</span></span><br><span class="line">	<span class="comment">//int c = 30;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//c = b = a;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> m_Name;</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//int a = 0;</span></span><br><span class="line">	<span class="comment">//int b = 0;</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">a</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">b</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a == b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a != b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul>
<li>函数调用运算符 ()  也可以重载</li>
<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>
<li>仿函数没有固定写法，非常灵活</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> text)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; text &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line">	MyPrint myFunc;</span><br><span class="line">	myFunc(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 + v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyAdd add;</span><br><span class="line">	<span class="keyword">int</span> ret = add(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//匿名对象调用  </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; MyAdd()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204150.png" alt=""></p>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p><strong>普通实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.header();</span><br><span class="line">	ja.footer();</span><br><span class="line">	ja.left();</span><br><span class="line">	ja.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Python py;</span><br><span class="line">	py.header();</span><br><span class="line">	py.footer();</span><br><span class="line">	py.left();</span><br><span class="line">	py.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.header();</span><br><span class="line">	cp.footer();</span><br><span class="line">	cp.left();</span><br><span class="line">	cp.content();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>继承实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.header();</span><br><span class="line">	ja.footer();</span><br><span class="line">	ja.left();</span><br><span class="line">	ja.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Python py;</span><br><span class="line">	py.header();</span><br><span class="line">	py.footer();</span><br><span class="line">	py.left();</span><br><span class="line">	py.content();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.header();</span><br><span class="line">	cp.footer();</span><br><span class="line">	cp.left();</span><br><span class="line">	cp.content();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong></p>
<p>继承的好处：==可以减少重复的代码==</p>
<p>class A : public B; </p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p><strong>派生类中的成员，包含两大部分</strong>：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>
<p><strong>继承方式一共有三种：</strong></p>
<ul>
<li>公共继承</li>
<li>保护继承</li>
<li>私有继承</li>
</ul>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204211.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> :</span><span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 public权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son1 s1;</span><br><span class="line">	s1.m_A; <span class="comment">//其他类只能访问到公共权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span><span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son2 s;</span><br><span class="line">	<span class="comment">//s.m_A; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span><span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 private权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 private权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandSon3</span> :</span><span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class="line">		<span class="comment">//m_A;</span></span><br><span class="line">		<span class="comment">//m_B;</span></span><br><span class="line">		<span class="comment">//m_C;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用工具查看：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204222.png" alt=""></p>
<p>打开工具窗口后，定位到当前CPP文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p>
<p>效果如下图：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204234.png" alt=""></p>
<blockquote>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
</blockquote>
<h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Base()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Son()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">	Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
</blockquote>
<h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class="line">	<span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	s.func();</span><br><span class="line">	s.Base::func();</span><br><span class="line">	s.Base::func(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>子类对象可以直接访问到子类中同名成员</li>
<li>子类对象加作用域可以访问到父类同名成员</li>
<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>
</ol>
<h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过类名访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son s;</span><br><span class="line">	s.func();</span><br><span class="line">	s.Base::func();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Son::func();</span><br><span class="line">	Son::Base::func();</span><br><span class="line">	<span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">	Son::Base::func(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
</blockquote>
<h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p>
<p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p><strong>C++实际开发中不建议用多继承</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base1()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Base2()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;  <span class="comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Son()</span><br><span class="line">	&#123;</span><br><span class="line">		m_C = <span class="number">300</span>;</span><br><span class="line">		m_D = <span class="number">400</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; s.Base1::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; s.Base2::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
</blockquote>
<h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p>
<p>​    两个派生类继承同一个基类</p>
<p>​    又有某个类同时继承者两个派生类</p>
<p>​    这种继承被称为菱形继承，或者钻石继承</p>
<p><strong>典型的菱形继承案例：</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204252.jpg" alt=""></p>
<p><strong>菱形继承问题：</strong></p>
<ol>
<li><p>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</p>
</li>
<li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>   :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span> <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">	st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>
<li>利用虚继承可以解决菱形继承问题</li>
</ul>
<h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p>
<p>多态分为两类</p>
<ul>
<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>
<li>动态多态: 派生类和虚函数实现运行时多态</li>
</ul>
<p>静态多态和动态多态区别：</p>
<ul>
<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>
</ul>
<p>下面通过案例进行讲解多态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//Speak函数就是虚函数</span></span><br><span class="line">	<span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSpeak</span><span class="params">(Animal &amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cat cat;</span><br><span class="line">	DoSpeak(cat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Dog dog;</span><br><span class="line">	DoSpeak(dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>多态满足条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
<p>多态使用条件</p>
<ul>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>
<h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<ul>
<li>代码组织结构清晰</li>
<li>可读性强</li>
<li>利于前期和后期的扩展以及维护</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="built_in">string</span> oper)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果要提供新的运算，需要修改源码</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//普通实现测试</span></span><br><span class="line">	Calculator c;</span><br><span class="line">	c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">	c.m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;+&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;-&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;*&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态实现</span></span><br><span class="line"><span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//创建加法计算器</span></span><br><span class="line">	AbstractCalculator *abc = <span class="keyword">new</span> AddCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;  <span class="comment">//用完了记得销毁</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建减法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;  </span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建乘法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> MulCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line">	test02();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
</blockquote>
<h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>
<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>
<p>当类中有了纯虚函数，这个类也称为==抽象类==</p>
<p><strong>抽象类特点</strong>：</p>
<ul>
<li>无法实例化对象</li>
<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//纯虚函数</span></span><br><span class="line">	<span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line">	<span class="comment">//抽象类无法实例化对象</span></span><br><span class="line">	<span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Base * base = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">	base = <span class="keyword">new</span> Son;</span><br><span class="line">	base-&gt;func();</span><br><span class="line">	<span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p>
<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201009204307.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象制作饮品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//规定流程</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MakeDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Boil();</span><br><span class="line">		Brew();</span><br><span class="line">		PourInCup();</span><br><span class="line">		PutSomething();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入牛奶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮自来水!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入枸杞!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(AbstractDrinking* drink)</span> </span>&#123;</span><br><span class="line">	drink-&gt;MakeDrink();</span><br><span class="line">	<span class="keyword">delete</span> drink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	DoWork(<span class="keyword">new</span> Coffee);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	DoWork(<span class="keyword">new</span> Tea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>
<p>虚析构和纯虚析构共性：</p>
<ul>
<li>可以解决父类指针释放子类对象</li>
<li>都需要有具体的函数实现</li>
</ul>
<p>虚析构和纯虚析构区别：</p>
<ul>
<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>
</ul>
<p>虚析构语法：</p>
<p><code>virtual ~类名()&#123;&#125;</code></p>
<p>纯虚析构语法：</p>
<p><code>virtual ~类名() = 0;</code></p>
<p><code>类名::~类名()&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	Animal()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class="line">	<span class="comment">//virtual ~Animal()</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">virtual</span> ~Animal() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~Animal()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Cat(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt;  <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~Cat()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Name;</span><br><span class="line">			m_Name = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> *m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Animal *animal = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	animal-&gt;Speak();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line">	<span class="comment">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class="line">	<span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line">	<span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>​    1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
<p>​    2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
<p>​    3. 拥有纯虚析构函数的类也属于抽象类</p>
<h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的计算函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的显示函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的存储函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Computer(CPU * cpu, VideoCard * vc, Memory * mem)</span><br><span class="line">	&#123;</span><br><span class="line">		m_cpu = cpu;</span><br><span class="line">		m_vc = vc;</span><br><span class="line">		m_mem = mem;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供工作的函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//让零件工作起来，调用接口</span></span><br><span class="line">		m_cpu-&gt;calculate();</span><br><span class="line"></span><br><span class="line">		m_vc-&gt;display();</span><br><span class="line"></span><br><span class="line">		m_mem-&gt;storage();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供析构函数 释放3个电脑零件</span></span><br><span class="line">	~Computer()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放CPU零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_cpu;</span><br><span class="line">			m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放显卡零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_vc;</span><br><span class="line">			m_vc = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放内存条零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_mem;</span><br><span class="line">			m_mem = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	CPU * m_cpu; <span class="comment">//CPU的零件指针</span></span><br><span class="line">	VideoCard * m_vc; <span class="comment">//显卡零件指针</span></span><br><span class="line">	Memory * m_mem; <span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体厂商</span></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//第一台电脑零件</span></span><br><span class="line">	CPU * intelCpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">	VideoCard * intelCard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">	Memory * intelMem = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//创建第一台电脑</span></span><br><span class="line">	Computer * computer1 = <span class="keyword">new</span> Computer(intelCpu, intelCard, intelMem);</span><br><span class="line">	computer1-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer1;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//第二台电脑组装</span></span><br><span class="line">	Computer * computer2 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer2-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer2;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//第三台电脑组装</span></span><br><span class="line">	Computer * computer3 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> IntelVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer3-&gt;work();</span><br><span class="line">	<span class="keyword">delete</span> computer3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过<strong>文件可以将数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>
<p>文件类型分为两种：</p>
<ol>
<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>
<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>
</ol>
<p>操作文件的三大类:</p>
<ol>
<li>ofstream：写操作</li>
<li>ifstream： 读操作</li>
<li>fstream ： 读写操作</li>
</ol>
<h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p> #include <fstream\></p>
</li>
<li><p>创建流对象  </p>
<p> ofstream ofs;</p>
</li>
<li><p>打开文件</p>
<p> ofs.open(“文件路径”,打开方式);</p>
</li>
<li><p>写数据</p>
<p> ofs &lt;&lt; “写入的数据”;</p>
</li>
<li><p>关闭文件</p>
<p> ofs.close();</p>
</li>
</ol>
<p>文件打开方式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr>
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr>
<td>ios::ate</td>
<td>初始位置：文件尾</td>
</tr>
<tr>
<td>ios::app</td>
<td>追加方式写文件</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果文件存在先删除，再创建</td>
</tr>
<tr>
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>
<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件操作必须包含头文件 fstream</li>
<li>读文件可以利用 ofstream  ，或者fstream类</li>
<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>
<li>利用&lt;&lt;可以向文件中写数据</li>
<li>操作完毕，要关闭文件</li>
</ul>
<h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p> #include <fstream\></p>
</li>
<li><p>创建流对象  </p>
<p> ifstream ifs;</p>
</li>
<li><p>打开文件并判断文件是否打开成功</p>
<p> ifs.open(“文件路径”,打开方式);</p>
</li>
<li><p>读数据</p>
<p> 四种方式读取</p>
</li>
<li><p>关闭文件</p>
<p> ifs.close();</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.open(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一种方式</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs &gt;&gt; buf)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第三种</span></span><br><span class="line">	<span class="comment">//string buf;</span></span><br><span class="line">	<span class="comment">//while (getline(ifs, buf))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">while</span> ((c = ifs.get()) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>读文件可以利用 ifstream  ，或者fstream类</li>
<li>利用is_open函数可以判断文件是否打开成功</li>
<li>close 关闭文件 </li>
</ul>
<h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 ==ios::binary==</p>
<h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件  写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1、包含头文件</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、创建输出流对象</span></span><br><span class="line">	<span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3、打开文件</span></span><br><span class="line">	<span class="comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span></span><br><span class="line"></span><br><span class="line">	Person p = &#123;<span class="string">&quot;张三&quot;</span>  , <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4、写文件</span></span><br><span class="line">	ofs.write((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5、关闭文件</span></span><br><span class="line">	ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>
</ul>
<h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	ifs.read((<span class="keyword">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>
</ul>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL-简单点云可视化</title>
    <url>/2020/10/09/PCL-%E7%AE%80%E5%8D%95%E7%82%B9%E4%BA%91%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PCL-简单点云可视化"><a href="#PCL-简单点云可视化" class="headerlink" title="PCL-简单点云可视化"></a>PCL-简单点云可视化</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"><span class="comment">//简单点云可视化</span></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> user_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 回调函数，只能调用一次的回调函数</span></span><br><span class="line"><span class="comment">/// 对可视化对象背景的颜色设置，添加一个圆球几何体</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;viewer&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerOneOff</span><span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//背景</span></span><br><span class="line">    viewer.setBackgroundColor(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="comment">//存储球心位置</span></span><br><span class="line">    pcl::PointXYZ o;</span><br><span class="line">    o.x = <span class="number">1.0</span>;</span><br><span class="line">    o.y = <span class="number">0</span>;</span><br><span class="line">    o.z = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//添加圆球几何对象</span></span><br><span class="line">    viewer.addSphere(o, <span class="number">0.25</span>, <span class="string">&quot;sphere&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;i only run once&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 渲染输出时每次都调用的回调函数</span></span><br><span class="line"><span class="comment">/// 每帧都执行一次</span></span><br><span class="line"><span class="comment">/// 在可视化对象中添加一个刷新显示字符串</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;viewer&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerPsycho</span><span class="params">(pcl::visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;Once per viewer loop: &quot;</span> &lt;&lt; count++;</span><br><span class="line">    viewer.removeShape(<span class="string">&quot;text&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    viewer.addText(ss.str(), <span class="number">200</span>, <span class="number">300</span>, <span class="string">&quot;text&quot;</span>, <span class="number">0</span>); </span><br><span class="line">    <span class="comment">//<span class="doctag">FIXME:</span> possible race condition here:</span></span><br><span class="line">    user_data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;)</span></span>;</span><br><span class="line">    pcl::io::loadPCDFile(<span class="string">&quot;my_point_cloud.pcd&quot;</span>, *cloud);</span><br><span class="line"></span><br><span class="line">    pcl::<span class="function">visualization::CloudViewer <span class="title">viewer</span><span class="params">(<span class="string">&quot;Cloud Viewer&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//showCloud函数是同步的，在此处等待直到渲染显示为止</span></span><br><span class="line">    viewer.showCloud(cloud);</span><br><span class="line">    <span class="comment">//该注册函数在可视化时只调用一次</span></span><br><span class="line">    viewer.runOnVisualizationThreadOnce(viewerOneOff);</span><br><span class="line">    <span class="comment">//该注册函数在渲染输出时每次都调用</span></span><br><span class="line">    viewer.runOnVisualizationThread(viewerPsycho);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!viewer.wasStopped())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在此处可以添加其他处理</span></span><br><span class="line">        user_data++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL-kdtree实现快速邻域搜索</title>
    <url>/2020/10/09/PCL-kdtree%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E9%82%BB%E5%9F%9F%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PCL-kdtree实现快速邻域搜索"><a href="#PCL-kdtree实现快速邻域搜索" class="headerlink" title="PCL-kdtree实现快速邻域搜索"></a>PCL-kdtree实现快速邻域搜索</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/kdtree/kdtree_flann.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"><span class="comment">//PCL中实现快速邻域搜索</span></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//用系统时间初始化随机种子</span></span><br><span class="line">	srand(time(<span class="literal">NULL</span>));</span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">	<span class="comment">//随机点云生成</span></span><br><span class="line">	cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">	cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建KdTreeFLANN类型对象，kdtree</span></span><br><span class="line">	pcl::KdTreeFLANN&lt;pcl::PointXYZ&gt;kdtree;</span><br><span class="line">	<span class="comment">//设置搜索空间</span></span><br><span class="line">	kdtree.setInputCloud(cloud);</span><br><span class="line">	<span class="comment">//定义查询点并赋随机值</span></span><br><span class="line">	pcl::PointXYZ searchPoint;</span><br><span class="line">	searchPoint.x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="comment">// k近邻搜索</span></span><br><span class="line">	<span class="keyword">int</span> K = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//定义向量pointIdxNKNSearch，存储查询点邻近索引</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pointIdxNKNSearch(K);</span><br><span class="line">	<span class="comment">//定义向量pointNKNSquaredDistance，存储近邻点对应平方距离</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;pointNKNSquaredDistance(K);</span><br><span class="line">	<span class="comment">//打印相关信息</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;K nearest neighbor search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with K=&quot;</span> &lt;&lt; K &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (kdtree.nearestKSearch(searchPoint, K, pointIdxNKNSearch, pointNKNSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="comment">//执行K邻近搜索，返回值是近邻的个数</span></span><br><span class="line">		<span class="comment">//searchPoint，查询点</span></span><br><span class="line">		<span class="comment">//K，10</span></span><br><span class="line">		<span class="comment">//pointIdxNKNSearch，存储查询点近邻索引的向量</span></span><br><span class="line">		<span class="comment">//pointNKNSquaredDistance，存储近邻点对应的平方距离</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//打印输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxNKNSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxNKNSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointNKNSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 在半径r内搜索近邻</span></span><br><span class="line">	<span class="comment">//重新定义两个向量，存储近邻索引与对应平方距离</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pointIdxRadiusSearch;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; pointRadiusSquaredDistance;</span><br><span class="line">	<span class="comment">//定义随机数r</span></span><br><span class="line">	<span class="keyword">float</span> radius = <span class="number">256.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="comment">//打印相关信息</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (kdtree.radiusSearch(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="comment">//执行r内邻近搜索，返回值是近邻的个数</span></span><br><span class="line">		<span class="comment">//searchPoint，查询点</span></span><br><span class="line">		<span class="comment">//radius，半径</span></span><br><span class="line">		<span class="comment">//pointIdxRadiusSearch，存储查询点近邻索引的向量</span></span><br><span class="line">		<span class="comment">//pointRadiusSquaredDistance，存储近邻点对应的平方距离</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//打印输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础入门</title>
    <url>/2020/10/08/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155005.png" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155020.png" alt=""></p>
<h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155041.png" alt=""></p>
<p>给C++文件起个名称，然后点击添加即可。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155125.png" alt=""></p>
<h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155146.png" alt=""></p>
<h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol>
<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>
</ul>
</li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>
<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>
</ul>
</li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//变量的定义</span></span><br><span class="line">	<span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol>
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>
<li>==通常在文件上方定义==，表示一个常量</li>
</ul>
</li>
</ol>
<ol>
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>
<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot; 天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、const修饰变量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">12</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; 个月份&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
</tr>
</tbody>
</table>
</div>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>
</blockquote>
<h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>
<p>浮点型变量分为两种：</p>
<ol>
<li>单精度float </li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; f1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(f1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(d1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学计数法</span></span><br><span class="line">	<span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用==1个字节==。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class="line">	<span class="comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">	ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ASCII码表格：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>\</td>
<td></td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
</div>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>
<p>现阶段我们常用的转义字符有：<code>\n  \\  \t</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td><strong>\\</strong></td>
<td><strong>代表一个反斜线字符”\”</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>\’</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>\”</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>\?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0~9，a~f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody>
</table>
</div>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\tHello&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol>
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>
<p> 示例：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
</li>
<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>
<p> 示例：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include\<string>==</p>
</blockquote>
<h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>
<p>bool类型只有两个值：</p>
<ul>
<li>true  —- 真（本质是1）</li>
<li>false —- 假（本质是0）</li>
</ul>
<p><strong>bool类型占==1个字节==大小</strong></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//整型输入</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//浮点型输入</span></span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符型输入</span></span><br><span class="line">	<span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串型输入</span></span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//布尔类型输入</span></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; flag;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>
<p>算术运算符包括以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>—</td>
<td>前置递减</td>
<td>a=2; b=—a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>—</td>
<td>后置递减</td>
<td>a=2; b=a—;</td>
<td>a=1; b=2;</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 + b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 - b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 * b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a1 / b1 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 / b2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数可以相除</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; d1 / d2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a2 % b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数不可以取模</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//前置递增</span></span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	++b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//区别</span></span><br><span class="line">	<span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; b3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// =</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// +=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// -=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// *=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// /=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// %=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>></td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>>=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a == b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a != b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt; b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &gt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &lt;= b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>
</blockquote>
<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>\</td>
<td>\</td>
<td></td>
<td>或</td>
<td>a \</td>
<td>\</td>
<td>b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例1：</strong>逻辑非</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; !!a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>
</blockquote>
<h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p>
</li>
<li><p>多行格式if语句</p>
</li>
<li><p>多条件的if语句</p>
</li>
</ul>
<ol>
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<p> <img src="https://gitee.com/JunLuJun/up/raw/master/20201008155230.png" alt=""></p>
</li>
</ol>
<pre><code>示例：

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//选择结构-单行if语句</span></span><br><span class="line">    	<span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line">    </span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//if语句</span></span><br><span class="line">    	<span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line">    	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol>
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155302.png" alt=""></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155326.png" alt=""></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了北大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了清华&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了人大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155344.jpg" alt=""></p>
<h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	c = a &gt; b ? a : b;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">	(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//请给电影评分 </span></span><br><span class="line">	<span class="comment">//10 ~ 9   经典   </span></span><br><span class="line">	<span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line">	<span class="comment">// 6 ~ 5   一般</span></span><br><span class="line">	<span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请给电影打分&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (score)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;非常好&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155407.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>==猜数字==</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155419.jpg" alt=""></p>
<h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155435.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		num++;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>详解：</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155455.png" alt=""></p>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<p><img src="\iframe\timg.gif" alt=""></p>
<h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155627.png" alt=""></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155637.jpg" alt=""></p>
<h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1、普通&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2、中等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3、困难&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (num)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2、在循环语句中用break</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	FLAG:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>
<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155650.png" alt=""></p>
<h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式1</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line">	<span class="keyword">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标赋值</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标输出</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; score[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种定义方式</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line">	<span class="keyword">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//逐个输出</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="keyword">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组名用途</span></span><br><span class="line">	<span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155703.png" alt=""></p>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008155713.png" alt=""></p>
<h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>
<ol>
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code>数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>
</blockquote>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式1  </span></span><br><span class="line">	<span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式4 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//二维数组数组名</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody>
</table>
</div>
<p><strong>参考答案：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += scores[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型 </p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句 </p>
<p>5、return 表达式</p>
<p><strong>语法：</strong> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code>函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//调用add函数</span></span><br><span class="line">	<span class="keyword">int</span> sum = add(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	sum = add(a, b);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，==如果形参发生，并不会影响实参==</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2 = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = a + b;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; max(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件  </li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">	swap(a, b);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p>
</li>
<li><p>可以利用指针变量保存地址</p>
</li>
</ul>
<h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、指针的定义</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量赋值</span></span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//打印数据a的地址</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、指针的使用</span></span><br><span class="line">	<span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
<p>总结2：利用指针可以记录地址</p>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//* 解引用</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问空指针报错 </span></span><br><span class="line">	<span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问野指针报错 </span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>
<ol>
<li>const修饰指针   —- 常量指针</li>
<li>const修饰常量   —- 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * p1 = &amp;a; </span><br><span class="line">	p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line">	<span class="comment">//*p1 = 100;  报错</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line">	<span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">	<span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">	*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line">	<span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line">	<span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//利用指针遍历数组</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b; </span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	swap1(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">	swap2(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len);</span><br><span class="line"></span><br><span class="line">	printArray(arr, len);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>
<h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式1</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span> <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">	stu1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	stu1.age = <span class="number">18</span>;</span><br><span class="line">	stu1.score = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式2</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	stu3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">	stu3.age = <span class="number">18</span>;</span><br><span class="line">	stu3.score = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>
</blockquote>
<h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//结构体数组</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> =</span> &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span> =</span> &amp;stu;</span><br><span class="line">	</span><br><span class="line">	p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">	<span class="keyword">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//教师姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span> <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">	t1.id = <span class="number">10000</span>;</span><br><span class="line">	t1.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">	t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">	t1.stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	t1.stu.age = <span class="number">18</span>;</span><br><span class="line">	t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu.age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line">	<span class="comment">//值传递</span></span><br><span class="line">	printStudent(stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址传递</span></span><br><span class="line">	printStudent2(&amp;stu);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	<span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(<span class="keyword">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">	printStudent(&amp;stu);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> tName = <span class="string">&quot;教师&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">	<span class="built_in">string</span> nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tArray[i].name = tName + nameSeed[i];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">			tArray[i].sArray[j].score = rand() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">	Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArray) / <span class="keyword">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line">	allocateSpace(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">	printTeachers(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="built_in">string</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">			&#123;</span><br><span class="line">				hero temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hero</span> <span class="title">arr</span>[5] =</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">	bubbleSort(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">	printHeros(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>AzureKinectDK与PCL点云生成</title>
    <url>/2020/10/08/AzureKinectDC%E4%B8%8EPCL%E7%82%B9%E4%BA%91%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AzureKinectDK与PCL点云生成"><a href="#AzureKinectDK与PCL点云生成" class="headerlink" title="AzureKinectDK与PCL点云生成"></a>AzureKinectDK与PCL点云生成</h1><blockquote>
<p>参考博文：</p>
<p><a href="https://blog.csdn.net/weixin_39746114/article/details/107835727">https://blog.csdn.net/weixin_39746114/article/details/107835727</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008095211.jpg" alt=""></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008095233.jpg" alt=""></p>
<h2 id="AzureKinectDK"><a href="#AzureKinectDK" class="headerlink" title="AzureKinectDK"></a>AzureKinectDK</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008094515.png" style="zoom:50%;" /></p>
<p>Azure Kinect DK 是一款开发人员套件和 PC 外部设备，它搭载 100 万像素高级深度摄像头、360˚ 麦克风阵列，1200万像素全高清摄像头和方向传感器，适用于先进的计算机视觉和语音模型开发。它的长度不到13厘米，厚度仅为4厘米。</p>
<p>系统要求：采用第7代 Intel® CoreTM i3 处理器（双核 2.4GHz 包含 HD620 GPU 或更快）的 Windows 10® 计算机、USB 3.0 端口、4GB 内存。不支持 Windows 10 S 模式。人体跟踪等其他功能可能需要更高级的 PC 硬件。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201008094609.jpg" alt=""></p>
<ol>
<li>100 万像素深度传感器，具有宽、窄视场角 (FOV) 选项，可针对应用程序进行优化</li>
<li>7 麦克风阵列，可用于远场语音和声音捕获</li>
<li>1200 万像素 RGB 摄像头，提供和深度数据匹配的彩色图像数据流</li>
<li>加速计和陀螺仪 (IMU)，可用于传感器方向和空间跟踪</li>
<li>外部同步引脚，可轻松同步多个 Kinect 设备的传感器数据流</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol>
<li><p>main.cpp</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pcl/visualization/cloud_viewer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/make_shared.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;k4a_grabber.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/filters/passthrough.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> pcl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZRGBA PointType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">viewerOneOff</span><span class="params">(visualization::PCLVisualizer&amp; viewer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	viewer.setBackgroundColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//设置背景颜色为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">uint32_t</span> deviceCount = k4a::device::get_installed_count();</span><br><span class="line">	<span class="keyword">if</span> (deviceCount == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no azure kinect devices detected!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// PCL Visualizer</span></span><br><span class="line">	<span class="function">boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; <span class="title">viewer</span><span class="params">(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">&quot;Point Cloud Viewer&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义初始点云</span></span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 回调函数</span></span><br><span class="line">	boost::mutex mutex;</span><br><span class="line">	boost::function&lt;<span class="keyword">void</span>(<span class="keyword">const</span> pcl::PointCloud&lt;PointType&gt;::ConstPtr&amp;)&gt; function =</span><br><span class="line">		[&amp;cloud, &amp;mutex](<span class="keyword">const</span> pcl::PointCloud&lt;PointType&gt;::ConstPtr&amp; ptr)</span><br><span class="line">	&#123;</span><br><span class="line">		boost::mutex::scoped_lock lock(mutex);</span><br><span class="line">		<span class="comment">//-----------------------------------------</span></span><br><span class="line">		<span class="comment">/* Point Cloud Processing */</span></span><br><span class="line">		<span class="comment">//-----------------------------------------</span></span><br><span class="line">		cloud = ptr-&gt;makeShared();</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义grabber</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::Grabber&gt; grabber =</span><br><span class="line">		boost::make_shared&lt;pcl::KinectAzureDKGrabber&gt;(<span class="number">0</span>, K4A_DEPTH_MODE_WFOV_2X2BINNED, K4A_IMAGE_FORMAT_COLOR_BGRA32, K4A_COLOR_RESOLUTION_720P);</span><br><span class="line">	<span class="comment">//强制类型转换</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::KinectAzureDKGrabber&gt; grabber_ = boost::dynamic_pointer_cast&lt;pcl::KinectAzureDKGrabber&gt;(grabber);</span><br><span class="line">	<span class="comment">//注册回调函数</span></span><br><span class="line">	boost::signals2::connection connection = grabber-&gt;registerCallback(function);</span><br><span class="line">	<span class="comment">//开始</span></span><br><span class="line">	grabber-&gt;start();</span><br><span class="line"></span><br><span class="line">	k4a::calibration calibration = grabber_-&gt;getCalibration();</span><br><span class="line">	<span class="keyword">k4a_calibration_intrinsic_parameters_t</span>* intrinsics = &amp;calibration.color_camera_calibration.intrinsics.parameters;</span><br><span class="line">	Eigen::Matrix3f intrinsics_eigen;</span><br><span class="line">	intrinsics_eigen &lt;&lt;</span><br><span class="line">		intrinsics-&gt;param.fx, <span class="number">0.0f</span>, intrinsics-&gt;param.cx,</span><br><span class="line">		<span class="number">0.0f</span>, intrinsics-&gt;param.fy, intrinsics-&gt;param.cy,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>;</span><br><span class="line">	<span class="comment">/*Eigen::Matrix4f extrinsics_eigen = Eigen::Matrix4f::Identity();*/</span></span><br><span class="line">	Eigen::Matrix4f extrinsics_eigen;</span><br><span class="line">	extrinsics_eigen &lt;&lt; <span class="number">-1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line">		<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>; <span class="comment">//看起来方向是正确的 </span></span><br><span class="line">	viewer-&gt;setCameraParameters(intrinsics_eigen, extrinsics_eigen);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示采集到的点云数据</span></span><br><span class="line">	<span class="keyword">while</span> (!viewer-&gt;wasStopped())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Update Viewer</span></span><br><span class="line">		viewer-&gt;spinOnce();</span><br><span class="line">		boost::<span class="function">mutex::scoped_try_lock <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (lock.owns_lock() &amp;&amp; cloud)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//pcl::PassThrough&lt;pcl::PointXYZRGBA&gt; pass;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">//pass.setInputCloud(cloud);            //设置输入点云</span></span><br><span class="line">			<span class="comment">//pass.setFilterFieldName(&quot;z&quot;);         //设置过滤时所需要点云类型的Z字段</span></span><br><span class="line">			<span class="comment">//pass.setFilterLimits(0.5, 1.08);        //设置在过滤字段的范围</span></span><br><span class="line">			<span class="comment">//pass.setFilterLimitsNegative(true);   //设置保留范围内还是过滤掉范围内</span></span><br><span class="line">			<span class="comment">//pass.filter(*cloud);            //执行滤波，保存过滤结果在cloud_filtered</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// Update Point Cloud</span></span><br><span class="line">			<span class="keyword">if</span> (!viewer-&gt;updatePointCloud(cloud, <span class="string">&quot;cloud&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				viewer-&gt;addPointCloud(cloud, <span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (_kbhit())</span><br><span class="line">		&#123;</span><br><span class="line">			grabber-&gt;stop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Stop Grabber</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	pcl::<span class="function">visualization::CloudViewer <span class="title">pviewer</span><span class="params">(<span class="string">&quot;Cloud Viewer&quot;</span>)</span></span>;     <span class="comment">//创建viewer对象</span></span><br><span class="line">	pviewer.showCloud(cloud);</span><br><span class="line">	pviewer.runOnVisualizationThreadOnce(viewerOneOff);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Disconnect Callback Function</span></span><br><span class="line">	<span class="keyword">if</span> (connection.connected())</span><br><span class="line">	&#123;</span><br><span class="line">		connection.disconnect();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>k4a_grabber.h</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;k4a/k4a.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/boost.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/grabber.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pcl</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZ;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZI;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZRGB;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pcl</span>:</span>:PointXYZRGBA;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">pcl</span>:</span>:PointCloud;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">KinectAzureDKGrabber</span> :</span> <span class="keyword">public</span> pcl::Grabber</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		KinectAzureDKGrabber(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_);</span><br><span class="line">		<span class="keyword">virtual</span> ~KinectAzureDKGrabber() <span class="keyword">throw</span> ();</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">isRunning</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">getFramesPerSecond</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZ)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZI)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZI&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZRGB)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZRGB&gt;&gt;&amp;)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(signal_KinectAzureDK_PointXYZRGBA)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">const</span> pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;&gt;&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setupDevice</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_)</span></span>;</span><br><span class="line"></span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZ&gt;* signal_PointXYZ;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZI&gt;* signal_PointXYZI;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZRGB&gt;* signal_PointXYZRGB;</span><br><span class="line">		boost::signals2::signal&lt;signal_KinectAzureDK_PointXYZRGBA&gt;* signal_PointXYZRGBA;</span><br><span class="line"></span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">convertDepthToPointXYZ</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZI&gt;::<span class="function">Ptr <span class="title">convertInfraredDepthToPointXYZI</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZRGB&gt;::<span class="function">Ptr <span class="title">convertRGBDepthToPointXYZRGB</span><span class="params">()</span></span>;</span><br><span class="line">		pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">convertRGBADepthToPointXYZRGBA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::thread thread;</span><br><span class="line">		<span class="keyword">mutable</span> <span class="built_in">std</span>::mutex mutex;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">threadFunction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> quit;</span><br><span class="line">		<span class="keyword">bool</span> running;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">k4a_device_configuration_t</span> config;</span><br><span class="line">		k4a::device dev;</span><br><span class="line">		<span class="keyword">int</span> device_id;</span><br><span class="line"></span><br><span class="line">		k4a::calibration calibration;</span><br><span class="line">		k4a::transformation transformation;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> colorWidth;</span><br><span class="line">		<span class="keyword">int</span> colorHeight;</span><br><span class="line">		k4a::image colorImage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> depthWidth;</span><br><span class="line">		<span class="keyword">int</span> depthHeight;</span><br><span class="line">		k4a::image depthImage;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> infraredWidth;</span><br><span class="line">		<span class="keyword">int</span> infraredHeight;</span><br><span class="line">		k4a::image infraredImage;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">		<span class="function">k4a::calibration <span class="title">getCalibration</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>k4a_grabber.cpp</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;k4a_grabber.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">pcl::KinectAzureDKGrabber::KinectAzureDKGrabber(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_) :</span><br><span class="line">	config(K4A_DEVICE_CONFIG_INIT_DISABLE_ALL),</span><br><span class="line">	dev(<span class="literal">nullptr</span>),</span><br><span class="line">	colorImage(<span class="literal">nullptr</span>),</span><br><span class="line">	depthImage(<span class="literal">nullptr</span>),</span><br><span class="line">	infraredImage(<span class="literal">nullptr</span>),</span><br><span class="line">	running(<span class="literal">false</span>),</span><br><span class="line">	quit(<span class="literal">false</span>),</span><br><span class="line">	signal_PointXYZ(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZI(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZRGB(<span class="literal">nullptr</span>),</span><br><span class="line">	signal_PointXYZRGBA(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">	setupDevice(device_id_, depth_mode_, color_format_, color_resolution_);</span><br><span class="line"></span><br><span class="line">	signal_PointXYZ = createSignal&lt;signal_KinectAzureDK_PointXYZ&gt;();</span><br><span class="line">	signal_PointXYZI = createSignal&lt;signal_KinectAzureDK_PointXYZI&gt;();</span><br><span class="line">	signal_PointXYZRGB = createSignal&lt;signal_KinectAzureDK_PointXYZRGB&gt;();</span><br><span class="line">	signal_PointXYZRGBA = createSignal&lt;signal_KinectAzureDK_PointXYZRGBA&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::KinectAzureDKGrabber::~KinectAzureDKGrabber() <span class="keyword">throw</span>()</span><br><span class="line">&#123;</span><br><span class="line">	stop();</span><br><span class="line"></span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZ&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZI&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZRGB&gt;();</span><br><span class="line">	disconnect_all_slots&lt;signal_KinectAzureDK_PointXYZRGBA&gt;();</span><br><span class="line"></span><br><span class="line">	thread.join();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dev)</span><br><span class="line">	&#123;</span><br><span class="line">		transformation.destroy();</span><br><span class="line">		dev.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::start()</span><br><span class="line">&#123;</span><br><span class="line">	dev = k4a::device::open(device_id);</span><br><span class="line">	dev.start_cameras(&amp;config);</span><br><span class="line">	calibration = dev.get_calibration(config.depth_mode, config.color_resolution);</span><br><span class="line">	transformation = k4a::transformation(calibration);</span><br><span class="line"></span><br><span class="line">	running = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	thread = <span class="built_in">std</span>::thread(&amp;KinectAzureDKGrabber::threadFunction, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">k4a::calibration pcl::KinectAzureDKGrabber::getCalibration()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> calibration;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::stop()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">	quit = <span class="literal">true</span>;</span><br><span class="line">	running = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> pcl::KinectAzureDKGrabber::isRunning() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> running;</span><br><span class="line"></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pcl::KinectAzureDKGrabber::getName() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;KinectAzureDKGrabber: &quot;</span> + <span class="built_in">std</span>::to_string(device_id));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> pcl::KinectAzureDKGrabber::getFramesPerSecond() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> config.camera_fps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::setupDevice(<span class="keyword">const</span> <span class="keyword">int</span>&amp; device_id_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; depth_mode_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_format_, <span class="keyword">const</span> <span class="keyword">int</span>&amp; color_resolution_)</span><br><span class="line">&#123;</span><br><span class="line">	device_id = device_id_;</span><br><span class="line"></span><br><span class="line">	config.camera_fps = K4A_FRAMES_PER_SECOND_30;</span><br><span class="line">	config.depth_mode = <span class="keyword">k4a_depth_mode_t</span>(depth_mode_);</span><br><span class="line">	config.color_format = <span class="keyword">k4a_image_format_t</span>(color_format_);</span><br><span class="line">	config.color_resolution = <span class="keyword">k4a_color_resolution_t</span>(color_resolution_);</span><br><span class="line">	config.synchronized_images_only = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> pcl::KinectAzureDKGrabber::threadFunction()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (!quit)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">		k4a::capture capture;</span><br><span class="line">		<span class="keyword">if</span> (!dev.get_capture(&amp;capture, <span class="built_in">std</span>::chrono::milliseconds(<span class="number">0</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		depthImage = capture.get_depth_image();</span><br><span class="line">		<span class="keyword">if</span> (depthImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get depth image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		colorImage = capture.get_color_image();</span><br><span class="line">		<span class="keyword">if</span> (colorImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get color image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		infraredImage = capture.get_ir_image();</span><br><span class="line">		<span class="keyword">if</span> (infraredImage == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">&quot;Failed to get IR image from capture\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		lock.unlock();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZ-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZ-&gt;<span class="keyword">operator</span>()(convertDepthToPointXYZ());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZI-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZI-&gt;<span class="keyword">operator</span>()(convertInfraredDepthToPointXYZI());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZRGB-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZRGB-&gt;<span class="keyword">operator</span>()(convertRGBDepthToPointXYZRGB());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (signal_PointXYZRGBA-&gt;num_slots() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			signal_PointXYZRGBA-&gt;<span class="keyword">operator</span>()(convertRGBADepthToPointXYZRGBA());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr pcl::KinectAzureDKGrabber::convertDepthToPointXYZ()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZ&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZ point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZI&gt;::Ptr pcl::KinectAzureDKGrabber::convertInfraredDepthToPointXYZI()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZI&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZI&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_infrared_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_infrared_image = k4a::image::create(K4A_IMAGE_FORMAT_IR16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_color_camera(infraredImage, &amp;transformed_infrared_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">int16_t</span>* transformed_infrared_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)transformed_infrared_image.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZI point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		point.intensity = transformed_infrared_image_data[i];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZRGB&gt;::Ptr pcl::KinectAzureDKGrabber::convertRGBDepthToPointXYZRGB()</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZRGB&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZRGB&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">uint8_t</span>* color_image_data = colorImage.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZRGB point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		point.b = color_image_data[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">		point.g = color_image_data[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">		point.r = color_image_data[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">		<span class="keyword">uint8_t</span> alpha = color_image_data[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">		<span class="keyword">if</span> (point.b == <span class="number">0</span> &amp;&amp; point.g == <span class="number">0</span> &amp;&amp; point.r == <span class="number">0</span> &amp;&amp; alpha == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZRGBA&gt;::Ptr pcl::KinectAzureDKGrabber::convertRGBADepthToPointXYZRGBA(<span class="comment">/*RGBQUAD* colorBuffer, UINT16* depthBuffer*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">	PointCloud&lt;PointXYZRGBA&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> PointCloud&lt;PointXYZRGBA&gt;())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> color_image_width_pixels = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> color_image_height_pixels = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	k4a::image transformed_depth_image = <span class="literal">NULL</span>;</span><br><span class="line">	transformed_depth_image = k4a::image::create(K4A_IMAGE_FORMAT_DEPTH16,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line"></span><br><span class="line">	k4a::image point_cloud_image = <span class="literal">NULL</span>;</span><br><span class="line">	point_cloud_image = k4a::image::create(K4A_IMAGE_FORMAT_CUSTOM,</span><br><span class="line">		color_image_width_pixels,</span><br><span class="line">		color_image_height_pixels,</span><br><span class="line">		color_image_width_pixels * <span class="number">3</span> * (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>));</span><br><span class="line"></span><br><span class="line">	transformation.depth_image_to_color_camera(depthImage, &amp;transformed_depth_image);</span><br><span class="line">	transformation.depth_image_to_point_cloud(transformed_depth_image, K4A_CALIBRATION_TYPE_COLOR, &amp;point_cloud_image);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = colorImage.get_width_pixels();</span><br><span class="line">	<span class="keyword">int</span> height = colorImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">	cloud-&gt;width = width;</span><br><span class="line">	cloud-&gt;height = height;</span><br><span class="line">	cloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;height * cloud-&gt;width);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int16_t</span>* point_cloud_image_data = (<span class="keyword">int16_t</span>*)(<span class="keyword">void</span>*)point_cloud_image.get_buffer();</span><br><span class="line">	<span class="keyword">uint8_t</span>* color_image_data = colorImage.get_buffer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">	Eigen::Matrix3f m;</span><br><span class="line">	m = Eigen::AngleAxisf(-M_PI, Eigen::Vector3f::UnitZ());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width * height; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		PointXYZRGBA point;</span><br><span class="line"></span><br><span class="line">		point.x = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">0</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.y = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">1</span>] / <span class="number">1000.0f</span>;</span><br><span class="line">		point.z = point_cloud_image_data[<span class="number">3</span> * i + <span class="number">2</span>] / <span class="number">1000.0f</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.z == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VTK_VISUALIZATION</span></span><br><span class="line">		point.getVector3fMap() = m * point.getVector3fMap();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		point.b = color_image_data[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">		point.g = color_image_data[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">		point.r = color_image_data[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">		point.a = color_image_data[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (point.b == <span class="number">0</span> &amp;&amp; point.g == <span class="number">0</span> &amp;&amp; point.r == <span class="number">0</span> &amp;&amp; point.a == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cloud-&gt;points[i] = point;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cloud;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkerLess AR Cube Demo 总结</title>
    <url>/2020/10/07/MarkerLess-AR-Cube-Demo-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MarkerLess-AR-Cube-Demo-总结"><a href="#MarkerLess-AR-Cube-Demo-总结" class="headerlink" title="MarkerLess AR Cube Demo 总结"></a>MarkerLess AR Cube Demo 总结</h1><blockquote>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/98848510">https://blog.csdn.net/qq_33446100/article/details/98848510</a></p>
</blockquote>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/iframe/aruco06.gif" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>根据<a href="https://junlu.club/2020/09/21/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86-2/">ARUCO实现AR梳理-2</a>中的叙述，可以知道，以OpenGL为最后显示平台的AR实现方案，最终要考虑的问题是，<strong>如何获得相机的外部参数？</strong></p>
<p>如果知道了相机的外部参数，即可将其带入<strong>View Matrix</strong>；加上<strong>Model Matrix</strong>可以人为指定，<strong>Projection Matrix</strong>是由相机内参定义的，一切将水到渠成。</p>
<h2 id="Markerless"><a href="#Markerless" class="headerlink" title="Markerless"></a>Markerless</h2><p>AR可以分为基于标志物的AR，与基于无标志物的AR，基于无标志物的AR又可以分为很多种，本文实现的是利用RGB单目摄像头，利用自然特征实现AR。</p>
<h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><ol>
<li>使用<strong>SURF</strong>（SpeedUp Robust Features 加速版的具有鲁棒性的特征）特征点检测算法检测事先准备的图像的特征点</li>
<li>使用<strong>SURF</strong>特征点检测算法，检测相机拍到的实时图像</li>
<li>使用<strong>FLANN</strong>（Fast Library for Approximate Nearest Neighbors 快速最近邻逼近搜索函数库）特征点匹配算法，将事先准备好的图像的特征点，与相机实时捕获的图像特征点作匹配</li>
<li>根据<strong>FLANN</strong>，使用<strong>findHomography</strong>函数，得出单应性矩阵，将事先准备好的图像的四个角点，映射到相机捕获的图像上</li>
<li>使用<strong>SolvePnP</strong>函数估计相机位姿，即相机外参</li>
<li>代入<strong>View Matrix</strong></li>
</ol>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
  </entry>
  <entry>
    <title>Windows+pcl1.11.1+vs2019环境配置</title>
    <url>/2020/10/05/Windows-pcl1-11-1-vs2019%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Windows-pcl1-11-1-vs2019环境配置"><a href="#Windows-pcl1-11-1-vs2019环境配置" class="headerlink" title="Windows+pcl1.11.1+vs2019环境配置"></a>Windows+pcl1.11.1+vs2019环境配置</h1><blockquote>
<p>参考博文【若有侵权，立即删除】</p>
<p><a href="https://blog.csdn.net/qq_36686437/article/details/106347482">https://blog.csdn.net/qq_36686437/article/details/106347482</a></p>
<p><a href="https://blog.csdn.net/qq_36686437/article/details/108803098">https://blog.csdn.net/qq_36686437/article/details/108803098</a></p>
<p><a href="https://blog.csdn.net/zhangxz259/article/details/85683201">https://blog.csdn.net/zhangxz259/article/details/85683201</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>想学点云处理方面的知识了，就配一个pcl</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="下载PCL1-11-0"><a href="#下载PCL1-11-0" class="headerlink" title="下载PCL1.11.0"></a>下载PCL1.11.0</h3><p>Github下载地址：<a href="https://github.com/PointCloudLibrary/pcl/releases">https://github.com/PointCloudLibrary/pcl/releases</a><br>下载红框内的两个文件<br><img src="https://img-blog.csdnimg.cn/20200526085007336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="安装PCL1-11-0"><a href="#安装PCL1-11-0" class="headerlink" title="安装PCL1.11.0"></a>安装PCL1.11.0</h3><p><strong>安装“PCL-1.11.0-AllInOne-msvc2019-win64.exe”。</strong></p>
<ul>
<li>选择第二个，自动添加系统变量<br>  <img src="https://img-blog.csdnimg.cn/20200526085600527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面00"></li>
<li>安装路径选择D盘，系统会自动新建PCL 1.11.0文件夹。<br>  <img src="https://img-blog.csdnimg.cn/20200526085833607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面01"></li>
<li><strong>安装完成之后打开文件夹 D:\PCL 1.11.0\3rdParty\OpenNI2<br>  双击OpenNI-Windows-x64-2.2 选择路径（D:\PCL 1.11.0\3rdParty\OpenNI2）安装即可。</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090128836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面02"></li>
<li><strong>全部安装完成后，将pcl-1.11.0-pdb-msvc2019-win64.zip解压后的.pdb文件拷贝到（D:\PCL 1.11.0\bin）中。</strong></li>
<li><strong>设置环境变量：右击计算机—属性—高级系统设置—高级—环境变量—用户变量—Path—编辑!</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090605288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面03"></li>
<li>如下图所示。<br>  <img src="https://img-blog.csdnimg.cn/20200526090646241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="PCL安装界面04"><br>  在这里直接给出，防止出现错误（依次添加）：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%PCL_ROOT%\<span class="number">3</span>rdParty\FLANN\bin</span><br><span class="line">%PCL_ROOT%\<span class="number">3</span>rdParty\VTK\bin</span><br><span class="line">%OPENNI2_REDIST64%</span><br><span class="line">%OPENNI2_LIB64%</span><br><span class="line">%OPENNI2_INCLUDE64%</span><br></pre></td></tr></table></figure>
<p>到此，环境变量的配置完成。</p>
<h3 id="VS2019相关设置"><a href="#VS2019相关设置" class="headerlink" title="VS2019相关设置"></a>VS2019相关设置</h3><ul>
<li><strong>新建空项目</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526090823909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面00"></li>
<li>解决方案配置选择Debug，解决方案平台选择x64。<br>  <img src="https://img-blog.csdnimg.cn/20200526103129751.png" alt="VS配置界面01"></li>
<li><strong>新建一个C++源文件</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526103415256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面02"></li>
<li><strong>右击新建的项目—属性：打开属性表</strong></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200526103657409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面03"></p>
<ul>
<li><strong>配置属性—调试—环境—添加：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PATH=D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\FLANN\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\VTK\bin;D:\PCL <span class="number">1.11</span><span class="number">.0</span>\\<span class="number">3</span>rdParty\OpenNI2\Tools</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526104101644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面04"></p>
<ul>
<li><strong>C/C++—语言—符合模式：否</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526104535843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面05"></li>
<li><strong>C/C++—常规—SDL检查：否</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526104722251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="VS配置界面06"></li>
</ul>
<h3 id="配置PCL1-11-0"><a href="#配置PCL1-11-0" class="headerlink" title="配置PCL1.11.0"></a>配置PCL1.11.0</h3><p><strong>为了使用方便，这里使用添加属性表的形式。注意：添加属性表的方式，需要再次将属性表内的SDL检测设置为：否。否则将报如下错误：</strong><br><img src="https://img-blog.csdnimg.cn/20200925194241929.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li><p><strong>视图—其他窗口—属性管理器</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526091549978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p><strong>打开属性管理器之后，选择Debug|X64—单击Debug|X64左侧倒三角—右击选择 添加型项目属性表</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526092104635.png" alt="在这里插入图片描述"></p>
</li>
<li><strong>项目属性表命名</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526092333946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><strong>双击新添加的属性表—VC++目录—包含目录，添加7个include路径</strong><br>  <img src="https://img-blog.csdnimg.cn/2020052609260194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<p>具体添加的include路径如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\include\pcl<span class="number">-1.11</span></span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Boost\include\boost<span class="number">-1</span>_73</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Eigen\eigen3</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\FLANN\include</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Qhull\include</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\include\vtk<span class="number">-8.2</span></span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\OpenNI2\Include</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>VC++目录—库目录，添加6个lib路径</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526093426340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  具体添加的lib路径如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Boost\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\FLANN\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\Qhull\lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\OpenNI2\Lib</span><br><span class="line">D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\lib</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526093806871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>C/C++—预处理器—预处理器定义—添加：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOST_USE_WINDOWS_H</span><br><span class="line">NOMINMAX</span><br><span class="line">_CRT_SECURE_NO_DEPRECATE</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526094047662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>链接器—输入—附加依赖项——添加PCL和VTK的相关lib文件。我用的Debug版本。</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526094504741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  附加依赖项具体添加内容如下：（文章末尾 <strong>附录</strong>中 给出批量获取附加依赖项的方法）<br>  输入到属性表里边的时候必须一行对应一个lib才能成功。<br>  Debug版本</li>
<li><strong>保存属性表</strong><br>  <img src="https://img-blog.csdnimg.cn/20200526102730254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  下一次需要创建新项目的时候，只需进行第三步 <strong>VS2019相关设置</strong> 的操作，然后打开属性管理器，添加现有属性表，找到之前保存的属性表添加进去即可。<br>  <img src="https://img-blog.csdnimg.cn/20200526105924435.png" alt="在这里插入图片描述"><br>  ![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20200526110148988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20200526110148988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70</a></li>
</ul>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_cloud.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/octree/octree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span><br><span class="line">&#123;</span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">	<span class="comment">// 创建点云数据</span></span><br><span class="line">	cloud-&gt;width = <span class="number">1000</span>;</span><br><span class="line">	cloud-&gt;height = <span class="number">1</span>;</span><br><span class="line">	cloud-&gt;points.resize(cloud-&gt;width * cloud-&gt;height);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud-&gt;points.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cloud-&gt;points[i].x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">		cloud-&gt;points[i].z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pcl::<span class="function">octree::OctreePointCloudSearch&lt;pcl::PointXYZ&gt; <span class="title">octree</span><span class="params">(<span class="number">0.1</span>)</span></span>;</span><br><span class="line">	octree.setInputCloud(cloud);</span><br><span class="line">	octree.addPointsFromInputCloud();</span><br><span class="line">	pcl::PointXYZ searchPoint;</span><br><span class="line">	searchPoint.x = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.y = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	searchPoint.z = <span class="number">1024.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//半径内近邻搜索</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pointIdxRadiusSearch;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;pointRadiusSquaredDistance;</span><br><span class="line">	<span class="keyword">float</span> radius = <span class="number">256.0f</span> * rand() / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Neighbors within radius search at (&quot;</span> &lt;&lt; searchPoint.x</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.y</span><br><span class="line">		&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; searchPoint.z</span><br><span class="line">		&lt;&lt; <span class="string">&quot;) with radius=&quot;</span> &lt;&lt; radius &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (octree.radiusSearch(searchPoint, radius, pointIdxRadiusSearch, pointRadiusSquaredDistance) &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pointIdxRadiusSearch.size(); ++i)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].x</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].y</span><br><span class="line">			&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cloud-&gt;points[pointIdxRadiusSearch[i]].z</span><br><span class="line">			&lt;&lt; <span class="string">&quot; (squared distance: &quot;</span> &lt;&lt; pointRadiusSquaredDistance[i] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 初始化点云可视化对象</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt;viewer(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">&quot;显示点云&quot;</span>));</span><br><span class="line">	viewer-&gt;setBackgroundColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  <span class="comment">//设置背景颜色为黑色</span></span><br><span class="line">	<span class="comment">// 对点云着色可视化 (red).</span></span><br><span class="line">	pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt;target_color(cloud, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	viewer-&gt;addPointCloud&lt;pcl::PointXYZ&gt;(cloud, target_color, <span class="string">&quot;target cloud&quot;</span>);</span><br><span class="line">	viewer-&gt;setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">1</span>, <span class="string">&quot;target cloud&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 等待直到可视化窗口关闭</span></span><br><span class="line">	<span class="keyword">while</span> (!viewer-&gt;wasStopped())</span><br><span class="line">	&#123;</span><br><span class="line">		viewer-&gt;spinOnce(<span class="number">100</span>);</span><br><span class="line">		boost::this_thread::sleep(boost::posix_time::microseconds(<span class="number">1000</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出下图（数字可能不同），则表示安装成功！</strong><br><img src="https://img-blog.csdnimg.cn/20200526110936338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">win+r调出“运行”窗口并输出cmd</span><br><span class="line">输入：cd /d D:\PCL <span class="number">1.11</span><span class="number">.0</span>\<span class="number">3</span>rdParty\VTK\lib 回车 （填自己的路径）</span><br><span class="line">输入：dir /b *.lib *&gt;<span class="number">0.</span>txt 回车 </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200526112537554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njg2NDM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时打开你对应路劲的目录，多了一个0.txt文件，里面存了你这个文件夹里所有链接库名字。<br>由于每一个Debug版本和Release版本的链接库是挨在一起的。写一个读取文档并对其分别保存就行了。<br>具体代码如下：（主要功能是读取一个txt文件，将其中奇数行和偶数行单独输出到新的txt文档。）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ifstream txtfile;<span class="comment">//打开读取的文件</span></span><br><span class="line">	ofstream txt01;<span class="comment">//保存的文件</span></span><br><span class="line">	ofstream txt02;<span class="comment">//保存的文件</span></span><br><span class="line">	<span class="built_in">string</span> temp;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于判断奇偶</span></span><br><span class="line"></span><br><span class="line">	txtfile.open(<span class="string">&quot;0.txt&quot;</span>, ios::in);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span> (!txtfile.eof())            <span class="comment">// 若未到文件结束一直循环</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		getline(txtfile, temp);<span class="comment">//一行一行读取</span></span><br><span class="line">		<span class="keyword">if</span> (index%<span class="number">2</span>==<span class="number">0</span>)<span class="comment">//判断除以2的余数，即为奇偶的判断</span></span><br><span class="line">		&#123;</span><br><span class="line">			txt01.open(<span class="string">&quot;1.txt&quot;</span>, ios::app);</span><br><span class="line">			txt01 &lt;&lt; temp;</span><br><span class="line">			txt01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			txt01.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			txt02.open(<span class="string">&quot;2.txt&quot;</span>, ios::app);</span><br><span class="line">			txt02 &lt;&lt; temp;</span><br><span class="line">			txt02 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			txt02.close();</span><br><span class="line">		&#125;</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">	txtfile.close();   <span class="comment">//关闭文件</span></span><br><span class="line">	txtfile.close();</span><br><span class="line">	txt01.close();</span><br><span class="line">	txt02.close();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-2021计划表</title>
    <url>/2020/09/27/2020-2021%E8%AE%A1%E5%88%92%E8%A1%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="853a7fac0c85009378beab41b09e7e37519469b46433feb9c1640c0d6ba20fa9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>摄像机模型详解</title>
    <url>/2020/09/26/%E6%91%84%E5%83%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="摄像机几何模型详解"><a href="#摄像机几何模型详解" class="headerlink" title="摄像机几何模型详解"></a>摄像机几何模型详解</h1><h2 id="针孔模型-amp-透镜"><a href="#针孔模型-amp-透镜" class="headerlink" title="针孔模型&amp;透镜"></a>针孔模型&amp;透镜</h2><h3 id="问题引出-我们如何记录世界？"><a href="#问题引出-我们如何记录世界？" class="headerlink" title="问题引出 - 我们如何记录世界？"></a>问题引出 - 我们如何记录世界？</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926200942.png" alt="图0 如何记录世界？"></p>
<p>如果按照上面图片的设计，物体的每一个点，都会在胶片的同一个地方，留下自己的信息；由此胶片上的每一个地方都是物体每一点的信息集合，根本无法记录现实物体。</p>
<h3 id="改进方案-针孔摄像机"><a href="#改进方案-针孔摄像机" class="headerlink" title="改进方案 - 针孔摄像机"></a>改进方案 - 针孔摄像机</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201249.png" alt="图1 针孔摄像机"></p>
<p>与原有的设计相比，此改进方案增加了一个隔板，只留下了一个孔；正如图上所标注的，光线穿过针孔，物体的每一个点，都在胶片的不同位置留下了自己的信息，不会像之前设计的胶片信息杂乱混合。</p>
<p>胶片就这样记录下了物体的信息。</p>
<h3 id="针孔摄像机模型"><a href="#针孔摄像机模型" class="headerlink" title="针孔摄像机模型"></a>针孔摄像机模型</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201625.png" alt="图2 针孔摄像机模型"></p>
<p>图中的各个参数的含义如下：</p>
<blockquote>
<p><strong>f</strong> ：摄像机模型的<strong>焦距</strong> </p>
<p><strong>O</strong> ：针孔，亦称<strong>光圈</strong>/<strong>摄像机中心</strong> </p>
</blockquote>
<p>像平面与虚拟像平面相对于摄像机中心对称，唯一的不同是，虚拟像平面成像是正的，我们一般都是讨论虚拟像平面；像平面成像是倒着的。</p>
<h3 id="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）"><a href="#相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）" class="headerlink" title="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（1）"></a><strong>相机坐标系下的空间点</strong>与<strong>像平面坐标系上的平面点</strong>之间的映射（1）</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926202434.png" alt="图3 摄像机坐标系与像平面坐标系之间，点的映射关系"></p>
<p>上图各个符号的含义如下：</p>
<blockquote>
<p><strong>P</strong>：真实物理空间中的某一点，在摄像机坐标系下，其坐标为（x，y，z）</p>
<p><strong>O</strong>：摄像机坐标系的原点</p>
<p><strong>i，j，k</strong>：摄像机坐标系的单位向量，构成坐标轴</p>
<p><strong>f</strong>：摄像机模型的焦距</p>
<p><strong>C’</strong>：像平面坐标系的原点</p>
<p><strong>P’</strong>：真实空间点P在成像平面上成像的点，在像平面坐标系下，其坐标为（x’，y’）</p>
</blockquote>
<p>以-i方向观察上图，可以简化为：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926203254.png" alt="图4 以-i方向观察图4"></p>
<p>采用相似三角形法则，可以得出：</p>
<script type="math/tex; mode=display">
\frac{y'}{f}=\frac{y}{z}\Rightarrow y'=f\frac{y}{z}</script><p>又因为$ P=\left[\begin{array}{l}<br>x \<br>y \<br>z<br>\end{array}\right] $，$P^{\prime}=\left[\begin{array}{l}<br>x^{\prime} \<br>y^{\prime}<br>\end{array}\right]$；</p>
<p>所以：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{1}
x^{\prime}=f \frac{x}{z} \\
y^{\prime}=f \frac{y}{z}
\end{array}\right.
\tag {公式1}</script><h3 id="透镜"><a href="#透镜" class="headerlink" title="透镜"></a>透镜</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926201249.png" alt="图5 针孔摄像机"></p>
<p>光圈，亦称针孔；</p>
<p>光圈的尺寸大小与成像的关系：</p>
<blockquote>
<p>光圈越大，成像越模糊，但是也越亮</p>
<p>光圈越小，成像越清晰，但是也越暗</p>
</blockquote>
<p>光圈越大，穿过光圈的光线越多，因此也更亮，但是随着光圈的增大，物体上不同的，但是相近的位置点，都会发射光线到达胶片上的同一点，因此成像也越模糊。</p>
<p>光圈越小，穿过光圈的光线越少，因此也更暗，但是随着光圈的减小，物体上不同的，发射光线到达胶片上的同一点的概率也越小，因此成像也越模糊。</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926211838.png" alt="图6 光圈尺寸与成像的关系"></p>
<p>毫无疑问，我们最终想要的是既明亮又清晰的图像，如何能在光圈小的情况下，增大亮度，即让物体同一点的光线到胶片上同一点的光线数量越多？</p>
<p>答案是<strong>增加透镜</strong></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212145.png" alt="图7 增加透镜"></p>
<p>透镜将物体上同一点的多条光线聚集到胶片上的同一点，增大了亮度</p>
<p><strong>透镜焦距</strong>的定义：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212659.png" alt="图8 透镜焦距的定义"></p>
<blockquote>
<p>f：透镜的焦距</p>
</blockquote>
<h3 id="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）"><a href="#相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）" class="headerlink" title="相机坐标系下的空间点与像平面坐标系上的平面点之间的映射（2）"></a><strong>相机坐标系下的空间点</strong>与<strong>像平面坐标系上的平面点</strong>之间的映射（2）</h3><p>将上述讨论的透镜，加入模型中：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926212904.png" alt="图9 透镜加入模型"></p>
<p>参数说明：</p>
<blockquote>
<p><strong>f</strong>：透镜的焦距</p>
<p><strong>$z_0$</strong>：透镜的焦点到胶片的距离</p>
<p><strong>Z’</strong>：摄像机模型的焦距</p>
</blockquote>
<p>上述参数满足：$Z’=f+Z_0$</p>
<p>以后，以字母f代表摄像机模型的焦距Z‘</p>
<h3 id="像平面坐标系下的平面点-在像平面坐标系与像素平面坐标系的转换"><a href="#像平面坐标系下的平面点-在像平面坐标系与像素平面坐标系的转换" class="headerlink" title="像平面坐标系下的平面点 在像平面坐标系与像素平面坐标系的转换"></a>像平面坐标系下的平面点 在像平面坐标系与像素平面坐标系的转换</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926215929.png" alt="图10 像坐标系与像素坐标系" style="zoom:70%;" /></p>
<blockquote>
<p><strong>像素坐标系</strong>：</p>
<ul>
<li>以胶片的左下角为坐标原点的二维坐标系</li>
<li>单位是像素</li>
</ul>
<p><strong>像坐标系</strong>：</p>
<ul>
<li>同样成为像平面坐标系，以胶片中心为C’为坐标原点</li>
<li>单位是米</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200926220338.png" alt="图11 示意图"></p>
<h3 id="理想情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换"><a href="#理想情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换" class="headerlink" title="理想情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换"></a>理想情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换</h3><p>此转换亦为3D与2D之间的转换；</p>
<p>坐标转换为：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(f k \frac{x}{z}+c_{x}, f l \frac{y}{z}+c_{y}\right)


\tag{公式3}</script><script type="math/tex; mode=display">
\alpha = fk</script><script type="math/tex; mode=display">
\beta = fl</script><blockquote>
<p><strong>k,l</strong> 单位为pixel/m</p>
<p><strong>f</strong> 单位为m</p>
<p><strong>$\alpha，\beta，c_x$ </strong>单位：pixel</p>
</blockquote>
<p>由于上述变换是非线性变换，后续处理采用齐次坐标的概念</p>
<hr>
<p><strong>齐次坐标</strong></p>
<p>欧几里得空间 -&gt; 齐次坐标空间：</p>
<ul>
<li>图像点的齐次坐标：</li>
</ul>
<script type="math/tex; mode=display">
(x, y) \Rightarrow\left[\begin{array}{l}
x \\
y \\
1
\end{array}\right]</script><ul>
<li>空间点的齐次坐标：</li>
</ul>
<script type="math/tex; mode=display">
(x, y, z) \Rightarrow\left[\begin{array}{l}
x \\
y \\
z \\
1
\end{array}\right]</script><p>齐次坐标空间 -&gt; 欧几里得空间：</p>
<ul>
<li>图像点：</li>
</ul>
<script type="math/tex; mode=display">
\left[\begin{array}{l}
x \\
y \\
w
\end{array}\right] \Rightarrow(x / w, y / w)</script><ul>
<li>空间点：</li>
</ul>
<script type="math/tex; mode=display">
\left[\begin{array}{l}
x \\
y \\
z \\
w
\end{array}\right] \Rightarrow(x / w, y / w, z / w)</script><hr>
<p>因为：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(f k \frac{x}{z}+c_{x}, f l \frac{y}{z}+c_{y}\right)


\tag{公式3}</script><script type="math/tex; mode=display">
\alpha = fk</script><script type="math/tex; mode=display">
\beta = fl</script><p>所以：</p>
<script type="math/tex; mode=display">
\left.(x, y, z) \rightarrow(\alpha \frac{x}{z}+c_{x}, \beta \frac{y}{z}+c_{y}\right)


\tag{公式4}</script><script type="math/tex; mode=display">
u =\alpha \frac{x}{z}+c_{x}</script><script type="math/tex; mode=display">
v=\beta \frac{y}{z}+c_{y}</script><blockquote>
<p>u，v 分别是像素坐标系下空间点P在成像平面上的坐标表示</p>
<p>x，y，z 分别是相机坐标系下空间点P的坐标表示</p>
</blockquote>
<p>使用齐次坐标表示 $\left.(x, y, z) \rightarrow(\alpha \frac{x}{z}+c<em>{x}, \beta \frac{y}{z}+c</em>{y}\right)$ ：</p>
<script type="math/tex; mode=display">
(\alpha \frac{x}{z}+c_X,\beta \frac{y}{z}+c_y) \rightarrow{转为齐次坐标}\rightarrow\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}</script><script type="math/tex; mode=display">
\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\tag{公式5}</script><p>记像平面上的坐标点为<strong>P’</strong></p>
<p>则<strong>公式5</strong>可以写为：</p>
<script type="math/tex; mode=display">
P'=
\begin{bmatrix}
\ \alpha x+c_xz\\
\ \beta y+c_yz \\
\ z
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><script type="math/tex; mode=display">
M =
\begin{bmatrix}
\ \alpha & 0 & c_x & 0 \\
0 & \beta & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}</script><blockquote>
<p>$\alpha，\beta，c_x，c_y$全部属于相机内部参数</p>
<p>M是相机坐标系下空间点P到像素坐标系下点P’之间的投影矩阵，3x4</p>
</blockquote>
<h3 id="实际情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换"><a href="#实际情况下，摄像机坐标系下的空间点-与-像素坐标系下的平面点-之间的转换" class="headerlink" title="实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换"></a>实际情况下，摄像机坐标系下的空间点 与 像素坐标系下的平面点 之间的转换</h3><p>由于现实生活中，相机会有畸变问题，实际的像素坐标系如下所示：</p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001102638.png" alt="图12 实际畸变"></p>
<p>修正理想情况下的转换关系：</p>
<script type="math/tex; mode=display">
P'=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP</script><script type="math/tex; mode=display">
M =
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\tag{公式6}</script><blockquote>
<p>$\alpha，\beta，c_x，c_y ，\theta$全部属于相机内部参数</p>
<p>M 共有5个自由度，即5个未知量</p>
<p>M是相机坐标系下空间点P到像素坐标系下点P’之间的投影矩阵，3x4</p>
</blockquote>
<p>从M中取出前3列，作为一个3x3的新矩阵，称为<strong>相机内参矩阵K</strong></p>
<script type="math/tex; mode=display">
K=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x  \\
0 & \frac{\beta}{sin\theta} & c_y  \\
0 & 0 & 1  \\
\end{bmatrix}</script><p>因此，<strong>公式6</strong>可以表示为如下形式：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
\\\\
= 
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x & 0 \\
0 & \frac{\beta}{sin\theta} & c_y & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
MP
\tag{公式7}</script><blockquote>
<p>E 为单位矩阵</p>
<p>K 为内参矩阵</p>
<p>M 为相机坐标系下空间点到像素坐标系下平面点的投影矩阵</p>
</blockquote>
<h3 id="世界坐标系下的空间物体-向-相机坐标系下的空间物体-的转换"><a href="#世界坐标系下的空间物体-向-相机坐标系下的空间物体-的转换" class="headerlink" title="世界坐标系下的空间物体 向 相机坐标系下的空间物体 的转换"></a>世界坐标系下的空间物体 向 相机坐标系下的空间物体 的转换</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001105119.png" alt="图13 示意图"></p>
<script type="math/tex; mode=display">
P=
\begin{bmatrix}
\ x \\
\ y \\
\ z \\
\ 1 \\
\end{bmatrix}
=
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1  \\
\end{bmatrix}
=
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
P_w
\tag{公式8}</script><blockquote>
<p>R，T：相机外参数，表征相机在世界坐标系中的位姿</p>
</blockquote>
<h3 id="综合前面所有，从-世界坐标系空间点P-到-像素坐标系成像点P’-的转换关系"><a href="#综合前面所有，从-世界坐标系空间点P-到-像素坐标系成像点P’-的转换关系" class="headerlink" title="综合前面所有，从 世界坐标系空间点P 到 像素坐标系成像点P’ 的转换关系"></a>综合前面所有，从 世界坐标系空间点P 到 像素坐标系成像点P’ 的转换关系</h3><p>综合<strong>公式7</strong>与<strong>公式8</strong>：</p>
<script type="math/tex; mode=display">
P'=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
P
=
K
\begin{bmatrix}
\ E & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
P_w
=
K
\begin{bmatrix}
\ R & T \\
\end{bmatrix}
P_w
\\\\
=
\begin{bmatrix}
\ u \\
\ v \\
\ z \\
\end{bmatrix}
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\ 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1 \\
\end{bmatrix}
\\\\
=
\begin{bmatrix}
\ \alpha & -\alpha cot\theta & c_x \\
0 & \frac{\beta}{sin\theta} & c_y \\
0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
\ R & T \\
\end{bmatrix}
\begin{bmatrix}
\ x_w \\
\ y_w \\
\ z_w \\
\ 1 \\
\end{bmatrix}
\tag{公式9}</script><blockquote>
<p>[ R  T ] 称为相机外参矩阵，3x4，6个自由度</p>
<p>K：称为相机内参矩阵，3x3，5个自由度</p>
<p>总体有11个自由度（未知量）</p>
</blockquote>
<p>设</p>
<script type="math/tex; mode=display">
M  
= K
\begin{bmatrix}
\ R & T \\
\end{bmatrix}</script><blockquote>
<p>M 为世界坐标系与像素坐标系之间的透视投影矩阵</p>
</blockquote>
<p>所以结合<strong>公式9</strong>：</p>
<script type="math/tex; mode=display">
p'=K
\begin{bmatrix}
\ R & T \\ 
\end{bmatrix}
P_w
=
M P_w
=
\begin{bmatrix}
\ m1 \\
\ m2 \\
\ m3 \\
\end{bmatrix}
P_w</script><p>转换为欧几里得空间：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
\ u \\
\ v \\
\end{bmatrix}
=
\begin{bmatrix}
\ \frac{m_1 P_w}{m_3 P_w} \\
\ \frac{m_2 P_w}{m_3 P_w} \\
\end{bmatrix}
\tag{公式10}</script><h2 id="相机标定"><a href="#相机标定" class="headerlink" title="相机标定"></a>相机标定</h2><h3 id="相机标定的目的"><a href="#相机标定的目的" class="headerlink" title="相机标定的目的"></a>相机标定的目的</h3><p>求解相机的内外参数</p>
<h3 id="为什么相机标定很重要？"><a href="#为什么相机标定很重要？" class="headerlink" title="为什么相机标定很重要？"></a>为什么相机标定很重要？</h3><p>相机的内外参数描述了三维世界到二维像素的映射关系</p>
<h3 id="标定原理"><a href="#标定原理" class="headerlink" title="标定原理"></a>标定原理</h3><p><img src="https://gitee.com/JunLuJun/up/raw/master/20201001152618.png" alt="图14 标定装置"></p>
<blockquote>
<p>已知条件：</p>
<ul>
<li>世界坐标系中$P_1，P_2…P_n$的位置</li>
<li>像素坐标系中$p_1，p_2…p_n$的位置</li>
</ul>
<p>求解目标：</p>
<ul>
<li>摄像机内外参数</li>
</ul>
</blockquote>
<p>结合<strong>公式10</strong>，各个点的坐标表示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
\ u_i \\
\ v_i \\
\end{bmatrix}
=
\begin{bmatrix}
\ \frac{m_1 P_i}{m_3 P_i} \\
\ \frac{m_2 P_i}{m_3 P_i} \\
\end{bmatrix}</script><script type="math/tex; mode=display">
\begin{array}{l}
u_{i}=\frac{m_{1} P_{i}}{m_{3} P_{i}} \rightarrow u_{i}\left(m_{3} P_{i}\right)=m_{1} P_{i} \rightarrow u_{i}\left(m_{3} P_{i}\right)-m_{1} P_{i}=0 \\\\
v_{i}=\frac{m_{2} P_{i}}{m_{3} P_{i}} \rightarrow v_{i}\left(m_{3} P_{i}\right)=m_{2} P_{i} \rightarrow v_{i}\left(m_{3} P_{i}\right)-m_{2} P_{i}=0
\end{array}</script><blockquote>
<p>一对点（世界坐标系中的点和对应的像素坐标系中的点）可以写出2个方程</p>
<p>共有11个未知量</p>
<p>所以要使用至少6对点</p>
</blockquote>
<p>在实际操作中，使用多于6对点获得更加鲁棒的结果。</p>
<p>方程组：</p>
<script type="math/tex; mode=display">
\left\{\begin{array}{c}
u_{1}\left(m_{3} P_{1}\right)-m_{1} P_{1}=0 \\
v_{1}\left(m_{3} P_{1}\right)-m_{2} P_{1}=0 \\
\vdots \\\\
u_{i}\left(m_{3} P_{i}\right)-m_{1} P_{i}=0 \\
v_{i}\left(m_{3} P_{i}\right)-m_{2} P_{i}=0 \\
\vdots \\\\
u_{n}\left(m_{3} P_{n}\right)-m_{1} P_{n}=0 \\
v_{n}\left(m_{3} P_{n}\right)-m_{2} P_{n}=0
\end{array}\right.</script><p>化为齐次线性方程组，如下：</p>
<script type="math/tex; mode=display">
Pm=0</script><script type="math/tex; mode=display">
P \stackrel{\text { def }}{=}\left(\begin{array}{ccc}
P_{1}^{T} & 0^{T} & -u_{1}P_{1}^{T} \\
0^{T} & P_{1}^{T} & -v_{1} P_{1}^{T} \\
& \vdots & \\
P_{n}^{T} & 0^{T} & -u_{n} P_{n}^{T} \\
0^{T} & P_{n}^{T} & -v_{n} P_{n}^{T}
\end{array}\right)_{2 n \times 12}</script><script type="math/tex; mode=display">
m \stackrel{\text { def }}{=}\left(\begin{array}{l}
\mathrm{m}_{1} ^{T} \\
\mathrm{m}_{2}^{T} \\
\mathrm{m}_{3}^{T}
\end{array}\right)</script><p>方程组个数：2n</p>
<p>未知参数：11</p>
<p>求解超定方程组</p>
<ul>
<li>0总是一个解，不存在非0解</li>
</ul>
<p>求解目标：（最小二乘法）</p>
<script type="math/tex; mode=display">
\begin{array}{c}
\min _{\boldsymbol{m}}\|\boldsymbol{P} \boldsymbol{m}\| \\
\text { s.t. }\|\boldsymbol{m}\|=1
\end{array}</script>]]></content>
      <categories>
        <category>充电</category>
      </categories>
      <tags>
        <tag>相机模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Aruco实现AR梳理_2</title>
    <url>/2020/09/21/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Aruco-实现AR过程梳理2"><a href="#Aruco-实现AR过程梳理2" class="headerlink" title="Aruco 实现AR过程梳理2"></a>Aruco 实现AR过程梳理<em>2</em></h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://junlu.club/2020/09/14/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86/">上一篇</a>说的比较不系统，而且有一些问题没有说清楚，这一篇将系统的整理一下OpenCV，OpenGL，Aruco的具体分工，以及一些疑问。</p>
<h2 id="目标效果"><a href="#目标效果" class="headerlink" title="目标效果"></a>目标效果</h2><p><img src="/iframe/aruco04.gif" alt=""></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和之前的一篇一样</p>
<blockquote>
<p><strong>OpenGL的世界中有虚拟相机，现实世界中有真实相机，只要将两个世界的世界坐标重合，相机位置重合，分别渲染虚拟模型与真实场景，即可达到AR效果</strong></p>
</blockquote>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="OpenCV与Aruco"><a href="#OpenCV与Aruco" class="headerlink" title="OpenCV与Aruco"></a>OpenCV与Aruco</h3><ul>
<li>将真实相机捕获的画面，传递给OpenGL，用作背景</li>
<li>相机标定，将真实相机的内参标定出来</li>
</ul>
<h3 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h3><ul>
<li>将真实画面，正交投影至矩形中，充当背景</li>
<li>定义虚拟的Cube顶点</li>
<li>生成OpenGL窗口</li>
<li>Cube经历的变换为 <em>MVP（model transform, view transform, projection transform）</em>变换</li>
</ul>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul>
<li><p>如何将真实的世界坐标系与OpenGL的世界坐标系重合呢？如何将相机位置重合呢？</p>
<p>OpenGL中，相机的位置是固定不变的，我们看到的永远是相机看到的，所以，只要清楚相机与世界坐标系的转换矩阵，即View Matrix，就可以将世界坐标系重合了。</p>
</li>
<li><p>Aruco的作用是什么呢？</p>
<p>获取真实相机相对于Marker的位姿（相机外参），传给OpenGL</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>关于AR键盘</title>
    <url>/2020/09/19/%E5%85%B3%E4%BA%8EAR%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AR-Keyboard"><a href="#AR-Keyboard" class="headerlink" title="AR Keyboard"></a>AR Keyboard</h1><blockquote>
<p>参考链接：</p>
<p><a href="https://www.cnblogs.com/mantgh/p/5680580.html#other">https://www.cnblogs.com/mantgh/p/5680580.html#other</a></p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>任何一套成熟的开发系统，都需要一整套开发套件，其中UI套件必不可少，其实用性，美观性关系着开发者的体验以及用户的体验。</p>
<p>目前，截至现在，Hololens2的开发工作，在Unity上的UI套件主要包括以下几种：</p>
<p>我有一个虚拟键盘的需求，类似于Hololens2的系统键盘那样，但是根据官方手册的指导，进展的并不顺利。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在混合现实主页的模式（即全息三维模式）下，使用虚拟键盘输入文本，类似于Unity 2D模式下的InputFiled。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Unity</li>
<li>MRTK</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li><p>首先我想到的是查看官方手册，该如何调用系统键盘，能不能实现在应用内部调用系统键盘，从而实现上述需求</p>
<p><a href="https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/README_SystemKeyboard.html">官方主页链接</a></p>
<p><img src="https://gitee.com/JunLuJun/up/raw/master/20200919213126.png" alt=""></p>
<p>官方链接里面内容说的很清楚，这里不再赘述，将代码列在下方。</p>
<ul>
<li><p>how to invoke the system keyboard</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TouchScreenKeyboard keyboard;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenSystemKeyboard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    keyboard = TouchScreenKeyboard.Open(<span class="string">&quot;&quot;</span>, TouchScreenKeyboardType.Default, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>how to read the input</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TouchScreenKeyboard keyboard;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyboard != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        keyboardText = keyboard.text;</span><br><span class="line">        <span class="comment">// Do stuff with keyboardText</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Build的时候，尽量选择到处类型为XAML</li>
</ul>
</li>
<li><p>按照官方给的方法，实现的效果不好</p>
<p>当让其显示虚拟键盘的时候，Hololens会直接退出混合现实主页视图，直接变成了进入应用之前的场景，然后出现虚拟键盘，与我的需求并不契合；输入完成后，按Enter键，Unity又会重新进入混合现实主页视图，此时，输入框中会有刚刚输入的文字</p>
</li>
</ol>
<h2 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h2><ul>
<li>自定义一个自己的呗</li>
<li>听写识别输入</li>
</ul>
]]></content>
      <categories>
        <category>充电</category>
      </categories>
  </entry>
  <entry>
    <title>git clone 速度满，加快速度方法</title>
    <url>/2020/09/19/git-clone-%E9%80%9F%E5%BA%A6%E6%BB%A1%EF%BC%8C%E5%8A%A0%E5%BF%AB%E9%80%9F%E5%BA%A6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git-clone-速度满，加快速度方法"><a href="#git-clone-速度满，加快速度方法" class="headerlink" title="git clone 速度满，加快速度方法"></a>git clone 速度满，加快速度方法</h1><blockquote>
<p>转载于</p>
<p><a href="https://www.cnblogs.com/PieDaoChuan/p/9773039.html">https://www.cnblogs.com/PieDaoChuan/p/9773039.html</a></p>
</blockquote>
<h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure>
<p><strong>注意：端口号1080为VPN设置的代理端口，可自行修改为自己的VPN代理端口</strong></p>
<p>有人使用第一种无加速效果，第二种代理方式速度得到明显提升，峰值可达1M/s。</p>
<h3 id="取消git代理设置"><a href="#取消git代理设置" class="headerlink" title="取消git代理设置"></a>取消git代理设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ubuntu配置</category>
      </categories>
  </entry>
  <entry>
    <title>C#语言实现Socket通信_2</title>
    <url>/2020/09/18/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Socket%E9%80%9A%E4%BF%A1-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2e7a6c28b8b8c5b4169968d50495861eaa1eec991b96e4e835d43818a2f625c9">dd0d603e5e9ac09c382302acedbbb84d1507cc415b62c66d207fc15953c4cdfb0773e4883a1aa17524c83a18624bcb4a7390fc979a9f201642921924f79d0d334f0e6e583fea9a4a9204c830749d63b3f76e98917439b70150d6accb95bbe68b760c51e7fde9ad6c69ae1cb795687842c7312d4d045707524cb53757cc916b64707492cb5a52b060d4e628ee422de8f73feee293ef8aaabe16c7eafd14cf7a7c3c78524420e9005f007fd2bc98057ea9095a7f9075f5c3f3e2cf2ac46ab4827fe450e81750af4951c706f8fae97106022b2315369707a81ea26c8dd7ad04592e70f9bca919aea4fe44394759d1c63dca1ab1dfb386b42f810e8064fe00cf1db6eb3e3f72fb44e248ab53c6161fa2979dd71f5187047aa7511dd4a559475ddecf0a3da54ace0e6f2b66c271e8f7c8e7d4114765d57d4b75e145ac6034cd40f05fe00423ca293089dde910a4f4311ebc69a495b100610d290b4f522c27a456b595bd1a2895627db2c1f1c53c532086417e9cd35995ae06c4bd75bbce1daec3e0e882abab756ed47c9179840f55d512cc7677b978de0ba75ea1beeb920e36b38ecb671bedd88d48f28b0342635fc2b962585bd95baad2c6ae56b5c76afbebc9fab12afdce821d11084c6f182f7641af59f3a16227386ab0692b8d53b5282deed877d227f2168d510c0cafb539b29960f6967da3ba39e088cd4edb4243a3ba5fbcfc3831e7f22623492b651fdbc979b10a7cee9ef795068ec2a680e5f14b21038c8c1a543feb2f6e0f86635361927621ee80a19a65ed5606c50d3f8641e6a716ccea389a08a6829c1b4b6a6e32220955d1d76b4a10557555a86bf4e1e84fde2d53ab1ba844f8454a3796f78fa2b1f4bd4ac7ec31dc880d64c78f491565a75a2c62cb35848df6b5e42482a5ab1c6a438b166e54e75986ca80658bd74b4cb37382fe263c746e1fe16fabbb40dbb89cf8e8132f0ac547be6f505ed3d85ffbfdb19966da27545a2b2abb10cfe212e82e74fb5ce1925816bed0b2baea19067e46282667bb1b6be38722ed9b801cc5ada1383d2f7f53580cd9d0f836925ca8abf110e54aa1f2b974118ff3f1c5ad0bb8969d500dfc74d282fe6e18628ba4555c059841663883343629049e019006ac09209b88c6a177272f1fe7d4753fc07fa076b80082cca85afb86b933b6fe18a0b6108c9ae0ff6fe1e3a990e1ed9a4aa072068f60e5ffb8de9be48d044dea872922b8bd880e1aa1a5e56bd1214ae132ae7979f19360fd12b4537bbc41c4c44000da8eef578d84793de9285b0bb4bbcb9cd41ce2da0a0ee182a0be841fee52afc93f04b937480df3f029344c5523773ab819bfac0f14134672655594b288c5e58e5e031083be84523194dfd5749a020838edd3c3966d3152b353d3ddf2e6e6f04de1fa707da5ffeed3b6d02bb475779c51a5eb4e96f76c33c1acf7e98901cfe643634725585c09b7dde4ec1086efdf2c9a99aa176ff8402cca80c060beee4bb2ff36adc6fb906d1e8f6ffa9e57bdd02ecb3fcbce2283bd1eaa9899758bb5fae51210fcc4acb302bfbb92f20997474ad0f4005b6bc0b0b7c65f9ab7f9055c4b21ff9da2c3edf74bb42f11871257a41f0520f90a57cfadd7c4d4d3d4111e18a25d99977a8d91960e24f8d62cc15e5f50f4566baf59c90557f8a4d6073854f6071cc6b09cf4fefda79f380b54ab2b7761b8e49d88d709a46b6f9e1779e38700bc2034081554b4b3f19c50c5bc704b061cbc8685bce02989226c3e4ff72add80aed817ca124312d7c344ccbd21f5a2cc14e0d9900a9155be6f8a1be931633482c6cd67cfe7e6852f53a7c85c1745c69bf0d63ebf2e055d062ac11f361e428d131048ab6aa602ee8f641a8144540fe2a3b54bb48bf6010d224a06af81c2e39e84558f77619de5cdffce929346cfa232d8a55298c0fc7ce46c87e2379f722a63339406ac8e962c3ec56e0782606b4356aaa3691418b16515572c90eb9c2d324bba6ebda4b70ad3784748c1944097fedfa481240a3f303b2384aedf2a38521d5ee1c82b4219aa45c3fd2ba6fbf463f2417c5aa718efa9ce034efe5daf53dbf284c2816341a2a0fed09a5aa3ad1909a2649e4546d38e22ae70fab0e5908895064bf4cc28ba3d1d49745ed6b269d1364a5b4f17bfe0c8c0c715ef6afd347231ce1a640e921ae87603fbf3dea0a7aac3ae92807bcf0262d66568984898287ac5750e2c16a287c279d2807c4374465877c3ad2accf15d37d12cb3b5c646de4b2ecbb0df74515c693aeea3022379a86f54ac330693585f22493d22a4bfbce1819294eee210a80b82e1afdfd5f131d87634600300be73e27bff49d97fa3558930077ad3a61427799185483f890801ead59d2351266ae39a97a57088804a6e41cd927714496caf64e6e576788495ed48c391ba84a49b5d246c842d017aa025a23d5c12f2c5bb3233481f815f592f54c11cc7887f896290955efa785426eba354084ffaf76de06ea6188f8b437f030b29c64b00870f8f943bc35d3f6edf685c9d90941d2f6606a6b21299b885461f2b6eccc88a389a4e3f11502cab5b8b919f27b717cb92e3cc77fbaaa15e195a0a245f0d371fd0b38be29b7c8a81997dbf9d7c0f1ea816b3708f7ab36f0b79c769c05e2a2c8c94f1f93b9a35da92620f1074493eeda7025b0dbd3d1a70daf23f10d511f4b70a891f4c54868a527a85b99c03f1443c81713ca1aff3b9b13d28c74b8aa2e80c5ec82a5ff5fac2408bcf01c35d83a0e2602748f398fe74fc227bc029fbacaa747327b4ba2b8b97dbbc1f83ac3e391bdb7d58b3fb0dfd7e1fa22c6b1cbb5c96cb0b002da4cd646d1e3f99d2f53361799d8eabc204ab1f28db8774be988f49de78aef3aafc03b1fe02dc53598367dc1f48edc5c272081a4582339be986e4e400557635072f0a3d844e2f776ead6c5fd1a82c0069b52d8ae096eecf53941fa28df4a06143618acd58a894e0519dc8479f0846094fe6c193e6f013fb2b2e7b61d034d437a20457d2c38d019e62b72989740a385f0b6f16a8fc14c06c24515287475240fe0205104e2c9391fffb7b7b9aa09de803c5ff840e6b880e6db523da318a109dac45d1aed4cc918f1ae095b805b2881eea27ecf401d5d8a0f6011fd2111e1e843596d3279fae40d66ae9d99ac50f634274a2df89e39f62bdbe7e11e61d705a87931a23944f4e20e010357906dcc177dd9ae8a4ac35b5b202b2fe0b67a0c81fa3607c274d152dfea56dee7d93a19e3b09a8bd7efbc41c698478c86b32eaa3cc6385cf2e465dd1cab45728c6e0bbef276b184c86a771c9822faef00baddb4c0edbe43903c1a9091647b549abff6be440fcc6aa5fe43572b8281ec6f208bb05b570c7073497911fe4074081ff2fac5f1c0dc967bb8001903c92b815bc1aa2268cc2a868e16825ac773bf217bb8a9a886efa8057cb44e3e48c029c4ea4e1aabd784f87387a432a493c8368b7f8404834e07aa21e091b09491a2817bf47eed0433ce951b3bbf88eb96d13cec2000736e0f7cee6f9367c796e2b9307c524c6bfcf62645cfbd80f91e0291521228f550b243bc8de99f9dcb481c52c2e4d07f5025e945f5b435adde0524728915bae1c7b61898857994cf054662c38ed103a960db396bd7151e92210d2be2915ca6b531d3f8c5b50f23813555690f00a1188ca7fe73d28f6143cd66ce2c5d4ffcb45e26ad36ee63a172f44289fab81037b16e7f4cc59af32727c46dba89c228f0adb8641dacc0fb92b9f606ce80b040b77cc87ecf95b81724946f224d06f411324aab3b6ef7c00a3b87fb1a9d932d897514a38ddb232a037b887887d361d6da5e4129dbb035fabc48079c7b17f4db04eee93878c5398beacce015f72e12f1f74f9277b4f4e4efe8a998f63e9d6d918db3433aafeb5167d09cd1d900a50bf07081f1bff208a60092171862c36eca1d4c830b099b91cedb9f1d79127d2ab895615f0612c19d3fab8a1c5f6a3e2cee8363efec4cff270d510d8c7aade844e8a8c3f2c29e40fd9ff031f8dd2ebf4d84087e6303f56017c82cc34a2cbda5a0b56725304e68bf5d328a7b86c34c0b31b157dae21867ddd7312ee1f20c69b5d4cec9bb9df5a58fa7b102481a4b486b04596793e17cb059cc317625530f994a86e70ab39469d51b71e9aed8a81039adb30e083eaeeff6cc0ad64d202ab0dadbd7898e5d6afb670dc09c62366bdaeba571538c2fa62a65ca2169d52b10c8d72a8372989a03587b76c63ecabb001caad32f719ed9dabd0e9ff9cd93c8d508bbe97acd6320d8592c836b95f0de12715edc2e1f2ec3f0b73415a0ed1d50de1a56373cbf7574ff62e118c1e4f646a26f8ad90d4bf4e9704e9c5fa4bbbaf87dce7fdb850bab5effc5d31e37224d7aeb70e8d48b136f9a5c42f7702066544efea61b5b0b62b458c0350f62c29fe80d10f208221badd206788fe1408741e17747c23c1e5bea7f5d5d21faece922ee58df00f0e30bd6875ead1b84e41c4ed4a086ac62ea8528d7f253e666f620b1344ab220fd24254e9bdfaac7d8d34dd89623790a020fb33f9cf0706b459d399316ac05c38abdbfcf9ae8db93bc36fe95936264b5977c40a6d3de246515803f5458fde2c616c687a21d296b7377fc01f90b2486f6c07bf5081e62ee5b65ce2a94df5a5ec827c57c9f891257fb01a2218072e4267810eedcaddb49394e05009cde76f046dac90571fb62995fa5123dec838af737ea6cdde31ee1e48c2e6281f4b965b5c5a6907d531f5feca000aeedf1bf3bc5245c5721c016cb19a36f7b53cef654bb792b63141d31b1656c4825548b7ca91d4ae80186951f1cf4a6fde80b0dc007cb03350c27f3d36700ea05a80716765c60c9c65b2c0270bcf939e24e1ec4002f8524cbbb8f3da5c3444e4475106584e414c67b837574027e198f185856634479de4e6bf8a8cff7d046bdb4ebb11488a8c9a365e4739170aa6418f32225423f9b383b92364aabee72f45832e87f41e1e3030d71b359c28a8e0ccd3820017eef7016416a7ab06aee2047ddcb3bcd5672a148d01169b29bf3b1ad851a9666547cec34292c2e6afeec74972d9d3b8986581a5a210b20e4b5d2f4725d82b7d2dbe1c3112a17d6f7acc9040b62c1d19554633c524216c3e3a6ee25ad0cab07e732689d6914bab23312383b90305eb3b69f898bf5c9b2ea4e9a1eada6858eeac3413df248166b064481d55da0d1088e7b8d5c666b43c5665a5ef43c7d2d170bee1f1d25804239f2ea08e1eb9173edcff78f054d4dca8232b6770be2fd1638b5d3d5083b54edf549c7c0839783895acad74668bfc094a2f8a4e03fdd70d8d3ded53dd2af5b2ceb3152528a9a7c224dc9450256f89c2366a90e9b8a06394ecb8de456ba528abf3ce787dfd0ecfeb5e1e6b00cb113f0fb4f3e056d4f3ea5ac53345850366542b9577a98bdce2911c511ea1515cd1379dd4fb689b601df7b815358402d4ef3dc427f1f663ed7d359a7559ca426941a1c113e7d3828d0dc163c0e533acdd33565458580cd7072843bf79cb990beebbee5efce754b3425088a190ff84bd8e4a64a9b68fa79d412d1b0984653962d3ce2873adb712ec745649e3fd9d52412b7b4527d943c3edf253593ef2b939bcf8921ebea95fc91a25190f92bdb1fe500b2c94519c0592f54b131fcbd880d494c741e9a640851f781ef7ced8c0380bef2010f52a6f66fba1c9e21cd5d5a56df397413a1d879b71098f704ccc7c868157ea683a9e732d484312f13681398e580e8e6d53fff61676c506230a328c06e2e704fe8e8d143e47a808fec7b793b493edfdfc137a9c48ced0a06207000241c1433487589ac3e80c6c2ce767a4747e894083b8d8d39703cf7632a6ea9da4b473b368099af253199b22425e72bebc37c0d2101804f95bf931c5f69ed8f2e33b234cfad5b3592740f99d166f878eb0918fea73f863a33b787d99f5c0f8e712ff95c7dc3d7c2cd8075c5e63326da95d8562dec33aaf5e23493052594d60437b138db9828e4c74588724d04d6bc8fd05345e0d30ed7e63b5cc9bd5e9639e3a5371b9645af47272b8f4fc553310d73a272c13952dbf088bf1a3c7dce5a502d7e3101ad4091220f015e7574e63bada2c285e1bfd94853a9c5d31859a794e435637f4644e1d97920f617bc38471489b32a573c7dea46684fc9d0fb1f4b401eb5c3073eb71c73c0b10906f1db9d355fbaccd5c175a1d36c1081b46c416122d0c74e503e43b4d129e477802c18577ec016969682807db6a0b7245e4c416fd9e7199f32054d54e6d0eba66c6696d9fe920dd7b20f344903b183e68ef0024febd10f29db8701569b06d425ecc4caab7b4933f63468d9ca9d4838c439e237e069a783fe95aa12ae49648647e1f228d1d369cb57fa6f3ccd38ca6935f904d8ff055b218905ed8ffe9fb2ddcaa37fbdda7736976f4e630bb80743f37bc99d812f23729aeaa47744145470d1125315a0cf9941f2d0b1bd11a1e4d7d06cb9368efb6d9dd2cb600fdbd259a157ff99982bc0ef9864d17bacf282737d403583b68c07b05430aabb472f3fba8cf4ba49e83ce30ad00915c820f28b641b05369a51446e8cf7d71f2e2d58020919675a75a70e4d311175e5b87dc9fc386e1dfd16aad367bbbe33fab58e42e108d0be021713006b7591fce9523fa60b8c16f3116ec68317b2e5e566653e2f815f0fdf867473569985faebd76ed43dd5e248ccea33a32e93f3fd3a6aa0dba9dd3039d832e3508300018121ed1f2c5070c51cb249269ab5bb530f11d50b5f4b777f9f68e820eb186b09a0042af6265cf9d751c1f0c08f7ee67c1fc0d88a2ee489ebcda0b8c9f175d51f29f6debb7952b5c630349d51d9bcef292667fad31e877d25f68e68e1e2174fe79073dcb491216ab95578c9e44132c68341a2eb8d1fb13cb95009b1404930ffbb9631d39bfad2aa0da35f3a71d62bfa434d67419a02f09f051d653f81b9e9d4f91a92f7d5aff7965471b59f429701f4022c302494052b5572849a8e5240fada80515b805fd6f4231a9cdb71d730e6b9b98ecef0cabed2b8e87c37dc10653981d9818ddf883852e4f786950c780e75569c1fce51f1b6d25f4d660b625fd3a0ca9649e629733f2b10801957aa106e26ac05686a0092ad2839362a7c2539e6eeb553c03e4a1acf401f7e7e9c4f9141ab24152d0ecd98a6af92f7a16ac88c9c335f45151227437b9b29bbbf45f73ea66569fa8494e05133741489a12367b8c7d8ddee2b57452ed165a48cac8fa5add6bc42cc117e18a5890d383db9236a690e7716fe3b8770b54f3821ad008ba28e628fbc485b7fcad562757332fc65959639b0aa53b46715cde8bd4c7cd7a180f6da772953fd965fc9218117d11cc559f0b0d3e2f529561223e9eba78a7a9c7d74dc5cef07971665a7a875e826b4b424d767af3d45cad98354d3fafd3d50348a7d0e9ada7a260e81e15337c9a108eb19602689e8a53cbe960c8b3931b8005a8d3384e8f95fa0aaf90f7eda3e1a1ec56504de1d542297560f1448688634f8a309a64bd1ed1a911a9cc54d08e155ad2303eb5bba27d93d19d0b3b624298bd61e38ef7c445751916423c18eba4ad1720c4df0e3298365d23f768108b4dd0b6fbbba2f212dce4219e1d2dd5d269d1dd0f976ce65e7e24535d92747f120023336952ab50a1aeda001cd95529f37b04f8080d4cb9cec76dbcd834d7173e642715d845bd114b99e5311bc147993d07723f15f774bc9c2bfaf3457953bd184f9798b25e69a0ab88b95fa646ffd80a83f8b083be784d75ad5807df4eb48941e1882c570dcd90ce6b8c037bd91ab4360d1f6fdfdb0aee709e63ea94852460d41c11c9dd70e1760009a54f80ec54e9dd198779b93d2901d3f9f85b798e6b8f63bbd3fb98248cf701528c47af84a5646eff40257aa2c0eb3a5d16c72f6db655c660fde6be46f89090c76db6a154598743b3346893467d5a4d9d2fc2e968a94e8e50d3ad3d7317b8363951272e33f45463171dba503f2f50bd06573e72bdb19d776f72085260d2bf3131c3e6c277636253d46c4ea5aea4f98af04cf83457b60af28f5fdd2652fb9ca605b4653fa6784f00c909d00e024692e40ae688845b6923c4696319f5ddffd1ce6cb9c7c7ab13bfd72ee394b48c21e3dd8d7f834381b2c530947cfd5d4a1e75fc20549a7ead068ddaba6ca61bd2f96e7cdaa9501da362f1d9c0fea35d468a7f88ede55e175f335f9791bc067904141afa5aebfc7c5152152a146fd6fd5fdcff1c3a351fa8ae772dd36e861c8a4f5ee895727331ef0098235453c91bc88f17902d5820e0e8bf5346ea5b7b2db0f37ad24acdd52d64c0fdf96b476234b0117e198b5ef3bb24296e271ccb7bb660ec99f26bd68fdb1273ef2215b9bb57924cdda48a3eeacca6b2b99342f4cb210cea8471f1dcbed4a40bd5dfbf12bdf17244ad3556b60f4f15e1cb74942b385eaa0b15b9db0cbad4c65dfffe488b6efc001755e7d52fe9d3155f304d757669038c6db11e1a73623d89a2d6585224fff6a12913ac58e4e6b133fe747f5f68876e38a5584a80473f6aabf5d415c12cae5499ad02868001fd43b6faacd4557bb13652d46087aa522a17338b7d639ac04b9d1fca19ff9497a0955cc3e7913acfd8cda655a7ba8e29ab17360bc8b700e983efab2cb1a9e3c172c50af466e23964868ba5bd1c11f9fdabd83bb8a05fdc12bd6e22b46f57befeafe302599f8338432fc24e8fa2fd47affafd53d8259af83c10ed07eca80cdb471a9ef3553d0d9dbbd47b4ec3d4ebec88109e8abc7fff0a0fb950a3edbe4d19a33a7816aff4a49955b69a35c8b49ceb2aec0dc41a40d5d22dd03e2f128b95f82e98080695f718262bacaa238708408a9d909ea2cabe0d883ca5b701881e228558dcbdc5d95ffb21e625a9ebc12d1085870615f4927b378ae8dcf1ae31c356d6c6985cbd373488fa431b99c103e090a5448f058f0ee83541c5785a61a9e8ce236d42ef47035f92b8788d043b131643994b7ff09b16304f161ae47317cda731acd49dcc53b14346433eb67064c60a8d29f90e76599ae9fe74f9c061193f3eb22c507806bc16bcc1d84b29ca167282b471f3b469ed84fd09a4c80973f448ec728bec63a2bb4da674cad6f3f126bcc40d9bfa3af0d85913e2b2ebf5cbf5b20ef99b0d44722ec2c4277a1fccc13301666bb27b74afa5aabd1b6e2c993b629a32a98d51dfbe7bebf35310b5c57e1fac6a9c11b0e45fbaa762310845e4a3242ee2c4d16b18fe56cc0d3d8958aefe41c48422132caece7f4649062a1138bda02a68d494c6dc9705b6d3ad0d2441b1bee3d684776fa9467a4a55685d1b71bbb0ced9f9dbeab71e7387ce6e4cb3241a6424a265c175c4d0b6e8015868f44cdb6bd35477fcf32f70a9c6d4326906a1dfb288cd5cdb1bd8829a49bc3d8b377852e8ffccf09cd340f8a16ebb28dc22097a2c07545c9ddb8c6c7d416a9f1f9a871034ac44fcf237ac568a95e1305922bb6ccd7fa8fcf80f9d5c9632255aaeb1bc648e12ee766a53384d8cb4673f4cd9e0985e0d134708350232adf3a87a3cd9da07f043a21c694b44045fad6e1a89c7a5d2e0c010adbe12532a1a37a33db077b178f50d0b6d576eb3767cd091ada4c1ef1458fb5b19d2c049be307b81a5c43524d1b8a66a6ed5952c78019bce8ee4ca78c18c6f8eda344e458c3adf082ec58062d99a13918344bb6468b0d8c1523509c4cfcda0f5e0cc3e8c47a29cd91efaa26e371818b4e612f109b3bbc2e4f0cba3592e140c528fa67c997e373f0e7639c869957dcf1f02cea8af2a39462a7f91fde500139e77ba288eecdc2db8404db35829e960c510fbc21c18b2240975321a8d83e6618c2274dc077416db3553c23493516fd623e01b2858d6ea133de1c1a4eae33ab52152e9a655639ec73e42d4065e7faa510c0b4d345781c7fd36c4ce7639c0a1c1067aeb5abf768e9309e759816f0bb70d6f72b2352ac5f8eb021fc754f5b70e6c0d14f4cdcb192b9e11162d50a74d7a6e8e883ad4c3793199bc161530d727cf7cd2d21c876fd4b162414bdff86cfe0d9abc6368b11273a07be0c1a9f7336021305c98d97168b98af9c0573b408dbeae0757f5bb34e366e6b795e89feb6cfcd3d5c13c36bffce5c7a1afcebe59b29235306bc4140093ff2c9468a7620d172565d46c7c33e1057dc57ec665486ae0eb7e8ecd9d32bbc59e9730b32ac4602495b1f3df716157a7a71d88bc0cd9255ab5234bea4ca80f9d92b7699b5e2234ead8afe71ec9938275f9c3bd886985d09041265f926c0fc61e952f58762029107e7c380a5df29ea959b757c1e3e0138e10d9e10ed5cb704b0a05018de66cb0aac5893759ddb03ba3c347de79d831c451ae16ce13c6a6577bd718deb0e303bc2d46e82171206016e64483ac97ea3b451f364fd14bd98adfa43427838bc39fbc9ab84b7b72f29f281e8ebede2e6abf12980da381832c734e00b3184b43e2d2fa4532f0331dcef4983f9d5ff752093440156ae09c3729d83ec19cf7900814529e920a1aae9d38cb446b29d1dd1bbee54858f55c0cbe6755f4d9af403c3afbdea7f74a02066c3cc747f60361934bcca01a0949de54354bcc2b68c2437f041c764dc29d8c4992331156a5963f0fcccb3d12e09541f6f2eed38541de6b0ba3ad5fd97c64b6133d0aa81dca92608e2e881418f31a35409016e0425ad5f02b963a7bc33d11e6a581c0fe0f39903f32194d4f0f14fa6e5eb1858ac77a80d448cc14b06fa0dd7e2f5c340e7bad37db9eccb714f4726d0d632805bb7b781e494e5eebcde3d3743318c69cf0552472d7fc5ac944e6425d4a6fbffadbc6231b74107e296024e35171260d44bfc83bf8a8f6857947526603b98e84f1746f659c12a473d302558efab3a49c21ad0e7e98e533a0b990406da852152129617f87014d476960cb52abbf0636057e7613b60b35b5c11c1782103538984a762b70844e3f73832551fa586acfcb20a2500e34764630542b61739fca109b7af95b71422b93d264d2e7ce8ec49e32b1ea36b8068f17a2feac9319fc08073c8b8e4f190ed36d3caf5ceb3e7dfc46659df01722edd24c405185fb15306f6ffeb8af0afc888abd2251142f15509001100e24f04627ef841614041d083866ebc6738dba0e881423d5f3314e6d7b6540e5395b9ffa3ee34295a9e20920c99837d6c80cc21ddf1d947b8b97bbc886f0d45d2e6d20ded7d20a0454746c9ec58a17f1a6d29a2e9ab5d0a4385b1ce76678e3cdbb427c081a7b9759f03379c63d43e8601ae36f8323472933c574d3bb0b21dc476289c89b625abef4181083bfb02562ef9e76415cd55695666db61fb3e89f069e3e46bf848898418cdc8fb49dfabff1ae14a6e0382c0134a79f4f3afb0dfd5aff661bbc6774c6b86a30f641af125786e40ab6db5919c80f82e615b67323984c2b64cb1cb672fc3d61b81b9d03b8382ecd35d01177aebfce5e69c96213624c313d6b5aebb09d7b0d6e328a1a1e7246bd53c9a85c43f479255fd87c0bd44fe2f976e21a18955a8e07822efb525e7240eae8a4b6b8384a0e23c949bec7af1e7bd3fac8d89764be8012e301ad5c61fec506ea3e36f215fe145bf2cfeaa5f08ae9333fb5d5b5bf039b008f7109647c15f12ccb3a2e0b2c2c5083b12d9804d39244921fb75acdd03cb69c6104a34e853acab2acaa3755be24f0bd4db8dc2fe496c1ed2ecacd01d81dd6258f8b78bc575d415a630547a262a1939fdb7f76bf750453a1dd47e85697365d1e9895eda4dfd567a937ee14239593b8683bac457d9784cf9e8672b794e619df6ff74348359f37ab0d9c84582043e5258c095a61a91c6d22e79eccada888b2b94e3923ccf09d0de640928943b5008619baf930288956e649aeb525919ae1c26bc1903ed9fdc1ed74848b201c7757e30ff7b75eb6f5033a6c6554efd8491cc02153376e28755a60914125935b1316c6da76b21a9940d587fef1d83be63945918c09a03dcb2b84538da75f22887bcbc6dbc4e1c414c7a4a7c6f65072f161a65a49df4a5fd7f91118c152438720662beb6a44a26ff5e7c5ab099e71141e43c2d8f308a180fdc4654557873b3f3b8e62e45247d2c2b5ce5981da39438e66b4fc364b51d7f9dbc9a92df863af938be96bc9a60a21810a28970f66c9e0be684c9677eeaa9d395ae845db5b76c7e47292fe21e9718d4050e07899441e356ee09bac0f2429f6ad72b604201de41accf8bf64e496f512454e19c2dc7ea6926de29a79a211256ecbc6f211df483818e50e2d7b0bec3b6d1bcae3696ec25aca9a3b3860e2fd4bf4ceb6856d7674839b3041f092d48e8690cccfd47aad6987725271b0bc9775541541b195a9136e358c2322ca3e36237c0329a442675061d097d927e1a5d6f04526c4629e19e7fd3a4276f7e56cafe4e4406ea4090731b94b5b1b055d6648ad89cc0c2d46d0bc1096feb18d3c6022ee7c838b6c588cbf5859893e08d3f1b9707cd6bc332666afd4336aef0ea61f7cc9fdcb4365dfa58d9463a64104f4a7dcea7bc5ffadaf65f01949373dd5e3317e79146647b943c357f96ab4191cd80886b0f1aad3797d8eab707cc95591321bfef2cbc2c2f5e79186b6140bb7ac81ec5415ac249b8c7740044faa68be63021da80f3090d62ba4455661f5ff9f492a2ffaa3b752b6e5cf8d5f4a99cb8d41d37fc6049b72b707a4496c782850d1946e029850b93f7564b24ccc7b5087f5b51b1319d887492bbc707252699b1b402d476c7165928a5221774f429084a3cb9674793501015673b7c0e35a36b97e2d66ba66448381824236e47693319894c2bc92b1bff289e0418b9e9b79a3355f406b83139fda3a96f7ac70dc36b2fedfd4693cf4ac30ec905abe4efd6bce1994d7d838a5dc4ddf0b9296b58faed67ac1d393679ff0cda38e1067a30d802dfb3d719cc8cda1fb758a0e149d8d8ee1d257e5755ff838426995e1a9a4fe522d66b4190c0d86c197e5e7ae44fbf02e5e1144428d6301b27323b531d5c48dd87913509ce5e40a5d3a27a8be3802680532960be9e59dc6153fa039fb2c6e0eb9734024162e4ff3d90ded437ebed1c21f5ba1c229111161b6dea35b2c16541f682491eb497f9888a9a1268af1f23f88eafc08802f632d62c141f80f15292b457518ced0ec82250a6e21a5e20d18093fb93a3c3de0c669aa93a110aa532e14ceaadca411f818de2296e25a923d33f16199c68fb176cbfd4dd87e8a41921a860b27e703eb64fa848bcfe2f493545bf83761aa3ebf8134277e48a62773d82a23f27d1034f7d838e5fbb3abfecfcb2d37a885667961ebf3ade1537457c13212cb6972399058e4455177ca472effaf3110617c1b0c8b9d0e0283e556cf6db4da2039b2103c26e21f16d742ef97ee203fd5b626c2b2ae38594dd55d4540dfd1d40e736bd34d98e4065035619627a15b86ed896a584e5af64e5572a22cda0a7688693b436b9b4a0959aaf27c9bc7e57c729fcca5aebe8ce5357e83f152692a969dce73a6d2afda34655778473ed04bf7ab1fa5b04c70ce3b7792112d86b7c57971a9b75939c17b3f79225a454ffc296c4e767e94d291b2d7792053c276e58cbe00d557c099573481ef313ec1a442b18f4d022dd1299984a963ef1b4c64e4b63d3acaf7fa8565e17537bb81e534ab3b242ad75f5d8a2da9cd7abf87c8961506edf98bbdd5a0bbd3bbb540a51a08fdd624dfab3f6d5143f518efb30a035c12afeec62c32b63fff0855792e5f659acb8e95ffc6862ce4b07e8b1834b907785321f4b6eaa9fab34f3d8a1dbb5fb1a3f554ae07840d8adab35bb94e8e2b516325a20c58a9aa367f7fb3ddf52ffe2a59bb121329c1757cad731fc2897b3da085c1a875e68830f0834d3690452ef4c53cba404ff069ed98aa366f9f2a0cacc01577db0c0be67fffda47cb25f49894f2bb6284d2694f76de2d4d96856e0f957881af6509678d7a5050ceed602e03147197be6769539366f076d00f254e244b2d28c0822d29f81c52ab5516fff5223de63d8894f490cbdf3893259d9b45aeb3c6feb36c1039de638fb1c8832f95f3274815ccca4022ca5fdb08f14c90b1c96cddae113f648ac10b62bee6296144d01600468b63cc0cfe1a4059a02f65acf071cc50c595e489146c5a67ec0c46fe9e95be1b979c9080c75e74866faf4441414d29c1b8e2e011d15de8589fea157c276f1e1dd6f0cd463bd262e7f989df589a1a9fde1f972aa6bbe2bc97bc3cd99f31a159e40dacbfd6834d381ff2f6d6c43983732d9e2efa7a90a26e614239ab6b871ae50accd137dee79f6f169bbb9efc02525d1a36c0d4f8d686cb88ecf221c7dbb153d6fb21a2d43b34c0bad8d7fc839c5b579147afa567bd100c0c8e42be49c9729158d164908208b44de811aecbba82eb3381497dacf7f5ad80fd83786efdc4745585d4db121f81e953dab6882d5055ffc2bf8495233893f223320a40f07b9efa92c01a0640fa6e91fcee1091f28355f7d7d3010285bb541eed7c8e8e9a2b00cc7d9e67b35e73ef80d2469f550e3af44ffff337d5bbdc6be8b95c61541b62c5d5a5f9951342c2646717e8dbf56b735c1e482d63f7eae29a23af97d542abea5462338f2f70d2c47cc8bf4422d4beadd404fcd9e00bc639fd68e8bede300c240955cf1fcb54d4d99bd6eb7b707143885bbf23b84b2eaeed34fe7e72b73c94367d8aa20fa7d012d6d09abd1b0f2c209c6e16014ca6a8d97a38a37f017781a68ee22ffa028816fdfe8751a6b98fc9e3a622a605b64f6a4a045864054aee15a2c0503d2d11747b2c429df50d92d4d87496d4293e5f8aef7167e0f580c1b69d367bf8863efebb5a93e283276ea90161d84aa14804db63042f4db60988f8fb75b20e3dc979f7d0ce7a2fbfbcb8b2377caf26be134965683eeef20ea3772e9a35c12666f02b649935f8356da4d77858a635786133a3ff03158a5789856aca32ebd24727bf6fc8889225faed3d5fb8592e85a7def3bf38bde895767b28de99045a5b321070b029806cb080fcb8d52737ab755b889fe7b392500c8233d2f088c5d5129755d2a57c282cae897d3dd0229906451fb72d7e0688c24dd6f43e3ffbcfc80d37ed359b42ec71f5c2129dfad1e6173cb03f9c2c99b30876c87cf07992c1bbec4ff4391d33bca89f982cddd5587051b0a1e871cbff6e098834ef3901cd40055772a74be7f36445b0c8db5a513d22179692f9ba7befb746a8f932cfe9688edce860bf98d3b96875025902187facc12147da02bf54392bcea685043de6d4f4a6d8dc9117b7b4faf8c51ebfb8d1dcc2770ef7a9dfb7638ca73e1bfd5f5525da9dd61ebc36bf2a7d104d534de8d7c16786426d6963342dd73eddb6148112be62ce1cc72a3f99b627ecfb6038df8f5d570d368df9a67c6c992ed051e33075ca788995f0d52ca02c84afafa5f102284aa8068e9bd8c8df2ff19c1790c7b697a63a70a8042368330ba6b2e169e16fd6a473e8b0842e7918abcf2d1eacdcd1463898adacce857cb0c01746f6a629ea28196595caef589aec2de17d3149bf068568e2da76cb570364259da1cedd949fc9954d2f249632e2e9e97eeae290910e5a3ac7510323e88f073e57ed8e8d03fff4c3efcfc51ca5d157677ff0df5b39b5d6f0f21cc4ef38c919e90d0f1a2801fba6ef6cbfabf7cab9feb1d6d33acccf32e001a7d23a383eb2d1025657b5759e3631cc3ca12218d646987fe5c8c2d3416e620af2b78604d28fcbb70f2582e2387cd79ccfbf350d63cab5555dd1648c58185431a7aeed2a9f59589cf02fa5b156a3816978e9809366693d4d06cd7a3cafecdfd313c915b6cec370f9e33a6b10ebc893fce13d4a2d659e531c2b291a80c2bfb9c75cecef7fb1a8baa181199def8ec6dc0830d301710af8fe26bef68bfa0d35ff8884f02de405c2d326e02b4c80cd869c806a5e0cb10d03c3047500e5046995ca39ae2c30cadad49f8c9c3915d87d0d693c2b555f370218b5ff9652fbd9207be6f883de72d9070cc7474c0dfa53e57f9297acedd23669903586e789c40c7f82eefb9f5bc41bd6c6a38c1e7c385ea4b3b66c13f12779e59eca619bdaf3d0a57a4387584c540cfbd0377d0f34c73b5a9032610f26d34281756245f9081ac0d61d4f2705638d09ecc3feab86bfb227467c7eebcd81edcdcdf019128c694727284c258dd802af09aa67ef784fe55b0b828af580a059d505233a48cf05a543a11336525d8665287ba5b144fdd99348d9329396d88d6dc6dffd5de8adfe63f64bceaaae4611692c58727110e580c9f336915f78b23b453bc6220456c47dc35e8855df71756c3e03f039d2c2df65dbd6b41c35987c18cb8b6e1b90cfd145fbcb5bd31d9ce88fb4f18fd08fccb2e8186375bce3223ef6a8685a4d716e110e075178b311f0955d0047b6f061a25161d407788b8405b32f9f716606cfd9bc6c2f3d1488c2d50d775cc12b59753a8cd37d92a3aae5dd90bf316119ee94467f5087329b59cb5fcbb2ada70953903e15256000e7401b8d576dd9ab34df8d9bfc9fd693f8d9ef6153e547385b8010f161bbbf97f5c4bff05deabca0d62ffa5541fa2fe1417568472756241dd35ff68c59400861961c927b39810dfc81ed404e114071492721b095ceb275633dbcbd0dc4f1ef1748a6d5820ead100bc33c28f85ba9f88c14eb5a6b542d2c6dd03ec6baa46af92c5e9f4fec6c84da83f35b66b021f98f204f993cd1a8df49cedc718f9d1a444163bc2f7f525932c6932b8b6b83b80599b75ca2f65dfd2a4018f6099b89611886aaa18b8ee2e91b5f54e877649ad70d46edc71876255b6c7427b61781dbf5a6658ac440f1e5a341ec3dddc05946bbb2ea84235756d3ef1c0aaf497abef25ef9f2c115573d0bf5bbdfa203dc2e91ec62418f77fd7d00d3a2427daa22c3dca252f4ad1fb87c51c39648975cce7a3601b3902b81456239e769b628d6f340ec7bc5b73b4af0baaf55a7a7a3fb522a6b9d8a82d2be19a5036b29d748780ae77696a849dafdbb1acf8534fb5b1c109a11fea9dd2b7c2e51a732f68d3ccbf35a142c8ff66642bf2451a2b84275514c5cbbf734ced8fdd9415869c8bf050399658c58cf05b389a3989cdc88697c4cb1c40a6bc251c993acaa4b96a964f59cd6c2b4adcf8a8fb0ac8a761527164325d9ad0a2506c48462ed0860ff9fe44e7b3f59352d62296f4e4d1a7387ca8bb1c6d32ca09a1baf9eac92f2d2d3c2e0d3e13522ba02548692ac66e255ea4b3bc80832533550f01e32ed404a437d219a6792bcc67f0a7b8eaae7891390c248897c18244bca331fe81121e4e16bd509cbcc09a97e56470fc4841e75da98fdc0cc09e32c51fd15ffea3ce4ffd6af33a274e52c9acff7eb0d520805d333071aca8acae6601732241903e600bf9df656a639518ec86db906296436fa1f916cf31d45657198872532d7806a696836a50301362ad3c58ee6ee535ba2ef899eac4630bb6fee0419d058ab5287d7543fb914abf3fbf437a00b90c584e0122ad26971e4ab9423c250eb915b4434dd332e158b112f962181d1981708d8b1153d4c0945798db4882c6b3fff86a84baf8911ec752e2dfd1ec23f3db1958dd03925d88c1a7db84d1e7c5fe5ff1ef2d5c713c6c8042f79f74c2f24e0a4c17d9cae7c285db35c00a77efb320a9b505f674a4a25bedbd816acc3d5222f4be1d1e01b3f64dd00c1141c41dbc43484d107959454e49ff853e69dabd2977371a85792db075870b9062cce86ff3f5e910bbe7ea55939415341dee1f22e962b4fe18acba56cb7ea20a6f6bfdbc1ec27e9102231704d0a82a5a893e3be97ac3ec3e482ca1b786a6ddcdbf464160778e0991c35eeb27090d6e0280db925cde009843d75fe08b23983a170247989fd6c51b71c367e7f866d67e99e14a658c7fb903ac2bac73889980adb19794709812bb9b16550f340c6153a2ff38b1a62698dabe964a96b00f93686bb0bee83bb325d6a1f2612b7df6d388c44e79fb781f2e7071c3569339fe4924da35d16beda2964a6696d9f6b50a1593902de7ff0561ec7d4096f39df525ba7c5b58c49b362fde52a240f9fcb197d767753bfec0fbd41247c0a149267c362cc6d26486f3ac4a946b76e0aec526e30c59702d0bf6851635b06b0367595e16d91ea64c975b16667b0549315eca4c6a8a7d15bd1ec14ec7f2936916accfb5ac60e5c29d65bfefba70ccd0eb6677550e78939ac6cf866dd2488d2da47beb98420c29d952035c90a317f144ed88120190fcb8508656f46617a850b16e0bf1c8f4021d4643596d0cb070e722193cbd05798948270c8d986703f401b4d96aa22c1d9b149eb1f2704d2be94e724c39e2e7a583d36315e6408809cbe38752af4c14f0b87aa5f3ffcd0de10f19b776d4b65900701d1be6d26384464b34ba205fe61bf9e4a7a83eced47dc40ab7bba1f35b4466af021ce26fa4baa870afe38c14e573b8d301b17b51e8e8f5be0c13fd67113c753fd3aebd296ea8e740c2af124f15a0defbac3c327a65f2bb6a5b01cf9f7348e62bdd8604e96e5327f10f5df74019d82771e2d052cdd2ca5dd91b05d48f71760b9be157b4f043353d981fc2ec0b9bebe7870f8ef1a362439d9038572f94d31950911b3c7328eae4e5f8959983499f231e575489f055346f8c4879d41f4eb052f7e868e48b7b1bddb8c0e5c710c9ac8d30232dc6032bc8d2e15d0715868794ff399853ee0cca09d3b1a16c8e6b7b1051113e740191c0f8c7e6c54f84af770ac0503288de4ba4e320b69640e397ae6e4de0680fc5825003f94ba51d8467cad541d0511fddd7c54b5d8dfd1ae108d3330deb62b2f483a96f353c7df4b55f968fe2db23972e94a1d89db8ba34b9de44330b7928a1088e255f3f2259764f723304100b313d72d8ad17ba815c4716eab1f2ff8f85697fc9a3dff3603bbba18cc497859ea91c1239aedc12f7f2f786202f7f6c6f0ec1324ad0203a4d202a57975545e82ed7b3953ff922cea90d9b76fc5d4fac2304699b61261a3e2b6a9ab05d5e9b4b97626356e2c4d02e1ee999df05ca9332c77e2f7d24510a66f1fbae97f3da6485d4b0f6b29d59e8e2d23094eb3cac84cce5fb5c940e27e81831c233a515dbab27f8f07e9f9ba8cd306f1be6eb4ae345556396952199fd6752c6c59804106db20ea57e0da2f95983af758dcdef7fa335bcf38862f7efcbdccd17de8a105750c8e4512366d24a6a006465ae4c0fece30592fe6592906283992f38a53b80d816b7d8a378302029f8c918e98ab6d9397743b49262c2b9b994b877e7c583aa40ba0028a7f461a944c95a8dce71b553681e1e720f2a84a8f80a99d71108331ab42324737b9f4a5eb726d57409713e1f4dcf23da8693bfcc204eae3ccd0d3fb8208dc7b874f6d23f27aa3943c9e39a4d2d18a7c08d77ddc5580f203ede51388d959cd758d61d90eaf2b142fc85be310cd11da9d8eac6b4223e047d96dbb3ac285c70d4e6839998fbc7b38799dc7b50d9149c309dfc09e613c0ded2e7052191a5297dfec0cf8eb53e20c3b3c8ae88ea7eaff1449a7b6c516820f75203581ccbf2618abcc1f409dbb5220bf7c367fbbbd735b4b56cf260a95db550a3a63571e5ac10a3db6377b02268c0314c024cf35f3ff14909a03968beb647133bb471d1c510f8ccbd8c1c4354a2343908d3d93b5b82c6545ceba838248c90b779fe2a5ff1f4b0e9ce04339d796c5845db93eb1d15587974a7f3ff877143239932c339c5f7050236b2418d3aec29237c18afb08bc2dbcaa9a6bad33f3caa358424e9c1de0a9aba5358286766e32ce5f0507481aef3274bf982eb62ab5f0dff224b62bbeef4911633b591f5ac86ce6422e5a256a8b17076416dd04fa91cb804c71918e08776f0dedf8682b5f598ab214afa8ffd32fd24bb591f6591145461c01e811da85fb7f3eabf8f425d24e7863cc85884ce5a1022c9dfcb9b9aebf1005673fdc082205d6242909a14ac5eba354c28034f310dcbb78e4077e8a88d3483c5d5cd66c8937e66443ceace820821a45966878ce3b921aae431be64af9726f1773314e98dd592eaa5e9e876f7bd0cc539d892dd86465dec858025d892cb3f226991a9bfe94e812754313d90663c3d8214f046cd6d014bed2efa80097f32854e49a2686cd6589840ad8566c2d78be864d8c31961b462906ec6a2700bff4b9da28a8d2804b604064e5445ef7095eba72f5fa1722b7188608e270be386247096615657d3d7de6a69b4b24a5fbb42ac62af3ce7197c6265977de24059c0bbd4c6163497454c56d11615e560d4f3342ed6dedfc92d25e081ede1e0d8073ece20037f246cac602d3244dc98afc0986792e9c5e966626bec71291a8b659410f0771aa4d4f3830a03f7c83d76b9aece518800baa7f92cbf6d9947552af576b884ee8700ea3b87b2db6b82a1c70fdf13b1b1a54ef1949218b7362b5481400347db13bf78612c15498f0c1daa4dd7cfa0ee4d59ee0203cf400f458711a6a50016873a1e28714b718d9d4250cfa31b3cb55def2a4194888ccf9e70bb29cf0378e31a28902b1b6f20ab0d3cee01bcfb2397ecd6e50b0426bfca61ae9b25f7c09598f40b372c75d02466403eab52f07d2a98ef55c67e8d3592958eb160b7db2c508211073a3d0fbb246a7250f4376bf04f6155a36368b28ed87a22d2762b8fd764a93054a6df653276070f2071ebd98a3cbc37187d16ec34c14a94a4e1cbdc8575b5fae1d27e4e666ace3e7f38f10885926c749b428aa09e229287de279c6b10a569fdddb423b4fdaf55dc3374055167ef53cf8636db60fc20b0fe1150492c4e46eace44e603f814db99b07f1e3a2b6f71726141bbbba3af91e75f309d1a8a335e8deddfd93a5fef8c93effdc834331054f000b903966a3463205f6cbc680cb010de995b935b92d25913fa355c46a948dfc4ce697e28586d162ca6d226f2ea5b0a6d4bce5ddeeed6d9a4ee40fb5d10888ad4907806e0846330c325c0d9cfe3f35604194e35e4081da9b2a39ef0ce1139a38b9cbebf6aec1d9b94bb1c1d33a27445168601c9c41330dcdad411f74b504eef1ce4285b3a534de3d8440c8a26d187615b3ec19ab7dac453130c3ab2b1048638e2e9266bbcfe110a6c47021637ddacbf2105dadf70a28430686170714ff9432779b4833a84cb26d3eedb0d31381da4ff8b79b4635a84f16f7e86354a810c479e31a24f153c326722273102dca9f70608ba4b0faa3b5f6ec15854d7fd10000d72c5147eaa1039ef5b69fee275f9ae43e3d78a3ddc8ace3aad8b7026d5aa037259d3945cf1f58ff3391215ae02232f9277b1998ab1acf202003d4c321fa0ce5175dfef3df232a32d575002039158cd93b892b286b2a6bf9858ed4c719575b251854a086544c8480328bf709dd9de0350d756e4e50cf10cd91cb3f8556d891cd8d527e95982333e581bdffe459563720bb38060fe91fa49e59c956d02994f1156a02bb3ffe9e33e0aed7723b54764b96e7107d13092854fc2ecaf93ae3d592a3bab94697892848ce547d4bb183bbad986dc46a957bdc97df2028c59e5565a1c97169b64d841e05c3bbc2fec09c53db59e5889cda4bbfe7f975563e9982da332e50c02d60156f2913a1971a2f2e17f29935e8975ac1ab8a664f01510287f8d46f5365faf4d1b95da44ef365d2b43844cead5498a4869a6ef4ee432340d2064cda5baae6e5556eaf2fd55bbdd4c64a4a205b78905c95d80103af7369e12fba1bc9babf4defe87113b8bb0fe5008640607e4a3136339cc7b2e9b702ed9c9337318b7922ebb2f3b6c0d6cd41330c6969526296e9484cdc93c28d2b520209049632695b926f6631316efabb7d86ab09586439a13875b84b5ab2b07c36bc26ea701f09337c3faa74b6e13c1265849c2bcbe3fcdfaa76c68adf00e5324dbd23cfcf278b689ec28614a96c87dcd7ae61fdf449a7957249b9241de1b4a5399bd986d3ff7781a3e0761a625513e82991c86879b7e6c298bedca862972dceb16889f7cd717e18003ea1b2d0887d855d9716df09bf93bb2340dd351a313ccefd7cb92c891a1d999ba0014dad5e312e7fb808cd003f20fc3a623ca8ed5df3dcba2d5e6d74e269ea9d2ca9c0e07507bc1e36fcfabf02dda0e41f58321ec4a9f590b43f7b161b3a312b0c96ba041c1d1d3af3be9aed48d530575eb3951547acefe6159230c943820974555f5a42a55c55e395075a54e2575e6e18bd836c7f0f7ffbdce3f9678382c3769409ccf68131f46f549f34e6561e8bafe8659780b64a8e6ddde03bcfdd85a43cffa6be5b86c658de733939dce6f36b164c64fb83c4025c8ac8d19bc270b14b74b1f76cf0ce808d7f065ec3fb9c1260a14c25c5e14935886d6bc49371750e0af8968202c3f6e76ea560239619d5ad0c00dff3e5dbae4fb65522a7661134c48ee1b66181a80cfef016dbbe8cc5802953f317f1cb2ebbee57d7770b53cb0d0e5f0e7bed706a5fa39667882a665ad521ee2433e12369461243a267712707e478a8980c9a1ff426ecfd2493832cd2109303a18f672690683aa36b46622d9c27c30335e9042a16d61b4c29db689342f790da5a9cfd7361ca3f8e504d0e50a0895e4f7f9aa15893f047757ebbdb2da72d89c61016223b2429e435770cc7c84686510342e339920cd28308a416296ec10bbcfde09f9651965ac088f8e2b2b96ee45abd585ec1ad66c751e204dcdfaa05c6d3e13237c22309884d25f1f61b545b34115e618df6f04a7cf00980ece183497da9412a030aa84ef530c6f45c8e6e0929d69143436546ab1590e2299669b6f8b6ca27f6374e6925ce2dcbee599116fe78bb799f35f63dd41080e9225006235577ed63f553ce8020e4709caaba4280084777e264b0ce6de3302db353576c323e4e4d97b03178aedfe17e0f4fdb9be062425c325340868793189250274a32940c6a2beb10bbc5278206f3418a1d0915f372f50f58db2c6d7988ea2b04a76e31fe06c329cd9cfbeb6fcaffde2a07c5013d830c73565855c7ca6986893d4d0b8ede936dba899b03b04d9a8cc0e75edbc4861110971c770d02fca8cb941c15b970f09b25fdb54f738a80bf5c001b3e8f5b69f2c7016375debe850663e521f6ea600055eaac33dd97a839112c59fb7c2cb2d68c35f9639841f8e47704212f142a9c72af6d3c01adab8290a3ba8c0b8b07bcb3a10a1f9e1e052aab3d8dbb9e7e5917c87d79621de2c54b8db9133c4f1821c9e3b80b08ba5ebb4edcdd51783da01664191f4b7721052904125df91da0ef8c4d6205cd82415af1e7194063cb5f9f317ebabcbb6956a6c9441de8ba71f66ecc7574e36ddc0d69fc7243c3de0752b827afaad62564d6569e639c8fe702f58c90f567e3f8d248019229952503e3146342a90a062b6b12fec445a574170379ddedeac1c1ec92e9a94a706c63e48d0dd91bb3b26fd522591d900eda618f9e48a6dfbe7dfb38deb2410e9c0ef77d5e0bf6135277cbad6176c81d11cf907bba2e97c2e41c35bd2fb812a70784a6b4410f00dfc2a605320ce2fca84d57c3434088fed96f918e640d7f6f4820576b75037072c6366d25d20a41d9053724c82313a0fc30402fd104d6478da0f4733b9a9e9488a22978da1da6bea49810c4647dad59b92c2af3b6b91d62e6569b4489aa5999c5cc8ba552ce38658890598c9014542a6568312601c6bae3eb6f154ca567b588d4880ab684cd9afed40a89adecdb362e3824c231438dbb1772c5a5e09efaebb560aafd101bfe36c5b19f922756cbbdd9d53ffa1d25890f8cdeb82cc96cfa3e21bae5cf5cfb9e6a2f08ecbc1ec2ac90b26996279eac115248fce29c3e745a401d05da4e0b6a83f7ece83b7f427f57d51b780ea70e950afcd5dec4a0724ffb9c95546476f9e9a9bad184abb45147a40dc1122b67f446fbbb2ace4f339f0dcc040293f3fd4d3c804323c6769e19e838fbefcd13118cf96b4f38bf2f3ddfa67da97d6d47840614330751a7a6fb393b15ba769d389b4d931b7068a2c478bc6204574206841b72d7c1b9e19f4b48e79b719e0a4e958cb933e79cd669cbad220b88f740c1cbbe88307681803b7341156a74c2474a75f8b37f3fe41ecf5f24f0359aebcc9509332e2f6dcc3b6fb39494b854c46a010e6b1316fb9dc49c6b1a3bd49eea39c75e6396987f6f77f02ba716fc49c9671169ce2082b0fa7385fe318137a3ca2e33dc56be2ad588e71d772bfaee8341adb2ed9922d1fec696baa443f794f19d5da38a36ad73e754419128c31eb6a030e91ed61b3ff22904791370ac2e77c203c02157cedf5c2052a150af0d0bb63e1bdd4d2781d0f060d5f29ae5e0e0516761763d3b0b07500bf0adb6ffa53d20c043239ce92c55059d5c5ec26e574ae0beaac81a199d47d7b1e873320210c01f04640cf632c859b41d1829bfdb14b5ee8eb476d22cc1c5ac5fe7b6726c6f7a96c539e0dffcd6e3f9307004dbe4ef8844e38510fffbaa0d91be4e55e9c6d11769d6fd97afeb32c3d03871d204236a0306053951a3e05d722b51ded335887b0413ada52ff5cc51952f6c3d274ae8fa2d34b72621be24ed1592e3ec013907ae08c2179d3a5a6cc662ab31ef5a521730f4e0338b4159b239954e1890d3e03245efba1cccd61678d20933f0d672ba25f9e3d57acb9115e40891d50cf87869291dea6d21398a58fb3b615718f0ef1b5239eff37e860ffc1a3c360f5ac8f3342ab175df06b8a54ac4409fbf986c419a409507da9f0bbfd360cd1ae23d5e45c4be50c6663887e0031ddee199b514bcf6517b27c2cab1d5be1de1783cd5abdcf7f92a3048e7d74d6e1d02cea0f0353145378dab5730d2c5c92b23de60c1b8d30984776d3fb2c1e3d1c68a3a8149a762025a8eb32fb5d5b3c65b6c56f327c975b155f76df276ae73928b38daf4cb455ac669fc2f95d5aee27b5e4a54f65142c0eef303c20f524893eafa14ac224ebec75db9e05ef4c8ec529626446211544f602af37808c855399882361ab2b55601abafc69fe3b3b3b8867d1914a5423714f589035fd0c2882c3e07eee27ce34f32c31abf7eba0c1123c2f6202fa3f60a830f1d89d77c8c8f661834605589aa2b3927db77ca398a1e5d351b09a475b297bb97c34ddd2a06cfeaac1e0e7d6428a3c15487980510f2c05b03633e71ee1ae4a4eef4488ec7cea9675c659254dfe091179b46afde226a067eac522e769600f6007133424989188720f0022fef8448107e8e1b23ce4440e32548cc0a7e4463e9f5e8d72acb41ab61ead9a58c010ed71fab882c4304c8689f1c996cba38006e906ee63616d8798af338c73a6c0e0f5da61a327d77e7f79c9038c9914b776681913a293b17770b371104d5d8761c99162584cddc3a7accf522df720c873ba36c26c843fbdebcbdfbac94fb78a23e145060cbbcc192dcd88f36dabfc2c013e777bf790574ef8cb36f8d03c6763bd51865209ea07e307e39ea72c313e42358cc700feba0ce8dbfda68bfb50fb35e0492c4608dfa8e524751809187c5cdeb16b04ea226330ad8072d952dde74c0f3e9be94417c26648c80d65f1fe6e6431f0d290d5b766c738e48866d4738463558abdb090082556722eda8177b3e34191f44777111b4a0ca12ee822143ad2d333db688d577dea4146d379427e47e2dc8531e882b04fb55ca261e372d5cabafb643be0d92717124f6dfffeca4f6be4e9fcc68428b1b7053d4dbc780cbaa51624da8cb62f5e9245f23442c38b86ba4ad74f375665a16a0f18671927b83a3937a859e1ecca97c9758d43fca82c61c729c89f7b180456a42971f470a10137b3629c047c810505c80ccde71449be8c561428b3163b5f7c56656726c79fd5817c748dce11910738d7db9beafd422ef82b830592b1b25aeb25fe26761233040b91bc5475b9112d4aa0243e7e490486aed546e14fe3cfb6593a52783b6bbf194952800eb4a0ce990a32cec9e7887ef69e12726d6e616c7002cb316d3cd932b15148396dbe11d93622544265d3e30d8790d708e74fb1151e437f393eaa4cec30b9e3188f8b9673d2de1b9799185a221f2ad6d61114baf95ade3ff6841d537687d1727491443e5d0cdfc34fda056cf0b0627261a5936ab933f63112e4b7a73967ac63bbeb8ddbb1ad4a864413ed3b342358a36ec27a0ef99bc2d545cd236fc1a29d566fe6bd8e00b95ec78f8f219d05df4399a57f80919c5a9ec1e9079fe2ced6128108e6b29bbe0feb2c5066a6105cf0135806071139d877b8d6698210d2a5501c2236e156c06095abaeec601571da1050e7c3a32f983beb06d50078d9042343fa211d7d2fa8b8f09967f0f607de042a60b63b5b73ef0a0e37d8b9520e80d8b131980e3f90de6463931cb8de2dfeeedb7b67eed7144d9ad38970676374a013032605698b87caa91854b0a0d63543c989aa9c3e59021e7351a699ce9dd84f30d415fee8610a22819d319bb7db9a15dba92d46e43abc16b460da155b59b873603568f1eb33c1c00cd5227ac4d38bc5041f7e81dab481e738c35d6feee8b25a65d18570c7a6880d0f1f2a11ddc0e22a18c74020dc4ae5573a8dc8d950f169e4eb061da5423e5b43c3eaa4be3b7e10c7ac471a6c90900b45a74fe483505507a657f6f17698c24cefdc269cfdffdeec5d56342569dd57fd45c99febcbb7decfc2bc27f71eb0b575b0bee6647df59f664a3bc4302a152a0e3c9070a400a06c8dcc52b38810f1e95ede7460589109e8261511ed04a487e39f59c12ca2064363c6287f568e6676a24da07a515a1c75e7f9dce39a22d694a7bbfeb8f6ee785dacc75a718ee356551925e4c1bef7005d47ca6ee5056385033e0febeb94d29e11f7563619ee7f645845564adab51da713cd5fff1eaa15edc427c14c3b1bc88097a7bba48c7fb5348433f4d6814c971aeb369d064ad878e9a6692b63952ee93aa4d0a829a1c4b16a71c0d09c13a28517dfe3536ea2a73209f9b3008b9647f0b1167a47dedd8f11d599c0088fd64c7242eb5313b7e3d82644c1f8609d1510d01dad58fd0eaaba6b633a6eff6d51fbdb5f462d6079d558d8c5ca94319080c6d15f83855eee8623c725e8a4467c64fdb12eaafcaabc4bfa4e7b01a1cccce8933c8d8d8ec9444c7c3ccd51e63ea821c6402e94012f1938c7e88c678651c430f9e197e1d135b0fd61cd2f18d6eece8a79c11b3c4b9586739f738b26d59ae035d023b55d5a47568</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title> C#语言实现Socket通信-1</title>
    <url>/2020/09/18/C-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Socket%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d38a98dd39bea9c474aaa8ed491c17ab1846257a9d34e3c09def86ff8b0b2bbd"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Augument Reality : Review 1</title>
    <url>/2020/09/17/Augument-Reality-Review-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Augument-Reality-Review-1"><a href="#Augument-Reality-Review-1" class="headerlink" title="Augument Reality : Review 1"></a>Augument Reality : Review 1</h1><h2 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h2><blockquote>
<p>Azuma [3] provides a commonly accepted definition of AR as a technology which (1) combines real and virtual imagery, (2)  is interactive in real time, and (3) registers the virtual imagery with the real world.</p>
<p>—-<Trends in Augmented Reality Tracking, Interaction and Display : A Review of Ten Years of ISMAR></p>
<ol>
<li><p>Combines real and virtual</p>
</li>
<li><p>Is interactive in real time</p>
</li>
<li>Is registered in three dimensions</li>
</ol>
<p>—-<A Survey of Augmented Reality></p>
</blockquote>
<hr>
<h2 id="AR-Research-Topics"><a href="#AR-Research-Topics" class="headerlink" title="AR Research Topics"></a>AR Research Topics</h2><ol>
<li><p>Graphics rendering hardware and software</p>
<p>Graphics rendering hardware and software that can create the virtual content for overlaying the real world.</p>
</li>
<li><p><strong>Tracking techniques</strong></p>
<p>Tracking techniques so that <strong>the changes in the viewer’s position can be properly reflected in the rendered graphics</strong></p>
</li>
<li><p><strong>Tracker calibration and registration tools</strong></p>
<p>Tracker calibration and registration tools for <strong>precisely aligning the real and virtual views when the user view is fixed</strong></p>
</li>
<li><p>Display hardware</p>
<p>Display hardware for merging virtual images with views of the real world</p>
</li>
<li><p>Computer processing hardware for running AR simulation code and supporting input and output devices</p>
</li>
<li><p>Interaction techniques</p>
<p>Interaction techniques specifying how the user can manipulate the AR virtual content.</p>
</li>
</ol>
<hr>
<h2 id="Tracking-Techniques"><a href="#Tracking-Techniques" class="headerlink" title="Tracking Techniques"></a>Tracking Techniques</h2><h3 id="Sensor-Based-Tracking-Techniques"><a href="#Sensor-Based-Tracking-Techniques" class="headerlink" title="Sensor-Based Tracking Techniques"></a>Sensor-Based Tracking Techniques</h3><hr>
<hr>
<h3 id="Vision-Based-Tracking-Techniques"><a href="#Vision-Based-Tracking-Techniques" class="headerlink" title="Vision-Based Tracking Techniques"></a>Vision-Based Tracking Techniques</h3><p>Vision-based tracking techniques can use image processing methods to <strong>calculate the camera pose relative to real world objects.</strong></p>
<h4 id="feature-based"><a href="#feature-based" class="headerlink" title="feature-based"></a>feature-based</h4><p>The rationale underlying feature-based methods is to find a correspondence between 2D image features and their 3D world frame coordinates.</p>
<hr>
<hr>
<hr>
<h5 id="Markers"><a href="#Markers" class="headerlink" title="Markers"></a>Markers</h5><h6 id="Artificial-markers"><a href="#Artificial-markers" class="headerlink" title="Artificial markers"></a>Artificial markers</h6><p>Early computer vision papers at IWAR described marker tracking methods that could be used to calculate camera pose in real time from artificial markers.</p>
<h6 id="Natural-Features-such-as-points-lines-edges-or-textures"><a href="#Natural-Features-such-as-points-lines-edges-or-textures" class="headerlink" title="Natural Features,such as points, lines, edges or textures"></a>Natural Features,such as points, lines, edges or textures</h6><hr>
<hr>
<hr>
<h4 id="model-based"><a href="#model-based" class="headerlink" title="model-based"></a>model-based</h4><p>Model-based trackers usually construct their models based on lines or edges in the model.</p>
<p>Texture is another useful feature for constructing models. </p>
<hr>
<hr>
<h3 id="hybrid-tracking-techniques"><a href="#hybrid-tracking-techniques" class="headerlink" title="hybrid tracking techniques"></a>hybrid tracking techniques</h3><hr>
]]></content>
      <categories>
        <category>论文总结</category>
      </categories>
      <tags>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV中的Aruco识别</title>
    <url>/2020/09/17/OpenCV%E4%B8%AD%E7%9A%84Aruco%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OpenCV中的Aruco识别"><a href="#OpenCV中的Aruco识别" class="headerlink" title="OpenCV中的Aruco识别"></a>OpenCV中的Aruco识别</h1><blockquote>
<p>转载博客：</p>
<p><a href="https://blog.csdn.net/u010260681/article/details/77089657">https://blog.csdn.net/u010260681/article/details/77089657</a></p>
<p>如有侵权，立即删除</p>
</blockquote>
<p>姿态估计（Pose estimation）在<a href="http://lib.csdn.net/base/computervison">计算机视觉</a>领域扮演着十分重要的角色：<a href="http://lib.csdn.net/base/robot">机器人</a>导航、增强现实以及其它。这一过程的基础是找到现实世界和图像投影之间的对应点。这通常是很困难的一步，因此我们常常用自己制作的或基本的Marker来让这一切变得更容易。</p>
<p>最为流行的一个途径是基于二进制平方的标记。这种Marker的主要便利之处在于，一个Marker提供了足够多的对应（四个角）来获取相机的信息。同样的，内部的二进制编码使得<a href="http://lib.csdn.net/base/datastructure">算法</a>非常健壮，允许应用错误检测和校正技术的可能性。</p>
<p>aruco模块基于ArUco库，这是一个检测二进制marker的非常流行的库，是由Rafael Muñoz和Sergio Garrido完成的。</p>
<p>aruco的函数包含在c++：<a href="http://docs.opencv.org/3.1.0/d9/d53/aruco_8hpp.html">链接地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2&#x2F;aruco.hpp&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Marker和字典"><a href="#Marker和字典" class="headerlink" title="Marker和字典"></a>Marker和字典</h2><p>一个ArUco marker是一个二进制平方标记，它由一个宽的黑边和一个内部的二进制矩阵组成，内部的矩阵决定了它们的id。黑色的边界有利于快速检测到图像，二进制编码可以验证id，并且允许错误检测和矫正技术的应用。marker的大小决定了内部矩阵的大小。例如，一个4x4的marker由16bits组成。</p>
<p>一些ArUco markers的例子：</p>
<p><img src="http://docs.opencv.org/3.1.0/markers.jpg" alt="markers.jpg"></p>
<p>应当注意到，我们需要检测到一个Marker在空间中发生了旋转，但是，检测的过程需要确定它的初始角度，所以每个角落需要是明确的，不能有歧义，保证上述这点也是靠二进制编码完成的。</p>
<p>markers的字典是在一个特殊应用中使用到的marker的集合。这仅仅是每个marker的二进制编码的链表。</p>
<p>字典的主要性质是字典的大小和marker的大小：</p>
<ul>
<li>字典的大小是组成字典的marker的数量</li>
<li><p>marker的大小是这些marker的尺寸（位的个数）</p>
<p>aruco模块包含了一些预定义的字典，这些字典涵盖了一系列的字典大小和Marker尺寸。</p>
</li>
</ul>
<p>有些人可能会认为Marker的id是从十进制转成二进制的。但是，考虑到较大的marker会有较多的位数，管理如此多的数据不那么现实，这并不可能。反之，一个marker的id仅需是marker在它所在的字典的下标。例如，一个字典里的五个marker的id是：0,1,2,3和4。</p>
<p>更多有关字典的信息在“选择字典”部分提及。</p>
<h2 id="创建Marker"><a href="#创建Marker" class="headerlink" title="创建Marker"></a>创建Marker</h2><p>​    在检测之前，我们需要打印marker，以把它们放到环境中。marker的图像可以使用<a href="http://docs.opencv.org/3.1.0/d6/d6e/group__imgproc__draw.html#ga482fa7b0f578fcdd8a174904592a6250">drawMarker()</a>函数生成。</p>
<p>​    例如，让我们分析一下如下的调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat markerImage;</span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</span><br><span class="line"></span><br><span class="line">  cv::aruco::drawMarker(dictionary, <span class="number">23</span>, <span class="number">200</span>, markerImage, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>首先，我们通过选择aruco模块中一个预定义的字典来创建一个字典对象，具体而言，这个字典是由250个marker组成的，每个marker的大小为6x6bits(DICT_6X6_250)</p>
<p>​     <code>drawMarker</code>的参数如下：</p>
<ul>
<li>第一个参数是之前创建的字典对象。</li>
<li>第二个参数是marker的id，在这个例子中选择的是字典DICT_6X6_250第23个marker。注意到每个字典是由不同数目的Marker组成的，在这个例子中，有效的Id数字范围是0到249。不在有效区间的特定id将会产生异常。</li>
<li>第三个参数，200，是输出Marker图像的大小。在这个例子中，输出的图像将是200x200像素大小。注意到这一参数需要满足能够存储特定字典 的所有位。所以，举例而言，你不能为6x6大小的marker生成一个5x5图像（这还没有考虑到Marker的边界）。除此之外，为了避免变形，这一参数最好和位数+边界的大小成正比，至少要比marker的大小大得多（如这个例子中的200)，这样变形就不显著了。</li>
<li>第四个参数是输出的图像。</li>
<li>最终，最后一个参数是一个可选的参数，它指定了Marer黑色边界的大小。这一大小与位数数目成正比。例如，值为2意味着边界的宽度将会是2的倍数。默认的值为1。</li>
<li>生成的图像如下：</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/marker23.jpg" alt="marker23.jpg"></p>
<p>​    详细的例子在模块演示文件夹中的 <code>create_marker.cpp</code> </p>
<h2 id="检测Marker"><a href="#检测Marker" class="headerlink" title="检测Marker"></a>检测Marker</h2><p>给定一个可以看见ArUco marker的图像，检测程序应当返回检测到的marker的列表。每个检测到的marker包括：</p>
<ul>
<li>图像四个角的位置（按照原始的顺序）</li>
<li>marker的Id</li>
</ul>
<p>marker检测过程由以下两个主要步骤构成：</p>
<ol>
<li>检测有哪些marker。在这一阶段我们分析图像，以找到哪些形状可以被识别为Markers。首先要做的是利用自适应性阈值来分割marker，然后从阈值化的图像中提取外形轮廓，并且舍弃那些非凸多边形的，以及那些不是方形的。我们还使用了一些额外的滤波（来剔除那些过小或者过大的轮廓，过于相近的凸多边形，等）</li>
<li>检测完marker之后，我们有必要分析它的内部编码来确定它们是否确实是marker。此步骤首先提取每个标记的标记位。为了达到这个目的，首先，我们需要对图像进行透视变换，来得到它规范的形态（正视图）。然后，对规范的图像用Ossu阈值化以分离白色和黑色位。这一图像根据marker大小和边界大小被分为不同格子，我们统计落在每个格子中的黑白像素数目来决定这是黑色还是白色的位。最终，我们分析这些位数来决定这个marker是属于哪个特定字典的，如果有必要的话，需要对错误进行检测。</li>
</ol>
<p>考虑如下图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersoriginal.png" alt="singlemarkersoriginal.png"></p>
<p>这些是检测出来的marker（用绿色标记）</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersdetection.png" alt="singlemarkersdetection.png"></p>
<p>以下是识别阶段被剔除的Marker候选（用粉红色标记）：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersrejected.png" alt="singlemarkersrejected.png"></p>
<p>在aruco模块，检测是由<code>detectMarkers()</code> 函数完成的，这一函数是这个模块中最重要的函数，因为剩下的所有函数操作都基于detectMarkers()返回的检测出的markers。</p>
<p>一个marker检测的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat inputImage;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; markerIds; </span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;Point2f&gt; &gt; markerCorners, rejectedCandidates; </span><br><span class="line">cv::aruco::DetectorParameters parameters; </span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br><span class="line">cv::aruco::detectMarkers(inputImage, dictionary, markerCorners, markerIds, parameters, rejectedCandidates); </span><br></pre></td></tr></table></figure>
<p><code>detectMarkers</code> 的参数为：</p>
<ul>
<li>第一个参数是待检测marker的图像。</li>
<li>第二个参数是字典对象，在这一例子中是之前定义的字典 (<code>DICT_6X6_250</code>).</li>
<li>检测出的markers存储在<code>markerCorners</code> 和 <code>markerIds</code>结构中：<ul>
<li><code>markerCorners</code> 是检测出的图像的角的列表。对于每个marker，将返回按照原始顺序排列的四个角（从左上角顺时针开始）。因此，第一个点是左上角的角，紧接着右上角、右下角和左下角。</li>
<li><code>markerIds</code> 是在markerCorners检测出的所有maker的id列表.注意返回的markerCorners和<code>markerIds</code> 向量具有相同的大小。 </li>
</ul>
</li>
<li>第四个参数是类型的对象 <code>DetectionParameters</code>. 这一对象包含了检测阶段的所有参数。这一参数将在 下一章节详细介绍。</li>
<li><p>最后的参数, <code>rejectedCandidates</code>, 返回了所有的marker候选, 例如， 那些被检测出来的不是有效编码的方形。每个候选同样由四个角定义， 它的 形式和markerCorners的参数一样。这一参数可以省略，它仅仅用于debug阶段，或是用于“再次寻找”策略（见<a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga90374a799f1da566e5de16f277b12463">refineDetectedMarkers()</a>）</p>
<p><code>detectMarkers()</code>之后，接下来你想要做的事情可能是检查你的marker是否被正确地检测出来了。幸运的是，aruco模块提供了一个函数，它能在输入图像中来绘制检测出来的markers，这个函数就是<a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga2ad34b0f277edebb6a132d3069ed2909">drawDetectedMarkers()</a> ,例子如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat outputImage;</span><br><span class="line">cv::aruco::drawDetectedMarkers(image, markerCorners, markerIds);</span><br></pre></td></tr></table></figure></li>
<li><code>image</code> 是输入/输出图像，程序将在这张图上绘制marker。（它通常就是检测出marker的那张图像）</li>
<li><code>markerCorners</code> 和 <code>markerIds</code> 是检测出marker的结构，它们的格式和 <code>detectMarkers()</code>函数提供的一样。</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersdetection.png" alt="singlemarkersdetection.png"></p>
<p> 注意到这个函数仅仅用于可视化，而没有别的什么用途。</p>
<p>使用这两个函数我们完成了基本的marker识别步骤，我们可以从相机中检测出Marker了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture inputVideo; </span><br><span class="line"></span><br><span class="line">inputVideo.open(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (inputVideo.grab()) </span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    cv::Mat image, imageCopy;</span><br><span class="line">    inputVideo.retrieve(image); </span><br><span class="line">    image.copyTo(imageCopy);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners; </span><br><span class="line">    cv::aruco::detectMarkers(image, dictionary, corners, ids);</span><br><span class="line">    <span class="comment">// if at least one marker detected </span></span><br><span class="line">    <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) </span><br><span class="line">        cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">    cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy); </span><br><span class="line">    <span class="keyword">char</span> key = (<span class="keyword">char</span>) cv::waitKey(waitTime); </span><br><span class="line">    <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    注意到这里忽略了有些可选的参数，比如检测参数对象、以及输出的被剔除的候选对象向量。</p>
<p>​    完整的工程代码包含在模块样例文件夹中的<code>detect_markers.cpp</code> </p>
<h2 id="Pose检测"><a href="#Pose检测" class="headerlink" title="Pose检测"></a>Pose检测</h2><p>接下来你想要做的应当是通过Marker检测来获取相机pose。</p>
<p>为了展现相机的Pose检测，你需要知道你的相机的校准（Calibration）参数。这是一个相机矩阵和畸变系数。如果你不知道如何校准你的相机，你可以看一看<code>calibrateCamera()</code> 函数，以及<a href="http://lib.csdn.net/base/opencv">OpenCV</a>的校准教程。你同样可以使用aruco模块来校准你的相机，这在使用aruco进行校准的教程中将会介绍。注意这个过程只需要做一次，除非你的相机的光学性质发生了改变（例如调焦）</p>
<p>最后，在校准之后我们得到的是相机矩阵：这是一个3x3的矩阵，包含了焦距和相机中心坐标（相机的内参），以及畸变系数：一个包含五个以上元素的向量，它描述的是相机产生的畸变。</p>
<p>当你用ArUco marker来检测相机Pose时，你可以单独地检测每个Marker的pose。如果你想要从一堆Marker里检测出一个pose，你需要的是aruco板。（参见ArUco板教程）</p>
<p>涉及到marker的相机pose是一个从marker坐标系统到相机坐标系统的三维变换。这是由一个旋转和一个平移向量确定的（参见 <code>solvePnP()</code> 函数）</p>
<p>aruco模块提供了一个函数，用来检测所有探测到的Marker的pose。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Mat cameraMatrix, distCoeffs; </span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs; </span><br><span class="line"></span><br><span class="line">cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, cameraMatrix, distCoeffs, rvecs, tvecs); </span><br></pre></td></tr></table></figure>
<ul>
<li><code>corners</code> 参数是marker的角向量，是由<code>detectMarkers()</code> 函数返回的。</li>
<li>第二个参数是marker的大小（单位是米或者其它）。注意Pose检测的平移矩阵单位都是相同的。</li>
<li><code>cameraMatrix</code> 和 <code>distCoeffs</code> 是需要求解的相机校准参数。</li>
<li><p><code>rvecs</code> 和 <code>tvecs</code> 分别是每个markers角的旋转和平移向量。</p>
<p>这一函数获取的marker坐标系统处在marker重心，Z坐标指向纸面外部，如下图所示。坐标的颜色为,X:红色，Y：绿色，Z：蓝色。</p>
</li>
</ul>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersaxis.png" alt="singlemarkersaxis.png"></p>
<p>aruco模块提供了一个函数绘制上图中的坐标，所以我们可以检查pose检测的正确性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::drawAxis (image, cameraMatrix, distCoeffs, rvec, tvec, <span class="number">0.1</span>); </span><br></pre></td></tr></table></figure>
<ul>
<li><code>image</code> 是输入/输出图像，坐标将会在这张图像上绘制（通常就是检测marker的那张图像）。</li>
<li><code>cameraMatrix</code> 和 <code>distCoeffs</code> 是相机校准参数。</li>
<li><code>rvec</code> 和 <code>tvec</code> 是Pose参数，指明了坐标绘制的位置。</li>
<li>最后一个参数是坐标轴的长度，和tvec单位一样（通常是米）。</li>
</ul>
<p>针对一个marker的pose检测的基本的完整示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::VideoCapture inputVideo;</span><br><span class="line">inputVideo.open(<span class="number">0</span>);</span><br><span class="line">cv::Mat cameraMatrix, distCoeffs; <span class="comment">// camera parameters are read from somewhere </span></span><br><span class="line"></span><br><span class="line">readCameraParameters(cameraMatrix, distCoeffs);</span><br><span class="line"></span><br><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (inputVideo.grab()) &#123; </span><br><span class="line">	cv::Mat image, imageCopy;</span><br><span class="line">	inputVideo.retrieve(image); </span><br><span class="line">	image.copyTo(imageCopy);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids; </span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners; </span><br><span class="line">	cv::aruco::detectMarkers(image, dictionary, corners, ids);<span class="comment">// if at least one marker detected </span></span><br><span class="line">	<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123; </span><br><span class="line">		cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">        <span class="built_in">vector</span>&lt; Mat &gt; rvecs, tvecs; </span><br><span class="line">        cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">0.05</span>, cameraMatrix, distCoeffs, rvecs, tvecs); <span class="comment">// draw axis for each marker </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ids.size(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            cv::aruco::drawAxis(imageCopy, cameraMatrix, distCoeffs, rvecs[i], tvecs[i], <span class="number">0.1</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy); </span><br><span class="line">        <span class="keyword">char</span> key = (<span class="keyword">char</span>) cv::waitKey(waitTime); </span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    样例视频:</p>
<p>​    <a href="https://youtu.be/IsXWrcB_Hvs"><img src="http://img.youtube.com/vi/IsXWrcB_Hvs/0.jpg" alt="ArUco markers detection video"></a></p>
<p>​    完整的工程代码包含在模块样例文件夹中的 <code>detect_markers.cpp</code></p>
<h2 id="选择字典"><a href="#选择字典" class="headerlink" title="选择字典"></a>选择字典</h2><p>aruco模块提供了Dictionary类来描述marker的字典。</p>
<p>除了marker大小和字典中的marker数目，字典还有一个很重要的参数，就是内部marker的距离。内部marker的距离是marker之间的最小距离，它决定了字典错误检测和纠正能力。</p>
<p>一般而言，较小的字典大小和较大的marker大小将会产生更大的内部marker距离，反之亦然。但是，过大的Marker在检测中更加困难，因为我们需要从图像中提取出更多位的信息。</p>
<p> 例如，如果你的应用中仅仅需要10个marker，最好使用只包含10个marker的字典，而不是包含1000个marker的字典。原因在于，由10个marker组成的字典将会有更大的内部Marker距离，因此，它的容错性更强。</p>
<p>结果，aruco模块包含了很多选择marker字典的途径，所以你可以让你的系统变得更加健壮。</p>
<ul>
<li>预定义的字典：</li>
</ul>
<p>这是选择字典最简单的办法。aruco模块包含了一系列预定义的字典，涵盖了不同的marker大小和marker数量。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250); </span><br></pre></td></tr></table></figure>
<p>DICT_6X6_250 是一个预定义的字典，它包含6x6位的marker，总共有250个marker。</p>
<p>在所有提供的字典中，我们推荐使用你选择尽可能小的marker。例如，如果你需要6x6位的200个marker，选择DICT_6X6_250要优于选择DICT_6X6_1000。字典越小，内部距离就越大。</p>
<ul>
<li>自动生成的字典:</li>
</ul>
<p>我们可以针对想要的marker数量和位来生成字典，以得到最优的内部Marker距离。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::aruco::Dictionary dictionary = cv::aruco::generateCustomDictionary(<span class="number">36</span>, <span class="number">5</span>); </span><br></pre></td></tr></table></figure>
<p>这将会产生一个由36个5X5位字典组成的标准字典。这个过程需要几秒钟，具体时间取决于你的参数（更大的字典和更多的位数会耗费更多的时间）</p>
<ul>
<li>手动生成的字典:</li>
</ul>
<p>最终，我们可以手动设置字典，方便做任何修改。为了做到这一点，我们需要手动给 <code>Dictionary</code> 对象参数赋值。必须注意的是，除非你有一些特别的理由需要自己来生成字典，一般情况下我们推荐前面的任一种方案。</p>
<p>字典参数为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">    	Mat bytesList; </span><br><span class="line">    	<span class="keyword">int</span> markerSize; </span><br><span class="line">    	<span class="keyword">int</span> maxCorrectionBits; <span class="comment">// maximum number of bits that can be corrected</span></span><br><span class="line">    	...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>bytesList</code> 是一个数组，它包含了所有marker代码的信息。markerSize是每个marker的维度（例如，参数为5代表5x5位）。最终， <code>maxCorrectionBits</code>是marker检测中 可校正的最大比特数，如果这个值过大，会得到大量的错误位置。</p>
<p> <code>bytesList</code> 中的每一行代表字典中的一个marker。但是，这些marker的数据并不以二进制形式存储，而是以一种特殊的方式存储，这样可以简化检测的过程。</p>
<p>幸运的是，我们可以简单地调用静态方法<code>Dictionary::getByteListFromBits()</code>来转换到这种形式。</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Dictionary dictionary; </span><br><span class="line"><span class="comment">// markers of 6x6 bits </span></span><br><span class="line">dictionary.markerSize = <span class="number">6</span>; </span><br><span class="line"><span class="comment">// maximum number of bit corrections </span></span><br><span class="line">dictionary.maxCorrectionBits = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// lets create a dictionary of 100 markers </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">&#123;<span class="comment">// assume generateMarkerBits() generate a new marker in binary format, so that </span></span><br><span class="line"><span class="comment">// markerBits is a 6x6 matrix of CV_8UC1 type, only containing 0s and 1s </span></span><br><span class="line">	cv::Mat markerBits = generateMarkerBits(); </span><br><span class="line">	cv::Mat markerCompressed = getByteListFromBits(markerBits); <span class="comment">// add the marker as a new row</span></span><br><span class="line">	dictionary.bytesList.push_back(markerCompressed); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="检测参数"><a href="#检测参数" class="headerlink" title="检测参数"></a>检测参数</h2><p> <a href="http://docs.opencv.org/3.1.0/d9/d6a/group__aruco.html#ga306791ee1aab1513bc2c2b40d774f370">detectMarkers()</a>的一个参数是DetectorParameters对象。这一对象包含了marker检测过程中所有特定的选项。</p>
<p>在这一章节中，我们将介绍所有的参数。我们可以根据它们涉及的阶段来给这些参数分类。</p>
<h4 id="阈值化"><a href="#阈值化" class="headerlink" title="阈值化"></a>阈值化</h4><p>检测的第一步是输入图像的阈值化。</p>
<p>例如，上述样例中的图像阈值化的结果如下：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersthresh.png" alt="singlemarkersthresh.png"></p>
<p>这一阈值化过程由以下几个参数决定：</p>
<ul>
<li><code>int adaptiveThreshWinSizeMin</code>, <code>intadaptiveThreshWinSizeMax</code>, <code>int adaptiveThreshWinSizeStep</code></li>
</ul>
<p>​    <code>adaptiveThreshWinSizeMin</code> 和 <code>adaptiveThreshWinSizeMax</code> 参数代表选择的自适应阈值窗口大小（以像素为单位）间隔（具体参见<a href="http://lib.csdn.net/base/opencv">opencv</a>的 <code>threshold()</code>函数）。</p>
<p>参数adaptiveThreshWinSizeStep表明了窗口从adaptiveThreshWinSizeMin到adaptiveThreshWinSizeMax大小的增量。</p>
<p>例如，对于adaptiveThreshWinSizeMin=5，adaptiveThreshWinSizeMax=21以及adaptiveThreshWinSizeStep=4，那么将会产生5个阈值化步骤，窗口大小分别为5, 9, 13, 17 和 21。在每个阈值化图像中，都会选出一些marker候选。</p>
<p>如果marker大小太大的话，较小的窗口大小可能会切割marker的边界，所以它将不会被检测到，就像下图一样：</p>
<p><img src="http://docs.opencv.org/3.1.0/singlemarkersbrokenthresh.png" alt="singlemarkersbrokenthresh.png"></p>
<p>Broken marker image</p>
<p>另一方面，如果marker太小的话，较大的窗口大小也会有类似的效果。此外这一过程将会趋向于全局阈值，而失去了自适应的特性。</p>
<p>最简单的例子是对adaptiveThreshWinSizeMin和 <code>adaptiveThreshWinSizeMax</code>使用相同的值，这样就只会执行一次阈值化步骤。但是，最好还是使用一个范围的值作为窗口大小，虽然较多的阈值化步骤会在一定程度上降低性能。</p>
<p>缺省参数：<code>adaptiveThreshWinSizeMin</code>: 3, <code>adaptiveThreshWinSizeMax</code>: 23, <code>adaptiveThreshWinSizeStep</code>: 10</p>
<ul>
<li><p><code>double adaptiveThreshConstant</code></p>
<p>这一参数表达了阈值状态下的常量（参见Opencv函数）。它的默认值是大多数例子下较好的情况。</p>
</li>
</ul>
<p>默认值: 7</p>
<h4 id="轮廓滤波"><a href="#轮廓滤波" class="headerlink" title="轮廓滤波"></a>轮廓滤波</h4><p>阈值化之后，我们需要检测轮廓。但是，我们并不会把所有的轮廓都当作是候选。在不同步骤中，我们通过滤波剔除一些不太可能是marker的轮廓。这一章节中的参数可以自定义这一过程。</p>
<p> 需要注意到，大多数例子中我们需要平衡检测的性能和效率。所有考虑到的轮廓都会在接下来的过程中做进一步处理，这通常产生了更高的计算消耗。所以，我们希望能够在这一阶段就丢弃错误的候选，而不是下一阶段继续处理。</p>
<p>另一方面，如果滤波的条件过于苛刻，事实上的marker轮廓可能会被错误地剔除，因此，没有检测到marker。</p>
<ul>
<li><p><code>double minMarkerPerimeterRate</code>, <code>doublemaxMarkerPerimeterRate</code></p>
<p>这些参数决定了marker的最小值和最大值，具体来说，是最大最小marker的周长。它们并不是以绝对像素值作为单位，而是相对于输入图片的最大尺寸指定的。</p>
</li>
</ul>
<p>例如，大小为640x480，最小相对marker周长为0.05的图像，将会产生一个最小周长640x0.05 = 32(像素)的marker，因为640是图像的最大尺寸。参数 <code>maxMarkerPerimeterRate</code> 也是类似的。</p>
<p> 如果 <code>minMarkerPerimeterRate</code>太小，检测阶段性能会降低，因为会有更多的轮廓进入到接下来的阶段。这一弊端对于 <code>maxMarkerPerimeterRate</code>参数而言不是那么显著，因为小的轮廓数目通常要多于大的轮廓。选取 <code>minMarkerPerimeterRate</code>值为0以及值为4，就相当于考虑了图像中的所有轮廓，但是出于性能考虑这是不推荐的。</p>
<p> 缺省值：</p>
<p>Default values:<code>minMarkerPerimeterRate</code> : 0.03, <code>maxMarkerPerimeterRate</code> : 4.0</p>
<ul>
<li><code>double polygonalApproxAccuracyRate</code></li>
</ul>
<p>我们对所有的候选进行多边形近似，只有近似结果为方形的形状才能通过<a href="http://lib.csdn.net/base/softwaretest">测试</a>。这一值决定了多边形近似产生的最大误差（参见<code>approxPolyDP()</code> 函数）。</p>
<p> 这一参数是相对于候选长度的（像素上）。所以如果候选的周长为100像素，polygonalApproxAccuracyRate的值为0.04，那么最大的误差应当为100x0.04=5.4像素。</p>
<p>在大多例子中，缺省参数的表现已经很好了，但对高失真的图像，我们需要更大的误差值。</p>
<p>​    缺省值：0.05</p>
<ul>
<li><code>double minCornerDistanceRate</code></li>
</ul>
<p>同一张marker中每一对角的最小距离。这是相对于marker周长的值。像素的最小距离为Perimeter * minCornerDistanceRate.</p>
<p>​    缺省值: 0.05</p>
<ul>
<li><p><code>double minMarkerDistanceRate</code></p>
<p>两张不同的marker之间的任一对角的最小距离。它表示相对于两个marker的最小标记周长。如果两个候选太接近，较小的一个被忽略。</p>
</li>
</ul>
<p>​    缺省值：0.05</p>
<ul>
<li><code>int minDistanceToBorder</code></li>
</ul>
<p>marker角到图像边缘最小距离。部分图像边缘被遮挡的marker也能被正确地检测出来，如果遮挡部分比较小的话。但是，如果其中一个角被挡住了，返回的角通常在图像边界的一个错误的位置。</p>
<p>如果marker角的位置很重要的话，例如你想要做pose检测，最好舍弃掉那些离图像边缘太接近的角。否则就没有必要。</p>
<p>​    缺省值：3</p>
<h4 id="比特位提取"><a href="#比特位提取" class="headerlink" title="比特位提取"></a>比特位提取</h4><p>检测到候选之后，我们需要分析每个候选的比特位，来确定它们是不是marker。</p>
<p>在分析二进制编码之前，我们需要提取出比特位。为了达到这个目的，将对透视变换后的图像使用Otsu进行阈值化，来分离黑色和白色像素。</p>
<p>以下是一个透视变换后的图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/removeperspective.png" alt="removeperspective.png"></p>
<p>接下来，图像被划分为网格，和marker位数相同。在每个单元格里，我们统计黑色和白色的个数，决定这个单元格的比特位。</p>
<p><img src="http://docs.opencv.org/3.1.0/bitsextraction1.png" alt="bitsextraction1.png"></p>
<p>以下参数可以自定义这一过程：</p>
<ul>
<li><code>int markerBorderBits</code></li>
</ul>
<p>这一参数指定了marker边界的宽度。这和每个比特位的大小相关。因此，值为2意味着边界的长度是两个内部比特位的长度。</p>
<p>这一参数需要和你使用的Marker边界大小一致，边界的大小可以在绘制函数如 <code>drawMarker()</code>中设置。</p>
<p>​    缺省值：1</p>
<ul>
<li><code>double minOtsuStdDev</code></li>
</ul>
<p>这个值决定了进行Otsu的最小标准差的像素值。如果偏差很低，这可能意味着所有方形都是黑色的(或白色的），Ostu将不起作用。如果是这样的话，所有的比特位都根据平均值大于还是小于128被设为0或者1.</p>
<p>​    缺省值：5.0</p>
<ul>
<li><code>int perpectiveRemovePixelPerCell</code></li>
</ul>
<p>这一参数决定了透视变换后图像的像素数目（每个单元格，包含边界）。这是上图中红色正方形的大小。</p>
<p>例如，让我们假设我们在处理5x5比特位、边界为1比特位的marker（参见markerBorderBit）。然后，每一维的单元格/比特位的个数为：5 + 2* 1 = 7（边界需要被统计2次）。单元格总体大小为：7x7。</p>
<p>如果perpectiveRemovePixelPerCell的值为10，那么获取到的图像大小为10*7 = 70 -&gt; 70x70 </p>
<p>这一参数选择更大的值可以提升比特位的提取过程（在某一程度上），但是它同样也降低了性能。</p>
<p>​    缺省值：4</p>
<ul>
<li><code>double perspectiveRemoveIgnoredMarginPerCell</code></li>
</ul>
<p>当提取每个单元格的比特位时，需要统计黑色和白色的像素个数。一般而言，我们不推荐考虑单元格的所有像素。反之，最好忽略单元格的一些像素。</p>
<p>原因在于，透视变换之后，单元格的颜色不会完全分离，白色的单元格可能会混入一些黑色的单元格（反之亦然）。因此，最好忽略这些像素，以避免错误的像素计数。</p>
<p>例如，以下图像：</p>
<p><img src="http://docs.opencv.org/3.1.0/bitsextraction2.png" alt="bitsextraction2.png"></p>
<p>我们只考虑处在绿色正方形中的像素。我们可以在右边的图像中看到，最终的像素包含了邻域单元格更少的噪声。参数<code>perspectiveRemoveIgnoredMarginPerCell</code> 指明了红色和绿色正方形之间的距离。</p>
<p>这一参数是相对于单元格整体的大小的。例如，如果单元格的大小为40像素，这一参数的值为0.1，那么大小为40*0.1=4像素的边界将被剔除。这意味着每个单元格实际上要分析的像素大小为32x32，而不是40x40。</p>
<p>​     缺省值：0.13</p>
<h4 id="Marker-ID"><a href="#Marker-ID" class="headerlink" title="Marker ID"></a>Marker ID</h4><p>比特位提取之后，接下来的步骤是检查提取的编码是否属于这个marker字典，有必要的话，还需要做错误检测步骤。</p>
<ul>
<li><p><code>double maxErroneousBitsInBorderRate</code></p>
<p>marker边界的比特位应当是黑色的。这一参数指明了允许的边界出错比特位的个数。如，边界可以出现的白色比特位的最大值。它的大小相对于marker中的比特位总数。</p>
</li>
</ul>
<p>​    缺省值：0.35</p>
<ul>
<li><code>double errorCorrectionRate</code></li>
</ul>
<p>每个marker字典有一位可以纠正的理论最大值（Dictionary.maxCorrectionBits）。但是，这个值可以由<code>errorCorrectionRate</code> 参数来修改。</p>
<p> 例如，如果允许纠正的比特位（对于使用的字典）数目为6， <code>errorCorrectionRate</code>的值为0.5，那么实际上最大的可以纠正的比特位个数为6*0.5=3</p>
<p>这一值对减少错误容忍率以避免错误的位置识别很有帮助。</p>
<p>​    缺省值：0.6</p>
<h4 id="角落细化（Corner-Refinement）"><a href="#角落细化（Corner-Refinement）" class="headerlink" title="角落细化（Corner Refinement）"></a>角落细化（Corner Refinement）</h4><p>当我们检测完marker，并且验证了它们的id之后，最后要做的一步是在角落处的亚像素级的细化（参见OpenCV <code>cornerSubPix()</code>)</p>
<p>注意，这一步是可选的，仅在我们对marker角位置的准确性要求很高时才有意义。例如，pose的检测。这一步骤很耗费时间，所以默认下是不做的。</p>
<ul>
<li><code>bool doCornerRefinement</code></li>
</ul>
<p>这一参数决定了是否要进行角落亚像素级细化过程，如果对角点的准确性要求不高，可以不进行这一过程。</p>
<p>​    缺省值：false</p>
<ul>
<li><code>int cornerRefinementWinSize</code></li>
</ul>
<p>这一参数决定了亚像素级细化过程的窗口大小。</p>
<p>较大的值可以产生窗口区域内比较靠近的图像角，marker角会移动到一个不同的错误的地方。除此之外这还会影响到性能。</p>
<p>​    缺省值：5</p>
<ul>
<li><code>int cornerRefinementMaxIterations</code>, <code>doublecornerRefinementMinAccuracy</code></li>
</ul>
<p>这两个值决定了亚像素级细化过程的结束条件。cornerRefinementMaxIterations指明了迭代的最大次数，<code>cornerRefinementMinAccuracy</code> 是结束这一过程前的最小错误值。</p>
<p>如果迭代次数过高，这会影响到性能。此外，如果太小的话，亚像素级细化就基本没有发挥作用。</p>
<p>​    缺省值：</p>
<p><code>cornerRefinementMaxIterations</code>: 30, <code>cornerRefinementMinAccuracy</code>: 0.1</p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Windows10设置Windows terminal 当前目录打开</title>
    <url>/2020/09/15/%E5%85%B3%E4%BA%8EWindows10%E8%AE%BE%E7%BD%AEWindows-terminal-%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Win10-设置Windows-terminal-的特定目录打开设置"><a href="#关于Win10-设置Windows-terminal-的特定目录打开设置" class="headerlink" title="关于Win10 设置Windows terminal 的特定目录打开设置"></a>关于Win10 设置Windows terminal 的特定目录打开设置</h1><blockquote>
<p>参考博客:</p>
<p><a href="https://blog.csdn.net/andyL_05/article/details/105943820">https://blog.csdn.net/andyL_05/article/details/105943820</a></p>
<p>以下内容全部来自参考博客，如有侵权，请联系我删除，感谢</p>
</blockquote>
<h2 id="Windows-Terminal-简介"><a href="#Windows-Terminal-简介" class="headerlink" title="Windows Terminal 简介"></a>Windows Terminal 简介</h2><p>Windows Terminal 是微软推出的Windows端新的命令行工具，相比于之前一直被吐槽丑的command 和 powershell，Windows Terminal更加“现代”，界面好看，使用方便。</p>
<p>作为一款开源工具，repo位于<a href="https://github.com/Microsoft/Terminal">Windows Terminal</a>这里。当前（2020年5月初）版本为v0.11.1251.0，也是v1.0rc1，基本上就是预览版（preview）的最后一个版本了，在源码仓库里时间表上也可以看到<br><img src="https://img-blog.csdnimg.cn/20200506092739206.png" alt="在这里插入图片描述"><br>预计就是本月推出正式版的windows terminal了。<br>以往的预览版通常无法直接安装，需要从源码自行编译。目前已经可以直接从Microsoft Store里直接安装，不过要求系统版本<br><img src="https://img-blog.csdnimg.cn/20200506092952865.png" alt="在这里插入图片描述"><br>在1903或更新。</p>
<hr>
<h2 id="Windows-Terminal设置简要介绍"><a href="#Windows-Terminal设置简要介绍" class="headerlink" title="Windows Terminal设置简要介绍"></a>Windows Terminal设置简要介绍</h2><p>安装后直接打开的Windows Terminal是这个样子：<br><img src="https://img-blog.csdnimg.cn/20200506093128723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">注意到“Windows Terminal”这个名字实在是太长了，所以其实运行的可执行文件叫做 “wt”，按win键启动开始菜单输入 wt 就可以直接打开。<br>首先我们注意到字体就比cmd或者powershell好看了很多<br>点击右侧下拉菜单，可以选择新建其他的命令行，这里只是显示了默认的几个，实际上通过设置可以进行ssh连接到远程主机（不限于win系统）<br><img src="https://img-blog.csdnimg.cn/20200506093355250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置是通过setting.json实现的。<br>打开设置文件，可以看到一系列的设置选项：<br><img src="https://img-blog.csdnimg.cn/20200506093906551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>微软也有完善的文档支持这些设置，<a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md">使用者文档（user documentation）</a></p>
<p>以及 <a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md">setting.json文档</a></p>
<p>可以参考完成设置，我这里就不多说了。<br>简单说一下default里面的设置，就是默认打开的终端设置，这里不光可以设置背景颜色，字体等，还可以选择自定义的图片作为背景，比如我就设置了：<br><img src="https://img-blog.csdnimg.cn/2020050609424670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZHlMXzA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样的背景，感觉使用起来还是蛮有感觉的。</p>
<p>list内部就是自定义的profiles，可以配置打开不同的终端时的设置。guid就是全局唯一标识符，可以从工具自动生成。其他设置参考文档中的设置即可。</p>
<p>背景的独立设置，不仅美观，而且能够帮助我们直观的区分所处的环境，避免输入错误的命令导致严重后果。</p>
<hr>
<h2 id="Windows-Terminal-当前路径打开"><a href="#Windows-Terminal-当前路径打开" class="headerlink" title="Windows Terminal 当前路径打开"></a>Windows Terminal 当前路径打开</h2><p>熟悉cmd或powershell的朋友们应该知道，如果在文件夹地址栏直接输出 cmd 或 powershell 就可以在文件夹所处路径直接打开命令行终端，而不需要启动后再切换路径，对于Windows系统来说，由于磁盘分区、中文路径、反斜杠等因素，切换路径比起linux更让人烦一点。<br>除此之外，通过修改注册表也能够使用shift+右键选择此处启动powershell，这些都是快速在当前路径启动命令行的方式，那么Windows Terminal能不能这么做呢？</p>
<p>测试发现直接在文件夹地址栏输入wt（因为这个可执行文件就是wt.exe而不是完整名字）确实启动了Windows Terminal，但是初始路径位置并不是当前的文件夹。这里参考我们上面的设置，default里增加一行 “startingDirectory”: “.”，也就是打开目录为当前路径，就可以做到地址栏输入WT在特定目录启动Windows terminal了。</p>
<p>不过这里仍然有一些<strong>问题</strong>：<br>1· 首先如果不加这一行或者不对startingDirectory设置，那么默认启动路径是C:\Users\username这里，无论是双击wt.exe还是地址栏还是开始菜单启动都是这样，设置了之后默认位置就变成了C:\WINDOWS\system32这里，除了地址栏输入wt能够在特定目录启动外，其他运行Windows Terminal的方式一律在这里打开了。<br>2· 另外如果已经有Windows Terminal的窗口打开了，再次启动或者通过地址栏运行wt都会新建一个窗口而不是原来窗口的新标签页，并且标签页不能像浏览器一样拖进拖出；同时在某个路径下打开WT的窗口，点击右边“+”新建的标签页一定在同一个路径。一开始发现这个有点不爽，但是仔细想想可能这样做更实用一些，如果所有终端页面都是可拖动的标签页也难免混淆。<br>以上就是特定目录启动wt的一种方法，setting.json增加相应设置，然后地址栏输入wt按下回车即可。另外在文件夹中，快捷键 ctrl+L将焦点锁定地址栏，这样完全不需要鼠标，听起来有点geek了。</p>
<p>除此之外，通过自己建立注册表，也可以实现类似powershell的右键打开方式，具体方法参考<a href="https://github.com/microsoft/terminal/issues/1060">这个issue</a></p>
<p>由于我本人更喜欢地址栏打开方式，右键打开的配置就不赘述了，通过上述链接查看即可。</p>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>Windows terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub上传项目文件</title>
    <url>/2020/09/15/GitHub%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="在GitHub上，上传项目文件"><a href="#在GitHub上，上传项目文件" class="headerlink" title="在GitHub上，上传项目文件"></a>在GitHub上，上传项目文件</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>新建仓库</li>
<li>将仓库下载到本地</li>
<li>把要上传的项目文件夹，放进下载的仓库文件夹中</li>
<li>使用以下代码push到GitHub：</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .        </span><br><span class="line">git commit  -m  &quot;提交信息&quot;  </span><br><span class="line">git push -u origin master   </span><br></pre></td></tr></table></figure></h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>对于体积较大的项目文件，可能会遇到如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: the remote end hung up unexpectedly Everything up-to-date</span><br></pre></td></tr></table></figure>
<p><strong>错误原因</strong>：</p>
<p>文件太大</p>
<p><strong>解决办法</strong> :</p>
<blockquote>
<p>转载自<a href="https://blog.csdn.net/qq_21770005/article/details/78733008">https://blog.csdn.net/qq_21770005/article/details/78733008</a></p>
</blockquote>
<ul>
<li>windows:</li>
</ul>
<p>在 .git/config 文件中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">postBuffer &#x3D; 524288000</span><br></pre></td></tr></table></figure>
<ul>
<li>linux:</li>
</ul>
<p>在 .git/config 文件中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux:</span><br><span class="line">git config http.postBuffer 524288000</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Aruco实现AR梳理_1</title>
    <url>/2020/09/14/Aruco%E5%AE%9E%E7%8E%B0AR%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Aruco-AR过程梳理-1"><a href="#Aruco-AR过程梳理-1" class="headerlink" title="Aruco AR过程梳理_1"></a>Aruco AR过程梳理_1</h1><hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>目的</strong>：在<em>VS2019</em>运行的<em>OpenGL</em>窗口上，<em>generated virtual computer generated 3D graphics on the realistic environment , i.e.</em> 在<em>OpenGL</em>的相机位置看到<em>AR</em>效果</p>
<p><strong>思路</strong>：</p>
<p><strong>OpenGL的世界中有虚拟相机，现实世界中有真实相机，只要将两个世界的世界坐标重合，相机位置重合，分别渲染虚拟模型与真实场景，即可达到AR效果</strong></p>
<ul>
<li>生成<em>OpenGL</em>窗口</li>
<li>将外部相机捕获的<em>frame</em>传递到<em>OpenGL</em>中，作为背景</li>
<li>定义虚拟的三维物体，将其渲染</li>
<li>相机捕获的背景，不需要透视变换，正交变换即可</li>
<li><p>虚拟物体，需要<em>MVP（model transform, view transform, projection transform）</em>变换</p>
</li>
<li><p>世界坐标系重合，使用OpenCV去做</p>
</li>
</ul>
<hr>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>两个世界的世界坐标系要完全重合，相机位置完全重合</p>
<blockquote>
<p>OpenGL中的世界坐标与虚拟物体局部坐标系的变换为Model Transform，世界坐标系与相机坐标系之间的变换为View Transform；</p>
<p>OpenCV中的aruco，将世界坐标系注册在marker上；<strong>Model Transform 保持不变（即虚拟物体的位置保持不变）</strong> </p>
</blockquote>
<p><em>OpenGL</em> 的摄像机需要实时改变自身位置与姿态，数据来自于<em>opencv</em> 相机标定<del>外参</del> </p>
<blockquote>
<p>相机标定完成后，得到的是相机内参与畸变参数，对于特定的相机来说，都是不变量，因此，相机标定只需要一次即可</p>
<p><strong>通过aruco的marker，获得相机的外参（重点），并实时传入OpenGL的View Transform矩阵</strong> </p>
<blockquote>
<p>用 aruco 的 marker 检测相机位姿时，是从marker坐标系（marker中心）到相机坐标系的一个三维变换矩阵</p>
</blockquote>
<p><strong>相机内参的作用：用来构造Projection Transform</strong> </p>
</blockquote>
<p><em>OpenGL</em> 中的背景图也需要实时改变</p>
<blockquote>
<p>将OpenCV捕获的图像，实时正交投影至背景</p>
</blockquote>
<hr>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ul>
<li><p>虚拟模型没有出现在规定的世界原点处；</p>
</li>
<li><p><del>如何将三维模型直接导入OpenGL，而不是一个一个的定义顶点坐标</del> </p>
<blockquote>
<p>解决方法：导入Assimp库，Assimp能够导入很多种不同的模型文件格式（并也能够导出部分的格式），它会将所有的模型数据加载至Assimp的通用数据结构中。当Assimp加载完模型之后，我们就能够从Assimp的数据结构中提取我们所需的所有数据了</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200913163957.png" alt=""></p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>ArucoDemo-2</title>
    <url>/2020/08/23/ArucoDemo-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/95796560">https://blog.csdn.net/qq_33446100/article/details/95796560</a></p>
</blockquote>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawCubeWireframe</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputOutputArray image, cv::InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputArray distCoeffs, cv::InputArray rvec, cv::InputArray tvec,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">float</span> l</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> wait_time = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">float</span> actual_marker_l = <span class="number">0.101</span>; <span class="comment">// this should be in meters</span></span><br><span class="line"></span><br><span class="line">	<span class="function">VideoWriter <span class="title">writer</span><span class="params">(<span class="string">&quot;VideoTest.avi&quot;</span>, VideoWriter::fourcc(<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), <span class="number">20.0</span>, Size(<span class="number">640</span>, <span class="number">480</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">	cv::Mat image, image_copy;</span><br><span class="line">	cv::Mat camera_matrix, dist_coeffs;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">ostringstream</span> vector_to_marker;</span><br><span class="line"></span><br><span class="line">	cv::VideoCapture in_video;</span><br><span class="line">	in_video.open(<span class="number">0</span>);</span><br><span class="line">	cv::Ptr&lt;cv::aruco::Dictionary&gt; dictionary =</span><br><span class="line">		cv::aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">	<span class="function">cv::FileStorage <span class="title">fs</span><span class="params">(<span class="string">&quot;camera.yml&quot;</span>, cv::FileStorage::READ)</span></span>;</span><br><span class="line"></span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; camera_matrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; dist_coeffs;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;camera_matrix\n&quot;</span></span><br><span class="line">		&lt;&lt; camera_matrix &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\ndist coeffs\n&quot;</span></span><br><span class="line">		&lt;&lt; dist_coeffs &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> frame_width = <span class="number">480</span>;</span><br><span class="line">	<span class="keyword">int</span> frame_height = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (in_video.grab())</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		in_video.retrieve(image);</span><br><span class="line">		image.copyTo(image_copy);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt;&gt; corners;</span><br><span class="line">		cv::aruco::detectMarkers(image, dictionary, corners, ids);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// if at least one marker detected</span></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::aruco::drawDetectedMarkers(image_copy, corners, ids);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Vec3d&gt; rvecs, tvecs;</span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(</span><br><span class="line">				corners, actual_marker_l, camera_matrix, dist_coeffs,</span><br><span class="line">				rvecs, tvecs</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// draw axis for each marker</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.size(); i++)</span><br><span class="line">			&#123;</span><br><span class="line">				drawCubeWireframe(</span><br><span class="line">					image_copy, camera_matrix, dist_coeffs, rvecs[i], tvecs[i],</span><br><span class="line">					actual_marker_l</span><br><span class="line">				);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;x: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">0</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">30</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;y: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">1</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">50</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">				vector_to_marker.str(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">				vector_to_marker &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">4</span>)</span><br><span class="line">					&lt;&lt; <span class="string">&quot;z: &quot;</span> &lt;&lt; <span class="built_in">std</span>::setw(<span class="number">8</span>) &lt;&lt; tvecs[<span class="number">0</span>](<span class="number">2</span>);</span><br><span class="line">				cv::putText(image_copy, vector_to_marker.str(),</span><br><span class="line">					Point(<span class="number">10</span>, <span class="number">70</span>), cv::FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>,</span><br><span class="line">					Scalar(<span class="number">0</span>, <span class="number">252</span>, <span class="number">124</span>), <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;Pose estimation&quot;</span>, image_copy);</span><br><span class="line"></span><br><span class="line">		writer &lt;&lt; image_copy;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)cv::waitKey(wait_time);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawCubeWireframe</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputOutputArray image, cv::InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">	cv::InputArray distCoeffs, cv::InputArray rvec, cv::InputArray tvec,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">float</span> l</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	CV_Assert(</span><br><span class="line">		image.getMat().total() != <span class="number">0</span> &amp;&amp;</span><br><span class="line">		(image.getMat().channels() == <span class="number">1</span> || image.getMat().channels() == <span class="number">3</span>)</span><br><span class="line">	);</span><br><span class="line">	CV_Assert(l &gt; <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">float</span> half_l = l / <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// project cube points</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point3f&gt; axisPoints;</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, -half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, -half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, half_l, l));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(half_l, -half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, -half_l, <span class="number">0</span>));</span><br><span class="line">	axisPoints.push_back(cv::Point3f(-half_l, half_l, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; imagePoints;</span><br><span class="line">	projectPoints(</span><br><span class="line">		axisPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// draw cube edges lines</span></span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">1</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">3</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">0</span>], imagePoints[<span class="number">4</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">1</span>], imagePoints[<span class="number">2</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">1</span>], imagePoints[<span class="number">5</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">2</span>], imagePoints[<span class="number">3</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">2</span>], imagePoints[<span class="number">6</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">3</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">4</span>], imagePoints[<span class="number">5</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">4</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">5</span>], imagePoints[<span class="number">6</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">	cv::line(image, imagePoints[<span class="number">6</span>], imagePoints[<span class="number">7</span>], cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200823075820.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco Demo_1</title>
    <url>/2020/08/22/Aruco-Demo-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89209901">https://blog.csdn.net/qq_33446100/article/details/89209901</a></p>
</blockquote>
<a id="more"></a>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>Aruco Demo_1 是在<strong>board</strong>板上显示图片，在相机标定的基础上完成</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\videoio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::aruco;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_NAME <span class="meta-string">&quot;ARDemo&quot;</span></span></span><br><span class="line"></span><br><span class="line">Mat camMatrix, distCoeffs, srcImage;</span><br><span class="line"><span class="keyword">float</span> markerLength = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">readCameraParameters</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename, Mat&amp; camMatrix, Mat&amp; distCoeffs)</span> </span>&#123;</span><br><span class="line">	<span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::READ)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; camMatrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; distCoeffs;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_image</span><span class="params">(Mat image, Mat&amp; frame, Vec3d&amp; rvec, Vec3d&amp; tvec)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;Point3f&gt; points;</span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2f&gt; imagePoints;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> l = markerLength * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">	points.emplace_back(-l, l, <span class="number">0</span>);<span class="comment">//确定每个marker对应的坐标系中四个顶点的位置</span></span><br><span class="line">	points.emplace_back(l, l, <span class="number">0</span>);<span class="comment">//这个坐标是上一篇中绘制出来的坐标轴中对应的坐标</span></span><br><span class="line">	points.emplace_back(l, -l, <span class="number">0</span>);</span><br><span class="line">	points.emplace_back(-l, -l, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过相机内参、外参将3d坐标映射到图像坐标系</span></span><br><span class="line">	cv::projectPoints(points, rvec, tvec, camMatrix, distCoeffs, imagePoints);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> x = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)imagePoints[<span class="number">0</span>].x;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> y = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)imagePoints[<span class="number">0</span>].y;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2f&gt; corners;</span><br><span class="line">	corners.emplace_back(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	corners.emplace_back(image.cols, <span class="number">0</span>);</span><br><span class="line">	corners.emplace_back(image.cols, image.rows);</span><br><span class="line">	corners.emplace_back(<span class="number">0</span>, image.rows);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从四对对应点计算透视变换</span></span><br><span class="line">	cv::Mat T = getPerspectiveTransform(corners, imagePoints);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将透视变换应用于image</span></span><br><span class="line">	Mat warpedImg;</span><br><span class="line">	cv::warpPerspective(image, warpedImg, T, frame.size());</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;Point2i&gt; pts;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : imagePoints) &#123;</span><br><span class="line">		pts.emplace_back((<span class="keyword">int</span>)i.x, (<span class="keyword">int</span>)i.y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用全0填充凸多边形</span></span><br><span class="line">	cv::fillConvexPoly(frame, pts, cv::Scalar::all(<span class="number">0</span>), cv::LINE_AA);</span><br><span class="line">	<span class="comment">//或运算</span></span><br><span class="line">	cv::bitwise_or(warpedImg, frame, frame);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*cout &lt;&lt; points &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; imagePoints &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; corners &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; pts &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	[-50, 50, 0;</span></span><br><span class="line"><span class="comment">	 50, 50, 0;</span></span><br><span class="line"><span class="comment">	 50, -50, 0;</span></span><br><span class="line"><span class="comment">	 -50, -50, 0]</span></span><br><span class="line"><span class="comment">	[98.558197, 147.89699;</span></span><br><span class="line"><span class="comment">	 131.39151, 168.23427;</span></span><br><span class="line"><span class="comment">	 108.73455, 203.80612;</span></span><br><span class="line"><span class="comment">	 75.317993, 184.06393]</span></span><br><span class="line"><span class="comment">	[0, 0;</span></span><br><span class="line"><span class="comment">	 100, 0;</span></span><br><span class="line"><span class="comment">	 100, 100;</span></span><br><span class="line"><span class="comment">	 0, 100]</span></span><br><span class="line"><span class="comment">	[98, 147;</span></span><br><span class="line"><span class="comment">	 131, 168;</span></span><br><span class="line"><span class="comment">	 108, 203;</span></span><br><span class="line"><span class="comment">	 75, 184]</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//waitKey();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">VideoCapture <span class="title">inputVideo</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="comment">//VideoWriter writer(&quot;VideoTest.avi&quot;, VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 25.0, Size(640, 480));</span></span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> readOk = readCameraParameters(<span class="string">&quot;camera.yml&quot;</span>, camMatrix, distCoeffs);</span><br><span class="line">	<span class="keyword">if</span> (!readOk) &#123;</span><br><span class="line">		<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Invalid camera file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; camMatrix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; distCoeffs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	srcImage = imread(<span class="string">&quot;image.png&quot;</span>);</span><br><span class="line">	resize(srcImage, srcImage, Size(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">	namedWindow(WINDOW_NAME);</span><br><span class="line"></span><br><span class="line">	Mat frame;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">		inputVideo &gt;&gt; frame;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point2f&gt;&gt; corners;</span><br><span class="line"></span><br><span class="line">		aruco::detectMarkers(frame, dictionary, corners, ids);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs;<span class="comment">//得到旋转矢量以及平移矢量</span></span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">100</span>, camMatrix, distCoeffs, rvecs, tvecs);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.size(); i++) &#123;</span><br><span class="line">				draw_image(srcImage, frame, rvecs[i], tvecs[i]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//writer &lt;&lt; frame;</span></span><br><span class="line">		&#125;</span><br><span class="line">		cv::imshow(WINDOW_NAME, frame);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	inputVideo.release();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822193805.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco 相机标定</title>
    <url>/2020/08/22/Aruco-%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89192005">https://blog.csdn.net/qq_33446100/article/details/89192005</a></p>
<p><a href="https://mp.weixin.qq.com/s/BT7V4de8p8tpJEcV7acwHA">https://mp.weixin.qq.com/s/BT7V4de8p8tpJEcV7acwHA</a></p>
</blockquote>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Azure Kinect 相机；</p>
<h2 id="步骤一：生成ChAruco-Aruco标定板"><a href="#步骤一：生成ChAruco-Aruco标定板" class="headerlink" title="步骤一：生成ChAruco(Aruco标定板)"></a>步骤一：生成ChAruco(Aruco标定板)</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">By downloading, copying, installing or using the software you agree to this</span></span><br><span class="line"><span class="comment">license. If you do not agree to this license, do not download, install,</span></span><br><span class="line"><span class="comment">copy or use the software.</span></span><br><span class="line"><span class="comment">                          License Agreement</span></span><br><span class="line"><span class="comment">               For Open Source Computer Vision Library</span></span><br><span class="line"><span class="comment">                       (3-clause BSD License)</span></span><br><span class="line"><span class="comment">Copyright (C) 2013, OpenCV Foundation, all rights reserved.</span></span><br><span class="line"><span class="comment">Third party copyrights are property of their respective owners.</span></span><br><span class="line"><span class="comment">Redistribution and use in source and binary forms, with or without modification,</span></span><br><span class="line"><span class="comment">are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">  * Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">  * Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">    and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">  * Neither the names of the copyright holders nor the names of the contributors</span></span><br><span class="line"><span class="comment">    may be used to endorse or promote products derived from this software</span></span><br><span class="line"><span class="comment">    without specific prior written permission.</span></span><br><span class="line"><span class="comment">This software is provided by the copyright holders and contributors &quot;as is&quot; and</span></span><br><span class="line"><span class="comment">any express or implied warranties, including, but not limited to, the implied</span></span><br><span class="line"><span class="comment">warranties of merchantability and fitness for a particular purpose are</span></span><br><span class="line"><span class="comment">disclaimed. In no event shall copyright holders or contributors be liable for</span></span><br><span class="line"><span class="comment">any direct, indirect, incidental, special, exemplary, or consequential damages</span></span><br><span class="line"><span class="comment">(including, but not limited to, procurement of substitute goods or services;</span></span><br><span class="line"><span class="comment">loss of use, data, or profits; or business interruption) however caused</span></span><br><span class="line"><span class="comment">and on any theory of liability, whether in contract, strict liability,</span></span><br><span class="line"><span class="comment">or tort (including negligence or otherwise) arising in any way out of</span></span><br><span class="line"><span class="comment">the use of this software, even if advised of the possibility of such damage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/aruco/charuco.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* about = <span class="string">&quot;Create a ChArUco board image&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys =</span><br><span class="line">        <span class="string">&quot;&#123;@outfile |&lt;none&gt; | Output image &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;w        |       | Number of squares in X direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;h        |       | Number of squares in Y direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sl       |       | Square side length (in pixels) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ml       |       | Marker side length (in pixels) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;d        |       | dictionary: DICT_4X4_50=0, DICT_4X4_100=1, DICT_4X4_250=2,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_4X4_1000=3, DICT_5X5_50=4, DICT_5X5_100=5, DICT_5X5_250=6, DICT_5X5_1000=7, &quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_6X6_50=8, DICT_6X6_100=9, DICT_6X6_250=10, DICT_6X6_1000=11, DICT_7X7_50=12,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_7X7_100=13, DICT_7X7_250=14, DICT_7X7_1000=15, DICT_ARUCO_ORIGINAL = 16&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;m        |       | Margins size (in pixels). Default is (squareLength-markerLength) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;bb       | 1     | Number of bits in marker borders &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;si       | false | show generated image &#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    parser.about(about);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">7</span>) &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> squaresX = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squaresY = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squareLength = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;sl&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> markerLength = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ml&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> dictionaryId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> margins = squareLength - markerLength;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;m&quot;</span>)) &#123;</span><br><span class="line">        margins = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> borderBits = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    <span class="keyword">bool</span> showImage = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;si&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String out = parser.get&lt;String&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parser.check()) &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">        aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">    Size imageSize;</span><br><span class="line">    imageSize.width = squaresX * squareLength + <span class="number">2</span> * margins;</span><br><span class="line">    imageSize.height = squaresY * squareLength + <span class="number">2</span> * margins;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::CharucoBoard&gt; board = aruco::CharucoBoard::create(squaresX, squaresY, (<span class="keyword">float</span>)squareLength,</span><br><span class="line">        (<span class="keyword">float</span>)markerLength, dictionary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show created board</span></span><br><span class="line">    Mat boardImage;</span><br><span class="line">    board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showImage) &#123;</span><br><span class="line">        imshow(<span class="string">&quot;board&quot;</span>, boardImage);</span><br><span class="line">        waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    imwrite(out, boardImage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>使用Visual Studio要在属性中添加以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;chboard.png&quot; -w&#x3D;5 -h&#x3D;7 -sl&#x3D;200 -ml&#x3D;120 -d&#x3D;10</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>在源代码目录生成<strong>chboard.png</strong>图片，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822174733.png" alt=""></p>
<h2 id="步骤二：相机标定"><a href="#步骤二：相机标定" class="headerlink" title="步骤二：相机标定"></a>步骤二：相机标定</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">By downloading, copying, installing or using the software you agree to this</span></span><br><span class="line"><span class="comment">license. If you do not agree to this license, do not download, install,</span></span><br><span class="line"><span class="comment">copy or use the software.</span></span><br><span class="line"><span class="comment">                          License Agreement</span></span><br><span class="line"><span class="comment">               For Open Source Computer Vision Library</span></span><br><span class="line"><span class="comment">                       (3-clause BSD License)</span></span><br><span class="line"><span class="comment">Copyright (C) 2013, OpenCV Foundation, all rights reserved.</span></span><br><span class="line"><span class="comment">Third party copyrights are property of their respective owners.</span></span><br><span class="line"><span class="comment">Redistribution and use in source and binary forms, with or without modification,</span></span><br><span class="line"><span class="comment">are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">  * Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">  * Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">    this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">    and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">  * Neither the names of the copyright holders nor the names of the contributors</span></span><br><span class="line"><span class="comment">    may be used to endorse or promote products derived from this software</span></span><br><span class="line"><span class="comment">    without specific prior written permission.</span></span><br><span class="line"><span class="comment">This software is provided by the copyright holders and contributors &quot;as is&quot; and</span></span><br><span class="line"><span class="comment">any express or implied warranties, including, but not limited to, the implied</span></span><br><span class="line"><span class="comment">warranties of merchantability and fitness for a particular purpose are</span></span><br><span class="line"><span class="comment">disclaimed. In no event shall copyright holders or contributors be liable for</span></span><br><span class="line"><span class="comment">any direct, indirect, incidental, special, exemplary, or consequential damages</span></span><br><span class="line"><span class="comment">(including, but not limited to, procurement of substitute goods or services;</span></span><br><span class="line"><span class="comment">loss of use, data, or profits; or business interruption) however caused</span></span><br><span class="line"><span class="comment">and on any theory of liability, whether in contract, strict liability,</span></span><br><span class="line"><span class="comment">or tort (including negligence or otherwise) arising in any way out of</span></span><br><span class="line"><span class="comment">the use of this software, even if advised of the possibility of such damage.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/calib3d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/aruco/charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* about =</span><br><span class="line">        <span class="string">&quot;Calibration using a ChArUco board\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  To capture a frame for calibration, press &#x27;c&#x27;,\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  If input comes from video, press any key for next frame\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  To finish capturing, press &#x27;ESC&#x27; key and calibration starts.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys =</span><br><span class="line">        <span class="string">&quot;&#123;w        |       | Number of squares in X direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;h        |       | Number of squares in Y direction &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sl       |       | Square side length (in meters) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ml       |       | Marker side length (in meters) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;d        |       | dictionary: DICT_4X4_50=0, DICT_4X4_100=1, DICT_4X4_250=2,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_4X4_1000=3, DICT_5X5_50=4, DICT_5X5_100=5, DICT_5X5_250=6, DICT_5X5_1000=7, &quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_6X6_50=8, DICT_6X6_100=9, DICT_6X6_250=10, DICT_6X6_1000=11, DICT_7X7_50=12,&quot;</span></span><br><span class="line">        <span class="string">&quot;DICT_7X7_100=13, DICT_7X7_250=14, DICT_7X7_1000=15, DICT_ARUCO_ORIGINAL = 16&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@outfile |&lt;none&gt; | Output file with calibrated camera parameters &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;v        |       | Input from video file, if ommited, input comes from camera &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;ci       | 0     | Camera id if input doesnt come from video (-v) &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;dp       |       | File of marker detector parameters &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;rs       | false | Apply refind strategy &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;zt       | false | Assume zero tangential distortion &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;a        |       | Fix aspect ratio (fx/fy) to this value &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;pc       | false | Fix the principal point at the center &#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;sc       | false | Show detected chessboard corners after calibration &#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">readDetectorParameters</span><span class="params">(<span class="built_in">string</span> filename, Ptr&lt;aruco::DetectorParameters&gt;&amp; params)</span> </span>&#123;</span><br><span class="line">    <span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::READ)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeMin&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeMin;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeMax&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeMax;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshWinSizeStep&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshWinSizeStep;</span><br><span class="line">    fs[<span class="string">&quot;adaptiveThreshConstant&quot;</span>] &gt;&gt; params-&gt;adaptiveThreshConstant;</span><br><span class="line">    fs[<span class="string">&quot;minMarkerPerimeterRate&quot;</span>] &gt;&gt; params-&gt;minMarkerPerimeterRate;</span><br><span class="line">    fs[<span class="string">&quot;maxMarkerPerimeterRate&quot;</span>] &gt;&gt; params-&gt;maxMarkerPerimeterRate;</span><br><span class="line">    fs[<span class="string">&quot;polygonalApproxAccuracyRate&quot;</span>] &gt;&gt; params-&gt;polygonalApproxAccuracyRate;</span><br><span class="line">    fs[<span class="string">&quot;minCornerDistanceRate&quot;</span>] &gt;&gt; params-&gt;minCornerDistanceRate;</span><br><span class="line">    fs[<span class="string">&quot;minDistanceToBorder&quot;</span>] &gt;&gt; params-&gt;minDistanceToBorder;</span><br><span class="line">    fs[<span class="string">&quot;minMarkerDistanceRate&quot;</span>] &gt;&gt; params-&gt;minMarkerDistanceRate;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMethod&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMethod;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementWinSize&quot;</span>] &gt;&gt; params-&gt;cornerRefinementWinSize;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMaxIterations&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMaxIterations;</span><br><span class="line">    fs[<span class="string">&quot;cornerRefinementMinAccuracy&quot;</span>] &gt;&gt; params-&gt;cornerRefinementMinAccuracy;</span><br><span class="line">    fs[<span class="string">&quot;markerBorderBits&quot;</span>] &gt;&gt; params-&gt;markerBorderBits;</span><br><span class="line">    fs[<span class="string">&quot;perspectiveRemovePixelPerCell&quot;</span>] &gt;&gt; params-&gt;perspectiveRemovePixelPerCell;</span><br><span class="line">    fs[<span class="string">&quot;perspectiveRemoveIgnoredMarginPerCell&quot;</span>] &gt;&gt; params-&gt;perspectiveRemoveIgnoredMarginPerCell;</span><br><span class="line">    fs[<span class="string">&quot;maxErroneousBitsInBorderRate&quot;</span>] &gt;&gt; params-&gt;maxErroneousBitsInBorderRate;</span><br><span class="line">    fs[<span class="string">&quot;minOtsuStdDev&quot;</span>] &gt;&gt; params-&gt;minOtsuStdDev;</span><br><span class="line">    fs[<span class="string">&quot;errorCorrectionRate&quot;</span>] &gt;&gt; params-&gt;errorCorrectionRate;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">saveCameraParams</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename, Size imageSize, <span class="keyword">float</span> aspectRatio, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Mat&amp; cameraMatrix, <span class="keyword">const</span> Mat&amp; distCoeffs, <span class="keyword">double</span> totalAvgErr)</span> </span>&#123;</span><br><span class="line">    <span class="function">FileStorage <span class="title">fs</span><span class="params">(filename, FileStorage::WRITE)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> tt;</span><br><span class="line">    time(&amp;tt);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">t2</span> =</span> localtime(&amp;tt);</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    strftime(buf, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>, <span class="string">&quot;%c&quot;</span>, t2);</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;calibration_time&quot;</span> &lt;&lt; buf;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;image_width&quot;</span> &lt;&lt; imageSize.width;</span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;image_height&quot;</span> &lt;&lt; imageSize.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; CALIB_FIX_ASPECT_RATIO) fs &lt;&lt; <span class="string">&quot;aspectRatio&quot;</span> &lt;&lt; aspectRatio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">&quot;flags: %s%s%s%s&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_USE_INTRINSIC_GUESS ? <span class="string">&quot;+use_intrinsic_guess&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_FIX_ASPECT_RATIO ? <span class="string">&quot;+fix_aspectRatio&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_FIX_PRINCIPAL_POINT ? <span class="string">&quot;+fix_principal_point&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">            flags &amp; CALIB_ZERO_TANGENT_DIST ? <span class="string">&quot;+zero_tangent_dist&quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;flags&quot;</span> &lt;&lt; flags;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;camera_matrix&quot;</span> &lt;&lt; cameraMatrix;</span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;distortion_coefficients&quot;</span> &lt;&lt; distCoeffs;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; <span class="string">&quot;avg_reprojection_error&quot;</span> &lt;&lt; totalAvgErr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    parser.about(about);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">7</span>) &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> squaresX = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> squaresY = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">    <span class="keyword">float</span> squareLength = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;sl&quot;</span>);</span><br><span class="line">    <span class="keyword">float</span> markerLength = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;ml&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> dictionaryId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> outputFile = parser.get&lt;<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> showChessboardCorners = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;sc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> calibrationFlags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> aspectRatio = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">        calibrationFlags |= CALIB_FIX_ASPECT_RATIO;</span><br><span class="line">        aspectRatio = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;zt&quot;</span>)) calibrationFlags |= CALIB_ZERO_TANGENT_DIST;</span><br><span class="line">    <span class="keyword">if</span> (parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;pc&quot;</span>)) calibrationFlags |= CALIB_FIX_PRINCIPAL_POINT;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::DetectorParameters&gt; detectorParams = aruco::DetectorParameters::create();</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;dp&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">bool</span> readOk = readDetectorParameters(parser.get&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;dp&quot;</span>), detectorParams);</span><br><span class="line">        <span class="keyword">if</span> (!readOk) &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Invalid detector parameters file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> refindStrategy = parser.get&lt;<span class="keyword">bool</span>&gt;(<span class="string">&quot;rs&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> camId = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ci&quot;</span>);</span><br><span class="line">    String video;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;v&quot;</span>)) &#123;</span><br><span class="line">        video = parser.get&lt;String&gt;(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parser.check()) &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    VideoCapture inputVideo;</span><br><span class="line">    <span class="keyword">int</span> waitTime;</span><br><span class="line">    <span class="keyword">if</span> (!video.empty()) &#123;</span><br><span class="line">        inputVideo.open(video);</span><br><span class="line">        waitTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        inputVideo.open(camId);</span><br><span class="line">        waitTime = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">        aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create charuco board object</span></span><br><span class="line">    Ptr&lt;aruco::CharucoBoard&gt; charucoboard =</span><br><span class="line">        aruco::CharucoBoard::create(squaresX, squaresY, squareLength, markerLength, dictionary);</span><br><span class="line">    Ptr&lt;aruco::Board&gt; board = charucoboard.staticCast&lt;aruco::Board&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// collect data from each frame</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; &gt; allCorners;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; &gt; allIds;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allImgs;</span><br><span class="line">    Size imgSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">        Mat image, imageCopy;</span><br><span class="line">        inputVideo.retrieve(image);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; ids;</span><br><span class="line">        <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; corners, rejected;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// detect markers</span></span><br><span class="line">        aruco::detectMarkers(image, dictionary, corners, ids, detectorParams, rejected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// refind strategy to detect more markers</span></span><br><span class="line">        <span class="keyword">if</span> (refindStrategy) aruco::refineDetectedMarkers(image, board, corners, ids, rejected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// interpolate charuco corners</span></span><br><span class="line">        Mat currentCharucoCorners, currentCharucoIds;</span><br><span class="line">        <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">            aruco::interpolateCornersCharuco(corners, ids, image, charucoboard, currentCharucoCorners,</span><br><span class="line">                currentCharucoIds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw results</span></span><br><span class="line">        image.copyTo(imageCopy);</span><br><span class="line">        <span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) aruco::drawDetectedMarkers(imageCopy, corners);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentCharucoCorners.total() &gt; <span class="number">0</span>)</span><br><span class="line">            aruco::drawDetectedCornersCharuco(imageCopy, currentCharucoCorners, currentCharucoIds);</span><br><span class="line"></span><br><span class="line">        putText(imageCopy, <span class="string">&quot;Press &#x27;c&#x27; to add current frame. &#x27;ESC&#x27; to finish and calibrate&quot;</span>,</span><br><span class="line">            Point(<span class="number">10</span>, <span class="number">20</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line">        <span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(waitTime);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&#x27;c&#x27;</span> &amp;&amp; ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Frame captured&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            allCorners.push_back(corners);</span><br><span class="line">            allIds.push_back(ids);</span><br><span class="line">            allImgs.push_back(image);</span><br><span class="line">            imgSize = image.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (allIds.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Not enough captures for calibration&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat cameraMatrix, distCoeffs;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; rvecs, tvecs;</span><br><span class="line">    <span class="keyword">double</span> repError;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (calibrationFlags &amp; CALIB_FIX_ASPECT_RATIO) &#123;</span><br><span class="line">        cameraMatrix = Mat::eye(<span class="number">3</span>, <span class="number">3</span>, CV_64F);</span><br><span class="line">        cameraMatrix.at&lt; <span class="keyword">double</span> &gt;(<span class="number">0</span>, <span class="number">0</span>) = aspectRatio;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare data for calibration</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt; Point2f &gt; &gt; allCornersConcatenated;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; allIdsConcatenated;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; markerCounterPerFrame;</span><br><span class="line">    markerCounterPerFrame.reserve(allCorners.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allCorners.size(); i++) &#123;</span><br><span class="line">        markerCounterPerFrame.push_back((<span class="keyword">int</span>)allCorners[i].size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; allCorners[i].size(); j++) &#123;</span><br><span class="line">            allCornersConcatenated.push_back(allCorners[i][j]);</span><br><span class="line">            allIdsConcatenated.push_back(allIds[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// calibrate camera using aruco markers</span></span><br><span class="line">    <span class="keyword">double</span> arucoRepErr;</span><br><span class="line">    arucoRepErr = aruco::calibrateCameraAruco(allCornersConcatenated, allIdsConcatenated,</span><br><span class="line">        markerCounterPerFrame, board, imgSize, cameraMatrix,</span><br><span class="line">        distCoeffs, noArray(), noArray(), calibrationFlags);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare data for charuco calibration</span></span><br><span class="line">    <span class="keyword">int</span> nFrames = (<span class="keyword">int</span>)allCorners.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allCharucoCorners;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; allCharucoIds;</span><br><span class="line">    <span class="built_in">vector</span>&lt; Mat &gt; filteredImages;</span><br><span class="line">    allCharucoCorners.reserve(nFrames);</span><br><span class="line">    allCharucoIds.reserve(nFrames);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nFrames; i++) &#123;</span><br><span class="line">        <span class="comment">// interpolate using camera parameters</span></span><br><span class="line">        Mat currentCharucoCorners, currentCharucoIds;</span><br><span class="line">        aruco::interpolateCornersCharuco(allCorners[i], allIds[i], allImgs[i], charucoboard,</span><br><span class="line">            currentCharucoCorners, currentCharucoIds, cameraMatrix,</span><br><span class="line">            distCoeffs);</span><br><span class="line"></span><br><span class="line">        allCharucoCorners.push_back(currentCharucoCorners);</span><br><span class="line">        allCharucoIds.push_back(currentCharucoIds);</span><br><span class="line">        filteredImages.push_back(allImgs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (allCharucoCorners.size() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Not enough corners for calibration&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// calibrate camera using charuco</span></span><br><span class="line">    repError =</span><br><span class="line">        aruco::calibrateCameraCharuco(allCharucoCorners, allCharucoIds, charucoboard, imgSize,</span><br><span class="line">            cameraMatrix, distCoeffs, rvecs, tvecs, calibrationFlags);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> saveOk = saveCameraParams(outputFile, imgSize, aspectRatio, calibrationFlags,</span><br><span class="line">        cameraMatrix, distCoeffs, repError);</span><br><span class="line">    <span class="keyword">if</span> (!saveOk) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;Cannot save output file&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rep Error: &quot;</span> &lt;&lt; repError &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Rep Error Aruco: &quot;</span> &lt;&lt; arucoRepErr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Calibration saved to &quot;</span> &lt;&lt; outputFile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show interpolated charuco corners for debugging</span></span><br><span class="line">    <span class="keyword">if</span> (showChessboardCorners) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> frame = <span class="number">0</span>; frame &lt; filteredImages.size(); frame++) &#123;</span><br><span class="line">            Mat imageCopy = filteredImages[frame].clone();</span><br><span class="line">            <span class="keyword">if</span> (allIds[frame].size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (allCharucoCorners[frame].total() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    aruco::drawDetectedCornersCharuco(imageCopy, allCharucoCorners[frame],</span><br><span class="line">                        allCharucoIds[frame]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line">            <span class="keyword">char</span> key = (<span class="keyword">char</span>)waitKey(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="number">27</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol>
<li>Visual Studio 需要在项目属性中（项目属性 -&gt; 调试），添加以下参数：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;camera.yml&quot; -dp&#x3D;&quot;detector_params.yml&quot; -w&#x3D;5 -h&#x3D;7 -sl&#x3D;0.04 -ml&#x3D;0.02 -d&#x3D;10</span><br></pre></td></tr></table></figure>
<ol>
<li>在源代码目录，新建文件，名称为“detector_params.yml”；内容如下所示：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%YAML:1.0</span><br><span class="line">nmarkers: 1024</span><br><span class="line">adaptiveThreshWinSizeMin: 3</span><br><span class="line">adaptiveThreshWinSizeMax: 23</span><br><span class="line">adaptiveThreshWinSizeStep: 10</span><br><span class="line">adaptiveThreshWinSize: 21</span><br><span class="line">adaptiveThreshConstant: 7</span><br><span class="line">minMarkerPerimeterRate: 0.03</span><br><span class="line">maxMarkerPerimeterRate: 4.0</span><br><span class="line">polygonalApproxAccuracyRate: 0.05</span><br><span class="line">minCornerDistance: 10.0</span><br><span class="line">minDistanceToBorder: 3</span><br><span class="line">minMarkerDistance: 10.0</span><br><span class="line">minMarkerDistanceRate: 0.05</span><br><span class="line">cornerRefinementMethod: 0</span><br><span class="line">cornerRefinementWinSize: 5</span><br><span class="line">cornerRefinementMaxIterations: 30</span><br><span class="line">cornerRefinementMinAccuracy: 0.1</span><br><span class="line">markerBorderBits: 1</span><br><span class="line">perspectiveRemovePixelPerCell: 8</span><br><span class="line">perspectiveRemoveIgnoredMarginPerCell: 0.13</span><br><span class="line">maxErroneousBitsInBorderRate: 0.04</span><br><span class="line">minOtsuStdDev: 5.0</span><br><span class="line">errorCorrectionRate: 0.6</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175225.png" alt=""></p>
<p>选中窗口，通过连续按键“C”，采集不同角度的图像；结束按“ESC”；</p>
<p>程序运行结束后，会在源代码目录生成文件<strong>camera.yml</strong>；里面保存着相机标定后的结果；</p>
<h2 id="步骤三：相机标定验证"><a href="#步骤三：相机标定验证" class="headerlink" title="步骤三：相机标定验证"></a>步骤三：相机标定验证</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\videoio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">cv::VideoCapture <span class="title">inputVideo</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="comment">//VideoWriter writer(&quot;VideoTest.avi&quot;, VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 25.0, Size(640, 480));</span></span><br><span class="line">	cv::Mat cameraMatrix, distCoeffs; <span class="comment">// 相机参数</span></span><br><span class="line"></span><br><span class="line">	<span class="function">FileStorage <span class="title">fs</span><span class="params">(<span class="string">&quot;camera.yml&quot;</span>, FileStorage::READ)</span></span>;<span class="comment">//读取相机参数</span></span><br><span class="line">	<span class="keyword">if</span> (!fs.isOpened())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Could not open the configuration file!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fs[<span class="string">&quot;camera_matrix&quot;</span>] &gt;&gt; cameraMatrix;</span><br><span class="line">	fs[<span class="string">&quot;distortion_coefficients&quot;</span>] &gt;&gt; distCoeffs;</span><br><span class="line">	fs.release();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; cameraMatrix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; distCoeffs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);<span class="comment">//创建字典</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (inputVideo.grab()) &#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		cv::Mat image, imageCopy;</span><br><span class="line"></span><br><span class="line">		inputVideo.retrieve(image);</span><br><span class="line">		image.copyTo(imageCopy);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt; &gt; corners;</span><br><span class="line"></span><br><span class="line">		cv::aruco::detectMarkers(image, dictionary, corners, ids);<span class="comment">// 检测markers</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			cv::aruco::drawDetectedMarkers(imageCopy, corners, ids);</span><br><span class="line">			<span class="built_in">vector</span>&lt; Vec3d &gt; rvecs, tvecs;<span class="comment">//得到旋转矢量以及平移矢量</span></span><br><span class="line">			cv::aruco::estimatePoseSingleMarkers(corners, <span class="number">100</span>, cameraMatrix, distCoeffs, rvecs, tvecs);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ids.size(); i++)</span><br><span class="line">				cv::aruco::drawAxis(imageCopy, cameraMatrix, distCoeffs, rvecs[i], tvecs[i], <span class="number">50</span>);<span class="comment">// 画方向轴</span></span><br><span class="line">			<span class="comment">//writer &lt;&lt; imageCopy;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;out&quot;</span>, imageCopy);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> key = (<span class="keyword">char</span>)cv::waitKey(<span class="number">20</span>);</span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">&#x27;b&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p>将相机对准标定板（如下图所示）</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175801.png" alt=""></p>
<p>运行后结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822175913.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
  </entry>
  <entry>
    <title> Aruco创建Board</title>
    <url>/2020/08/22/Aruco%E5%88%9B%E5%BB%BABoard/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89186826">https://blog.csdn.net/qq_33446100/article/details/89186826</a></p>
</blockquote>
<a id="more"></a>
<h2 id="Board作用"><a href="#Board作用" class="headerlink" title="Board作用"></a>Board作用</h2><ul>
<li><p>board是一个aruco marker的棋盘，上面布置了许多marker。</p>
</li>
<li><p>board可用于校准（Calibrate）摄像机 </p>
</li>
</ul>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\charuco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> markersX = <span class="number">5</span>;<span class="comment">//X轴上标记的数量</span></span><br><span class="line">	<span class="keyword">int</span> markersY = <span class="number">5</span>;<span class="comment">//Y轴上标记的数量   本例生成5x5的棋盘</span></span><br><span class="line">	<span class="keyword">int</span> markerLength = <span class="number">100</span>;<span class="comment">//标记的长度，单位是像素</span></span><br><span class="line">	<span class="keyword">int</span> markerSeparation = <span class="number">20</span>;<span class="comment">//每个标记之间的间隔，单位像素</span></span><br><span class="line">	<span class="keyword">int</span> dictionaryId = cv::aruco::DICT_4X4_50;<span class="comment">//生成标记的字典ID</span></span><br><span class="line">	<span class="keyword">int</span> margins = markerSeparation;<span class="comment">//标记与边界之间的间隔</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">int</span> borderBits = <span class="number">1</span>;<span class="comment">//标记的边界所占的bit位数</span></span><br><span class="line">	<span class="keyword">bool</span> showImage = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">	Size imageSize;</span><br><span class="line">	imageSize.width = markersX * (markerLength + markerSeparation) - markerSeparation + <span class="number">2</span> * margins;</span><br><span class="line">	imageSize.height =</span><br><span class="line">		markersY * (markerLength + markerSeparation) - markerSeparation + <span class="number">2</span> * margins;</span><br><span class="line"> </span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary =</span><br><span class="line">		aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"> </span><br><span class="line">	Ptr&lt;aruco::GridBoard&gt; board = aruco::GridBoard::create(markersX, markersY, <span class="keyword">float</span>(markerLength),</span><br><span class="line">		<span class="keyword">float</span>(markerSeparation), dictionary);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// show created board</span></span><br><span class="line">	Mat boardImage;</span><br><span class="line">	board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> (showImage) &#123;</span><br><span class="line">		imshow(<span class="string">&quot;board&quot;</span>, boardImage);</span><br><span class="line">		waitKey(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822115151.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Aruco检测Marker</title>
    <url>/2020/08/22/Aruco%E6%A3%80%E6%B5%8BMarker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_33446100/article/details/89115983">https://blog.csdn.net/qq_33446100/article/details/89115983</a></p>
<p><a href="https://docs.opencv.org/4.0.1/d9/d6a/group__aruco.html">https://docs.opencv.org/4.0.1/d9/d6a/group__aruco.html</a></p>
</blockquote>
<a id="more"></a>
<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><ul>
<li><p>Azure Kinect</p>
<p>使用RGB相机，Kinect不接电源</p>
</li>
<li><p>VS2019</p>
</li>
</ul>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\aruco\dictionary.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cv::Mat markerImage;</span><br><span class="line">	<span class="function">cv::VideoCapture <span class="title">mVideoCapture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建字典，这里注意使用Ptr&lt;&gt;，不然无法显示结果</span></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);</span><br><span class="line">	cv::aruco::drawMarker(dictionary, <span class="number">23</span>, <span class="number">240</span>, markerImage);<span class="comment">//这里取出一个marker用于检测</span></span><br><span class="line"></span><br><span class="line">	imshow(<span class="string">&quot;marker&quot;</span>, markerImage);<span class="comment">//显示待检测标记</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (mVideoCapture.grab())<span class="comment">//取得下一帧</span></span><br><span class="line">	&#123;</span><br><span class="line">		cv::Mat frame, frame_show;</span><br><span class="line">		mVideoCapture.retrieve(frame);<span class="comment">//放入Mat</span></span><br><span class="line"></span><br><span class="line">		frame.copyTo(frame_show);<span class="comment">//复制一份</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ids;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2f&gt;&gt; corners;</span><br><span class="line"></span><br><span class="line">		cv::aruco::detectMarkers(frame, dictionary, corners, ids);<span class="comment">//检测该帧是否有标记</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ids.size() &gt; <span class="number">0</span>)</span><br><span class="line">			cv::aruco::drawDetectedMarkers(frame_show, corners, ids);<span class="comment">//如果有，则标记出来，放入另一个Mat</span></span><br><span class="line"></span><br><span class="line">		cv::imshow(<span class="string">&quot;video&quot;</span>, frame_show);<span class="comment">//显示结果</span></span><br><span class="line"></span><br><span class="line">		waitKey(<span class="number">30</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822112653.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200822112801.png" alt=""></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title> Windows本地配置Aruco</title>
    <url>/2020/08/20/Windows%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEAruco/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>环境：win10 + VS2019 + OpenCV4.30</p>
</blockquote>
<a id="more"></a>
<h2 id="下载Contrib库"><a href="#下载Contrib库" class="headerlink" title="下载Contrib库"></a>下载Contrib库</h2><p>传送门：<a href="https://github.com/opencv/opencv_contrib/releases">click it</a></p>
<p>(<strong>注意</strong>：选择与OpenCV对应的库)</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155046.png" alt=""></p>
<h2 id="CMake编译OpecCV"><a href="#CMake编译OpecCV" class="headerlink" title="CMake编译OpecCV"></a>CMake编译OpecCV</h2><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155137.png" alt=""></p>
<p>点击<em>configure</em>，如果有红色，继续点<em>configure</em>，直至红色都消失</p>
<h2 id="CMake编译OpenCV-contrib"><a href="#CMake编译OpenCV-contrib" class="headerlink" title="CMake编译OpenCV-contrib"></a>CMake编译OpenCV-contrib</h2><ul>
<li>将<em>opencv_contrib-4.3.0</em>放置在<em>F:\DownLoad\opencv</em>目录下，在CMake中找到<em>OPENCV_EXTRA_MODULES_PATH</em>，填入<em>F:\DownLoad\opencv\opencv_contrib-4.3.0\modules</em>路径，并勾选上方<em>OPENCV_ENABLE_NONFREE</em>；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820155702.png" alt=""></p>
<p>点击<em>configure</em>，如果有红色，继续点<em>configure</em>，直至红色都消失</p>
<p>最后点击<em>generate</em></p>
<h2 id="VS2019编译debug与release库"><a href="#VS2019编译debug与release库" class="headerlink" title="VS2019编译debug与release库"></a>VS2019编译debug与release库</h2><p>打开OpenCV.sln项目文件；</p>
<h3 id="编译debug库"><a href="#编译debug库" class="headerlink" title="编译debug库"></a>编译debug库</h3><p>解决方案 -&gt; 右键重新生成解决方案</p>
<p>完成后，找到CMakeTargets中的INSTALL，然后右键选择“仅限于项目”—&gt;“仅生成INSTALL”；</p>
<h3 id="编译release库"><a href="#编译release库" class="headerlink" title="编译release库"></a>编译release库</h3><p>和上面差不多</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>系统变量 -&gt; PATH ，添加 F:\DownLoad\MyBuild\install\x64\vc16\bin</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160215.png" alt=""></p>
<p>用户变量：</p>
<p>变量名：OPENCV</p>
<p>变量值：F:\DownLoad\MyBuild\install\include</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160401.png" alt=""></p>
<h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><p>与配置OpenCV相同，新建一个项目，新建一个属性表，为日后重复使用奠定基础</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820160634.png" alt=""></p>
<p>属性 -&gt; VC++目录 -&gt; 包含目录，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\DownLoad\MyBuild\install\include</span><br><span class="line">F:\DownLoad\MyBuild\install\include\opencv2</span><br></pre></td></tr></table></figure>
<p>VC++目录 —&gt; 库目录，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\DownLoad\MyBuild\install\x64\vc16\lib</span><br></pre></td></tr></table></figure>
<p>链接器 -&gt; 输入 -&gt; 附加依赖项 ，添加以下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv_aruco430d.lib;</span><br><span class="line">opencv_bgsegm430d.lib;</span><br><span class="line">opencv_bioinspired430d.lib;</span><br><span class="line">opencv_calib3d430d.lib;</span><br><span class="line">opencv_ccalib430d.lib;</span><br><span class="line">opencv_core430d.lib;</span><br><span class="line">opencv_datasets430d.lib;</span><br><span class="line">opencv_dnn_objdetect430d.lib;</span><br><span class="line">opencv_dnn430d.lib;</span><br><span class="line">opencv_dpm430d.lib;</span><br><span class="line">opencv_face430d.lib;</span><br><span class="line">opencv_features2d430d.lib;</span><br><span class="line">opencv_flann430d.lib;</span><br><span class="line">opencv_fuzzy430d.lib;</span><br><span class="line">opencv_hdf430d.lib;</span><br><span class="line">opencv_hfs430d.lib;</span><br><span class="line">opencv_highgui430d.lib;</span><br><span class="line">opencv_img_hash430d.lib;</span><br><span class="line">opencv_imgcodecs430d.lib;</span><br><span class="line">opencv_imgproc430d.lib;</span><br><span class="line">opencv_line_descriptor430d.lib;</span><br><span class="line">opencv_ml430d.lib;</span><br><span class="line">opencv_objdetect430d.lib;</span><br><span class="line">opencv_optflow430d.lib;</span><br><span class="line">opencv_phase_unwrapping430d.lib;</span><br><span class="line">opencv_photo430d.lib;</span><br><span class="line">opencv_plot430d.lib;</span><br><span class="line">opencv_reg430d.lib;</span><br><span class="line">opencv_rgbd430d.lib;</span><br><span class="line">opencv_saliency430d.lib;</span><br><span class="line">opencv_shape430d.lib;</span><br><span class="line">opencv_stereo430d.lib;</span><br><span class="line">opencv_stitching430d.lib;</span><br><span class="line">opencv_structured_light430d.lib;</span><br><span class="line">opencv_superres430d.lib;</span><br><span class="line">opencv_surface_matching430d.lib;</span><br><span class="line">opencv_text430d.lib;</span><br><span class="line">opencv_tracking430d.lib;</span><br><span class="line">opencv_video430d.lib;</span><br><span class="line">opencv_videoio430d.lib;</span><br><span class="line">opencv_videostab430d.lib;</span><br><span class="line">opencv_xfeatures2d430d.lib;</span><br><span class="line">opencv_ximgproc430d.lib;</span><br><span class="line">opencv_xobjdetect430d.lib;</span><br><span class="line">opencv_xphoto430d.lib;</span><br></pre></td></tr></table></figure>
<h2 id="测试-生成Aruco-board"><a href="#测试-生成Aruco-board" class="headerlink" title="测试 - 生成Aruco_board"></a>测试 - 生成Aruco_board</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2\highgui.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco\dictionary.hpp&gt;</span><br><span class="line">#include &lt;opencv2\aruco\charuco.hpp&gt;</span><br><span class="line">#include &lt;opencv2\core.hpp&gt;</span><br><span class="line">#include &lt;opencv2\imgproc\imgproc.hpp&gt;</span><br><span class="line">#include &lt;opencv2\opencv.hpp&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int markersX &#x3D; 5;&#x2F;&#x2F;X轴上标记的数量</span><br><span class="line">	int markersY &#x3D; 5;&#x2F;&#x2F;Y轴上标记的数量   本例生成5x5的棋盘</span><br><span class="line">	int markerLength &#x3D; 100;&#x2F;&#x2F;标记的长度，单位是像素</span><br><span class="line">	int markerSeparation &#x3D; 20;&#x2F;&#x2F;每个标记之间的间隔，单位像素</span><br><span class="line">	int dictionaryId &#x3D; cv::aruco::DICT_4X4_50;&#x2F;&#x2F;生成标记的字典ID</span><br><span class="line">	int margins &#x3D; markerSeparation;&#x2F;&#x2F;标记与边界之间的间隔</span><br><span class="line"></span><br><span class="line">	int borderBits &#x3D; 1;&#x2F;&#x2F;标记的边界所占的bit位数</span><br><span class="line">	bool showImage &#x3D; true;</span><br><span class="line"></span><br><span class="line">	Size imageSize;</span><br><span class="line"></span><br><span class="line">	imageSize.width &#x3D; markersX * (markerLength + markerSeparation) - markerSeparation + 2 * margins;</span><br><span class="line"></span><br><span class="line">	imageSize.height &#x3D; markersY * (markerLength + markerSeparation) - markerSeparation + 2 * margins;</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::Dictionary&gt; dictionary &#x3D; aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME(dictionaryId));</span><br><span class="line"></span><br><span class="line">	Ptr&lt;aruco::GridBoard&gt; board &#x3D; aruco::GridBoard::create(markersX, markersY, float(markerLength), float(markerSeparation), dictionary);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; show created board</span><br><span class="line">	Mat boardImage;</span><br><span class="line">	board-&gt;draw(imageSize, boardImage, margins, borderBits);</span><br><span class="line"></span><br><span class="line">	if (showImage) &#123;</span><br><span class="line">		imshow(&quot;board&quot;, boardImage);</span><br><span class="line">		waitKey(0);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200820154403.png" alt=""></p>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>Aruco</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VS2019 创建C++ dll用于Unity</title>
    <url>/2020/08/12/%E4%BD%BF%E7%94%A8VS2019-%E5%88%9B%E5%BB%BAC-dll%E7%94%A8%E4%BA%8EUnity/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考博客：</p>
<p><a href="https://www.cnblogs.com/aWxvdmVseXc0/p/12857974.html">https://www.cnblogs.com/aWxvdmVseXc0/p/12857974.html</a></p>
<p><a href="https://blog.csdn.net/zhunju0089/article/details/103458855">https://blog.csdn.net/zhunju0089/article/details/103458855</a></p>
</blockquote>
<a id="more"></a>
<h3 id="创建VS项目"><a href="#创建VS项目" class="headerlink" title="创建VS项目"></a>创建VS项目</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145559.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145630.png" alt=""></p>
<h3 id="创建项目成功后，打开pch-h文件，定义导出函数的定义"><a href="#创建项目成功后，打开pch-h文件，定义导出函数的定义" class="headerlink" title="创建项目成功后，打开pch.h文件，定义导出函数的定义"></a>创建项目成功后，打开<strong>pch.h</strong>文件，定义导出函数的定义</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812145856.png" style="zoom:200%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">myadd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="打开pch-cpp文件，实现上述函数的具体功能"><a href="#打开pch-cpp文件，实现上述函数的具体功能" class="headerlink" title="打开pch.cpp文件，实现上述函数的具体功能"></a>打开<strong>pch.cpp</strong>文件，实现上述函数的具体功能</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150216.png" style="zoom:200%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="点击生成解决方案，即可生成dll文件"><a href="#点击生成解决方案，即可生成dll文件" class="headerlink" title="点击生成解决方案，即可生成dll文件"></a>点击<strong>生成解决方案</strong>，即可生成dll文件</h3><h3 id="在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中"><a href="#在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中" class="headerlink" title="在Unity项目中，新建文件夹Plugins，将生成的dll文件复制进此文件夹中"></a>在Unity项目中，新建文件夹<strong>Plugins</strong>，将生成的dll文件复制进此文件夹中</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150544.png" alt=""></p>
<h3 id="脚本调用"><a href="#脚本调用" class="headerlink" title="脚本调用"></a>脚本调用</h3><p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150843.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200812150927.png" style="zoom:200%;" /></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>dll</tag>
      </tags>
  </entry>
  <entry>
    <title> OpenGL调用Azure Kinect 实现过程</title>
    <url>/2020/08/03/OpenGL%E8%B0%83%E7%94%A8Azure-Kinect-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>源代码来源：</p>
<p>源代码作者：无雨森；浙江科技大学在读博士</p>
</blockquote>
<a id="more"></a>
<h2 id="软件硬件"><a href="#软件硬件" class="headerlink" title="软件硬件"></a>软件硬件</h2><p>VS2019</p>
<p>Azure Kinect</p>
<h2 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h2><p>OpenGL_GLUT_ShowImage</p>
<h2 id="本地配置过程"><a href="#本地配置过程" class="headerlink" title="本地配置过程"></a>本地配置过程</h2><h3 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h3><p>略过</p>
<h3 id="配置模式与头文件路径"><a href="#配置模式与头文件路径" class="headerlink" title="配置模式与头文件路径"></a>配置模式与头文件路径</h3><ul>
<li>本地建立VS空项目，release X64模式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102606.png" alt=""></p>
<ul>
<li>新建cpp文档，作为源文件，将OpenGL_GLUT_ShowImage的源代码复制进新建的cpp文档</li>
<li>配置头文件路径，本文以此为例</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102928.png" alt=""></p>
<p>项目 -&gt; 属性 -&gt; C/C++ -&gt; 附加包含目录</p>
<p>填入上面图片所示路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103339.png" alt=""></p>
<h3 id="安装Kinect包"><a href="#安装Kinect包" class="headerlink" title="安装Kinect包"></a>安装Kinect包</h3><p>打开包管理器，下载如下图所示包</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731101741.png" alt=""></p>
<p>安装结束后，即可发现代码已经没有报错</p>
<h3 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h3><p>此时F5运行，会发现报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731105327.png" alt=""></p>
<p>解决方法：</p>
<p>在windows.h语句上方，加入以下语句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOMINMAX</span></span><br></pre></td></tr></table></figure>
<p>整体看起来是这样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731105536.png" alt=""></p>
<p>此时F5运行，会出现更多错误</p>
<p>一种是 C++ error:LNK2005 已经在*.obj中定义</p>
<p>另一种是和OpenCV的错误一样，无法解析外部命令；这里就略过了</p>
<p>解决方法：</p>
<p>在 属性-&gt;配置属性-&gt;链接器-&gt;命令行中添加 /FORCE:MULTIPLE 即可</p>
<p>此时F5运行，出现错误：</p>
<p>fatal error LNK1179: 无效或损坏的文件: 重复的XXX</p>
<p>解决方法：</p>
<p>属性-C/C++-优化-全程序优化 选择“否”</p>
<p>此时F5运行，成功！</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200803215839.png" alt=""></p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Azure Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title> OpenCV调用Azure Kinect 实现过程</title>
    <url>/2020/08/01/OpenCV%E8%B0%83%E7%94%A8Azure-Kinect-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>源代码来源：</p>
<p>源代码作者：无雨森</p>
<p>浙江科技大学在读博士</p>
</blockquote>
<a id="more"></a>
<h2 id="软件硬件a"><a href="#软件硬件a" class="headerlink" title="软件硬件a"></a>软件硬件a</h2><p>VS2019</p>
<p>Azure Kinect</p>
<h2 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h2><p>OpenCV_OneKinect</p>
<h2 id="本地配置过程"><a href="#本地配置过程" class="headerlink" title="本地配置过程"></a>本地配置过程</h2><h3 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h3><p>略过</p>
<h3 id="配置模式与头文件路径"><a href="#配置模式与头文件路径" class="headerlink" title="配置模式与头文件路径"></a>配置模式与头文件路径</h3><ul>
<li>本地建立VS空项目，release X64模式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102606.png" alt=""></p>
<ul>
<li>新建cpp文档，作为源文件，将OpenCV_OneKinect的源代码复制进新建的cpp文档</li>
<li>配置头文件路径，本文以此为例</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731102928.png" alt=""></p>
<p>项目 -&gt; 属性 -&gt; C/C++ -&gt; 附加包含目录</p>
<p>填入上面图片所示路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103339.png" alt=""></p>
<h3 id="安装Kinect包"><a href="#安装Kinect包" class="headerlink" title="安装Kinect包"></a>安装Kinect包</h3><p>打开包管理器，下载如下图所示包</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731103706.png" alt=""></p>
<p>安装结束后，即可发现代码已经没有报错</p>
<h3 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h3><p>此时F5运行，会发现报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200731104137.png" alt=""><br>错误    LNK2001    无法解析的外部符号 “void <strong>cdecl sen::ColorizeDepthImage(class k4a::image const &amp;,struct sen::Pixel (</strong>cdecl<em>)(unsigned short const &amp;,unsigned short const &amp;,unsigned short const &amp;),struct std::pair<unsigned short,unsigned short>,class std::vector<struct sen::Pixel,class std::allocator<struct sen::Pixel> &gt; </em>)” (?ColorizeDepthImage@sen@@YAXAEBVimage@k4a@@P6A?AUPixel@1@AEBG11@ZU?$pair@GG@std@@PEAV?$vector@UPixel@sen@@V?$allocator@UPixel@sen@@@std@@@6@@Z)    Test    F:\VS_Area\Test\源.obj    1    </p>
<p>原因：</p>
<p>StaticImageProperties.h头文件中，缺少ColorizeDepthImage的函数体</p>
<p>解决方法：</p>
<p>在StaticImageProperties.h头文件中添加即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ColorizeDepthImage</span><span class="params">(<span class="keyword">const</span> k4a::image&amp; depthImage,</span></span></span><br><span class="line"><span class="function"><span class="params">		DepthPixelVisualizationFunction visualizationFn,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">uint16_t</span>, <span class="keyword">uint16_t</span>&gt; expectedValueRange,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Pixel&gt;* buffer)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">k4a_image_format_t</span> imageFormat = depthImage.get_format();</span><br><span class="line">		<span class="keyword">if</span> (imageFormat != K4A_IMAGE_FORMAT_DEPTH16 &amp;&amp; imageFormat != K4A_IMAGE_FORMAT_IR16)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="built_in">std</span>::logic_error(<span class="string">&quot;Attempted to colorize a non-depth image!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">int</span> width = depthImage.get_width_pixels();</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">int</span> height = depthImage.get_height_pixels();</span><br><span class="line"></span><br><span class="line">		buffer-&gt;resize(<span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(width * height));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">uint16_t</span>* depthData = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint16_t</span>*&gt;(depthImage.get_buffer());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; height; ++h)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; width; ++w)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">const</span> <span class="keyword">size_t</span> currentPixel = <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(h * width + w);</span><br><span class="line">				(*buffer)[currentPixel] = visualizationFn(depthData[currentPixel], expectedValueRange.first, expectedValueRange.second);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>运行成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/junlin49/up/20200801211404.png" alt=""></p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Azure Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>HOLOLENS2开发1</title>
    <url>/2020/05/20/HOLOLENS2%E5%BC%80%E5%8F%911/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hololens初步上手</p>
<a id="more"></a>
<h2 id="HOLOLENS2-开发-环境配置"><a href="#HOLOLENS2-开发-环境配置" class="headerlink" title="HOLOLENS2 开发 - 环境配置"></a>HOLOLENS2 开发 - 环境配置</h2><blockquote>
<p>现在毕设项目已经做完，现在复盘下走过的坑</p>
<p>可通过邮件2998963449@qq.com联系</p>
</blockquote>
<h3 id="第1步：单独安装Win10-SDK"><a href="#第1步：单独安装Win10-SDK" class="headerlink" title="第1步：单独安装Win10 SDK"></a>第1步：单独安装Win10 SDK</h3><p>SDK下载链接：<a href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-10-sdk/">I am here</a></p>
<ol>
<li>安装时必须使用短路径！（建议放在C盘），如<code>C:\SDK</code></li>
<li>请记住这个路径，因为后续在VS中部署时，解决错误时需要用到此路径</li>
</ol>
<h3 id="第2步：安装Unity，VS2019"><a href="#第2步：安装Unity，VS2019" class="headerlink" title="第2步：安装Unity，VS2019"></a>第2步：安装Unity，VS2019</h3><p>安装完Win10 SDK后</p>
<h3 id="1-安装Unity"><a href="#1-安装Unity" class="headerlink" title="1. 安装Unity"></a>1. 安装Unity</h3><p>链接：<a href="https://unity.cn/releases">传送门</a></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>推荐下载下图所示，因为其他的安装渠道，博主并没有看到有单独安装组件的界面；不过需要外网才能提高网速，博主在不开启外网情况下，网速在30-40k/s<br><img src="https://img-blog.csdnimg.cn/20200302144820699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<ol>
<li><p>安装组件界面：（不必勾选这么多）<br><img src="https://img-blog.csdnimg.cn/20200302145208244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>下载完成后，如需要 Vuforia 组件，请<a href="https://blog.csdn.net/qq_43656250/article/details/104475189">参考此链接</a></p>
</li>
</ol>
<h3 id="2-安装VS2019"><a href="#2-安装VS2019" class="headerlink" title="2. 安装VS2019"></a>2. 安装VS2019</h3><p>链接：<a href="https://visualstudio.microsoft.com/zh-hans/vs/">传送门</a></p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol>
<li>组件选择：<br><img src="https://img-blog.csdnimg.cn/20200302145823352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjU2MjUw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<ol>
<li><p>使用Unity的游戏开发：不要勾选编辑器！之前装过了</p>
</li>
<li><p>通用Windows平台开发中会包含Win10 SDK，没办法</p>
</li>
</ol>
<h3 id="3-后续问题"><a href="#3-后续问题" class="headerlink" title="3.后续问题"></a>3.后续问题</h3><p>到此基本就已经结束了，但是在Unity做完项目以后，使用VS2019打开项目时，并不能直接使用，会出现以下报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MSB3774找不到SDK“ WindowsMo​​bile，版本&#x3D; 10.0.17763.0”</span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<p><a href="https://developercommunity.visualstudio.com/content/problem/402362/msb3774-could-not-find-sdk-windowsmobile-version10.html">https://developercommunity.visualstudio.com/content/problem/402362/msb3774-could-not-find-sdk-windowsmobile-version10.html</a></p>
<p><img src="https://i.loli.net/2020/05/20/jcPnxkgND3opC8a.png" alt=""></p>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>VisonLib SDK 初接触</title>
    <url>/2020/05/18/VisonLib-SDK-%E5%88%9D%E6%8E%A5%E8%A7%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AR质检方案</p>
<a id="more"></a>
<h2 id="接触VisonLib-SDK"><a href="#接触VisonLib-SDK" class="headerlink" title="接触VisonLib SDK"></a>接触VisonLib SDK</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>由于毕设需求，在网上寻找能够解决质量检测或者测量方面的<em>AR SDK</em>，找到了这篇报道：<a href="https://www.toutiao.com/a6674774916132241931/">VisionLib推跨平台AR质检解决方案，可结合CAD对比检测</a></p>
<p>所以开始准备尝试下</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>进<a href="https://visionlib.com/#sect-6">官网</a></li>
<li>注册申请使用<em>SDK</em>（会有人员审核，我是隔一天以后收到的登录密码）</li>
<li>等待邮件通知审核通过，复制账号密码</li>
<li><p>登录官网</p>
</li>
<li><p>直接下载<em>vlUnitySDK v20.3.1 Gengral Release</em></p>
</li>
<li>网页页面拉到底，下载许可证文件</li>
</ol>
<p><img src="https://i.loli.net/2020/05/18/7Nf4r9JIo6HvBKi.png" alt=""></p>
<ol>
<li>新建Unity 项目</li>
<li>导入下载好的<em>package</em></li>
</ol>
<p><img src="C:\Users\VR5\AppData\Roaming\Typora\typora-user-images\image-20200518191431453.png" alt="image-20200518191431453"></p>
<h3 id="配置工作"><a href="#配置工作" class="headerlink" title="配置工作"></a>配置工作</h3><ol>
<li>进入<em>StreamingAssets-&gt;VisionLib</em>目录，将下载的许可证文件（<em>license.xml</em>）复制进此目录下</li>
<li>将电脑接上摄像头</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>官方demo使用的是折纸折起来的各种汽车，官方资源链接在此 <a href="https://visionlib.com/customer-area/resources/">Resources</a></p>
<p>使用的话可以查看<em>SDK</em>本身自带的<em>demo</em></p>
<p>由于后续写的文章，没有拍摄图片下来，希望各位自己做一下</p>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>感觉和<em>Vuforia</em>功能上差别不大，<em>model target</em>（识别实物）的功能，这个<em>SDK</em>支持多个识别，<em>Vuforia</em>试过不可以。</p>
<p>另外，识别过程中的官方水印也太强了，真的是。。。。</p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>VisonLib</tag>
      </tags>
  </entry>
  <entry>
    <title>word中美观地插入代码方法</title>
    <url>/2020/05/18/word%E4%B8%AD%E7%BE%8E%E8%A7%82%E5%9C%B0%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何在word中美观的写入code呢？</p>
<a id="more"></a>
<h2 id="优雅的在-Microsoft-word中插入代码，使文档更美观！！！"><a href="#优雅的在-Microsoft-word中插入代码，使文档更美观！！！" class="headerlink" title="优雅的在 Microsoft word中插入代码，使文档更美观！！！"></a>优雅的在 Microsoft word中插入代码，使文档更美观！！！</h2><blockquote>
<p>本文转载自 <a href="https://blog.csdn.net/u011303443/article/details/50992651?utm_source=copy">https://blog.csdn.net/u011303443/article/details/50992651?utm_source=copy</a></p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2020/05/18/a7OuKt9znPI5xHM.png" alt=""></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>浏览器打开网页<a href="http://www.planetb.ca/syntax-highlight-word">PlanetB</a></p>
<p><img src="https://i.loli.net/2020/05/18/d9HalcCbJYkyULP.png" alt=""></p>
</li>
<li><p>将要复制的代码粘贴进网页下方的<em>code</em>白框中</p>
<p><img src="https://i.loli.net/2020/05/18/mIeGjQL6f1FYbJ3.png" alt=""></p>
</li>
<li><p>选择语言类型</p>
</li>
<li><p>点击<em>Show HighLighted</em></p>
</li>
<li><p>在新打开的页面上<em>Ctrl+A</em>全选，复制，粘贴进<em>word</em>中。</p>
<p><img src="https://i.loli.net/2020/05/18/lEaDSFz5gIA3ctH.png" alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>word中插入代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity重新激活许可证</title>
    <url>/2020/05/06/Unity%E9%87%8D%E6%96%B0%E6%BF%80%E6%B4%BB%E8%AE%B8%E5%8F%AF%E8%AF%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于出现 <em>your license does not cover Universal Windows Platform Publishing</em> 的错误</p>
<a id="more"></a>
<h2 id="关于出现-your-license-does-not-cover-Universal-Windows-Platform-Publishing-的错误"><a href="#关于出现-your-license-does-not-cover-Universal-Windows-Platform-Publishing-的错误" class="headerlink" title="关于出现 your license does not cover Universal Windows Platform Publishing 的错误"></a>关于出现 <em>your license does not cover Universal Windows Platform Publishing</em> 的错误</h2><p>错误截图如下：</p>
<p><a href="https://imgchr.com/i/YPoiYn"><img src="https://s1.ax1x.com/2020/05/05/YPoiYn.png" alt="YPoiYn.png"></a></p>
<p>解决方法：重新激活许可证即可解决</p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>AR资源</title>
    <url>/2020/04/19/AR%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AR视频课程资源与书籍资源汇总</p>
<a id="more"></a>
<blockquote>
<p>本文转载于<a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485416&amp;idx=1&amp;sn=e7cc50d5c06b61892b1370f71632a4e8&amp;chksm=96f45a72a183d3641bfca0c3e29bdaf9ec0bdf2e464071cee2ca535191fa23d611403d08f622&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1587217180782&amp;sharer_shareid=93eb2711304121e2bbb43bede39aadd0#rd">https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485416&amp;idx=1&amp;sn=e7cc50d5c06b61892b1370f71632a4e8&amp;chksm=96f45a72a183d3641bfca0c3e29bdaf9ec0bdf2e464071cee2ca535191fa23d611403d08f622&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1587217180782&amp;sharer_shareid=93eb2711304121e2bbb43bede39aadd0#rd</a></p>
</blockquote>
<p>本文主要整理了一些AR开发过程中会用到的视频课程（公开课）和相关开发书籍，适合AR初级开发者和一些资深程序员学习。</p>
<h2 id="视频课程"><a href="#视频课程" class="headerlink" title="视频课程"></a>视频课程</h2><hr>
<h3 id="EasyAR"><a href="#EasyAR" class="headerlink" title="EasyAR"></a>EasyAR</h3><ol>
<li><p><strong>EasyAR Scene 4.0使用系列教程</strong></p>
<p>课程介绍：EasyAR4.0的简单的使用说明，包括了基本设置，平面图像跟踪，3D物体跟踪，表面跟踪，运动跟踪和稀疏空间云。</p>
<p>image1</p>
<p><a href="https://v.qq.com/vplus/6d186ec7b4372bc7#uin=6d186ec7b4372bc7?page=video">https://v.qq.com/vplus/6d186ec7b4372bc7#uin=6d186ec7b4372bc7?page=video</a></p>
</li>
<li><p><strong>EasyAR4.0官方示例演示</strong></p>
<p><a href="https://v.qq.com/x/page/v0948ktcrbo.html">https://v.qq.com/x/page/v0948ktcrbo.html</a></p>
<p><a href="https://v.qq.com/x/page/q0948767iwz.html">https://v.qq.com/x/page/q0948767iwz.html</a></p>
</li>
<li><p><strong>实现室内AR导航教程</strong></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485173&amp;idx=1&amp;sn=4bef5df0b2cf08951909d5eab47e8809&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s/LMP5x5jaQkfoH52ILWA5tw</a></p>
</li>
<li><p><strong>小程序AR教程</strong></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDYzNjcyOQ==&amp;mid=2247484130&amp;idx=1&amp;sn=2a02d650f6a4f365e18d1a6f523ea626&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s/g5mBhw73t54Wl2Tgs2gxtA</a></p>
</li>
<li><p><strong>AR互动大屏项目实战课程（付费）</strong></p>
<p>课程介绍：课程会完整的从整体设计、AR环境搭建、动画制作、动画控制、脚本编写、服务器交互、二维码生成、跨平台修改等进行全流程讲解。</p>
<p><a href="https://edu.manew.com/course/216">https://edu.manew.com/course/216</a></p>
</li>
<li><p><strong>国产AR引擎 EasyAR的使用流程演示</strong></p>
<p><a href="https://www.bilibili.com/video/BV11W411m79a">https://www.bilibili.com/video/BV11W411m79a</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485383&amp;idx=1&amp;sn=6f5d252057104bc7e4c43dcf4c624caa&amp;chksm=96f45a5da183d34bf2ea3ab6530840deac791c0ef11a2c3805cbdad0adcf1ea6f52a45102889&amp;scene=21#wechat_redirect">完备的EasyAR学习路线，最详细的资源整理！</a></p>
</li>
</ol>
<hr>
<h3 id="ARKit"><a href="#ARKit" class="headerlink" title="ARKit"></a>ARKit</h3><ol>
<li><p><strong>ARKit入门到精通-1.0 -基础内容</strong></p>
<p>课程介绍：其视频内容涵盖了ARKit 1.0版本的实现原理、启动相机、Remote的使用、开启／控制检测、自定义平面、自定义点云、API介绍等。</p>
<p><a href="https://www.bilibili.com/video/BV13W411Z78Z?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV13W411Z78Z?from=search&amp;seid=15033026591829912754</a></p>
</li>
</ol>
<ol>
<li><p><strong>ARKit入门到精通 1.0 - 实战案例 AR打地鼠</strong></p>
<p>课程介绍：主要通过一个实际案例【AR打地鼠】对ARKit1.0版本的使用做一个复习强化。</p>
<p><a href="https://www.bilibili.com/video/BV1GW411Z7Pb?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1GW411Z7Pb?from=search&amp;seid=15033026591829912754</a></p>
<ol>
<li><p><strong>ARKit入门到精通-1.5 -基础内容</strong></p>
<p>课程介绍：其视频介绍了ARKit 1.5版本的面部追踪、人脸检测、垂直平面检测、图片识别等特性。</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z7zu?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z7zu?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>ARKit入门到精通-2.0 -基础内容</strong></p>
<p>课程介绍：其视频介绍了ARKit 2.0版本多人互动、数据共享等功能。</p>
<p><a href="https://www.bilibili.com/video/BV1JW411C7oc?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1JW411C7oc?from=search&amp;seid=15033026591829912754</a></p>
</li>
</ol>
</li>
<li><p><strong>ARKit视觉风暴</strong></p>
<p>课程介绍：本套课程从技术理念到项目实践，教大家系统掌握ARKit技术开发，随心打造iOS端AR增强现实应用。由一开始的开发环境搭建，到Unity ARKit Plugin、ARFoundation ARKit等不同时期技术的讲解。从平面模型放置、识别图片、手势交互、3D物体识别、面部AR贴纸、光照估计、环境探针、多人AR技术，甚至包含ARKit3.0的动作捕捉技术等。</p>
<p><a href="https://edu.csdn.net/course/detail/27549?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158718710819726869002335%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158718710819726869002335&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-4">https://edu.csdn.net/course/detail/27549?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158718710819726869002335%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158718710819726869002335&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-4</a></p>
</li>
<li><p><strong>ARKit玩起来 - AR卡通秀</strong></p>
<p>课程介绍：此课程使用ARKit 面部检测功能,将虚拟物体放置到面部</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z77u?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z77u?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>零基础，17分钟制作AR丧尸游戏</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Rx411i764?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1Rx411i764?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>ARkit实战开发视频教程</strong></p>
<p>课程介绍：通过多个实战案例实际操作开发，从而掌握ARkit的相关开发技能：1.认知ARkit的工作流。2.slam与imu的实际应用。3.平面检测与打击测试。4.光照捕获原理。5.在三维引擎上开发内容。6.物体追踪摄像机。7.实现简易版测量尺。8.实现任意门效果（空间穿越）。</p>
<p><a href="https://edu.51cto.com/course/10845.html">https://edu.51cto.com/course/10845.html</a></p>
</li>
<li><p><strong>ARKit玩起来 - AR预览唱片</strong></p>
<p>课程介绍：使用ARKit-1.5 图片检测功能, 在识别到图片之后播放视频</p>
<p><a href="https://www.bilibili.com/video/BV1AW411Z7Ju?from=search&amp;seid=15033026591829912754">https://www.bilibili.com/video/BV1AW411Z7Ju?from=search&amp;seid=15033026591829912754</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247485061&amp;idx=2&amp;sn=d32a791c4e658cf9a44f0746190585ff&amp;chksm=96f45b1fa183d2092b002e564f3522f95cb2c2e862d2af8f8d7130b001068b31d4c81ee75725&amp;scene=21#wechat_redirect">ARKit开发资源合集</a></p>
</li>
</ol>
<hr>
<h3 id="ARCore"><a href="#ARCore" class="headerlink" title="ARCore"></a>ARCore</h3><ol>
<li><p><strong>ARCore增强现实开发从0到1</strong></p>
<p>课程介绍：课程由浅入深，教快速掌握ARCore开发技术，打造出属于自己的AR增强现实应用。由一开始的开发环境搭建，到ARCore的讲解，再到识别图片、手势交互、甚至可以做出热门短视频的AR贴纸特效。</p>
<p><a href="https://ke.qq.com/course/436124">https://ke.qq.com/course/436124</a></p>
</li>
<li><p><strong>10分钟unity上ARCore发布流程</strong></p>
<p><a href="https://www.bilibili.com/video/av837691674/">https://www.bilibili.com/video/av837691674/</a></p>
</li>
<li><p><strong>Unity ARCore 开发全流程演示</strong><br><a href="https://www.bilibili.com/video/BV1SW411o7zj?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1SW411o7zj?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>Unity+ARcore 实现传送门</strong></p>
<p><a href="https://www.bilibili.com/video/BV1tb411N7i6?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1tb411N7i6?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>如何在Unity中创建ARCore的应用</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Yx41177nV?from=search&amp;seid=11224329855409183560">https://www.bilibili.com/video/BV1Yx41177nV?from=search&amp;seid=11224329855409183560</a></p>
</li>
<li><p><strong>HoloLens与ARcore第三视角开发</strong></p>
<p>课程介绍：使用ARcore实现HoloLens第三视角开发，课程包括客户端及服务端Socket异步套接字网络开发，HoloLens接入VuforiaSDK，ARcore与HoloLens空间同步，房间系统，命令同步等。</p>
<p><a href="https://edu.csdn.net/course/detail/23985">https://edu.csdn.net/course/detail/23985</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247484948&amp;idx=1&amp;sn=bb7a11416021adcd9b8d305756098a7c&amp;chksm=96f45b8ea183d298805439eca4fb5c6feb247cf4bd838f1f2a05031108a43cdcceceb3d0f469&amp;scene=21#wechat_redirect">【AR优秀开源项目】ARCore项目工程汇总</a></p>
</li>
</ol>
<hr>
<h3 id="Hololens"><a href="#Hololens" class="headerlink" title="Hololens"></a>Hololens</h3><ol>
<li><p><strong>Hololens开发入门篇</strong></p>
<p>课程介绍：学会Hololens模拟器开发环境的配置及使用方法 应用凝视（Gaze）、手势（Guesture）、英文语音控制（Voice）、立体音效（Spatial sound）、空间映射（Spatial mapping）功能整合开发一个应用并在模拟器上部署运行。</p>
<p><a href="https://edu.csdn.net/course/detail/6639">https://edu.csdn.net/course/detail/6639</a></p>
</li>
<li><p><strong>Hololens MR 技术分享</strong></p>
<p><a href="https://edu.manew.com/my/course/204">https://edu.manew.com/my/course/204</a></p>
</li>
<li><p><strong>HoloLens开发教程</strong></p>
<p><a href="https://space.bilibili.com/109590528?from=search&amp;seid=11372730618997738226">https://space.bilibili.com/109590528?from=search&amp;seid=11372730618997738226</a></p>
</li>
<li><p><strong>PP先生帮你5分钟搞定HoloLens2程序</strong></p>
<p><a href="https://www.bilibili.com/video/BV1hJ411U7Mb?from=search&amp;seid=6201309428496584363">https://www.bilibili.com/video/BV1hJ411U7Mb?from=search&amp;seid=6201309428496584363</a></p>
</li>
<li><p><strong>Unity HoloLens 开发教程系列</strong></p>
<p><a href="https://space.bilibili.com/19357096/video">https://space.bilibili.com/19357096/video</a></p>
</li>
<li><p><strong>HoloLens与ARcore第三视角开发</strong></p>
<p>课程介绍：使用ARcore实现HoloLens第三视角开发，课程包括客户端及服务端Socket异步套接字网络开发，HoloLens接入VuforiaSDK，ARcore与HoloLens空间同步，房间系统，命令同步等。</p>
<p><a href="https://edu.csdn.net/course/detail/23985">https://edu.csdn.net/course/detail/23985</a></p>
</li>
<li><p><strong>HoloLens全息应用开发</strong></p>
<p><a href="https://edu.csdn.net/course/detail/4897/88469?ops_request_misc=&amp;request_id=&amp;biz_id=105&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~sobaiduweb~default-0">https://edu.csdn.net/course/detail/4897/88469?ops_request_misc=&amp;request_id=&amp;biz_id=105&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~sobaiduweb~default-0</a></p>
</li>
<li><p><strong>Hololens全息房产项目（上）</strong></p>
<p>课程介绍：讲解hololens的环境配置：模拟器安装配置，VS配置，系统配置，Unity配置。基础功能：语音、凝视以及手势控制，空间扫描与定位。经典的hololens设计方式——传送门，通过传送门在现实空间与虚拟空间穿梭。</p>
<p><a href="https://edu.manew.com/course/350">https://edu.manew.com/course/350</a></p>
</li>
<li><p><strong>拓展阅读</strong></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIwMDk2OTQ2MQ==&amp;mid=2247484878&amp;idx=1&amp;sn=db93b4334cc4781d038eaf7cc078e260&amp;chksm=96f45854a183d1421303227f11ffb5af22d81c0205f222f9858ca6b1d2b35262439a5bfb5222&amp;scene=21#wechat_redirect">HoloLens应用场景大盘点（上）</a></p>
</li>
</ol>
<hr>
<h3 id="Vuforia"><a href="#Vuforia" class="headerlink" title="Vuforia"></a>Vuforia</h3><ol>
<li><p><strong>【SiKi学院Unity3D视频教程】AR系列教程 - Vuforia入门</strong></p>
<p><a href="https://www.bilibili.com/video/BV134411s725?from=search&amp;seid=819133152602426925">https://www.bilibili.com/video/BV134411s725?from=search&amp;seid=819133152602426925</a></p>
</li>
<li><p><strong>Unity AR开发实践之Vuforia详解</strong></p>
<p><a href="https://www.bilibili.com/video/BV1At41117J9?from=search&amp;seid=13345706439745907767">https://www.bilibili.com/video/BV1At41117J9?from=search&amp;seid=13345706439745907767</a></p>
</li>
<li><p><strong>Unity + Vuforia 构建企业级AR应用</strong></p>
<p><a href="https://www.bilibili.com/video/BV1CJ411t7qp/?spm_id_from=333.788.videocard.3">https://www.bilibili.com/video/BV1CJ411t7qp/?spm_id_from=333.788.videocard.3</a></p>
</li>
<li><p><strong>教你用Unity制作一个AR初音尬舞</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Ux411h75b/?spm_id_from=333.788.videocard.1">https://www.bilibili.com/video/BV1Ux411h75b/?spm_id_from=333.788.videocard.1</a></p>
</li>
<li><p><strong>Vuforia远程视频AR标注</strong></p>
<p>课程介绍：Vuforia+UnityChatSDK开发远程视频AR标注，实现Vuforia Chalk的功能，支持PC、Android、IOS平台。</p>
<p><a href="https://edu.csdn.net/course/detail/27280?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-2">https://edu.csdn.net/course/detail/27280?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-2</a></p>
</li>
<li><p><strong>Vuforia Studio工业增强现实应用技术及最佳实践</strong></p>
<p>课程介绍：Vuforia Studio是PTC基于全球最领先的增强现实平台Vuforia开发的AR企业级工具，可通过简单的拖放操作界面，打造以企业为重点的AR体验。企业可利用现有的3D资产创建可扩展的服务应用程序、专注于培训体验、销售和营销虚拟演示，甚至是利用Vuforia Studio实现制造流程序列。介绍企业级AR的应用价值，使用PTC Vuforia Studio如何降低企业开发成本，简化系统可扩展性，利用企业丰富的三维数据和物联网资源，加速创建引人注目的增强现实内容，轻松提供洞察力。</p>
<p><a href="https://edu.csdn.net/course/detail/20764?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-1">https://edu.csdn.net/course/detail/20764?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-1</a></p>
</li>
<li><p><strong>增强现实，超凡体验 Qualcomm Vuforia SDK在线培训</strong></p>
<p>课程介绍：Qualcomm Vuforia 移动视觉平台和开发套件的功能特点作深度讲解，同时也包括相关配套工具，新的云端识别服务和资费方案概况。除此之外培训中还将详细介绍新发布的Vuforia 5新功能</p>
<p><a href="https://edu.csdn.net/course/detail/1467?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-3">https://edu.csdn.net/course/detail/1467?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-3</a></p>
</li>
<li><p><strong>基于Unity 的AR 游戏开发实践</strong></p>
<p>课程介绍：本次课程将以一个具体的坦克游戏为例，介绍AR技术在Unity中的使用。AR技术通过在真实场景中增加虚拟场景，创造了一种全新的交互体验。目前，这项技术已经应用到了游戏，教育等诸多领域， 比如火遍全球的Pokemongo游戏。Unity通过集成Vuforia插件，帮助开发者可以方便的把AR技术应用到自己开发的游戏或者应用中。</p>
<p><a href="https://edu.csdn.net/course/detail/5659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-6">https://edu.csdn.net/course/detail/5659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158719585119724845045607%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fcourse.%2522%257D&amp;request_id=158719585119724845045607&amp;biz_id=3&amp;utm_source=distribute.pc_search_result.none-task-course-2~course~first_rank_v2~rank_v25-6</a></p>
</li>
<li><p><strong>Vuforia AR实战教程</strong></p>
<p><a href="https://www.taikr.com/course/531">https://www.taikr.com/course/531</a></p>
</li>
<li><p><strong>PokemonGo-LBS AR项目实战</strong></p>
<p>课程介绍：基于Unity2017.3.1 本课程将带领大家制作AR游戏中最火的PokemonGO，侧重于快速简单的实现LBS基于地理的GPS定位技术、AR捕捉功能。</p>
<p><a href="https://edu.manew.com/course/516">https://edu.manew.com/course/516</a></p>
</li>
<li><p><strong>AR - 双卡互动 专题讲解</strong></p>
<p><a href="https://edu.manew.com/my/course/175">https://edu.manew.com/my/course/175</a></p>
</li>
<li><p><strong>AR房地产 - 实战讲解</strong></p>
<p><a href="https://edu.manew.com/course/172">https://edu.manew.com/course/172</a></p>
</li>
<li><p><strong>AR涂涂乐 （Vuforia） - 实战讲解</strong></p>
<p>课程介绍：本课程将带领大家使用VuforiaSDK（高通）制作涂色AR，课程重点在于如何获取画面，a获取后的画面如何计算得出正确的位置，b拉伸贴图匹配UV，c通过UI来判断识别图在屏幕中的位置。课程会完整的从平面图形制作，模型制作，C#,Shader编写进行全流程讲解。并将思路与详细制作过程分开，适合不同基础的学员学习。制作中使用的PS、Maya、Unity软件操作细节都会一一讲解并将课程源码，操作方式，快捷键说明附在课程资料中供大家下载。即使零基础也可完整制作最终APP(安卓和IOS)。</p>
<p><a href="https://edu.manew.com/course/162">https://edu.manew.com/course/162</a></p>
</li>
<li><p><strong>增强现实AR基础实例讲解</strong></p>
<p><a href="https://edu.manew.com/course/106">https://edu.manew.com/course/106</a></p>
</li>
</ol>
<hr>
<h3 id="其他SDK"><a href="#其他SDK" class="headerlink" title="其他SDK"></a>其他SDK</h3><ol>
<li><p><strong>Nreal SDK教程 - 10分钟创建Nreal AR应用程序</strong></p>
<p><a href="https://www.bilibili.com/video/BV1j4411z7Us?from=search&amp;seid=7664168149376911358">https://www.bilibili.com/video/BV1j4411z7Us?from=search&amp;seid=7664168149376911358</a></p>
</li>
<li><p><strong>Nreal MR眼镜快速开发教程</strong></p>
<p><a href="https://www.bilibili.com/video/BV1zJ411C7BJ?from=search&amp;seid=7664168149376911358">https://www.bilibili.com/video/BV1zJ411C7BJ?from=search&amp;seid=7664168149376911358</a></p>
</li>
<li><p><strong>百度AR开发系列教程</strong></p>
<p><a href="https://ai.baidu.com/support/video">https://ai.baidu.com/support/video</a></p>
</li>
</ol>
<hr>
<h2 id="开发书籍"><a href="#开发书籍" class="headerlink" title="开发书籍"></a>开发书籍</h2><h3 id="ARKit开发实战"><a href="#ARKit开发实战" class="headerlink" title="ARKit开发实战"></a>ARKit开发实战</h3><p>本书主要介绍ARKit的原生API，分别从世界跟踪、场景理解、几何渲染、人脸跟踪4个方面详细叙述ARKit的功能，以及在Unity中接入ARKit的方法。并且在开始部分添加了使用ARKit所必需的一些基础知识，为了减少接受难度，本书只会叙述用到的知识点。本书的最后一部分介绍了EasyAR和Vuforia这两款AR SDK的功能和使用方法。本书适合对ARKit感兴趣的iOS开发者，以及其他想要了解ARKit原生API的读者阅读。</p>
<h3 id="Unity-AR-增强现实完全自学教程"><a href="#Unity-AR-增强现实完全自学教程" class="headerlink" title="Unity AR 增强现实完全自学教程"></a>Unity AR 增强现实完全自学教程</h3><p>本书是初学者快速学习AR应用的全面教程，从基础理论到经典的AR案例都进行了详尽的讲解。保证即便是零基础的读者也可以通过本书学习并制作出常见的AR应用。本书共分10章，基础部分会介绍Unity的安装配置、基础操作、C#编程基础、坐标系统、UI系统以及AR应用在常用平台（PC、Android、iOS）的发布等。AR案例部分会以涂色类AR、多卡互动AR、恐龙博物馆AR大屏互动为例，在实际制作过程中教大家AR应用的通用设计方式，以及如何处理AR应用在制作过程中常见的问题。为了方便读者学习，本书随书提供课程中案例的所有资源及源文件，可以随时查阅对比。本书适合于想要进入AR行业的兴趣爱好者，传统行业转型AR的管理者、投资人，以及针对AR中特定案例有需求的从业人员。</p>
<h3 id="Unity-2018-Augmented-Reality-Projects"><a href="#Unity-2018-Augmented-Reality-Projects" class="headerlink" title="Unity 2018 Augmented Reality Projects"></a>Unity 2018 Augmented Reality Projects</h3><p>这本书教你如何使用Unity来开发AR应用程序，可以通过HoloLens和Daydream等设备来体验。在逐步实现基于传感器的AR应用程序之前，你将学习如何在你的相机上集成、动画和覆盖3D对象。</p>
<h3 id="沉浸感：不可错过的虚拟现实革命"><a href="#沉浸感：不可错过的虚拟现实革命" class="headerlink" title="沉浸感：不可错过的虚拟现实革命"></a>沉浸感：不可错过的虚拟现实革命</h3><p>本书是作者关于虚拟现实（VR）的长期思考，深入讨论了虚拟现实的本质、特点、应用前景，以及商业价值。通过虚拟现实这一个大趋势，作者也讲解了增强现实、混合现实、IP、模因、注意力经济等重要话题。</p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>ARCore导入Unity，打包HelloAR</title>
    <url>/2020/04/03/ARCore%E5%AF%BC%E5%85%A5Unity%EF%BC%8C%E6%89%93%E5%8C%85HelloAR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录第一次使用ARCore的报错经历</p>
<a id="more"></a>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h4><p>硬件：<a href="https://developers.google.com/ar/discover/supported-devices">支持ARCore的手机</a></p>
<p>软件：</p>
<ul>
<li>Unity2017.4.9f1及以上版本</li>
<li>ARCore SDK for Unity 1.5.0 或更高版本</li>
<li>使用<a href="https://developer.android.com/studio">Android Studio</a> 中的 SDK 管理器安装的 Android SDK <strong>7.0（API 级别 24）或更高版本</strong></li>
</ul>
<h4 id="第一步：下载SDK包"><a href="#第一步：下载SDK包" class="headerlink" title="第一步：下载SDK包"></a>第一步：下载SDK包</h4><p>下载 <a href="https://github.com/google-ar/arcore-unity-sdk/releases">ARCore SDK for Unity <strong>1.5.0 或更高版本</strong></a>，下载的 SDK 文件名为 <code>arcore-unity-sdk-v1.5.0.unitypackage</code>。</p>
<h4 id="第二步：新建项目并导入SDK"><a href="#第二步：新建项目并导入SDK" class="headerlink" title="第二步：新建项目并导入SDK"></a>第二步：新建项目并导入SDK</h4><ol>
<li>打开 Unity 并新建一个 <strong>3D</strong> 项目。</li>
<li>选择 <strong>Assets &gt; Import Package &gt; Custom Package</strong>。</li>
<li>选择您上面下载的 <code>arcore-unity-sdk-v1.5.0.unitypackage</code> Unity 软件包。</li>
<li>在 <strong>Importing Package</strong> 对话框中，确保已选择所有软件包选项，并点击 <strong>Import</strong>。</li>
<li>出现提示时接受任何 <a href="https://docs.unity3d.com/Manual/APIUpdater.html">API 升级</a>。</li>
</ol>
<h4 id="第三步：配置"><a href="#第三步：配置" class="headerlink" title="第三步：配置"></a>第三步：配置</h4><ol>
<li><p>转到 <strong>File &gt; Build Settings</strong> 以打开 <strong><a href="https://docs.unity3d.com/Manual/BuildSettings.html">Build Settings</a></strong> 窗口。</p>
</li>
<li><p>选择 <strong>Android</strong> 并点击 <strong>Switch Platform</strong>。</p>
</li>
<li><p>在 <strong>Build Settings</strong> 窗口中，点击 <strong>Player Settings</strong>。</p>
</li>
<li><p>在Inspector窗口中，配置下列播放器设置：</p>
<p>| 设置                                                         | 值                                                           |<br>| :—————————————————————————————- | :—————————————————————————————- |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Package Name</strong>  | 创建一个 Java 软件包名称格式的唯一应用 ID。 例如，使用 <code>com.example.helloAR</code> |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Minimum API Level</strong> | Android 7.0 或更高版本                                       |<br>| <strong>Player Settings</strong> &gt; <strong>Other Settings</strong> &gt; <strong>Target API Level</strong> | <del>Android 7.0 或更高版本</del> 直接自动最高版本                  |<br>| <strong>Player Settings</strong> &gt; <strong>XR Settings</strong> &gt; <strong>ARCore Supported</strong> | 启用                                                         |</p>
</li>
</ol>
<h4 id="第四步：解决报错"><a href="#第四步：解决报错" class="headerlink" title="第四步：解决报错"></a>第四步：解决报错</h4><p>导入SDK后，控制台报错如下：</p>
<blockquote>
<p>The type or namespace name ‘SpatialTracking’ does not exist in the namespace ‘UnityEngine’</p>
</blockquote>
<p>大概有17条错误</p>
<p><strong>解决方法：</strong></p>
<ol>
<li>打开windows -&gt; package manger</li>
<li>分别搜索 <strong>Multiplayer HLAPI </strong>和 <strong>XR Legacy Input Helper </strong>,安装即可</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://developers.google.com/ar/develop/unity/quickstart-android">https://developers.google.com/ar/develop/unity/quickstart-android</a></p>
<p><a href="https://forum.unity.com/threads/he-type-or-namespace-name-spatialtracking-does-not-exist-in-the-namespace-unityengine-are-you-m.650662/">https://forum.unity.com/threads/he-type-or-namespace-name-spatialtracking-does-not-exist-in-the-namespace-unityengine-are-you-m.650662/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>ARCore</tag>
        <tag>HelloAR</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuforia-在Unity2019.3.4中安装Vuforia</title>
    <url>/2020/04/02/Vuforia-%E5%9C%A8Unity2019-3-4%E4%B8%AD%E5%AE%89%E8%A3%85Vuforia/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装unity</p>
<a id="more"></a>
<h3 id="下载安装Unity2019-3-4-f1"><a href="#下载安装Unity2019-3-4-f1" class="headerlink" title="下载安装Unity2019.3.4.f1"></a>下载安装Unity2019.3.4.f1</h3><h4 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h4><ul>
<li>进入官方网站 <a href="https://unity.com/">https://unity.com/</a></li>
<li>在页面最下方找到 download unity</li>
<li>在页面最下方找到 older versions</li>
<li>下载安装在线版即可</li>
</ul>
<h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><ul>
<li>unityHub上直接下载</li>
</ul>
<p>PS：方式二有离线文档可供选择</p>
<h3 id="安装Vuforia"><a href="#安装Vuforia" class="headerlink" title="安装Vuforia"></a>安装Vuforia</h3><ul>
<li>windows -&gt; package manager -&gt; 搜索 Vuforia 即可</li>
</ul>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>Vuforia</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuforia-ImageTarget阶段Demo小总结</title>
    <url>/2020/04/02/Vuforia-%E9%98%B6%E6%AE%B5Demo%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/junlin49/VuforiaDemo">https://github.com/junlin49/VuforiaDemo</a></p>
<p>VuforiaImageDemo_1_Ashe</p>
<hr>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>实现如下效果：</p>
<ul>
<li>相机对准黑桃K后，出现人物</li>
<li>人物先从纸牌中出现，后跳舞，再奔跑，最后攻击</li>
<li>有特效要求</li>
<li>要有截屏，闪光灯，自动对焦功能</li>
<li>双击人物，人物消失</li>
<li>可以两指放大，缩小</li>
<li>可旋转</li>
</ul>
<hr>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol>
<li><p>自动对焦</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">var</span> vuforia = VuforiaARController.Instance;</span><br><span class="line">       vuforia.RegisterVuforiaStartedCallback(OnVuforiaStarted);<span class="comment">// Vuforia启动完成时的回调函数</span></span><br><span class="line">       vuforia.RegisterOnPauseCallback(OnVuforiaPaused);<span class="comment">//Vuforia暂停时的回调函数</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnVuforiaStarted</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="comment">//程序启动，自动对焦</span></span><br><span class="line">       CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_CONTINUOUSAUTO);<span class="comment">//连续自动对焦</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnVuforiaPaused</span>(<span class="params"><span class="built_in">bool</span> isPaused</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCameraFocus</span>(<span class="params"></span>)<span class="comment">//手动单次对焦</span></span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_TRIGGERAUTO);<span class="comment">//手动单次对焦</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>闪光灯</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFlash</span>(<span class="params"></span>)<span class="comment">//设置闪光灯</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CameraDevice.Instance.SetFlashTorchMode(openFlash);</span><br><span class="line">        openFlash = !openFlash;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>双击消失</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> touchTime;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">bool</span> touchNew = <span class="literal">false</span>;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))<span class="comment">//有触屏</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//从点击位置发射射线</span></span><br><span class="line">           Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">          <span class="comment">//接受返回信息</span></span><br><span class="line">           RaycastHit hitInfor;</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">if</span> (Physics.Raycast(ray,<span class="keyword">out</span> hitInfor))<span class="comment">//如果接受到信息</span></span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">//  if(Input.touchCount == 1 &amp;&amp; Input.GetTouch(0).phase == TouchPhase.Began)//1根手指点击，且刚刚点击</span></span><br><span class="line">              <span class="comment">// &#123;</span></span><br><span class="line">                   <span class="comment">//双击</span></span><br><span class="line">                   <span class="comment">//if(Input.GetTouch(0).tapCount == 2)//双击</span></span><br><span class="line">                   <span class="comment">//&#123;</span></span><br><span class="line">                   <span class="comment">//    Destroy(hitInfor.collider.gameObject);//射线射到的collider所属的游戏物体，销毁</span></span><br><span class="line">                   <span class="comment">//&#125;</span></span><br><span class="line">   </span><br><span class="line">                   <span class="comment">//长按aixi，销毁</span></span><br><span class="line">                   <span class="keyword">if</span> (Input.touchCount == <span class="number">1</span>)<span class="comment">//1根手指按</span></span><br><span class="line">                   &#123;</span><br><span class="line">                       Touch touch = Input.GetTouch(<span class="number">0</span>);<span class="comment">//第一根触摸的手指</span></span><br><span class="line">                       <span class="keyword">if</span> (touch.phase == TouchPhase.Began)<span class="comment">//刚按，A finger touched the screen.</span></span><br><span class="line">                   &#123;</span><br><span class="line">                           touchNew = <span class="literal">true</span>;</span><br><span class="line">                           touchTime = Time.time;<span class="comment">//记录开始按的时候的时间</span></span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (touch.phase == TouchPhase.Stationary)<span class="comment">//按住静止不动；A finger is touching the screen but hasn&#x27;t moved.</span></span><br><span class="line">                   &#123;</span><br><span class="line">                         <span class="keyword">if</span> (touchNew == <span class="literal">true</span> &amp;&amp; Time.time-touchTime&gt;<span class="number">1</span>)<span class="comment">//长按1s后</span></span><br><span class="line">                           &#123;</span><br><span class="line">                               touchNew = <span class="literal">false</span>;</span><br><span class="line">                               Destroy(hitInfor.collider.gameObject);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                       &#123;</span><br><span class="line">                           touchNew = <span class="literal">false</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">              <span class="comment">// &#125;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>旋转放缩</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))<span class="comment">//触屏了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Input.touchCount == <span class="number">1</span>)<span class="comment">//一个手指头</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Input.GetTouch(<span class="number">0</span>).phase == TouchPhase.Moved)<span class="comment">//状态移动</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.transform.Rotate(<span class="number">0</span>, -xRotationSpeed * Time.deltaTime * Input.GetAxis (<span class="string">&quot;Mouse X&quot;</span>),<span class="number">0</span>,Space.World);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Input.touchCount == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Input.GetTouch(<span class="number">0</span>).phase == TouchPhase.Moved || Input.GetTouch(<span class="number">1</span>).phase == TouchPhase.Moved)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector2 temPositon1 = Input.GetTouch(<span class="number">0</span>).position;</span><br><span class="line">                    Vector2 temPositon2 = Input.GetTouch(<span class="number">1</span>).position;</span><br><span class="line">                    <span class="keyword">if</span> (IsLarge(oldPositon1,oldPositon2,temPositon1,temPositon2))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//arCamera.fieldOfView -= arCamera.fieldOfView*0.01*</span></span><br><span class="line">                        <span class="keyword">this</span>.transform.localScale = <span class="keyword">new</span> Vector3(</span><br><span class="line">                            <span class="keyword">this</span>.transform.localScale.x * scaleOut, <span class="keyword">this</span>.transform.localScale.y * scaleOut, <span class="keyword">this</span>.transform.localScale.z * scaleOut);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.transform.localScale = <span class="keyword">new</span> Vector3(</span><br><span class="line">                           <span class="keyword">this</span>.transform.localScale.x * scaleIn, <span class="keyword">this</span>.transform.localScale.y * scaleIn, <span class="keyword">this</span>.transform.localScale.z * scaleIn);</span><br><span class="line">                    &#125;</span><br><span class="line">                    oldPositon1 = temPositon1;</span><br><span class="line">                    oldPositon2 = temPositon2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsLarge</span>(<span class="params">Vector2 oldPoint1, Vector2 oldPoint2 , Vector2 newPoint1 , Vector2 newPoint2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Vector2.Distance(oldPoint1, oldPoint2) &lt; Vector2.Distance(newPoint1,newPoint2))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></h2><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><a href="https://imgchr.com/i/8OLECj"><img src="https://s1.ax1x.com/2020/03/25/8OLECj.jpg" alt="8OLECj.jpg"></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Vuforia</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-场景切换</title>
    <url>/2020/04/02/Unity-%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录如何在Unity中实现场景切换</p>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void Click()</span><br><span class="line">&#123;</span><br><span class="line">      Invoke(&quot;ChangeScene&quot;, 1);  # 1s后切换场景，延时作用</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void ChangeScene()</span><br><span class="line">&#123;</span><br><span class="line">      SceneManager.LoadScene(&quot;场景名字&quot;);  &#x2F;&#x2F; 登陆成功则切换到游戏界面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载当前场景"><a href="#加载当前场景" class="headerlink" title="加载当前场景"></a>加载当前场景</h3><p>比如点击重新开始按钮后，重新开始游戏。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SceneManager.LoadScene(SceneManager.GetActiveScene().name);</span><br></pre></td></tr></table></figure>
<p>注意该语句执行的时候，仍会执行<code>update</code>函数。因此在<code>update</code>中置位标志位要多加留意。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://www.jianshu.com/p/fb688b80986b?tdsourcetag=s_pcqq_aiomsg">https://www.jianshu.com/p/fb688b80986b?tdsourcetag=s_pcqq_aiomsg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Vuforia更新错误:Failed to resolve packages</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E6%9B%B4%E6%96%B0%E9%94%99%E8%AF%AF-Failed-to-resolve-packages/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>新冠期间总是不开学，最近Vuforia更新了9.0版本，所以尝试下</p>
<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>错误提示：</p>
<p>Failed to resolve packages: Cannot read property ‘scopedRegistries’ of undefined. No packages loaded.</p>
<p>如果使用 Unity 2019及以上版本，可以发现 AR camera 的输入密钥页面，已经提示有新版本可用，如下：</p>
<p><a href="https://imgchr.com/i/G3Lmzn"><img src="https://s1.ax1x.com/2020/04/01/G3Lmzn.png" alt="G3Lmzn.png"></a></p>
<p><a href="https://imgchr.com/i/G3LZGj"><img src="https://s1.ax1x.com/2020/04/01/G3LZGj.png" alt="G3LZGj.png"></a></p>
<p>点击后，直接跳转到此界面：</p>
<p> <a href="https://library.vuforia.com/content/vuforia-library/en/articles/Solution/vuforia-engine-package-hosting-for-unity.html">https://library.vuforia.com/content/vuforia-library/en/articles/Solution/vuforia-engine-package-hosting-for-unity.html</a></p>
<p>第一种方式最简单，直接下载 SDK 升级即可，但是博主下载导入到 Unity 后，发现不仅没有升级，还出现了很多错误，而且在package manager 界面上，完全没有内容，似乎有文件找不到</p>
<p><a href="https://imgchr.com/i/G3LViQ"><img src="https://s1.ax1x.com/2020/04/01/G3LViQ.png" alt="G3LViQ.png"></a></p>
<p>错误提示：</p>
<p>Failed to resolve packages: Cannot read property ‘scopedRegistries’ of undefined. No packages loaded.</p>
<p>Cannot perform upm operation: Cannot read property ‘scopedRegistries’ of undefined [NotFound]<br>UnityEditor.EditorApplication:Internal_CallUpdateFunctions()</p>
<p>Error fetching package list.<br>UnityEditor.EditorApplication:Internal_CallUpdateFunctions()</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>按照官方链接的最后一个方法，下载 Vuforia Engine软件包，解压后将原名为<em>package</em>的文件夹，改名为<em>com.ptc.vuforia.engine</em>，放进项目对应的 package 目录，即可发现 Unity 界面已经开始导入。</p>
<p><a href="https://imgchr.com/i/G3L5TS"><img src="https://s1.ax1x.com/2020/04/01/G3L5TS.png" alt="G3L5TS.png"></a></p>
<h2 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h2><p><del>发现不能直接拖拽 .unitypackage 文件进行导入，只能通过右键菜单里的导入进行操作</del></p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Vuforia错误：Failed-load-data-set-xxx</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E9%94%99%E8%AF%AF%EF%BC%9AFailed-load-data-set-xxx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vuforia运行问题</p>
<a id="more"></a>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>按照常规套路，布置好AR Camera , 2个model target 之后，运行会报错。提示 failed-load-data-set-xxx </p>
<!-- more -->
<p>错误提示：</p>
<blockquote>
<p>Failed to load data set all.<br>UnityEngine.Debug:LogError(Object)<br>Vuforia.DatabaseLoadARController:LoadDatasets()<br>Vuforia.VuforiaARController:StartAfterInitializationCompleted()<br>Vuforia.VuforiaARController:Start()<br>System.Delegate:DynamicInvoke(Object[])<br>Vuforia.DelegateHelper:InvokeDelegate(Delegate, Object[])<br>Vuforia.DelegateHelper:InvokeWithExceptionHandling(Action)<br>Vuforia.VuforiaBehaviour:Start()</p>
</blockquote>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>推荐 Vuforia 官方论坛搜索，此问题已经有人反映过，链接：<a href="https://developer.vuforia.com/forum/model-targets/failed-load-data-set-xxx">https://developer.vuforia.com/forum/model-targets/failed-load-data-set-xxx</a> ；</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>尝试换Key，但是没啥用；</p>
<p>亲测解决方法：Unity 版本2019及以上，Vuforia 9.0 即可，就没有报错了</p>
<p>Vuforia 更新可以看我的另一篇文章：<a href="https://junlu.club/2020/04/02/问题-Vuforia更新错误-Failed-to-resolve-packages/">https://junlu.club/2020/04/02/%E9%97%AE%E9%A2%98-Vuforia%E6%9B%B4%E6%96%B0%E9%94%99%E8%AF%AF-Failed-to-resolve-packages/</a></p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-Unity移动不连续</title>
    <url>/2020/04/02/%E9%97%AE%E9%A2%98-Unity%E7%A7%BB%E5%8A%A8%E4%B8%8D%E8%BF%9E%E7%BB%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>初学Unity的问题</p>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>刚刚装了Unity2019.3.4.f1 ，在scene页面移动cube时，发现移动不连续，即按照网格移动，类似于建模软件中的情况</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>so easy</p>
<p><a href="https://imgchr.com/i/GKKNGt"><img src="https://s1.ax1x.com/2020/03/31/GKKNGt.png" alt="GKKNGt.png"></a></p>
<p>点击一下就行了</p>
]]></content>
      <categories>
        <category>错误合集</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>下载YouTuBe字幕</title>
    <url>/2020/04/02/%E4%B8%8B%E8%BD%BDYouTuBe%E5%AD%97%E5%B9%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>字幕下载方法</p>
<a id="more"></a>
<h3 id="1-Keepvid"><a href="#1-Keepvid" class="headerlink" title="1. Keepvid"></a>1. Keepvid</h3><p><a href="https://keepvid.com/">https://keepvid.com/</a></p>
<h3 id="2-Dbxdb"><a href="#2-Dbxdb" class="headerlink" title="2.Dbxdb"></a>2.Dbxdb</h3><p><a href="http://mo.dbxdb.com/setting.html">http://mo.dbxdb.com/setting.html</a></p>
<h3 id="3-Zhuwei"><a href="#3-Zhuwei" class="headerlink" title="3. Zhuwei"></a>3. Zhuwei</h3><p><a href="https://zhuwei.me/y2b/">https://zhuwei.me/y2b/</a></p>
<h3 id="4-FindYoutube"><a href="#4-FindYoutube" class="headerlink" title="4. FindYoutube"></a>4. FindYoutube</h3><p><a href="https://www.findyoutube.net/">https://www.findyoutube.net/</a></p>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>YouTuBe</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv-VS2019环境配置</title>
    <url>/2020/04/02/Opencv-VS2019%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录Win10操作系统下，Opencv+VS2019的环境配置，具体Opencv版本为4.1.0</p>
<a id="more"></a>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>Opencv 官网下载链接：<a href="https://opencv.org/releases/">传送门</a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol>
<li><p>下载好的文件解压到合适的目录下，本文以<code>D:\OpenCV</code>目录放置解压文件，如下图</p>
<p><a href="https://imgchr.com/i/8sQycT"><img src="https://s1.ax1x.com/2020/03/19/8sQycT.md.png" alt="8sQycT.md.png"></a></p>
</li>
<li><p>打开资源管理器窗口，在<code>此电脑</code>上右击，点击<code>属性</code>，弹出<code>控制面板中的系统窗口</code>，点击<code>高级系统设置</code>，弹出<code>系统属性窗口</code>，点击<code>环境变量</code></p>
</li>
<li><p>在窗口上方的<code>用户变量</code>中，选中Path变量，点击下方编辑，在编辑系统变量窗口中，新增以下变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\x64\vc15\bin</span><br></pre></td></tr></table></figure></li>
<li>连续点击3个确定，关闭系统窗口</li>
</ol>
<h3 id="配置VS"><a href="#配置VS" class="headerlink" title="配置VS"></a>配置VS</h3><ol>
<li><p>打开VS2019，选择创建新项目</p>
<p><a href="https://imgchr.com/i/8slUxK"><img src="https://s1.ax1x.com/2020/03/19/8slUxK.md.png" alt="8slUxK.md.png"></a></p>
</li>
<li><p>在弹出的创建新项目面板中，选择C++语言的空项目，点击右下方的下一步</p>
<p><a href="https://imgchr.com/i/8sQs3V"><img src="https://s1.ax1x.com/2020/03/19/8sQs3V.md.png" alt="8sQs3V.md.png"></a></p>
</li>
<li><p>结合自身情况，选择储存位置，点击创建</p>
</li>
<li><p>在新打开的VS界面中，找到右侧<code>解决方案资源管理器</code>，右键单击【源文件】-&gt;【添加】-&gt;【新建项】，新建一个命名为“main”的<code>C++文件</code></p>
</li>
<li><p>点开【视图】-&gt;【其他窗口】-&gt;【属性管理器】，打开属性管理器面板</p>
</li>
<li><p>调试模式改为<code>Debug x64</code>模式。</p>
</li>
<li><p>找到Opencv的安装目录<code>D:\OpenCV\opencv\build\x64\vc15\bin</code>，将如下图所示的三个文件（dll文件），复制粘贴到系统路径<code>C:\Windows\System32</code>文件夹内。</p>
<p><a href="https://imgchr.com/i/8sQ0Nn"><img src="https://s1.ax1x.com/2020/03/19/8sQ0Nn.md.png" alt="8sQ0Nn.md.png"></a></p>
</li>
<li><p>接下来，开始为软件配置目录和附加项。右键点击【属性管理器】中的【Debug | x64】选项，选择【添加新的项目属性表】</p>
</li>
<li><p>将新建的项目属性表重命名为<code>Opencv410Debugx64</code>，之后双击打开，选中【VC++ 目录】-&gt;【包含目录】，新增以下路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\include</span><br><span class="line">D:\OpenCV\opencv\build\include\opencv2</span><br></pre></td></tr></table></figure></li>
<li><p>在【库目录】中添加以下路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\OpenCV\opencv\build\x64\vc15\lib</span><br></pre></td></tr></table></figure></li>
<li><p>打开【链接器】-&gt;【输入】-&gt;【附加依赖项】，添加以下名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv_world410d.lib</span><br></pre></td></tr></table></figure>
<p>PS：opencv_world410d.lib 是指 Debug 编辑模式，opencv_world410.lib 是指Relsase 编辑模式。</p>
</li>
</ol>
<h3 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h3><p>在main.cpp中粘贴以下程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;opencv.hpp&quot; &#x2F;&#x2F;opencv 的头文件</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv; &#x2F;&#x2F;opencv 的命名空间</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;Hello Open CV!&quot;);</span><br><span class="line">	Mat srcImage &#x3D; imread(&quot;1.jpg&quot;);	&#x2F;&#x2F;图片需要在工程目录下</span><br><span class="line">	Mat temImage, dstImage1;</span><br><span class="line">	temImage &#x3D; srcImage;</span><br><span class="line">	&#x2F;&#x2F;尺寸调整</span><br><span class="line">	resize(temImage, dstImage1, Size(0, 0), 0.25, 0.25, INTER_LINEAR);     &#x2F;&#x2F;长宽缩小1&#x2F;4</span><br><span class="line">	imshow(&quot;缩小&quot;, dstImage1);</span><br><span class="line">	waitKey();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后续工作"><a href="#后续工作" class="headerlink" title="后续工作"></a>后续工作</h3><p>调试时如果在下方出现 <code>xxx符号在加载</code>，并且很久都没有出现图片，需要做以下工作：</p>
<p>进入【工具】-&gt;【选项】-&gt;【调试】-&gt;【符号】，看右边有个<code>Microsoft符号服务器</code>，将前面的勾去掉</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://blog.csdn.net/qingzai_/article/details/73838709">https://blog.csdn.net/qingzai_/article/details/73838709</a></p>
<p><a href="https://blog.csdn.net/qq_24912401/article/details/90475290?utm_source=app">https://blog.csdn.net/qq_24912401/article/details/90475290?utm_source=app</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Windows环境配置</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>VS2019</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题优化记录</title>
    <url>/2020/04/02/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经典主题！</p>
<a id="more"></a>
<h3 id="名词说明"><a href="#名词说明" class="headerlink" title="名词说明"></a>名词说明</h3><ul>
<li>站点配置文件：指文件所在路径为：根目录\_config.yml </li>
<li>主题配置文件：指文件所在路径为：根目录\themes\next\_config.yml </li>
</ul>
<h3 id="配置1：语言与基本信息更改"><a href="#配置1：语言与基本信息更改" class="headerlink" title="配置1：语言与基本信息更改"></a>配置1：语言与基本信息更改</h3><p>改变博客的语言为中文，博客标题，博客作者</p>
<ul>
<li>打开站点配置文件</li>
<li>找到代码并修改如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: JunLuBlog #要修改的内容区域</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: JunLu #要修改的内容区域</span><br><span class="line">language: zh-Hans #要修改的内容区域</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure>
<h3 id="配置2：主题样式修改"><a href="#配置2：主题样式修改" class="headerlink" title="配置2：主题样式修改"></a>配置2：主题样式修改</h3><p>Next主题提供了多种样式以供选择</p>
<ul>
<li>打开主题配置文件</li>
<li>修改代码如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces 若选择此样式，将其前面的#去掉即可</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<h3 id="配置3：菜单设置"><a href="#配置3：菜单设置" class="headerlink" title="配置3：菜单设置"></a>配置3：菜单设置</h3><p>在博客顶端需要有标签，分类，关于等菜单栏</p>
<ul>
<li>在根目录开启 <code>Git Bash Here</code></li>
<li>命令：<code>hexo new page &quot;tags&quot;</code></li>
<li>命令：<code>hexo new page &quot;categories&quot;</code></li>
<li>命令：<code>hexo new page &quot;about&quot;</code></li>
<li>进入路径：根目录\source，可以看到新建了分类，标签，关于的文件夹</li>
<li>打开主题配置文件，修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;|| home</span><br><span class="line">  about: &#x2F;about&#x2F;|| user</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br><span class="line">  archives: &#x2F;archives&#x2F;|| archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br></pre></td></tr></table></figure>
<p>PS：一丁点空格也不许错</p>
<h3 id="配置3-：侧边栏"><a href="#配置3-：侧边栏" class="headerlink" title="配置3 ：侧边栏"></a>配置3 ：侧边栏</h3><p>Next主题提供了侧边栏的左右放置方向</p>
<ul>
<li>打开主题配置文件</li>
<li>修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  #position: left</span><br><span class="line">  position: right</span><br></pre></td></tr></table></figure>
<h3 id="配置4：-开启动态背景"><a href="#配置4：-开启动态背景" class="headerlink" title="配置4： 开启动态背景"></a>配置4： 开启动态背景</h3><ul>
<li>打开主题配置文件</li>
<li>修改代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next-支持数学公式输入配置</title>
    <url>/2020/04/02/Hexo-Next-%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>忘记是哪个版本适用来着</p>
<a id="more"></a>
<h3 id="1-使用Kramed-代替-Marked"><a href="#1-使用Kramed-代替-Marked" class="headerlink" title="1. 使用Kramed 代替 Marked"></a>1. 使用Kramed 代替 Marked</h3><p>渲染引擎kramed支持mathjax</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>打开:博客根目录<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code><br>将下面这几句进行更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">  &#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">  return text.replace(&#x2F;&#96;\$(.*?)\$&#96;&#x2F;g, &#39;$$$$$1$$$$&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">  &#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-使用hexo-renderer-mathjax-代替-hexo-math"><a href="#2-使用hexo-renderer-mathjax-代替-hexo-math" class="headerlink" title="2. 使用hexo-renderer-mathjax 代替 hexo-math"></a>2. 使用hexo-renderer-mathjax 代替 hexo-math</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure>
<h3 id="3-更新-Mathjax-的-CDN-链接"><a href="#3-更新-Mathjax-的-CDN-链接" class="headerlink" title="3. 更新 Mathjax 的 CDN 链接"></a>3. 更新 Mathjax 的 CDN 链接</h3><p>打开:<code>博客根目录/node_modules/hexo-renderer-mathjax/mathjax.html</code><br>将最下面&lt;script src=后的url改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-MML-AM_CHTML</span><br></pre></td></tr></table></figure>
<h3 id="4-更改默认转义规则"><a href="#4-更改默认转义规则" class="headerlink" title="4. 更改默认转义规则"></a>4. 更改默认转义规则</h3><p>打开:<code>博客根目录/node_modules/kramed/lib/rules/inline.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;escape: &#x2F;^\\([\\&#96;*&#123;&#125;\[\]()#$+\-.!_&gt;])&#x2F;,      第11行，将其修改为</span><br><span class="line">escape: &#x2F;^\\([&#96;*\[\]()#$+\-.!_&gt;])&#x2F;,</span><br><span class="line">&#x2F;&#x2F;em: &#x2F;^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,    第20行，将其修改为</span><br><span class="line">em: &#x2F;^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure>
<h3 id="5-开启mathjax"><a href="#5-开启mathjax" class="headerlink" title="5. 开启mathjax"></a>5. 开启mathjax</h3><p>在主题的配置文件中,我用的是next主题,那么在其_config.yml中找到mathjax并设置为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: &#x2F;&#x2F;cdn.bootcss.com&#x2F;mathjax&#x2F;2.7.1&#x2F;latest.js?config&#x3D;TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>
<p>之后再写文章时,加上mathjax: true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date: 2017&#x2F;8&#x2F;3 18:20:00</span><br><span class="line">tags: hexo</span><br><span class="line">mathjax: true</span><br><span class="line">title: hexo博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://blog.csdn.net/littlehaes/article/details/84370393">https://blog.csdn.net/littlehaes/article/details/84370393</a></p>
<p><a href="https://andyvj.coding.me/2019/02/26/190226-02/">https://andyvj.coding.me/2019/02/26/190226-02/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo静态博客配置</title>
    <url>/2020/04/02/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>博客搭建第一步！</p>
<a id="more"></a>
<h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><ol>
<li><p>github 账号。</p>
</li>
<li><p><del>购买一个域名的钱</del></p>
<p><a href="https://www.freenom.com/zh/index.html?lang=zh">免费域名传送门</a></p>
</li>
</ol>
<hr>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="github-创建仓库"><a href="#github-创建仓库" class="headerlink" title="github 创建仓库"></a>github 创建仓库</h4><ul>
<li><p>登录 github 账号，<a href="https://github.com/">传送门</a></p>
</li>
<li><p>Start Project</p>
<p><a href="https://imgchr.com/i/G0YxHI"><img src="https://s1.ax1x.com/2020/04/04/G0YxHI.png" alt="G0YxHI.png"></a></p>
</li>
<li><p>在Repository name中输入新建仓库的名称，yourname.github.io，点击Create Repository</p>
<p><a href="https://imgchr.com/i/G0YvDA"><img src="https://s1.ax1x.com/2020/04/04/G0YvDA.png" alt="G0YvDA.png"></a></p>
</li>
</ul>
<hr>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><ul>
<li>下载安装地址：<ul>
<li>官网：<a href="https://gitforwindows.org/">传送门</a></li>
<li>蓝奏云：<a href="https://www.lanzous.com/iazxt2j">传送门</a></li>
</ul>
</li>
<li>一路默认安装即可</li>
</ul>
<hr>
<h4 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h4><blockquote>
<p>为了把本地的仓库中的内容传输到GitHub上，需要配置ssh key，无论是上传自己的博客还是上传其他的仓库都需要连接Github，ssh key是一个token，作用是身份验证。</p>
</blockquote>
<ul>
<li><p><strong>打开Git Bash，输入命令：</strong>（email是注册Github时使用的邮箱）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>输入上面的命令后<strong>按Enter键</strong>，Git Bash会提示: </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase &lt;empty for no passphrase&gt;:_</span><br></pre></td></tr></table></figure></li>
<li><p><strong>直接按 Enter</strong>，Git Bash会在默认路径C:\users\用户名.ssh下生成几个文件。然后Git Bash又给出提示：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase &lt;empty for no passphrase&gt;:_</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是在提示我们输入密码，直接回车表示不设置密码</p>
</blockquote>
</li>
<li><p><strong>直接回车</strong>，然后Git Bash要求我们重复密码，也<strong>直接回车</strong>，然后就会提示ssh key已经生成。</p>
</li>
<li><p><strong>进入到默认的地址</strong>中查看ssh key文件</p>
<p><a href="https://imgchr.com/i/G0YOjH"><img src="https://s1.ax1x.com/2020/04/04/G0YOjH.png" alt="G0YOjH.png"></a></p>
</li>
<li><p>使用记事本或者其他软件<strong>打开 id_rsa.pub 文件，复制全部内容</strong></p>
</li>
<li><p>浏览器<strong>进入 github ，进入博客仓库</strong></p>
<p><a href="https://imgchr.com/i/G0YLge"><img src="https://s1.ax1x.com/2020/04/04/G0YLge.png" alt="G0YLge.png"></a></p>
</li>
</ul>
<p>​        <a href="https://imgchr.com/i/G0tpUP"><img src="https://s1.ax1x.com/2020/04/04/G0tpUP.png" alt="G0tpUP.png"></a></p>
<ul>
<li><p><strong>点击设置</strong></p>
<p><a href="https://imgchr.com/i/G0t94f"><img src="https://s1.ax1x.com/2020/04/04/G0t94f.png" alt="G0t94f.png"></a></p>
</li>
<li><p>在页面左侧<strong>找到Deploy keys并点击</strong></p>
<p><a href="https://imgchr.com/i/G0tPC8"><img src="https://s1.ax1x.com/2020/04/04/G0tPC8.png" alt="G0tPC8.png"></a></p>
</li>
<li><p>点击右侧的<strong>Add deploy key</strong>按钮，title填什么都可以，Key中<strong>粘贴</strong>我们刚刚在ssh key文件中复制的key；点击Add Key，<strong>保存ssh key</strong></p>
<p><a href="https://imgchr.com/i/G0tFgg"><img src="https://s1.ax1x.com/2020/04/04/G0tFgg.png" alt="G0tFgg.png"></a></p>
<p>​        <a href="https://imgchr.com/i/G0tSEt"><img src="https://s1.ax1x.com/2020/04/04/G0tSEt.png" alt="G0tSEt.png"></a></p>
</li>
<li><p>在本地验证ssh key设置是否成功，<strong>打开Git Bash，输入命令</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><strong>回车</strong>后，如果看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;You’ve successfully authenticated, but GitHub does not provide shell access&#96;</span><br></pre></td></tr></table></figure>
<p>表示当前已经成功地连接上了自己的GitHub账户。</p>
</li>
<li><p>接下来，设置一下自己的用户名和邮箱，<strong>输入以下命令：</strong>（name 和 email 每个人不同）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;my name&quot;</span><br><span class="line">git config --global user.email &quot;my email&quot;</span><br></pre></td></tr></table></figure></li>
<li>到此为止，我们已经成功地将个人电脑和Github账号连接。</li>
</ul>
<hr>
<h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><ul>
<li><p>下载</p>
<ul>
<li>官网： <a href="https://nodejs.org/en/">传送门</a></li>
<li>城通（win）：<a href="https://474b.com/file/14976410-435186222">传送门</a></li>
</ul>
</li>
<li><p>按照需要选择不同的版本，下载到本地之后，<strong>直接双击安装，一路默认</strong></p>
</li>
<li><p>检验是否安装成功：</p>
<p>打开windows的控制台，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li>
<li>电脑若显示当前安装的node.js的版本，则安装成功</li>
</ul>
<hr>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul>
<li><p>在电脑的磁盘里<strong>新建一个空文件夹</strong>，如E:\HexoB，用于存放本地仓库</p>
</li>
<li><p>在<strong>windows控制台中输入命令</strong>，跳转至D:\GIT\hexotext；代码如下：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd E:\HexoB</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Hexo，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></li>
<li><p>检查Hexo是否安装成功，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><ul>
<li><p>初始化 E:\HexoB 这个文件夹，打开Git Bash进入此目录，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li>
<li><p>安装Hexo所需要的组件，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li><p>产生webapp文件，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>开启服务器，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li><p>此时控制台提示：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO Start processing</span><br><span class="line">INFO Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>浏览器输入</strong>地址：localhost:4000 预览</p>
</li>
<li><p><strong>新建markdown文件</strong>，保存为.md文件到本地，并移至E:\HexoB\source\_posts中</p>
</li>
<li><p>和上次一样，打开的Git Bash，<strong>执行以下命令</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li>打开浏览器，访问：localhost:4000，此时可以看到刚刚发布的内容</li>
</ul>
<hr>
<h4 id="连接Hexo和Github-Pages及部署博客"><a href="#连接Hexo和Github-Pages及部署博客" class="headerlink" title="连接Hexo和Github Pages及部署博客"></a>连接Hexo和Github Pages及部署博客</h4><ul>
<li>打开 E:\HexoB 中的<strong>_config.yml文件</strong>，找到deploy字段，改为如下内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@github.com:someurl&#x2F;someurl.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p> git@github.com:someurl/someurl.github.io.git 是博客仓库的地址，获取方式是登录GitHub，找到自己的博客的仓库</p>
<p><a href="https://imgchr.com/i/GBEbB4"><img src="https://s1.ax1x.com/2020/04/05/GBEbB4.png" alt="GBEbB4.png"></a></p>
</blockquote>
<ul>
<li><p>现在将Hexo部署到GitHub的仓库里</p>
</li>
<li><p>在仓库中点击<strong>Settings，往下拉，找到GitHub Pages</strong></p>
<p><a href="https://imgchr.com/i/GBETjU"><img src="https://s1.ax1x.com/2020/04/05/GBETjU.png" alt="GBETjU.png"></a></p>
</li>
<li><p>Source选择 <strong>master branch</strong></p>
</li>
<li><p>在 E:\HexoB 中打开Git Bash，<strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p><strong>输入命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li>
<li>部署完成之后，在浏览器中输入地址 www.yourname.github.io，这个地址就是在repository的Setting页面中看到的那个，就可以访问自己的博客啦，以后写了新的博客，保存成md文件放到source_post文件夹中，执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<ul>
<li>就可以发布到GitHub上啦</li>
</ul>
<hr>
<h3 id="购买域名并解析"><a href="#购买域名并解析" class="headerlink" title="购买域名并解析"></a>购买域名并解析</h3><ul>
<li>已腾讯云为例，<a href="https://cloud.tencent.com/">传送门</a></li>
</ul>
<p><a href="https://imgchr.com/i/834tYj"><img src="https://s1.ax1x.com/2020/03/15/834tYj.png" alt="834tYj.png"></a></p>
<ul>
<li>点击 产品-&gt;域名注册</li>
</ul>
<p><a href="https://imgchr.com/i/835CNQ"><img src="https://s1.ax1x.com/2020/03/15/835CNQ.png" alt="835CNQ.png"></a></p>
<ul>
<li>选择一个域名进行购买</li>
<li>购买后进入 控制台</li>
<li>进入域名管理界面</li>
<li>首先，实名认证</li>
<li>成功后，解析</li>
</ul>
<p><a href="https://imgchr.com/i/83ozB6"><img src="https://s1.ax1x.com/2020/03/15/83ozB6.png" alt="83ozB6.png"></a></p>
<ul>
<li>记录值的获取方式：<ul>
<li>打开windows控制台，ping www.yourname.github.io</li>
<li>将IP地址填写进入记录值</li>
</ul>
</li>
<li>在本地的D:\GIT\hexotext\source中新建一个名为CNAME的文件，内容则是刚刚申请的域名，然后重新发布</li>
<li>到此成功</li>
</ul>
<h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><ul>
<li><p>对于nmp工具</p>
<ul>
<li>更换淘宝源<code>npm install --registry=https://registry.npm.taobao.org</code></li>
<li>安装cnmp <code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/zyupupup/article/details/85098366">https://blog.csdn.net/zyupupup/article/details/85098366</a></p>
</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://blog.csdn.net/qq_34229391/article/details/82251852">https://blog.csdn.net/qq_34229391/article/details/82251852</a></li>
<li><a href="https://blog.csdn.net/zyupupup/article/details/85098366">https://blog.csdn.net/zyupupup/article/details/85098366</a></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>chorme插件记录</title>
    <url>/2020/04/02/chorme%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>小小插件小记录</p>
<a id="more"></a>
<h2 id="chorme-插件"><a href="#chorme-插件" class="headerlink" title="chorme 插件"></a>chorme 插件</h2><hr>
<p>chorme 浏览器成功的地方在于，其强大的扩展能力。在chorme 网上商店强大的加持下，chorme浏览器成为市面上最好用的浏览器，通过安装不同的插件，达到其他浏览器无法达到的效果</p>
<hr>
<h3 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h3><hr>
<ol>
<li><p>GHelpera</p>
<p>对于大陆用户，此插件的目的在于链接上chorme官方的网上商店，以获取更多的其他插件。</p>
<p>除此之外，GHelper 可以用于科研，访问谷歌学术等</p>
</li>
<li><p>Adblock</p>
<p>作用：拦截广告</p>
</li>
<li><p>stylus</p>
<p>作用：美化界面</p>
</li>
<li><p>IDM</p>
<p>作用：强大的下载功能，装机必备</p>
</li>
<li><p>SimpleExtManger</p>
<p>作用：管理所有插件，不需要的可以随时关闭，加快浏览器速度</p>
</li>
<li><p>Toby</p>
<p>作用：保存标签页，工作必备</p>
</li>
<li><p>chorme better history</p>
<p>作用：历史记录，更好的历史记录</p>
</li>
<li><p>whatFont</p>
<p>作用：查询网页字体</p>
</li>
<li><p>Picture in Picture for every website</p>
<p>作用：对于视频网站，达到画中画的效果播放</p>
</li>
<li><p>Global Rank</p>
<p>作用：发现相似网站</p>
</li>
<li><p>微信同步助手</p>
<p>作用：将微信文章同步到简书，知乎等平台</p>
</li>
<li><p>open write助手</p>
<p>作用：分发文章，在各个平台</p>
</li>
</ol>
]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>chorme插件</tag>
      </tags>
  </entry>
</search>
